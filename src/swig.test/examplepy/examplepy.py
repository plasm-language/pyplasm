# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_examplepy', [dirname(__file__)])
        except ImportError:
            import _examplepy
            return _examplepy
        if fp is not None:
            try:
                _mod = imp.load_module('_examplepy', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _examplepy = swig_import_helper()
    del swig_import_helper
else:
    import _examplepy
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _examplepy.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _examplepy.SwigPyIterator_value(self)
    def incr(self, n = 1): return _examplepy.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _examplepy.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _examplepy.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _examplepy.SwigPyIterator_equal(self, *args)
    def copy(self): return _examplepy.SwigPyIterator_copy(self)
    def next(self): return _examplepy.SwigPyIterator_next(self)
    def __next__(self): return _examplepy.SwigPyIterator___next__(self)
    def previous(self): return _examplepy.SwigPyIterator_previous(self)
    def advance(self, *args): return _examplepy.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _examplepy.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _examplepy.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _examplepy.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _examplepy.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _examplepy.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _examplepy.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _examplepy.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _examplepy.SHARED_PTR_DISOWN
class StdVectorBool(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdVectorBool, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdVectorBool, name)
    __repr__ = _swig_repr
    def iterator(self): return _examplepy.StdVectorBool_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _examplepy.StdVectorBool___nonzero__(self)
    def __bool__(self): return _examplepy.StdVectorBool___bool__(self)
    def __len__(self): return _examplepy.StdVectorBool___len__(self)
    def pop(self): return _examplepy.StdVectorBool_pop(self)
    def __getslice__(self, *args): return _examplepy.StdVectorBool___getslice__(self, *args)
    def __setslice__(self, *args): return _examplepy.StdVectorBool___setslice__(self, *args)
    def __delslice__(self, *args): return _examplepy.StdVectorBool___delslice__(self, *args)
    def __delitem__(self, *args): return _examplepy.StdVectorBool___delitem__(self, *args)
    def __getitem__(self, *args): return _examplepy.StdVectorBool___getitem__(self, *args)
    def __setitem__(self, *args): return _examplepy.StdVectorBool___setitem__(self, *args)
    def append(self, *args): return _examplepy.StdVectorBool_append(self, *args)
    def empty(self): return _examplepy.StdVectorBool_empty(self)
    def size(self): return _examplepy.StdVectorBool_size(self)
    def clear(self): return _examplepy.StdVectorBool_clear(self)
    def swap(self, *args): return _examplepy.StdVectorBool_swap(self, *args)
    def get_allocator(self): return _examplepy.StdVectorBool_get_allocator(self)
    def begin(self): return _examplepy.StdVectorBool_begin(self)
    def end(self): return _examplepy.StdVectorBool_end(self)
    def rbegin(self): return _examplepy.StdVectorBool_rbegin(self)
    def rend(self): return _examplepy.StdVectorBool_rend(self)
    def pop_back(self): return _examplepy.StdVectorBool_pop_back(self)
    def erase(self, *args): return _examplepy.StdVectorBool_erase(self, *args)
    def __init__(self, *args): 
        this = _examplepy.new_StdVectorBool(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _examplepy.StdVectorBool_push_back(self, *args)
    def front(self): return _examplepy.StdVectorBool_front(self)
    def back(self): return _examplepy.StdVectorBool_back(self)
    def assign(self, *args): return _examplepy.StdVectorBool_assign(self, *args)
    def resize(self, *args): return _examplepy.StdVectorBool_resize(self, *args)
    def insert(self, *args): return _examplepy.StdVectorBool_insert(self, *args)
    def reserve(self, *args): return _examplepy.StdVectorBool_reserve(self, *args)
    def capacity(self): return _examplepy.StdVectorBool_capacity(self)
    __swig_destroy__ = _examplepy.delete_StdVectorBool
    __del__ = lambda self : None;
StdVectorBool_swigregister = _examplepy.StdVectorBool_swigregister
StdVectorBool_swigregister(StdVectorBool)

class StdVectorChar(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdVectorChar, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdVectorChar, name)
    __repr__ = _swig_repr
    def iterator(self): return _examplepy.StdVectorChar_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _examplepy.StdVectorChar___nonzero__(self)
    def __bool__(self): return _examplepy.StdVectorChar___bool__(self)
    def __len__(self): return _examplepy.StdVectorChar___len__(self)
    def pop(self): return _examplepy.StdVectorChar_pop(self)
    def __getslice__(self, *args): return _examplepy.StdVectorChar___getslice__(self, *args)
    def __setslice__(self, *args): return _examplepy.StdVectorChar___setslice__(self, *args)
    def __delslice__(self, *args): return _examplepy.StdVectorChar___delslice__(self, *args)
    def __delitem__(self, *args): return _examplepy.StdVectorChar___delitem__(self, *args)
    def __getitem__(self, *args): return _examplepy.StdVectorChar___getitem__(self, *args)
    def __setitem__(self, *args): return _examplepy.StdVectorChar___setitem__(self, *args)
    def append(self, *args): return _examplepy.StdVectorChar_append(self, *args)
    def empty(self): return _examplepy.StdVectorChar_empty(self)
    def size(self): return _examplepy.StdVectorChar_size(self)
    def clear(self): return _examplepy.StdVectorChar_clear(self)
    def swap(self, *args): return _examplepy.StdVectorChar_swap(self, *args)
    def get_allocator(self): return _examplepy.StdVectorChar_get_allocator(self)
    def begin(self): return _examplepy.StdVectorChar_begin(self)
    def end(self): return _examplepy.StdVectorChar_end(self)
    def rbegin(self): return _examplepy.StdVectorChar_rbegin(self)
    def rend(self): return _examplepy.StdVectorChar_rend(self)
    def pop_back(self): return _examplepy.StdVectorChar_pop_back(self)
    def erase(self, *args): return _examplepy.StdVectorChar_erase(self, *args)
    def __init__(self, *args): 
        this = _examplepy.new_StdVectorChar(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _examplepy.StdVectorChar_push_back(self, *args)
    def front(self): return _examplepy.StdVectorChar_front(self)
    def back(self): return _examplepy.StdVectorChar_back(self)
    def assign(self, *args): return _examplepy.StdVectorChar_assign(self, *args)
    def resize(self, *args): return _examplepy.StdVectorChar_resize(self, *args)
    def insert(self, *args): return _examplepy.StdVectorChar_insert(self, *args)
    def reserve(self, *args): return _examplepy.StdVectorChar_reserve(self, *args)
    def capacity(self): return _examplepy.StdVectorChar_capacity(self)
    __swig_destroy__ = _examplepy.delete_StdVectorChar
    __del__ = lambda self : None;
StdVectorChar_swigregister = _examplepy.StdVectorChar_swigregister
StdVectorChar_swigregister(StdVectorChar)

class StdVectorUnsignedChar(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdVectorUnsignedChar, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdVectorUnsignedChar, name)
    __repr__ = _swig_repr
    def iterator(self): return _examplepy.StdVectorUnsignedChar_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _examplepy.StdVectorUnsignedChar___nonzero__(self)
    def __bool__(self): return _examplepy.StdVectorUnsignedChar___bool__(self)
    def __len__(self): return _examplepy.StdVectorUnsignedChar___len__(self)
    def pop(self): return _examplepy.StdVectorUnsignedChar_pop(self)
    def __getslice__(self, *args): return _examplepy.StdVectorUnsignedChar___getslice__(self, *args)
    def __setslice__(self, *args): return _examplepy.StdVectorUnsignedChar___setslice__(self, *args)
    def __delslice__(self, *args): return _examplepy.StdVectorUnsignedChar___delslice__(self, *args)
    def __delitem__(self, *args): return _examplepy.StdVectorUnsignedChar___delitem__(self, *args)
    def __getitem__(self, *args): return _examplepy.StdVectorUnsignedChar___getitem__(self, *args)
    def __setitem__(self, *args): return _examplepy.StdVectorUnsignedChar___setitem__(self, *args)
    def append(self, *args): return _examplepy.StdVectorUnsignedChar_append(self, *args)
    def empty(self): return _examplepy.StdVectorUnsignedChar_empty(self)
    def size(self): return _examplepy.StdVectorUnsignedChar_size(self)
    def clear(self): return _examplepy.StdVectorUnsignedChar_clear(self)
    def swap(self, *args): return _examplepy.StdVectorUnsignedChar_swap(self, *args)
    def get_allocator(self): return _examplepy.StdVectorUnsignedChar_get_allocator(self)
    def begin(self): return _examplepy.StdVectorUnsignedChar_begin(self)
    def end(self): return _examplepy.StdVectorUnsignedChar_end(self)
    def rbegin(self): return _examplepy.StdVectorUnsignedChar_rbegin(self)
    def rend(self): return _examplepy.StdVectorUnsignedChar_rend(self)
    def pop_back(self): return _examplepy.StdVectorUnsignedChar_pop_back(self)
    def erase(self, *args): return _examplepy.StdVectorUnsignedChar_erase(self, *args)
    def __init__(self, *args): 
        this = _examplepy.new_StdVectorUnsignedChar(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _examplepy.StdVectorUnsignedChar_push_back(self, *args)
    def front(self): return _examplepy.StdVectorUnsignedChar_front(self)
    def back(self): return _examplepy.StdVectorUnsignedChar_back(self)
    def assign(self, *args): return _examplepy.StdVectorUnsignedChar_assign(self, *args)
    def resize(self, *args): return _examplepy.StdVectorUnsignedChar_resize(self, *args)
    def insert(self, *args): return _examplepy.StdVectorUnsignedChar_insert(self, *args)
    def reserve(self, *args): return _examplepy.StdVectorUnsignedChar_reserve(self, *args)
    def capacity(self): return _examplepy.StdVectorUnsignedChar_capacity(self)
    __swig_destroy__ = _examplepy.delete_StdVectorUnsignedChar
    __del__ = lambda self : None;
StdVectorUnsignedChar_swigregister = _examplepy.StdVectorUnsignedChar_swigregister
StdVectorUnsignedChar_swigregister(StdVectorUnsignedChar)

class StdVectorShort(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdVectorShort, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdVectorShort, name)
    __repr__ = _swig_repr
    def iterator(self): return _examplepy.StdVectorShort_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _examplepy.StdVectorShort___nonzero__(self)
    def __bool__(self): return _examplepy.StdVectorShort___bool__(self)
    def __len__(self): return _examplepy.StdVectorShort___len__(self)
    def pop(self): return _examplepy.StdVectorShort_pop(self)
    def __getslice__(self, *args): return _examplepy.StdVectorShort___getslice__(self, *args)
    def __setslice__(self, *args): return _examplepy.StdVectorShort___setslice__(self, *args)
    def __delslice__(self, *args): return _examplepy.StdVectorShort___delslice__(self, *args)
    def __delitem__(self, *args): return _examplepy.StdVectorShort___delitem__(self, *args)
    def __getitem__(self, *args): return _examplepy.StdVectorShort___getitem__(self, *args)
    def __setitem__(self, *args): return _examplepy.StdVectorShort___setitem__(self, *args)
    def append(self, *args): return _examplepy.StdVectorShort_append(self, *args)
    def empty(self): return _examplepy.StdVectorShort_empty(self)
    def size(self): return _examplepy.StdVectorShort_size(self)
    def clear(self): return _examplepy.StdVectorShort_clear(self)
    def swap(self, *args): return _examplepy.StdVectorShort_swap(self, *args)
    def get_allocator(self): return _examplepy.StdVectorShort_get_allocator(self)
    def begin(self): return _examplepy.StdVectorShort_begin(self)
    def end(self): return _examplepy.StdVectorShort_end(self)
    def rbegin(self): return _examplepy.StdVectorShort_rbegin(self)
    def rend(self): return _examplepy.StdVectorShort_rend(self)
    def pop_back(self): return _examplepy.StdVectorShort_pop_back(self)
    def erase(self, *args): return _examplepy.StdVectorShort_erase(self, *args)
    def __init__(self, *args): 
        this = _examplepy.new_StdVectorShort(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _examplepy.StdVectorShort_push_back(self, *args)
    def front(self): return _examplepy.StdVectorShort_front(self)
    def back(self): return _examplepy.StdVectorShort_back(self)
    def assign(self, *args): return _examplepy.StdVectorShort_assign(self, *args)
    def resize(self, *args): return _examplepy.StdVectorShort_resize(self, *args)
    def insert(self, *args): return _examplepy.StdVectorShort_insert(self, *args)
    def reserve(self, *args): return _examplepy.StdVectorShort_reserve(self, *args)
    def capacity(self): return _examplepy.StdVectorShort_capacity(self)
    __swig_destroy__ = _examplepy.delete_StdVectorShort
    __del__ = lambda self : None;
StdVectorShort_swigregister = _examplepy.StdVectorShort_swigregister
StdVectorShort_swigregister(StdVectorShort)

class StdVectorUnsignedShort(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdVectorUnsignedShort, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdVectorUnsignedShort, name)
    __repr__ = _swig_repr
    def iterator(self): return _examplepy.StdVectorUnsignedShort_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _examplepy.StdVectorUnsignedShort___nonzero__(self)
    def __bool__(self): return _examplepy.StdVectorUnsignedShort___bool__(self)
    def __len__(self): return _examplepy.StdVectorUnsignedShort___len__(self)
    def pop(self): return _examplepy.StdVectorUnsignedShort_pop(self)
    def __getslice__(self, *args): return _examplepy.StdVectorUnsignedShort___getslice__(self, *args)
    def __setslice__(self, *args): return _examplepy.StdVectorUnsignedShort___setslice__(self, *args)
    def __delslice__(self, *args): return _examplepy.StdVectorUnsignedShort___delslice__(self, *args)
    def __delitem__(self, *args): return _examplepy.StdVectorUnsignedShort___delitem__(self, *args)
    def __getitem__(self, *args): return _examplepy.StdVectorUnsignedShort___getitem__(self, *args)
    def __setitem__(self, *args): return _examplepy.StdVectorUnsignedShort___setitem__(self, *args)
    def append(self, *args): return _examplepy.StdVectorUnsignedShort_append(self, *args)
    def empty(self): return _examplepy.StdVectorUnsignedShort_empty(self)
    def size(self): return _examplepy.StdVectorUnsignedShort_size(self)
    def clear(self): return _examplepy.StdVectorUnsignedShort_clear(self)
    def swap(self, *args): return _examplepy.StdVectorUnsignedShort_swap(self, *args)
    def get_allocator(self): return _examplepy.StdVectorUnsignedShort_get_allocator(self)
    def begin(self): return _examplepy.StdVectorUnsignedShort_begin(self)
    def end(self): return _examplepy.StdVectorUnsignedShort_end(self)
    def rbegin(self): return _examplepy.StdVectorUnsignedShort_rbegin(self)
    def rend(self): return _examplepy.StdVectorUnsignedShort_rend(self)
    def pop_back(self): return _examplepy.StdVectorUnsignedShort_pop_back(self)
    def erase(self, *args): return _examplepy.StdVectorUnsignedShort_erase(self, *args)
    def __init__(self, *args): 
        this = _examplepy.new_StdVectorUnsignedShort(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _examplepy.StdVectorUnsignedShort_push_back(self, *args)
    def front(self): return _examplepy.StdVectorUnsignedShort_front(self)
    def back(self): return _examplepy.StdVectorUnsignedShort_back(self)
    def assign(self, *args): return _examplepy.StdVectorUnsignedShort_assign(self, *args)
    def resize(self, *args): return _examplepy.StdVectorUnsignedShort_resize(self, *args)
    def insert(self, *args): return _examplepy.StdVectorUnsignedShort_insert(self, *args)
    def reserve(self, *args): return _examplepy.StdVectorUnsignedShort_reserve(self, *args)
    def capacity(self): return _examplepy.StdVectorUnsignedShort_capacity(self)
    __swig_destroy__ = _examplepy.delete_StdVectorUnsignedShort
    __del__ = lambda self : None;
StdVectorUnsignedShort_swigregister = _examplepy.StdVectorUnsignedShort_swigregister
StdVectorUnsignedShort_swigregister(StdVectorUnsignedShort)

class StdVectorInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdVectorInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdVectorInt, name)
    __repr__ = _swig_repr
    def iterator(self): return _examplepy.StdVectorInt_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _examplepy.StdVectorInt___nonzero__(self)
    def __bool__(self): return _examplepy.StdVectorInt___bool__(self)
    def __len__(self): return _examplepy.StdVectorInt___len__(self)
    def pop(self): return _examplepy.StdVectorInt_pop(self)
    def __getslice__(self, *args): return _examplepy.StdVectorInt___getslice__(self, *args)
    def __setslice__(self, *args): return _examplepy.StdVectorInt___setslice__(self, *args)
    def __delslice__(self, *args): return _examplepy.StdVectorInt___delslice__(self, *args)
    def __delitem__(self, *args): return _examplepy.StdVectorInt___delitem__(self, *args)
    def __getitem__(self, *args): return _examplepy.StdVectorInt___getitem__(self, *args)
    def __setitem__(self, *args): return _examplepy.StdVectorInt___setitem__(self, *args)
    def append(self, *args): return _examplepy.StdVectorInt_append(self, *args)
    def empty(self): return _examplepy.StdVectorInt_empty(self)
    def size(self): return _examplepy.StdVectorInt_size(self)
    def clear(self): return _examplepy.StdVectorInt_clear(self)
    def swap(self, *args): return _examplepy.StdVectorInt_swap(self, *args)
    def get_allocator(self): return _examplepy.StdVectorInt_get_allocator(self)
    def begin(self): return _examplepy.StdVectorInt_begin(self)
    def end(self): return _examplepy.StdVectorInt_end(self)
    def rbegin(self): return _examplepy.StdVectorInt_rbegin(self)
    def rend(self): return _examplepy.StdVectorInt_rend(self)
    def pop_back(self): return _examplepy.StdVectorInt_pop_back(self)
    def erase(self, *args): return _examplepy.StdVectorInt_erase(self, *args)
    def __init__(self, *args): 
        this = _examplepy.new_StdVectorInt(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _examplepy.StdVectorInt_push_back(self, *args)
    def front(self): return _examplepy.StdVectorInt_front(self)
    def back(self): return _examplepy.StdVectorInt_back(self)
    def assign(self, *args): return _examplepy.StdVectorInt_assign(self, *args)
    def resize(self, *args): return _examplepy.StdVectorInt_resize(self, *args)
    def insert(self, *args): return _examplepy.StdVectorInt_insert(self, *args)
    def reserve(self, *args): return _examplepy.StdVectorInt_reserve(self, *args)
    def capacity(self): return _examplepy.StdVectorInt_capacity(self)
    __swig_destroy__ = _examplepy.delete_StdVectorInt
    __del__ = lambda self : None;
StdVectorInt_swigregister = _examplepy.StdVectorInt_swigregister
StdVectorInt_swigregister(StdVectorInt)

class StdVectorUnsignedInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdVectorUnsignedInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdVectorUnsignedInt, name)
    __repr__ = _swig_repr
    def iterator(self): return _examplepy.StdVectorUnsignedInt_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _examplepy.StdVectorUnsignedInt___nonzero__(self)
    def __bool__(self): return _examplepy.StdVectorUnsignedInt___bool__(self)
    def __len__(self): return _examplepy.StdVectorUnsignedInt___len__(self)
    def pop(self): return _examplepy.StdVectorUnsignedInt_pop(self)
    def __getslice__(self, *args): return _examplepy.StdVectorUnsignedInt___getslice__(self, *args)
    def __setslice__(self, *args): return _examplepy.StdVectorUnsignedInt___setslice__(self, *args)
    def __delslice__(self, *args): return _examplepy.StdVectorUnsignedInt___delslice__(self, *args)
    def __delitem__(self, *args): return _examplepy.StdVectorUnsignedInt___delitem__(self, *args)
    def __getitem__(self, *args): return _examplepy.StdVectorUnsignedInt___getitem__(self, *args)
    def __setitem__(self, *args): return _examplepy.StdVectorUnsignedInt___setitem__(self, *args)
    def append(self, *args): return _examplepy.StdVectorUnsignedInt_append(self, *args)
    def empty(self): return _examplepy.StdVectorUnsignedInt_empty(self)
    def size(self): return _examplepy.StdVectorUnsignedInt_size(self)
    def clear(self): return _examplepy.StdVectorUnsignedInt_clear(self)
    def swap(self, *args): return _examplepy.StdVectorUnsignedInt_swap(self, *args)
    def get_allocator(self): return _examplepy.StdVectorUnsignedInt_get_allocator(self)
    def begin(self): return _examplepy.StdVectorUnsignedInt_begin(self)
    def end(self): return _examplepy.StdVectorUnsignedInt_end(self)
    def rbegin(self): return _examplepy.StdVectorUnsignedInt_rbegin(self)
    def rend(self): return _examplepy.StdVectorUnsignedInt_rend(self)
    def pop_back(self): return _examplepy.StdVectorUnsignedInt_pop_back(self)
    def erase(self, *args): return _examplepy.StdVectorUnsignedInt_erase(self, *args)
    def __init__(self, *args): 
        this = _examplepy.new_StdVectorUnsignedInt(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _examplepy.StdVectorUnsignedInt_push_back(self, *args)
    def front(self): return _examplepy.StdVectorUnsignedInt_front(self)
    def back(self): return _examplepy.StdVectorUnsignedInt_back(self)
    def assign(self, *args): return _examplepy.StdVectorUnsignedInt_assign(self, *args)
    def resize(self, *args): return _examplepy.StdVectorUnsignedInt_resize(self, *args)
    def insert(self, *args): return _examplepy.StdVectorUnsignedInt_insert(self, *args)
    def reserve(self, *args): return _examplepy.StdVectorUnsignedInt_reserve(self, *args)
    def capacity(self): return _examplepy.StdVectorUnsignedInt_capacity(self)
    __swig_destroy__ = _examplepy.delete_StdVectorUnsignedInt
    __del__ = lambda self : None;
StdVectorUnsignedInt_swigregister = _examplepy.StdVectorUnsignedInt_swigregister
StdVectorUnsignedInt_swigregister(StdVectorUnsignedInt)

class StdVectorLong(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdVectorLong, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdVectorLong, name)
    __repr__ = _swig_repr
    def iterator(self): return _examplepy.StdVectorLong_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _examplepy.StdVectorLong___nonzero__(self)
    def __bool__(self): return _examplepy.StdVectorLong___bool__(self)
    def __len__(self): return _examplepy.StdVectorLong___len__(self)
    def pop(self): return _examplepy.StdVectorLong_pop(self)
    def __getslice__(self, *args): return _examplepy.StdVectorLong___getslice__(self, *args)
    def __setslice__(self, *args): return _examplepy.StdVectorLong___setslice__(self, *args)
    def __delslice__(self, *args): return _examplepy.StdVectorLong___delslice__(self, *args)
    def __delitem__(self, *args): return _examplepy.StdVectorLong___delitem__(self, *args)
    def __getitem__(self, *args): return _examplepy.StdVectorLong___getitem__(self, *args)
    def __setitem__(self, *args): return _examplepy.StdVectorLong___setitem__(self, *args)
    def append(self, *args): return _examplepy.StdVectorLong_append(self, *args)
    def empty(self): return _examplepy.StdVectorLong_empty(self)
    def size(self): return _examplepy.StdVectorLong_size(self)
    def clear(self): return _examplepy.StdVectorLong_clear(self)
    def swap(self, *args): return _examplepy.StdVectorLong_swap(self, *args)
    def get_allocator(self): return _examplepy.StdVectorLong_get_allocator(self)
    def begin(self): return _examplepy.StdVectorLong_begin(self)
    def end(self): return _examplepy.StdVectorLong_end(self)
    def rbegin(self): return _examplepy.StdVectorLong_rbegin(self)
    def rend(self): return _examplepy.StdVectorLong_rend(self)
    def pop_back(self): return _examplepy.StdVectorLong_pop_back(self)
    def erase(self, *args): return _examplepy.StdVectorLong_erase(self, *args)
    def __init__(self, *args): 
        this = _examplepy.new_StdVectorLong(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _examplepy.StdVectorLong_push_back(self, *args)
    def front(self): return _examplepy.StdVectorLong_front(self)
    def back(self): return _examplepy.StdVectorLong_back(self)
    def assign(self, *args): return _examplepy.StdVectorLong_assign(self, *args)
    def resize(self, *args): return _examplepy.StdVectorLong_resize(self, *args)
    def insert(self, *args): return _examplepy.StdVectorLong_insert(self, *args)
    def reserve(self, *args): return _examplepy.StdVectorLong_reserve(self, *args)
    def capacity(self): return _examplepy.StdVectorLong_capacity(self)
    __swig_destroy__ = _examplepy.delete_StdVectorLong
    __del__ = lambda self : None;
StdVectorLong_swigregister = _examplepy.StdVectorLong_swigregister
StdVectorLong_swigregister(StdVectorLong)

class StdVectorUnsignedLong(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdVectorUnsignedLong, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdVectorUnsignedLong, name)
    __repr__ = _swig_repr
    def iterator(self): return _examplepy.StdVectorUnsignedLong_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _examplepy.StdVectorUnsignedLong___nonzero__(self)
    def __bool__(self): return _examplepy.StdVectorUnsignedLong___bool__(self)
    def __len__(self): return _examplepy.StdVectorUnsignedLong___len__(self)
    def pop(self): return _examplepy.StdVectorUnsignedLong_pop(self)
    def __getslice__(self, *args): return _examplepy.StdVectorUnsignedLong___getslice__(self, *args)
    def __setslice__(self, *args): return _examplepy.StdVectorUnsignedLong___setslice__(self, *args)
    def __delslice__(self, *args): return _examplepy.StdVectorUnsignedLong___delslice__(self, *args)
    def __delitem__(self, *args): return _examplepy.StdVectorUnsignedLong___delitem__(self, *args)
    def __getitem__(self, *args): return _examplepy.StdVectorUnsignedLong___getitem__(self, *args)
    def __setitem__(self, *args): return _examplepy.StdVectorUnsignedLong___setitem__(self, *args)
    def append(self, *args): return _examplepy.StdVectorUnsignedLong_append(self, *args)
    def empty(self): return _examplepy.StdVectorUnsignedLong_empty(self)
    def size(self): return _examplepy.StdVectorUnsignedLong_size(self)
    def clear(self): return _examplepy.StdVectorUnsignedLong_clear(self)
    def swap(self, *args): return _examplepy.StdVectorUnsignedLong_swap(self, *args)
    def get_allocator(self): return _examplepy.StdVectorUnsignedLong_get_allocator(self)
    def begin(self): return _examplepy.StdVectorUnsignedLong_begin(self)
    def end(self): return _examplepy.StdVectorUnsignedLong_end(self)
    def rbegin(self): return _examplepy.StdVectorUnsignedLong_rbegin(self)
    def rend(self): return _examplepy.StdVectorUnsignedLong_rend(self)
    def pop_back(self): return _examplepy.StdVectorUnsignedLong_pop_back(self)
    def erase(self, *args): return _examplepy.StdVectorUnsignedLong_erase(self, *args)
    def __init__(self, *args): 
        this = _examplepy.new_StdVectorUnsignedLong(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _examplepy.StdVectorUnsignedLong_push_back(self, *args)
    def front(self): return _examplepy.StdVectorUnsignedLong_front(self)
    def back(self): return _examplepy.StdVectorUnsignedLong_back(self)
    def assign(self, *args): return _examplepy.StdVectorUnsignedLong_assign(self, *args)
    def resize(self, *args): return _examplepy.StdVectorUnsignedLong_resize(self, *args)
    def insert(self, *args): return _examplepy.StdVectorUnsignedLong_insert(self, *args)
    def reserve(self, *args): return _examplepy.StdVectorUnsignedLong_reserve(self, *args)
    def capacity(self): return _examplepy.StdVectorUnsignedLong_capacity(self)
    __swig_destroy__ = _examplepy.delete_StdVectorUnsignedLong
    __del__ = lambda self : None;
StdVectorUnsignedLong_swigregister = _examplepy.StdVectorUnsignedLong_swigregister
StdVectorUnsignedLong_swigregister(StdVectorUnsignedLong)

class StdVectorFloat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdVectorFloat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdVectorFloat, name)
    __repr__ = _swig_repr
    def iterator(self): return _examplepy.StdVectorFloat_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _examplepy.StdVectorFloat___nonzero__(self)
    def __bool__(self): return _examplepy.StdVectorFloat___bool__(self)
    def __len__(self): return _examplepy.StdVectorFloat___len__(self)
    def pop(self): return _examplepy.StdVectorFloat_pop(self)
    def __getslice__(self, *args): return _examplepy.StdVectorFloat___getslice__(self, *args)
    def __setslice__(self, *args): return _examplepy.StdVectorFloat___setslice__(self, *args)
    def __delslice__(self, *args): return _examplepy.StdVectorFloat___delslice__(self, *args)
    def __delitem__(self, *args): return _examplepy.StdVectorFloat___delitem__(self, *args)
    def __getitem__(self, *args): return _examplepy.StdVectorFloat___getitem__(self, *args)
    def __setitem__(self, *args): return _examplepy.StdVectorFloat___setitem__(self, *args)
    def append(self, *args): return _examplepy.StdVectorFloat_append(self, *args)
    def empty(self): return _examplepy.StdVectorFloat_empty(self)
    def size(self): return _examplepy.StdVectorFloat_size(self)
    def clear(self): return _examplepy.StdVectorFloat_clear(self)
    def swap(self, *args): return _examplepy.StdVectorFloat_swap(self, *args)
    def get_allocator(self): return _examplepy.StdVectorFloat_get_allocator(self)
    def begin(self): return _examplepy.StdVectorFloat_begin(self)
    def end(self): return _examplepy.StdVectorFloat_end(self)
    def rbegin(self): return _examplepy.StdVectorFloat_rbegin(self)
    def rend(self): return _examplepy.StdVectorFloat_rend(self)
    def pop_back(self): return _examplepy.StdVectorFloat_pop_back(self)
    def erase(self, *args): return _examplepy.StdVectorFloat_erase(self, *args)
    def __init__(self, *args): 
        this = _examplepy.new_StdVectorFloat(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _examplepy.StdVectorFloat_push_back(self, *args)
    def front(self): return _examplepy.StdVectorFloat_front(self)
    def back(self): return _examplepy.StdVectorFloat_back(self)
    def assign(self, *args): return _examplepy.StdVectorFloat_assign(self, *args)
    def resize(self, *args): return _examplepy.StdVectorFloat_resize(self, *args)
    def insert(self, *args): return _examplepy.StdVectorFloat_insert(self, *args)
    def reserve(self, *args): return _examplepy.StdVectorFloat_reserve(self, *args)
    def capacity(self): return _examplepy.StdVectorFloat_capacity(self)
    __swig_destroy__ = _examplepy.delete_StdVectorFloat
    __del__ = lambda self : None;
StdVectorFloat_swigregister = _examplepy.StdVectorFloat_swigregister
StdVectorFloat_swigregister(StdVectorFloat)

class StdVectorDouble(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdVectorDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdVectorDouble, name)
    __repr__ = _swig_repr
    def iterator(self): return _examplepy.StdVectorDouble_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _examplepy.StdVectorDouble___nonzero__(self)
    def __bool__(self): return _examplepy.StdVectorDouble___bool__(self)
    def __len__(self): return _examplepy.StdVectorDouble___len__(self)
    def pop(self): return _examplepy.StdVectorDouble_pop(self)
    def __getslice__(self, *args): return _examplepy.StdVectorDouble___getslice__(self, *args)
    def __setslice__(self, *args): return _examplepy.StdVectorDouble___setslice__(self, *args)
    def __delslice__(self, *args): return _examplepy.StdVectorDouble___delslice__(self, *args)
    def __delitem__(self, *args): return _examplepy.StdVectorDouble___delitem__(self, *args)
    def __getitem__(self, *args): return _examplepy.StdVectorDouble___getitem__(self, *args)
    def __setitem__(self, *args): return _examplepy.StdVectorDouble___setitem__(self, *args)
    def append(self, *args): return _examplepy.StdVectorDouble_append(self, *args)
    def empty(self): return _examplepy.StdVectorDouble_empty(self)
    def size(self): return _examplepy.StdVectorDouble_size(self)
    def clear(self): return _examplepy.StdVectorDouble_clear(self)
    def swap(self, *args): return _examplepy.StdVectorDouble_swap(self, *args)
    def get_allocator(self): return _examplepy.StdVectorDouble_get_allocator(self)
    def begin(self): return _examplepy.StdVectorDouble_begin(self)
    def end(self): return _examplepy.StdVectorDouble_end(self)
    def rbegin(self): return _examplepy.StdVectorDouble_rbegin(self)
    def rend(self): return _examplepy.StdVectorDouble_rend(self)
    def pop_back(self): return _examplepy.StdVectorDouble_pop_back(self)
    def erase(self, *args): return _examplepy.StdVectorDouble_erase(self, *args)
    def __init__(self, *args): 
        this = _examplepy.new_StdVectorDouble(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _examplepy.StdVectorDouble_push_back(self, *args)
    def front(self): return _examplepy.StdVectorDouble_front(self)
    def back(self): return _examplepy.StdVectorDouble_back(self)
    def assign(self, *args): return _examplepy.StdVectorDouble_assign(self, *args)
    def resize(self, *args): return _examplepy.StdVectorDouble_resize(self, *args)
    def insert(self, *args): return _examplepy.StdVectorDouble_insert(self, *args)
    def reserve(self, *args): return _examplepy.StdVectorDouble_reserve(self, *args)
    def capacity(self): return _examplepy.StdVectorDouble_capacity(self)
    __swig_destroy__ = _examplepy.delete_StdVectorDouble
    __del__ = lambda self : None;
StdVectorDouble_swigregister = _examplepy.StdVectorDouble_swigregister
StdVectorDouble_swigregister(StdVectorDouble)

class StdVectorStdString(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdVectorStdString, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdVectorStdString, name)
    __repr__ = _swig_repr
    def iterator(self): return _examplepy.StdVectorStdString_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _examplepy.StdVectorStdString___nonzero__(self)
    def __bool__(self): return _examplepy.StdVectorStdString___bool__(self)
    def __len__(self): return _examplepy.StdVectorStdString___len__(self)
    def pop(self): return _examplepy.StdVectorStdString_pop(self)
    def __getslice__(self, *args): return _examplepy.StdVectorStdString___getslice__(self, *args)
    def __setslice__(self, *args): return _examplepy.StdVectorStdString___setslice__(self, *args)
    def __delslice__(self, *args): return _examplepy.StdVectorStdString___delslice__(self, *args)
    def __delitem__(self, *args): return _examplepy.StdVectorStdString___delitem__(self, *args)
    def __getitem__(self, *args): return _examplepy.StdVectorStdString___getitem__(self, *args)
    def __setitem__(self, *args): return _examplepy.StdVectorStdString___setitem__(self, *args)
    def append(self, *args): return _examplepy.StdVectorStdString_append(self, *args)
    def empty(self): return _examplepy.StdVectorStdString_empty(self)
    def size(self): return _examplepy.StdVectorStdString_size(self)
    def clear(self): return _examplepy.StdVectorStdString_clear(self)
    def swap(self, *args): return _examplepy.StdVectorStdString_swap(self, *args)
    def get_allocator(self): return _examplepy.StdVectorStdString_get_allocator(self)
    def begin(self): return _examplepy.StdVectorStdString_begin(self)
    def end(self): return _examplepy.StdVectorStdString_end(self)
    def rbegin(self): return _examplepy.StdVectorStdString_rbegin(self)
    def rend(self): return _examplepy.StdVectorStdString_rend(self)
    def pop_back(self): return _examplepy.StdVectorStdString_pop_back(self)
    def erase(self, *args): return _examplepy.StdVectorStdString_erase(self, *args)
    def __init__(self, *args): 
        this = _examplepy.new_StdVectorStdString(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _examplepy.StdVectorStdString_push_back(self, *args)
    def front(self): return _examplepy.StdVectorStdString_front(self)
    def back(self): return _examplepy.StdVectorStdString_back(self)
    def assign(self, *args): return _examplepy.StdVectorStdString_assign(self, *args)
    def resize(self, *args): return _examplepy.StdVectorStdString_resize(self, *args)
    def insert(self, *args): return _examplepy.StdVectorStdString_insert(self, *args)
    def reserve(self, *args): return _examplepy.StdVectorStdString_reserve(self, *args)
    def capacity(self): return _examplepy.StdVectorStdString_capacity(self)
    __swig_destroy__ = _examplepy.delete_StdVectorStdString
    __del__ = lambda self : None;
StdVectorStdString_swigregister = _examplepy.StdVectorStdString_swigregister
StdVectorStdString_swigregister(StdVectorStdString)

class StdVectorStdVectorInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdVectorStdVectorInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdVectorStdVectorInt, name)
    __repr__ = _swig_repr
    def iterator(self): return _examplepy.StdVectorStdVectorInt_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _examplepy.StdVectorStdVectorInt___nonzero__(self)
    def __bool__(self): return _examplepy.StdVectorStdVectorInt___bool__(self)
    def __len__(self): return _examplepy.StdVectorStdVectorInt___len__(self)
    def pop(self): return _examplepy.StdVectorStdVectorInt_pop(self)
    def __getslice__(self, *args): return _examplepy.StdVectorStdVectorInt___getslice__(self, *args)
    def __setslice__(self, *args): return _examplepy.StdVectorStdVectorInt___setslice__(self, *args)
    def __delslice__(self, *args): return _examplepy.StdVectorStdVectorInt___delslice__(self, *args)
    def __delitem__(self, *args): return _examplepy.StdVectorStdVectorInt___delitem__(self, *args)
    def __getitem__(self, *args): return _examplepy.StdVectorStdVectorInt___getitem__(self, *args)
    def __setitem__(self, *args): return _examplepy.StdVectorStdVectorInt___setitem__(self, *args)
    def append(self, *args): return _examplepy.StdVectorStdVectorInt_append(self, *args)
    def empty(self): return _examplepy.StdVectorStdVectorInt_empty(self)
    def size(self): return _examplepy.StdVectorStdVectorInt_size(self)
    def clear(self): return _examplepy.StdVectorStdVectorInt_clear(self)
    def swap(self, *args): return _examplepy.StdVectorStdVectorInt_swap(self, *args)
    def get_allocator(self): return _examplepy.StdVectorStdVectorInt_get_allocator(self)
    def begin(self): return _examplepy.StdVectorStdVectorInt_begin(self)
    def end(self): return _examplepy.StdVectorStdVectorInt_end(self)
    def rbegin(self): return _examplepy.StdVectorStdVectorInt_rbegin(self)
    def rend(self): return _examplepy.StdVectorStdVectorInt_rend(self)
    def pop_back(self): return _examplepy.StdVectorStdVectorInt_pop_back(self)
    def erase(self, *args): return _examplepy.StdVectorStdVectorInt_erase(self, *args)
    def __init__(self, *args): 
        this = _examplepy.new_StdVectorStdVectorInt(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _examplepy.StdVectorStdVectorInt_push_back(self, *args)
    def front(self): return _examplepy.StdVectorStdVectorInt_front(self)
    def back(self): return _examplepy.StdVectorStdVectorInt_back(self)
    def assign(self, *args): return _examplepy.StdVectorStdVectorInt_assign(self, *args)
    def resize(self, *args): return _examplepy.StdVectorStdVectorInt_resize(self, *args)
    def insert(self, *args): return _examplepy.StdVectorStdVectorInt_insert(self, *args)
    def reserve(self, *args): return _examplepy.StdVectorStdVectorInt_reserve(self, *args)
    def capacity(self): return _examplepy.StdVectorStdVectorInt_capacity(self)
    __swig_destroy__ = _examplepy.delete_StdVectorStdVectorInt
    __del__ = lambda self : None;
StdVectorStdVectorInt_swigregister = _examplepy.StdVectorStdVectorInt_swigregister
StdVectorStdVectorInt_swigregister(StdVectorStdVectorInt)

class StdVectorSwigClass(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdVectorSwigClass, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdVectorSwigClass, name)
    __repr__ = _swig_repr
    def iterator(self): return _examplepy.StdVectorSwigClass_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _examplepy.StdVectorSwigClass___nonzero__(self)
    def __bool__(self): return _examplepy.StdVectorSwigClass___bool__(self)
    def __len__(self): return _examplepy.StdVectorSwigClass___len__(self)
    def pop(self): return _examplepy.StdVectorSwigClass_pop(self)
    def __getslice__(self, *args): return _examplepy.StdVectorSwigClass___getslice__(self, *args)
    def __setslice__(self, *args): return _examplepy.StdVectorSwigClass___setslice__(self, *args)
    def __delslice__(self, *args): return _examplepy.StdVectorSwigClass___delslice__(self, *args)
    def __delitem__(self, *args): return _examplepy.StdVectorSwigClass___delitem__(self, *args)
    def __getitem__(self, *args): return _examplepy.StdVectorSwigClass___getitem__(self, *args)
    def __setitem__(self, *args): return _examplepy.StdVectorSwigClass___setitem__(self, *args)
    def append(self, *args): return _examplepy.StdVectorSwigClass_append(self, *args)
    def empty(self): return _examplepy.StdVectorSwigClass_empty(self)
    def size(self): return _examplepy.StdVectorSwigClass_size(self)
    def clear(self): return _examplepy.StdVectorSwigClass_clear(self)
    def swap(self, *args): return _examplepy.StdVectorSwigClass_swap(self, *args)
    def get_allocator(self): return _examplepy.StdVectorSwigClass_get_allocator(self)
    def begin(self): return _examplepy.StdVectorSwigClass_begin(self)
    def end(self): return _examplepy.StdVectorSwigClass_end(self)
    def rbegin(self): return _examplepy.StdVectorSwigClass_rbegin(self)
    def rend(self): return _examplepy.StdVectorSwigClass_rend(self)
    def pop_back(self): return _examplepy.StdVectorSwigClass_pop_back(self)
    def erase(self, *args): return _examplepy.StdVectorSwigClass_erase(self, *args)
    def __init__(self, *args): 
        this = _examplepy.new_StdVectorSwigClass(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _examplepy.StdVectorSwigClass_push_back(self, *args)
    def front(self): return _examplepy.StdVectorSwigClass_front(self)
    def back(self): return _examplepy.StdVectorSwigClass_back(self)
    def assign(self, *args): return _examplepy.StdVectorSwigClass_assign(self, *args)
    def resize(self, *args): return _examplepy.StdVectorSwigClass_resize(self, *args)
    def insert(self, *args): return _examplepy.StdVectorSwigClass_insert(self, *args)
    def reserve(self, *args): return _examplepy.StdVectorSwigClass_reserve(self, *args)
    def capacity(self): return _examplepy.StdVectorSwigClass_capacity(self)
    __swig_destroy__ = _examplepy.delete_StdVectorSwigClass
    __del__ = lambda self : None;
StdVectorSwigClass_swigregister = _examplepy.StdVectorSwigClass_swigregister
StdVectorSwigClass_swigregister(StdVectorSwigClass)

class StdVectorSmartPointerSwigClass(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdVectorSmartPointerSwigClass, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdVectorSmartPointerSwigClass, name)
    __repr__ = _swig_repr
    def iterator(self): return _examplepy.StdVectorSmartPointerSwigClass_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _examplepy.StdVectorSmartPointerSwigClass___nonzero__(self)
    def __bool__(self): return _examplepy.StdVectorSmartPointerSwigClass___bool__(self)
    def __len__(self): return _examplepy.StdVectorSmartPointerSwigClass___len__(self)
    def pop(self): return _examplepy.StdVectorSmartPointerSwigClass_pop(self)
    def __getslice__(self, *args): return _examplepy.StdVectorSmartPointerSwigClass___getslice__(self, *args)
    def __setslice__(self, *args): return _examplepy.StdVectorSmartPointerSwigClass___setslice__(self, *args)
    def __delslice__(self, *args): return _examplepy.StdVectorSmartPointerSwigClass___delslice__(self, *args)
    def __delitem__(self, *args): return _examplepy.StdVectorSmartPointerSwigClass___delitem__(self, *args)
    def __getitem__(self, *args): return _examplepy.StdVectorSmartPointerSwigClass___getitem__(self, *args)
    def __setitem__(self, *args): return _examplepy.StdVectorSmartPointerSwigClass___setitem__(self, *args)
    def append(self, *args): return _examplepy.StdVectorSmartPointerSwigClass_append(self, *args)
    def empty(self): return _examplepy.StdVectorSmartPointerSwigClass_empty(self)
    def size(self): return _examplepy.StdVectorSmartPointerSwigClass_size(self)
    def clear(self): return _examplepy.StdVectorSmartPointerSwigClass_clear(self)
    def swap(self, *args): return _examplepy.StdVectorSmartPointerSwigClass_swap(self, *args)
    def get_allocator(self): return _examplepy.StdVectorSmartPointerSwigClass_get_allocator(self)
    def begin(self): return _examplepy.StdVectorSmartPointerSwigClass_begin(self)
    def end(self): return _examplepy.StdVectorSmartPointerSwigClass_end(self)
    def rbegin(self): return _examplepy.StdVectorSmartPointerSwigClass_rbegin(self)
    def rend(self): return _examplepy.StdVectorSmartPointerSwigClass_rend(self)
    def pop_back(self): return _examplepy.StdVectorSmartPointerSwigClass_pop_back(self)
    def erase(self, *args): return _examplepy.StdVectorSmartPointerSwigClass_erase(self, *args)
    def __init__(self, *args): 
        this = _examplepy.new_StdVectorSmartPointerSwigClass(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _examplepy.StdVectorSmartPointerSwigClass_push_back(self, *args)
    def front(self): return _examplepy.StdVectorSmartPointerSwigClass_front(self)
    def back(self): return _examplepy.StdVectorSmartPointerSwigClass_back(self)
    def assign(self, *args): return _examplepy.StdVectorSmartPointerSwigClass_assign(self, *args)
    def resize(self, *args): return _examplepy.StdVectorSmartPointerSwigClass_resize(self, *args)
    def insert(self, *args): return _examplepy.StdVectorSmartPointerSwigClass_insert(self, *args)
    def reserve(self, *args): return _examplepy.StdVectorSmartPointerSwigClass_reserve(self, *args)
    def capacity(self): return _examplepy.StdVectorSmartPointerSwigClass_capacity(self)
    __swig_destroy__ = _examplepy.delete_StdVectorSmartPointerSwigClass
    __del__ = lambda self : None;
StdVectorSmartPointerSwigClass_swigregister = _examplepy.StdVectorSmartPointerSwigClass_swigregister
StdVectorSmartPointerSwigClass_swigregister(StdVectorSmartPointerSwigClass)

class StdVectorPointerSwigClass(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdVectorPointerSwigClass, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdVectorPointerSwigClass, name)
    __repr__ = _swig_repr
    def iterator(self): return _examplepy.StdVectorPointerSwigClass_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _examplepy.StdVectorPointerSwigClass___nonzero__(self)
    def __bool__(self): return _examplepy.StdVectorPointerSwigClass___bool__(self)
    def __len__(self): return _examplepy.StdVectorPointerSwigClass___len__(self)
    def pop(self): return _examplepy.StdVectorPointerSwigClass_pop(self)
    def __getslice__(self, *args): return _examplepy.StdVectorPointerSwigClass___getslice__(self, *args)
    def __setslice__(self, *args): return _examplepy.StdVectorPointerSwigClass___setslice__(self, *args)
    def __delslice__(self, *args): return _examplepy.StdVectorPointerSwigClass___delslice__(self, *args)
    def __delitem__(self, *args): return _examplepy.StdVectorPointerSwigClass___delitem__(self, *args)
    def __getitem__(self, *args): return _examplepy.StdVectorPointerSwigClass___getitem__(self, *args)
    def __setitem__(self, *args): return _examplepy.StdVectorPointerSwigClass___setitem__(self, *args)
    def append(self, *args): return _examplepy.StdVectorPointerSwigClass_append(self, *args)
    def empty(self): return _examplepy.StdVectorPointerSwigClass_empty(self)
    def size(self): return _examplepy.StdVectorPointerSwigClass_size(self)
    def clear(self): return _examplepy.StdVectorPointerSwigClass_clear(self)
    def swap(self, *args): return _examplepy.StdVectorPointerSwigClass_swap(self, *args)
    def get_allocator(self): return _examplepy.StdVectorPointerSwigClass_get_allocator(self)
    def begin(self): return _examplepy.StdVectorPointerSwigClass_begin(self)
    def end(self): return _examplepy.StdVectorPointerSwigClass_end(self)
    def rbegin(self): return _examplepy.StdVectorPointerSwigClass_rbegin(self)
    def rend(self): return _examplepy.StdVectorPointerSwigClass_rend(self)
    def pop_back(self): return _examplepy.StdVectorPointerSwigClass_pop_back(self)
    def erase(self, *args): return _examplepy.StdVectorPointerSwigClass_erase(self, *args)
    def __init__(self, *args): 
        this = _examplepy.new_StdVectorPointerSwigClass(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _examplepy.StdVectorPointerSwigClass_push_back(self, *args)
    def front(self): return _examplepy.StdVectorPointerSwigClass_front(self)
    def back(self): return _examplepy.StdVectorPointerSwigClass_back(self)
    def assign(self, *args): return _examplepy.StdVectorPointerSwigClass_assign(self, *args)
    def resize(self, *args): return _examplepy.StdVectorPointerSwigClass_resize(self, *args)
    def insert(self, *args): return _examplepy.StdVectorPointerSwigClass_insert(self, *args)
    def reserve(self, *args): return _examplepy.StdVectorPointerSwigClass_reserve(self, *args)
    def capacity(self): return _examplepy.StdVectorPointerSwigClass_capacity(self)
    __swig_destroy__ = _examplepy.delete_StdVectorPointerSwigClass
    __del__ = lambda self : None;
StdVectorPointerSwigClass_swigregister = _examplepy.StdVectorPointerSwigClass_swigregister
StdVectorPointerSwigClass_swigregister(StdVectorPointerSwigClass)

class StdVectorVec3f(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdVectorVec3f, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdVectorVec3f, name)
    __repr__ = _swig_repr
    def iterator(self): return _examplepy.StdVectorVec3f_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _examplepy.StdVectorVec3f___nonzero__(self)
    def __bool__(self): return _examplepy.StdVectorVec3f___bool__(self)
    def __len__(self): return _examplepy.StdVectorVec3f___len__(self)
    def pop(self): return _examplepy.StdVectorVec3f_pop(self)
    def __getslice__(self, *args): return _examplepy.StdVectorVec3f___getslice__(self, *args)
    def __setslice__(self, *args): return _examplepy.StdVectorVec3f___setslice__(self, *args)
    def __delslice__(self, *args): return _examplepy.StdVectorVec3f___delslice__(self, *args)
    def __delitem__(self, *args): return _examplepy.StdVectorVec3f___delitem__(self, *args)
    def __getitem__(self, *args): return _examplepy.StdVectorVec3f___getitem__(self, *args)
    def __setitem__(self, *args): return _examplepy.StdVectorVec3f___setitem__(self, *args)
    def append(self, *args): return _examplepy.StdVectorVec3f_append(self, *args)
    def empty(self): return _examplepy.StdVectorVec3f_empty(self)
    def size(self): return _examplepy.StdVectorVec3f_size(self)
    def clear(self): return _examplepy.StdVectorVec3f_clear(self)
    def swap(self, *args): return _examplepy.StdVectorVec3f_swap(self, *args)
    def get_allocator(self): return _examplepy.StdVectorVec3f_get_allocator(self)
    def begin(self): return _examplepy.StdVectorVec3f_begin(self)
    def end(self): return _examplepy.StdVectorVec3f_end(self)
    def rbegin(self): return _examplepy.StdVectorVec3f_rbegin(self)
    def rend(self): return _examplepy.StdVectorVec3f_rend(self)
    def pop_back(self): return _examplepy.StdVectorVec3f_pop_back(self)
    def erase(self, *args): return _examplepy.StdVectorVec3f_erase(self, *args)
    def __init__(self, *args): 
        this = _examplepy.new_StdVectorVec3f(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _examplepy.StdVectorVec3f_push_back(self, *args)
    def front(self): return _examplepy.StdVectorVec3f_front(self)
    def back(self): return _examplepy.StdVectorVec3f_back(self)
    def assign(self, *args): return _examplepy.StdVectorVec3f_assign(self, *args)
    def resize(self, *args): return _examplepy.StdVectorVec3f_resize(self, *args)
    def insert(self, *args): return _examplepy.StdVectorVec3f_insert(self, *args)
    def reserve(self, *args): return _examplepy.StdVectorVec3f_reserve(self, *args)
    def capacity(self): return _examplepy.StdVectorVec3f_capacity(self)
    __swig_destroy__ = _examplepy.delete_StdVectorVec3f
    __del__ = lambda self : None;
StdVectorVec3f_swigregister = _examplepy.StdVectorVec3f_swigregister
StdVectorVec3f_swigregister(StdVectorVec3f)

class StdVectorPointerVec3f(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdVectorPointerVec3f, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdVectorPointerVec3f, name)
    __repr__ = _swig_repr
    def iterator(self): return _examplepy.StdVectorPointerVec3f_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _examplepy.StdVectorPointerVec3f___nonzero__(self)
    def __bool__(self): return _examplepy.StdVectorPointerVec3f___bool__(self)
    def __len__(self): return _examplepy.StdVectorPointerVec3f___len__(self)
    def pop(self): return _examplepy.StdVectorPointerVec3f_pop(self)
    def __getslice__(self, *args): return _examplepy.StdVectorPointerVec3f___getslice__(self, *args)
    def __setslice__(self, *args): return _examplepy.StdVectorPointerVec3f___setslice__(self, *args)
    def __delslice__(self, *args): return _examplepy.StdVectorPointerVec3f___delslice__(self, *args)
    def __delitem__(self, *args): return _examplepy.StdVectorPointerVec3f___delitem__(self, *args)
    def __getitem__(self, *args): return _examplepy.StdVectorPointerVec3f___getitem__(self, *args)
    def __setitem__(self, *args): return _examplepy.StdVectorPointerVec3f___setitem__(self, *args)
    def append(self, *args): return _examplepy.StdVectorPointerVec3f_append(self, *args)
    def empty(self): return _examplepy.StdVectorPointerVec3f_empty(self)
    def size(self): return _examplepy.StdVectorPointerVec3f_size(self)
    def clear(self): return _examplepy.StdVectorPointerVec3f_clear(self)
    def swap(self, *args): return _examplepy.StdVectorPointerVec3f_swap(self, *args)
    def get_allocator(self): return _examplepy.StdVectorPointerVec3f_get_allocator(self)
    def begin(self): return _examplepy.StdVectorPointerVec3f_begin(self)
    def end(self): return _examplepy.StdVectorPointerVec3f_end(self)
    def rbegin(self): return _examplepy.StdVectorPointerVec3f_rbegin(self)
    def rend(self): return _examplepy.StdVectorPointerVec3f_rend(self)
    def pop_back(self): return _examplepy.StdVectorPointerVec3f_pop_back(self)
    def erase(self, *args): return _examplepy.StdVectorPointerVec3f_erase(self, *args)
    def __init__(self, *args): 
        this = _examplepy.new_StdVectorPointerVec3f(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _examplepy.StdVectorPointerVec3f_push_back(self, *args)
    def front(self): return _examplepy.StdVectorPointerVec3f_front(self)
    def back(self): return _examplepy.StdVectorPointerVec3f_back(self)
    def assign(self, *args): return _examplepy.StdVectorPointerVec3f_assign(self, *args)
    def resize(self, *args): return _examplepy.StdVectorPointerVec3f_resize(self, *args)
    def insert(self, *args): return _examplepy.StdVectorPointerVec3f_insert(self, *args)
    def reserve(self, *args): return _examplepy.StdVectorPointerVec3f_reserve(self, *args)
    def capacity(self): return _examplepy.StdVectorPointerVec3f_capacity(self)
    __swig_destroy__ = _examplepy.delete_StdVectorPointerVec3f
    __del__ = lambda self : None;
StdVectorPointerVec3f_swigregister = _examplepy.StdVectorPointerVec3f_swigregister
StdVectorPointerVec3f_swigregister(StdVectorPointerVec3f)

class StdVectorCppArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdVectorCppArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdVectorCppArray, name)
    __repr__ = _swig_repr
    def iterator(self): return _examplepy.StdVectorCppArray_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _examplepy.StdVectorCppArray___nonzero__(self)
    def __bool__(self): return _examplepy.StdVectorCppArray___bool__(self)
    def __len__(self): return _examplepy.StdVectorCppArray___len__(self)
    def pop(self): return _examplepy.StdVectorCppArray_pop(self)
    def __getslice__(self, *args): return _examplepy.StdVectorCppArray___getslice__(self, *args)
    def __setslice__(self, *args): return _examplepy.StdVectorCppArray___setslice__(self, *args)
    def __delslice__(self, *args): return _examplepy.StdVectorCppArray___delslice__(self, *args)
    def __delitem__(self, *args): return _examplepy.StdVectorCppArray___delitem__(self, *args)
    def __getitem__(self, *args): return _examplepy.StdVectorCppArray___getitem__(self, *args)
    def __setitem__(self, *args): return _examplepy.StdVectorCppArray___setitem__(self, *args)
    def append(self, *args): return _examplepy.StdVectorCppArray_append(self, *args)
    def empty(self): return _examplepy.StdVectorCppArray_empty(self)
    def size(self): return _examplepy.StdVectorCppArray_size(self)
    def clear(self): return _examplepy.StdVectorCppArray_clear(self)
    def swap(self, *args): return _examplepy.StdVectorCppArray_swap(self, *args)
    def get_allocator(self): return _examplepy.StdVectorCppArray_get_allocator(self)
    def begin(self): return _examplepy.StdVectorCppArray_begin(self)
    def end(self): return _examplepy.StdVectorCppArray_end(self)
    def rbegin(self): return _examplepy.StdVectorCppArray_rbegin(self)
    def rend(self): return _examplepy.StdVectorCppArray_rend(self)
    def pop_back(self): return _examplepy.StdVectorCppArray_pop_back(self)
    def erase(self, *args): return _examplepy.StdVectorCppArray_erase(self, *args)
    def __init__(self, *args): 
        this = _examplepy.new_StdVectorCppArray(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _examplepy.StdVectorCppArray_push_back(self, *args)
    def front(self): return _examplepy.StdVectorCppArray_front(self)
    def back(self): return _examplepy.StdVectorCppArray_back(self)
    def assign(self, *args): return _examplepy.StdVectorCppArray_assign(self, *args)
    def resize(self, *args): return _examplepy.StdVectorCppArray_resize(self, *args)
    def insert(self, *args): return _examplepy.StdVectorCppArray_insert(self, *args)
    def reserve(self, *args): return _examplepy.StdVectorCppArray_reserve(self, *args)
    def capacity(self): return _examplepy.StdVectorCppArray_capacity(self)
    __swig_destroy__ = _examplepy.delete_StdVectorCppArray
    __del__ = lambda self : None;
StdVectorCppArray_swigregister = _examplepy.StdVectorCppArray_swigregister
StdVectorCppArray_swigregister(StdVectorCppArray)

class StdVectorSmartPointerCppArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdVectorSmartPointerCppArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdVectorSmartPointerCppArray, name)
    __repr__ = _swig_repr
    def iterator(self): return _examplepy.StdVectorSmartPointerCppArray_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _examplepy.StdVectorSmartPointerCppArray___nonzero__(self)
    def __bool__(self): return _examplepy.StdVectorSmartPointerCppArray___bool__(self)
    def __len__(self): return _examplepy.StdVectorSmartPointerCppArray___len__(self)
    def pop(self): return _examplepy.StdVectorSmartPointerCppArray_pop(self)
    def __getslice__(self, *args): return _examplepy.StdVectorSmartPointerCppArray___getslice__(self, *args)
    def __setslice__(self, *args): return _examplepy.StdVectorSmartPointerCppArray___setslice__(self, *args)
    def __delslice__(self, *args): return _examplepy.StdVectorSmartPointerCppArray___delslice__(self, *args)
    def __delitem__(self, *args): return _examplepy.StdVectorSmartPointerCppArray___delitem__(self, *args)
    def __getitem__(self, *args): return _examplepy.StdVectorSmartPointerCppArray___getitem__(self, *args)
    def __setitem__(self, *args): return _examplepy.StdVectorSmartPointerCppArray___setitem__(self, *args)
    def append(self, *args): return _examplepy.StdVectorSmartPointerCppArray_append(self, *args)
    def empty(self): return _examplepy.StdVectorSmartPointerCppArray_empty(self)
    def size(self): return _examplepy.StdVectorSmartPointerCppArray_size(self)
    def clear(self): return _examplepy.StdVectorSmartPointerCppArray_clear(self)
    def swap(self, *args): return _examplepy.StdVectorSmartPointerCppArray_swap(self, *args)
    def get_allocator(self): return _examplepy.StdVectorSmartPointerCppArray_get_allocator(self)
    def begin(self): return _examplepy.StdVectorSmartPointerCppArray_begin(self)
    def end(self): return _examplepy.StdVectorSmartPointerCppArray_end(self)
    def rbegin(self): return _examplepy.StdVectorSmartPointerCppArray_rbegin(self)
    def rend(self): return _examplepy.StdVectorSmartPointerCppArray_rend(self)
    def pop_back(self): return _examplepy.StdVectorSmartPointerCppArray_pop_back(self)
    def erase(self, *args): return _examplepy.StdVectorSmartPointerCppArray_erase(self, *args)
    def __init__(self, *args): 
        this = _examplepy.new_StdVectorSmartPointerCppArray(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _examplepy.StdVectorSmartPointerCppArray_push_back(self, *args)
    def front(self): return _examplepy.StdVectorSmartPointerCppArray_front(self)
    def back(self): return _examplepy.StdVectorSmartPointerCppArray_back(self)
    def assign(self, *args): return _examplepy.StdVectorSmartPointerCppArray_assign(self, *args)
    def resize(self, *args): return _examplepy.StdVectorSmartPointerCppArray_resize(self, *args)
    def insert(self, *args): return _examplepy.StdVectorSmartPointerCppArray_insert(self, *args)
    def reserve(self, *args): return _examplepy.StdVectorSmartPointerCppArray_reserve(self, *args)
    def capacity(self): return _examplepy.StdVectorSmartPointerCppArray_capacity(self)
    __swig_destroy__ = _examplepy.delete_StdVectorSmartPointerCppArray
    __del__ = lambda self : None;
StdVectorSmartPointerCppArray_swigregister = _examplepy.StdVectorSmartPointerCppArray_swigregister
StdVectorSmartPointerCppArray_swigregister(StdVectorSmartPointerCppArray)


def FormatMsg(*args):
  return _examplepy.FormatMsg(*args)
FormatMsg = _examplepy.FormatMsg
class SwigClass(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigClass, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigClass, name)
    __repr__ = _swig_repr
    __swig_setmethods__["value"] = _examplepy.SwigClass_value_set
    __swig_getmethods__["value"] = _examplepy.SwigClass_value_get
    if _newclass:value = _swig_property(_examplepy.SwigClass_value_get, _examplepy.SwigClass_value_set)
    def __init__(self, *args): 
        this = _examplepy.new_SwigClass(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _examplepy.delete_SwigClass
    __del__ = lambda self : None;
    __swig_setmethods__["num_nodes"] = _examplepy.SwigClass_num_nodes_set
    __swig_getmethods__["num_nodes"] = _examplepy.SwigClass_num_nodes_get
    if _newclass:num_nodes = _swig_property(_examplepy.SwigClass_num_nodes_get, _examplepy.SwigClass_num_nodes_set)
    def AddressOf(self): return _examplepy.SwigClass_AddressOf(self)
SwigClass_swigregister = _examplepy.SwigClass_swigregister
SwigClass_swigregister(SwigClass)
cvar = _examplepy.cvar

class VirtualClass(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VirtualClass, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VirtualClass, name)
    __repr__ = _swig_repr
    def __init__(self): 
        if self.__class__ == VirtualClass:
            _self = None
        else:
            _self = self
        this = _examplepy.new_VirtualClass(_self, )
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _examplepy.delete_VirtualClass
    __del__ = lambda self : None;
    def fn(self): return _examplepy.VirtualClass_fn(self)
    def getValue(self): return _examplepy.VirtualClass_getValue(self)
    def setValue(self, *args): return _examplepy.VirtualClass_setValue(self, *args)
    def __disown__(self):
        self.this.disown()
        _examplepy.disown_VirtualClass(self)
        return weakref_proxy(self)
VirtualClass_swigregister = _examplepy.VirtualClass_swigregister
VirtualClass_swigregister(VirtualClass)

class Vec3f(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec3f, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vec3f, name)
    __swig_setmethods__["x"] = _examplepy.Vec3f_x_set
    __swig_getmethods__["x"] = _examplepy.Vec3f_x_get
    if _newclass:x = _swig_property(_examplepy.Vec3f_x_get, _examplepy.Vec3f_x_set)
    __swig_setmethods__["y"] = _examplepy.Vec3f_y_set
    __swig_getmethods__["y"] = _examplepy.Vec3f_y_get
    if _newclass:y = _swig_property(_examplepy.Vec3f_y_get, _examplepy.Vec3f_y_set)
    __swig_setmethods__["z"] = _examplepy.Vec3f_z_set
    __swig_getmethods__["z"] = _examplepy.Vec3f_z_get
    if _newclass:z = _swig_property(_examplepy.Vec3f_z_get, _examplepy.Vec3f_z_set)
    def __init__(self, *args): 
        this = _examplepy.new_Vec3f(*args)
        try: self.this.append(this)
        except: self.this = this
    def assign(self, *args): return _examplepy.Vec3f_assign(self, *args)
    def __eq__(self, *args): return _examplepy.Vec3f___eq__(self, *args)
    def __add__(self, *args): return _examplepy.Vec3f___add__(self, *args)
    def __sub__(self, *args): return _examplepy.Vec3f___sub__(self, *args)
    def __mul__(self, *args): return _examplepy.Vec3f___mul__(self, *args)
    def __div__(self, *args): return _examplepy.Vec3f___div__(self, *args)
    def __iadd__(self, *args): return _examplepy.Vec3f___iadd__(self, *args)
    def __isub__(self, *args): return _examplepy.Vec3f___isub__(self, *args)
    def __imul__(self, *args): return _examplepy.Vec3f___imul__(self, *args)
    def __idiv__(self, *args): return _examplepy.Vec3f___idiv__(self, *args)
    def __repr__(self): return _examplepy.Vec3f___repr__(self)
    def __str__(self): return _examplepy.Vec3f___str__(self)
    __swig_destroy__ = _examplepy.delete_Vec3f
    __del__ = lambda self : None;
Vec3f_swigregister = _examplepy.Vec3f_swigregister
Vec3f_swigregister(Vec3f)

class CppArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CppArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CppArray, name)
    __swig_setmethods__["size"] = _examplepy.CppArray_size_set
    __swig_getmethods__["size"] = _examplepy.CppArray_size_get
    if _newclass:size = _swig_property(_examplepy.CppArray_size_get, _examplepy.CppArray_size_set)
    __swig_setmethods__["mem"] = _examplepy.CppArray_mem_set
    __swig_getmethods__["mem"] = _examplepy.CppArray_mem_get
    if _newclass:mem = _swig_property(_examplepy.CppArray_mem_get, _examplepy.CppArray_mem_set)
    __swig_destroy__ = _examplepy.delete_CppArray
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _examplepy.new_CppArray(*args)
        try: self.this.append(this)
        except: self.this = this
    def assign(self, *args): return _examplepy.CppArray_assign(self, *args)
    def __eq__(self, *args): return _examplepy.CppArray___eq__(self, *args)
    def push_back(self, *args): return _examplepy.CppArray_push_back(self, *args)
    def c_vector(self): return _examplepy.CppArray_c_vector(self)
    def get(self, *args): return _examplepy.CppArray_get(self, *args)
    def __getitem_ref__(self, *args): return _examplepy.CppArray___getitem_ref__(self, *args)
    def set(self, *args): return _examplepy.CppArray_set(self, *args)
    def __repr__(self): return _examplepy.CppArray___repr__(self)
    def __str__(self): return _examplepy.CppArray___str__(self)
CppArray_swigregister = _examplepy.CppArray_swigregister
CppArray_swigregister(CppArray)

class VarAtomicType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VarAtomicType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VarAtomicType, name)
    __repr__ = _swig_repr
    __swig_setmethods__["var_bool"] = _examplepy.VarAtomicType_var_bool_set
    __swig_getmethods__["var_bool"] = _examplepy.VarAtomicType_var_bool_get
    if _newclass:var_bool = _swig_property(_examplepy.VarAtomicType_var_bool_get, _examplepy.VarAtomicType_var_bool_set)
    __swig_setmethods__["var_char"] = _examplepy.VarAtomicType_var_char_set
    __swig_getmethods__["var_char"] = _examplepy.VarAtomicType_var_char_get
    if _newclass:var_char = _swig_property(_examplepy.VarAtomicType_var_char_get, _examplepy.VarAtomicType_var_char_set)
    __swig_setmethods__["var_unsigned_char"] = _examplepy.VarAtomicType_var_unsigned_char_set
    __swig_getmethods__["var_unsigned_char"] = _examplepy.VarAtomicType_var_unsigned_char_get
    if _newclass:var_unsigned_char = _swig_property(_examplepy.VarAtomicType_var_unsigned_char_get, _examplepy.VarAtomicType_var_unsigned_char_set)
    __swig_setmethods__["var_short"] = _examplepy.VarAtomicType_var_short_set
    __swig_getmethods__["var_short"] = _examplepy.VarAtomicType_var_short_get
    if _newclass:var_short = _swig_property(_examplepy.VarAtomicType_var_short_get, _examplepy.VarAtomicType_var_short_set)
    __swig_setmethods__["var_unsigned_short"] = _examplepy.VarAtomicType_var_unsigned_short_set
    __swig_getmethods__["var_unsigned_short"] = _examplepy.VarAtomicType_var_unsigned_short_get
    if _newclass:var_unsigned_short = _swig_property(_examplepy.VarAtomicType_var_unsigned_short_get, _examplepy.VarAtomicType_var_unsigned_short_set)
    __swig_setmethods__["var_int"] = _examplepy.VarAtomicType_var_int_set
    __swig_getmethods__["var_int"] = _examplepy.VarAtomicType_var_int_get
    if _newclass:var_int = _swig_property(_examplepy.VarAtomicType_var_int_get, _examplepy.VarAtomicType_var_int_set)
    __swig_setmethods__["var_unsigned_int"] = _examplepy.VarAtomicType_var_unsigned_int_set
    __swig_getmethods__["var_unsigned_int"] = _examplepy.VarAtomicType_var_unsigned_int_get
    if _newclass:var_unsigned_int = _swig_property(_examplepy.VarAtomicType_var_unsigned_int_get, _examplepy.VarAtomicType_var_unsigned_int_set)
    __swig_setmethods__["var_long"] = _examplepy.VarAtomicType_var_long_set
    __swig_getmethods__["var_long"] = _examplepy.VarAtomicType_var_long_get
    if _newclass:var_long = _swig_property(_examplepy.VarAtomicType_var_long_get, _examplepy.VarAtomicType_var_long_set)
    __swig_setmethods__["var_unsigned_long"] = _examplepy.VarAtomicType_var_unsigned_long_set
    __swig_getmethods__["var_unsigned_long"] = _examplepy.VarAtomicType_var_unsigned_long_get
    if _newclass:var_unsigned_long = _swig_property(_examplepy.VarAtomicType_var_unsigned_long_get, _examplepy.VarAtomicType_var_unsigned_long_set)
    __swig_setmethods__["var_float"] = _examplepy.VarAtomicType_var_float_set
    __swig_getmethods__["var_float"] = _examplepy.VarAtomicType_var_float_get
    if _newclass:var_float = _swig_property(_examplepy.VarAtomicType_var_float_get, _examplepy.VarAtomicType_var_float_set)
    __swig_setmethods__["var_double"] = _examplepy.VarAtomicType_var_double_set
    __swig_getmethods__["var_double"] = _examplepy.VarAtomicType_var_double_get
    if _newclass:var_double = _swig_property(_examplepy.VarAtomicType_var_double_get, _examplepy.VarAtomicType_var_double_set)
    __swig_setmethods__["var_string"] = _examplepy.VarAtomicType_var_string_set
    __swig_getmethods__["var_string"] = _examplepy.VarAtomicType_var_string_get
    if _newclass:var_string = _swig_property(_examplepy.VarAtomicType_var_string_get, _examplepy.VarAtomicType_var_string_set)
    def __init__(self): 
        this = _examplepy.new_VarAtomicType()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _examplepy.delete_VarAtomicType
    __del__ = lambda self : None;
VarAtomicType_swigregister = _examplepy.VarAtomicType_swigregister
VarAtomicType_swigregister(VarAtomicType)

class VarSwigClass(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VarSwigClass, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VarSwigClass, name)
    __repr__ = _swig_repr
    __swig_setmethods__["var"] = _examplepy.VarSwigClass_var_set
    __swig_getmethods__["var"] = _examplepy.VarSwigClass_var_get
    if _newclass:var = _swig_property(_examplepy.VarSwigClass_var_get, _examplepy.VarSwigClass_var_set)
    def __init__(self): 
        this = _examplepy.new_VarSwigClass()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _examplepy.delete_VarSwigClass
    __del__ = lambda self : None;
VarSwigClass_swigregister = _examplepy.VarSwigClass_swigregister
VarSwigClass_swigregister(VarSwigClass)

class VarSmartPointerSwigClass(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VarSmartPointerSwigClass, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VarSmartPointerSwigClass, name)
    __repr__ = _swig_repr
    __swig_setmethods__["var"] = _examplepy.VarSmartPointerSwigClass_var_set
    __swig_getmethods__["var"] = _examplepy.VarSmartPointerSwigClass_var_get
    if _newclass:var = _swig_property(_examplepy.VarSmartPointerSwigClass_var_get, _examplepy.VarSmartPointerSwigClass_var_set)
    def __init__(self): 
        this = _examplepy.new_VarSmartPointerSwigClass()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _examplepy.delete_VarSmartPointerSwigClass
    __del__ = lambda self : None;
VarSmartPointerSwigClass_swigregister = _examplepy.VarSmartPointerSwigClass_swigregister
VarSmartPointerSwigClass_swigregister(VarSmartPointerSwigClass)

class VarPointerSwigClass(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VarPointerSwigClass, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VarPointerSwigClass, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _examplepy.new_VarPointerSwigClass()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _examplepy.delete_VarPointerSwigClass
    __del__ = lambda self : None;
    __swig_setmethods__["var"] = _examplepy.VarPointerSwigClass_var_set
    __swig_getmethods__["var"] = _examplepy.VarPointerSwigClass_var_get
    if _newclass:var = _swig_property(_examplepy.VarPointerSwigClass_var_get, _examplepy.VarPointerSwigClass_var_set)
VarPointerSwigClass_swigregister = _examplepy.VarPointerSwigClass_swigregister
VarPointerSwigClass_swigregister(VarPointerSwigClass)

class VarStdVectorInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VarStdVectorInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VarStdVectorInt, name)
    __repr__ = _swig_repr
    __swig_setmethods__["var"] = _examplepy.VarStdVectorInt_var_set
    __swig_getmethods__["var"] = _examplepy.VarStdVectorInt_var_get
    if _newclass:var = _swig_property(_examplepy.VarStdVectorInt_var_get, _examplepy.VarStdVectorInt_var_set)
    def __init__(self): 
        this = _examplepy.new_VarStdVectorInt()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _examplepy.delete_VarStdVectorInt
    __del__ = lambda self : None;
VarStdVectorInt_swigregister = _examplepy.VarStdVectorInt_swigregister
VarStdVectorInt_swigregister(VarStdVectorInt)

class VarPointerStdVectorInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VarPointerStdVectorInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VarPointerStdVectorInt, name)
    __repr__ = _swig_repr
    __swig_setmethods__["var"] = _examplepy.VarPointerStdVectorInt_var_set
    __swig_getmethods__["var"] = _examplepy.VarPointerStdVectorInt_var_get
    if _newclass:var = _swig_property(_examplepy.VarPointerStdVectorInt_var_get, _examplepy.VarPointerStdVectorInt_var_set)
    def __init__(self): 
        this = _examplepy.new_VarPointerStdVectorInt()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _examplepy.delete_VarPointerStdVectorInt
    __del__ = lambda self : None;
VarPointerStdVectorInt_swigregister = _examplepy.VarPointerStdVectorInt_swigregister
VarPointerStdVectorInt_swigregister(VarPointerStdVectorInt)

class VarStdVectorStdVectorInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VarStdVectorStdVectorInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VarStdVectorStdVectorInt, name)
    __repr__ = _swig_repr
    __swig_setmethods__["var"] = _examplepy.VarStdVectorStdVectorInt_var_set
    __swig_getmethods__["var"] = _examplepy.VarStdVectorStdVectorInt_var_get
    if _newclass:var = _swig_property(_examplepy.VarStdVectorStdVectorInt_var_get, _examplepy.VarStdVectorStdVectorInt_var_set)
    def __init__(self): 
        this = _examplepy.new_VarStdVectorStdVectorInt()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _examplepy.delete_VarStdVectorStdVectorInt
    __del__ = lambda self : None;
VarStdVectorStdVectorInt_swigregister = _examplepy.VarStdVectorStdVectorInt_swigregister
VarStdVectorStdVectorInt_swigregister(VarStdVectorStdVectorInt)

class VarPointerStdVectorStdVectorInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VarPointerStdVectorStdVectorInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VarPointerStdVectorStdVectorInt, name)
    __repr__ = _swig_repr
    __swig_setmethods__["var"] = _examplepy.VarPointerStdVectorStdVectorInt_var_set
    __swig_getmethods__["var"] = _examplepy.VarPointerStdVectorStdVectorInt_var_get
    if _newclass:var = _swig_property(_examplepy.VarPointerStdVectorStdVectorInt_var_get, _examplepy.VarPointerStdVectorStdVectorInt_var_set)
    def __init__(self): 
        this = _examplepy.new_VarPointerStdVectorStdVectorInt()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _examplepy.delete_VarPointerStdVectorStdVectorInt
    __del__ = lambda self : None;
VarPointerStdVectorStdVectorInt_swigregister = _examplepy.VarPointerStdVectorStdVectorInt_swigregister
VarPointerStdVectorStdVectorInt_swigregister(VarPointerStdVectorStdVectorInt)

class VarStdVectorSwigClass(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VarStdVectorSwigClass, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VarStdVectorSwigClass, name)
    __repr__ = _swig_repr
    __swig_setmethods__["var"] = _examplepy.VarStdVectorSwigClass_var_set
    __swig_getmethods__["var"] = _examplepy.VarStdVectorSwigClass_var_get
    if _newclass:var = _swig_property(_examplepy.VarStdVectorSwigClass_var_get, _examplepy.VarStdVectorSwigClass_var_set)
    def __init__(self): 
        this = _examplepy.new_VarStdVectorSwigClass()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _examplepy.delete_VarStdVectorSwigClass
    __del__ = lambda self : None;
VarStdVectorSwigClass_swigregister = _examplepy.VarStdVectorSwigClass_swigregister
VarStdVectorSwigClass_swigregister(VarStdVectorSwigClass)

class VarPointerStdVectorSwigClass(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VarPointerStdVectorSwigClass, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VarPointerStdVectorSwigClass, name)
    __repr__ = _swig_repr
    __swig_setmethods__["var"] = _examplepy.VarPointerStdVectorSwigClass_var_set
    __swig_getmethods__["var"] = _examplepy.VarPointerStdVectorSwigClass_var_get
    if _newclass:var = _swig_property(_examplepy.VarPointerStdVectorSwigClass_var_get, _examplepy.VarPointerStdVectorSwigClass_var_set)
    def __init__(self): 
        this = _examplepy.new_VarPointerStdVectorSwigClass()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _examplepy.delete_VarPointerStdVectorSwigClass
    __del__ = lambda self : None;
VarPointerStdVectorSwigClass_swigregister = _examplepy.VarPointerStdVectorSwigClass_swigregister
VarPointerStdVectorSwigClass_swigregister(VarPointerStdVectorSwigClass)

class VarSmartPointerSwigClass_NoConstructor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VarSmartPointerSwigClass_NoConstructor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VarSmartPointerSwigClass_NoConstructor, name)
    __repr__ = _swig_repr
    __swig_setmethods__["var"] = _examplepy.VarSmartPointerSwigClass_NoConstructor_var_set
    __swig_getmethods__["var"] = _examplepy.VarSmartPointerSwigClass_NoConstructor_var_get
    if _newclass:var = _swig_property(_examplepy.VarSmartPointerSwigClass_NoConstructor_var_get, _examplepy.VarSmartPointerSwigClass_NoConstructor_var_set)
    def __init__(self): 
        this = _examplepy.new_VarSmartPointerSwigClass_NoConstructor()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _examplepy.delete_VarSmartPointerSwigClass_NoConstructor
    __del__ = lambda self : None;
VarSmartPointerSwigClass_NoConstructor_swigregister = _examplepy.VarSmartPointerSwigClass_NoConstructor_swigregister
VarSmartPointerSwigClass_NoConstructor_swigregister(VarSmartPointerSwigClass_NoConstructor)

class VarStdVectorSmartPointerSwigClass(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VarStdVectorSmartPointerSwigClass, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VarStdVectorSmartPointerSwigClass, name)
    __repr__ = _swig_repr
    __swig_setmethods__["var"] = _examplepy.VarStdVectorSmartPointerSwigClass_var_set
    __swig_getmethods__["var"] = _examplepy.VarStdVectorSmartPointerSwigClass_var_get
    if _newclass:var = _swig_property(_examplepy.VarStdVectorSmartPointerSwigClass_var_get, _examplepy.VarStdVectorSmartPointerSwigClass_var_set)
    def __init__(self): 
        this = _examplepy.new_VarStdVectorSmartPointerSwigClass()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _examplepy.delete_VarStdVectorSmartPointerSwigClass
    __del__ = lambda self : None;
VarStdVectorSmartPointerSwigClass_swigregister = _examplepy.VarStdVectorSmartPointerSwigClass_swigregister
VarStdVectorSmartPointerSwigClass_swigregister(VarStdVectorSmartPointerSwigClass)

class VarPointerStdVectorSmartPointerSwigClass(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VarPointerStdVectorSmartPointerSwigClass, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VarPointerStdVectorSmartPointerSwigClass, name)
    __repr__ = _swig_repr
    __swig_setmethods__["var"] = _examplepy.VarPointerStdVectorSmartPointerSwigClass_var_set
    __swig_getmethods__["var"] = _examplepy.VarPointerStdVectorSmartPointerSwigClass_var_get
    if _newclass:var = _swig_property(_examplepy.VarPointerStdVectorSmartPointerSwigClass_var_get, _examplepy.VarPointerStdVectorSmartPointerSwigClass_var_set)
    def __init__(self): 
        this = _examplepy.new_VarPointerStdVectorSmartPointerSwigClass()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _examplepy.delete_VarPointerStdVectorSmartPointerSwigClass
    __del__ = lambda self : None;
VarPointerStdVectorSmartPointerSwigClass_swigregister = _examplepy.VarPointerStdVectorSmartPointerSwigClass_swigregister
VarPointerStdVectorSmartPointerSwigClass_swigregister(VarPointerStdVectorSmartPointerSwigClass)

class VarStdVectorPointerSwigClass(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VarStdVectorPointerSwigClass, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VarStdVectorPointerSwigClass, name)
    __repr__ = _swig_repr
    __swig_setmethods__["var"] = _examplepy.VarStdVectorPointerSwigClass_var_set
    __swig_getmethods__["var"] = _examplepy.VarStdVectorPointerSwigClass_var_get
    if _newclass:var = _swig_property(_examplepy.VarStdVectorPointerSwigClass_var_get, _examplepy.VarStdVectorPointerSwigClass_var_set)
    def __init__(self): 
        this = _examplepy.new_VarStdVectorPointerSwigClass()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _examplepy.delete_VarStdVectorPointerSwigClass
    __del__ = lambda self : None;
VarStdVectorPointerSwigClass_swigregister = _examplepy.VarStdVectorPointerSwigClass_swigregister
VarStdVectorPointerSwigClass_swigregister(VarStdVectorPointerSwigClass)

class VarPointerStdVectorPointerSwigClass(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VarPointerStdVectorPointerSwigClass, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VarPointerStdVectorPointerSwigClass, name)
    __repr__ = _swig_repr
    __swig_setmethods__["var"] = _examplepy.VarPointerStdVectorPointerSwigClass_var_set
    __swig_getmethods__["var"] = _examplepy.VarPointerStdVectorPointerSwigClass_var_get
    if _newclass:var = _swig_property(_examplepy.VarPointerStdVectorPointerSwigClass_var_get, _examplepy.VarPointerStdVectorPointerSwigClass_var_set)
    def __init__(self): 
        this = _examplepy.new_VarPointerStdVectorPointerSwigClass()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _examplepy.delete_VarPointerStdVectorPointerSwigClass
    __del__ = lambda self : None;
VarPointerStdVectorPointerSwigClass_swigregister = _examplepy.VarPointerStdVectorPointerSwigClass_swigregister
VarPointerStdVectorPointerSwigClass_swigregister(VarPointerStdVectorPointerSwigClass)

class InputAtomicType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InputAtomicType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InputAtomicType, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _examplepy.new_InputAtomicType()
        try: self.this.append(this)
        except: self.this = this
    def fn(self, *args): return _examplepy.InputAtomicType_fn(self, *args)
    __swig_destroy__ = _examplepy.delete_InputAtomicType
    __del__ = lambda self : None;
InputAtomicType_swigregister = _examplepy.InputAtomicType_swigregister
InputAtomicType_swigregister(InputAtomicType)

class InputSwigClass(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InputSwigClass, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InputSwigClass, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _examplepy.new_InputSwigClass()
        try: self.this.append(this)
        except: self.this = this
    def fn(self, *args): return _examplepy.InputSwigClass_fn(self, *args)
    __swig_destroy__ = _examplepy.delete_InputSwigClass
    __del__ = lambda self : None;
InputSwigClass_swigregister = _examplepy.InputSwigClass_swigregister
InputSwigClass_swigregister(InputSwigClass)

class InputSmartPointerSwigClass(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InputSmartPointerSwigClass, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InputSmartPointerSwigClass, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _examplepy.new_InputSmartPointerSwigClass()
        try: self.this.append(this)
        except: self.this = this
    def fn(self, *args): return _examplepy.InputSmartPointerSwigClass_fn(self, *args)
    __swig_destroy__ = _examplepy.delete_InputSmartPointerSwigClass
    __del__ = lambda self : None;
InputSmartPointerSwigClass_swigregister = _examplepy.InputSmartPointerSwigClass_swigregister
InputSmartPointerSwigClass_swigregister(InputSmartPointerSwigClass)

class InputReferenceSwigClass(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InputReferenceSwigClass, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InputReferenceSwigClass, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _examplepy.new_InputReferenceSwigClass()
        try: self.this.append(this)
        except: self.this = this
    def fn(self, *args): return _examplepy.InputReferenceSwigClass_fn(self, *args)
    __swig_destroy__ = _examplepy.delete_InputReferenceSwigClass
    __del__ = lambda self : None;
InputReferenceSwigClass_swigregister = _examplepy.InputReferenceSwigClass_swigregister
InputReferenceSwigClass_swigregister(InputReferenceSwigClass)

class InputPointerSwigClass(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InputPointerSwigClass, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InputPointerSwigClass, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _examplepy.new_InputPointerSwigClass()
        try: self.this.append(this)
        except: self.this = this
    def fn(self, *args): return _examplepy.InputPointerSwigClass_fn(self, *args)
    __swig_destroy__ = _examplepy.delete_InputPointerSwigClass
    __del__ = lambda self : None;
InputPointerSwigClass_swigregister = _examplepy.InputPointerSwigClass_swigregister
InputPointerSwigClass_swigregister(InputPointerSwigClass)

class InputStdVectorInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InputStdVectorInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InputStdVectorInt, name)
    __repr__ = _swig_repr
    def fn(self, *args): return _examplepy.InputStdVectorInt_fn(self, *args)
    def __init__(self): 
        this = _examplepy.new_InputStdVectorInt()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _examplepy.delete_InputStdVectorInt
    __del__ = lambda self : None;
InputStdVectorInt_swigregister = _examplepy.InputStdVectorInt_swigregister
InputStdVectorInt_swigregister(InputStdVectorInt)

class InputStdVectorStdVectorInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InputStdVectorStdVectorInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InputStdVectorStdVectorInt, name)
    __repr__ = _swig_repr
    def fn(self, *args): return _examplepy.InputStdVectorStdVectorInt_fn(self, *args)
    def __init__(self): 
        this = _examplepy.new_InputStdVectorStdVectorInt()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _examplepy.delete_InputStdVectorStdVectorInt
    __del__ = lambda self : None;
InputStdVectorStdVectorInt_swigregister = _examplepy.InputStdVectorStdVectorInt_swigregister
InputStdVectorStdVectorInt_swigregister(InputStdVectorStdVectorInt)

class InputStdVectorSwigClass(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InputStdVectorSwigClass, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InputStdVectorSwigClass, name)
    __repr__ = _swig_repr
    def fn(self, *args): return _examplepy.InputStdVectorSwigClass_fn(self, *args)
    def __init__(self): 
        this = _examplepy.new_InputStdVectorSwigClass()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _examplepy.delete_InputStdVectorSwigClass
    __del__ = lambda self : None;
InputStdVectorSwigClass_swigregister = _examplepy.InputStdVectorSwigClass_swigregister
InputStdVectorSwigClass_swigregister(InputStdVectorSwigClass)

class InputStdVectorSmartPointerSwigClass(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InputStdVectorSmartPointerSwigClass, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InputStdVectorSmartPointerSwigClass, name)
    __repr__ = _swig_repr
    def fn(self, *args): return _examplepy.InputStdVectorSmartPointerSwigClass_fn(self, *args)
    def __init__(self): 
        this = _examplepy.new_InputStdVectorSmartPointerSwigClass()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _examplepy.delete_InputStdVectorSmartPointerSwigClass
    __del__ = lambda self : None;
InputStdVectorSmartPointerSwigClass_swigregister = _examplepy.InputStdVectorSmartPointerSwigClass_swigregister
InputStdVectorSmartPointerSwigClass_swigregister(InputStdVectorSmartPointerSwigClass)

class InputStdVectorPointerSwigClass(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InputStdVectorPointerSwigClass, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InputStdVectorPointerSwigClass, name)
    __repr__ = _swig_repr
    def fn(self, *args): return _examplepy.InputStdVectorPointerSwigClass_fn(self, *args)
    def __init__(self): 
        this = _examplepy.new_InputStdVectorPointerSwigClass()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _examplepy.delete_InputStdVectorPointerSwigClass
    __del__ = lambda self : None;
InputStdVectorPointerSwigClass_swigregister = _examplepy.InputStdVectorPointerSwigClass_swigregister
InputStdVectorPointerSwigClass_swigregister(InputStdVectorPointerSwigClass)

class InputPointerStdVectorInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InputPointerStdVectorInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InputPointerStdVectorInt, name)
    __repr__ = _swig_repr
    def fn(self, *args): return _examplepy.InputPointerStdVectorInt_fn(self, *args)
    def __init__(self): 
        this = _examplepy.new_InputPointerStdVectorInt()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _examplepy.delete_InputPointerStdVectorInt
    __del__ = lambda self : None;
InputPointerStdVectorInt_swigregister = _examplepy.InputPointerStdVectorInt_swigregister
InputPointerStdVectorInt_swigregister(InputPointerStdVectorInt)

class InputPointerStdVectorStdVectorInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InputPointerStdVectorStdVectorInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InputPointerStdVectorStdVectorInt, name)
    __repr__ = _swig_repr
    def fn(self, *args): return _examplepy.InputPointerStdVectorStdVectorInt_fn(self, *args)
    def __init__(self): 
        this = _examplepy.new_InputPointerStdVectorStdVectorInt()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _examplepy.delete_InputPointerStdVectorStdVectorInt
    __del__ = lambda self : None;
InputPointerStdVectorStdVectorInt_swigregister = _examplepy.InputPointerStdVectorStdVectorInt_swigregister
InputPointerStdVectorStdVectorInt_swigregister(InputPointerStdVectorStdVectorInt)

class InputPointerStdVectorSwigClass(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InputPointerStdVectorSwigClass, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InputPointerStdVectorSwigClass, name)
    __repr__ = _swig_repr
    def fn(self, *args): return _examplepy.InputPointerStdVectorSwigClass_fn(self, *args)
    def __init__(self): 
        this = _examplepy.new_InputPointerStdVectorSwigClass()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _examplepy.delete_InputPointerStdVectorSwigClass
    __del__ = lambda self : None;
InputPointerStdVectorSwigClass_swigregister = _examplepy.InputPointerStdVectorSwigClass_swigregister
InputPointerStdVectorSwigClass_swigregister(InputPointerStdVectorSwigClass)

class InputPointerStdVectorSmartPointerSwigClass(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InputPointerStdVectorSmartPointerSwigClass, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InputPointerStdVectorSmartPointerSwigClass, name)
    __repr__ = _swig_repr
    def fn(self, *args): return _examplepy.InputPointerStdVectorSmartPointerSwigClass_fn(self, *args)
    def __init__(self): 
        this = _examplepy.new_InputPointerStdVectorSmartPointerSwigClass()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _examplepy.delete_InputPointerStdVectorSmartPointerSwigClass
    __del__ = lambda self : None;
InputPointerStdVectorSmartPointerSwigClass_swigregister = _examplepy.InputPointerStdVectorSmartPointerSwigClass_swigregister
InputPointerStdVectorSmartPointerSwigClass_swigregister(InputPointerStdVectorSmartPointerSwigClass)

class InputPointerStdVectorPointerSwigClass(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InputPointerStdVectorPointerSwigClass, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InputPointerStdVectorPointerSwigClass, name)
    __repr__ = _swig_repr
    def fn(self, *args): return _examplepy.InputPointerStdVectorPointerSwigClass_fn(self, *args)
    def __init__(self): 
        this = _examplepy.new_InputPointerStdVectorPointerSwigClass()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _examplepy.delete_InputPointerStdVectorPointerSwigClass
    __del__ = lambda self : None;
InputPointerStdVectorPointerSwigClass_swigregister = _examplepy.InputPointerStdVectorPointerSwigClass_swigregister
InputPointerStdVectorPointerSwigClass_swigregister(InputPointerStdVectorPointerSwigClass)

class InputReferenceStdVectorInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InputReferenceStdVectorInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InputReferenceStdVectorInt, name)
    __repr__ = _swig_repr
    def fn(self, *args): return _examplepy.InputReferenceStdVectorInt_fn(self, *args)
    def __init__(self): 
        this = _examplepy.new_InputReferenceStdVectorInt()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _examplepy.delete_InputReferenceStdVectorInt
    __del__ = lambda self : None;
InputReferenceStdVectorInt_swigregister = _examplepy.InputReferenceStdVectorInt_swigregister
InputReferenceStdVectorInt_swigregister(InputReferenceStdVectorInt)

class InputReferenceStdVectorStdVectorInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InputReferenceStdVectorStdVectorInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InputReferenceStdVectorStdVectorInt, name)
    __repr__ = _swig_repr
    def fn(self, *args): return _examplepy.InputReferenceStdVectorStdVectorInt_fn(self, *args)
    def __init__(self): 
        this = _examplepy.new_InputReferenceStdVectorStdVectorInt()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _examplepy.delete_InputReferenceStdVectorStdVectorInt
    __del__ = lambda self : None;
InputReferenceStdVectorStdVectorInt_swigregister = _examplepy.InputReferenceStdVectorStdVectorInt_swigregister
InputReferenceStdVectorStdVectorInt_swigregister(InputReferenceStdVectorStdVectorInt)

class InputReferenceStdVectorSwigClass(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InputReferenceStdVectorSwigClass, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InputReferenceStdVectorSwigClass, name)
    __repr__ = _swig_repr
    def fn(self, *args): return _examplepy.InputReferenceStdVectorSwigClass_fn(self, *args)
    def __init__(self): 
        this = _examplepy.new_InputReferenceStdVectorSwigClass()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _examplepy.delete_InputReferenceStdVectorSwigClass
    __del__ = lambda self : None;
InputReferenceStdVectorSwigClass_swigregister = _examplepy.InputReferenceStdVectorSwigClass_swigregister
InputReferenceStdVectorSwigClass_swigregister(InputReferenceStdVectorSwigClass)

class InputReferenceStdVectorSmartPointerSwigClass(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InputReferenceStdVectorSmartPointerSwigClass, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InputReferenceStdVectorSmartPointerSwigClass, name)
    __repr__ = _swig_repr
    def fn(self, *args): return _examplepy.InputReferenceStdVectorSmartPointerSwigClass_fn(self, *args)
    def __init__(self): 
        this = _examplepy.new_InputReferenceStdVectorSmartPointerSwigClass()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _examplepy.delete_InputReferenceStdVectorSmartPointerSwigClass
    __del__ = lambda self : None;
InputReferenceStdVectorSmartPointerSwigClass_swigregister = _examplepy.InputReferenceStdVectorSmartPointerSwigClass_swigregister
InputReferenceStdVectorSmartPointerSwigClass_swigregister(InputReferenceStdVectorSmartPointerSwigClass)

class InputReferenceStdVectorPointerSwigClass(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InputReferenceStdVectorPointerSwigClass, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InputReferenceStdVectorPointerSwigClass, name)
    __repr__ = _swig_repr
    def fn(self, *args): return _examplepy.InputReferenceStdVectorPointerSwigClass_fn(self, *args)
    def __init__(self): 
        this = _examplepy.new_InputReferenceStdVectorPointerSwigClass()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _examplepy.delete_InputReferenceStdVectorPointerSwigClass
    __del__ = lambda self : None;
InputReferenceStdVectorPointerSwigClass_swigregister = _examplepy.InputReferenceStdVectorPointerSwigClass_swigregister
InputReferenceStdVectorPointerSwigClass_swigregister(InputReferenceStdVectorPointerSwigClass)

class ReturnAtomicType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReturnAtomicType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ReturnAtomicType, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _examplepy.new_ReturnAtomicType()
        try: self.this.append(this)
        except: self.this = this
    def fn_bool(self, *args): return _examplepy.ReturnAtomicType_fn_bool(self, *args)
    def fn_char(self, *args): return _examplepy.ReturnAtomicType_fn_char(self, *args)
    def fn_unsigned_char(self, *args): return _examplepy.ReturnAtomicType_fn_unsigned_char(self, *args)
    def fn_short(self, *args): return _examplepy.ReturnAtomicType_fn_short(self, *args)
    def fn_unsigned_short(self, *args): return _examplepy.ReturnAtomicType_fn_unsigned_short(self, *args)
    def fn_int(self, *args): return _examplepy.ReturnAtomicType_fn_int(self, *args)
    def fn_unsigned_int(self, *args): return _examplepy.ReturnAtomicType_fn_unsigned_int(self, *args)
    def fn_long(self, *args): return _examplepy.ReturnAtomicType_fn_long(self, *args)
    def fn_unsigned_long(self, *args): return _examplepy.ReturnAtomicType_fn_unsigned_long(self, *args)
    def fn_float(self, *args): return _examplepy.ReturnAtomicType_fn_float(self, *args)
    def fn_double(self, *args): return _examplepy.ReturnAtomicType_fn_double(self, *args)
    def fn_std_string(self, *args): return _examplepy.ReturnAtomicType_fn_std_string(self, *args)
    __swig_destroy__ = _examplepy.delete_ReturnAtomicType
    __del__ = lambda self : None;
ReturnAtomicType_swigregister = _examplepy.ReturnAtomicType_swigregister
ReturnAtomicType_swigregister(ReturnAtomicType)

class ReturnSwigClass(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReturnSwigClass, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ReturnSwigClass, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _examplepy.new_ReturnSwigClass()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _examplepy.delete_ReturnSwigClass
    __del__ = lambda self : None;
    def get(self): return _examplepy.ReturnSwigClass_get(self)
    def get_var_memid(self): return _examplepy.ReturnSwigClass_get_var_memid(self)
ReturnSwigClass_swigregister = _examplepy.ReturnSwigClass_swigregister
ReturnSwigClass_swigregister(ReturnSwigClass)

class ReturnSmartPointerSwigClass(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReturnSmartPointerSwigClass, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ReturnSmartPointerSwigClass, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _examplepy.new_ReturnSmartPointerSwigClass()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _examplepy.delete_ReturnSmartPointerSwigClass
    __del__ = lambda self : None;
    def get(self): return _examplepy.ReturnSmartPointerSwigClass_get(self)
    def get_var_memid(self): return _examplepy.ReturnSmartPointerSwigClass_get_var_memid(self)
ReturnSmartPointerSwigClass_swigregister = _examplepy.ReturnSmartPointerSwigClass_swigregister
ReturnSmartPointerSwigClass_swigregister(ReturnSmartPointerSwigClass)

class ReturnReferenceSwigClass(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReturnReferenceSwigClass, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ReturnReferenceSwigClass, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _examplepy.new_ReturnReferenceSwigClass()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _examplepy.delete_ReturnReferenceSwigClass
    __del__ = lambda self : None;
    def get(self): return _examplepy.ReturnReferenceSwigClass_get(self)
    def get_var_memid(self): return _examplepy.ReturnReferenceSwigClass_get_var_memid(self)
ReturnReferenceSwigClass_swigregister = _examplepy.ReturnReferenceSwigClass_swigregister
ReturnReferenceSwigClass_swigregister(ReturnReferenceSwigClass)

class ReturnPointerSwigClass(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReturnPointerSwigClass, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ReturnPointerSwigClass, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _examplepy.new_ReturnPointerSwigClass()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _examplepy.delete_ReturnPointerSwigClass
    __del__ = lambda self : None;
    def get(self): return _examplepy.ReturnPointerSwigClass_get(self)
    def get_var_memid(self): return _examplepy.ReturnPointerSwigClass_get_var_memid(self)
ReturnPointerSwigClass_swigregister = _examplepy.ReturnPointerSwigClass_swigregister
ReturnPointerSwigClass_swigregister(ReturnPointerSwigClass)

class ReturnStdVectorInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReturnStdVectorInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ReturnStdVectorInt, name)
    __repr__ = _swig_repr
    def fn(self): return _examplepy.ReturnStdVectorInt_fn(self)
    def __init__(self): 
        this = _examplepy.new_ReturnStdVectorInt()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _examplepy.delete_ReturnStdVectorInt
    __del__ = lambda self : None;
ReturnStdVectorInt_swigregister = _examplepy.ReturnStdVectorInt_swigregister
ReturnStdVectorInt_swigregister(ReturnStdVectorInt)

class ReturnStdVectorStdVectorInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReturnStdVectorStdVectorInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ReturnStdVectorStdVectorInt, name)
    __repr__ = _swig_repr
    def fn(self): return _examplepy.ReturnStdVectorStdVectorInt_fn(self)
    def __init__(self): 
        this = _examplepy.new_ReturnStdVectorStdVectorInt()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _examplepy.delete_ReturnStdVectorStdVectorInt
    __del__ = lambda self : None;
ReturnStdVectorStdVectorInt_swigregister = _examplepy.ReturnStdVectorStdVectorInt_swigregister
ReturnStdVectorStdVectorInt_swigregister(ReturnStdVectorStdVectorInt)

class ReturnStdVectorSwigClass(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReturnStdVectorSwigClass, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ReturnStdVectorSwigClass, name)
    __repr__ = _swig_repr
    def fn(self): return _examplepy.ReturnStdVectorSwigClass_fn(self)
    def __init__(self): 
        this = _examplepy.new_ReturnStdVectorSwigClass()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _examplepy.delete_ReturnStdVectorSwigClass
    __del__ = lambda self : None;
ReturnStdVectorSwigClass_swigregister = _examplepy.ReturnStdVectorSwigClass_swigregister
ReturnStdVectorSwigClass_swigregister(ReturnStdVectorSwigClass)

class ReturnStdVectorSmartPointerSwigClass(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReturnStdVectorSmartPointerSwigClass, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ReturnStdVectorSmartPointerSwigClass, name)
    __repr__ = _swig_repr
    def fn(self): return _examplepy.ReturnStdVectorSmartPointerSwigClass_fn(self)
    def __init__(self): 
        this = _examplepy.new_ReturnStdVectorSmartPointerSwigClass()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _examplepy.delete_ReturnStdVectorSmartPointerSwigClass
    __del__ = lambda self : None;
ReturnStdVectorSmartPointerSwigClass_swigregister = _examplepy.ReturnStdVectorSmartPointerSwigClass_swigregister
ReturnStdVectorSmartPointerSwigClass_swigregister(ReturnStdVectorSmartPointerSwigClass)

class ReturnStdVectorPointerSwigClass(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReturnStdVectorPointerSwigClass, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ReturnStdVectorPointerSwigClass, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _examplepy.new_ReturnStdVectorPointerSwigClass()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _examplepy.delete_ReturnStdVectorPointerSwigClass
    __del__ = lambda self : None;
    def fn(self): return _examplepy.ReturnStdVectorPointerSwigClass_fn(self)
ReturnStdVectorPointerSwigClass_swigregister = _examplepy.ReturnStdVectorPointerSwigClass_swigregister
ReturnStdVectorPointerSwigClass_swigregister(ReturnStdVectorPointerSwigClass)

class ReturnPointerStdVectorInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReturnPointerStdVectorInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ReturnPointerStdVectorInt, name)
    __repr__ = _swig_repr
    def fn(self): return _examplepy.ReturnPointerStdVectorInt_fn(self)
    def __init__(self): 
        this = _examplepy.new_ReturnPointerStdVectorInt()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _examplepy.delete_ReturnPointerStdVectorInt
    __del__ = lambda self : None;
ReturnPointerStdVectorInt_swigregister = _examplepy.ReturnPointerStdVectorInt_swigregister
ReturnPointerStdVectorInt_swigregister(ReturnPointerStdVectorInt)

class ReturnPointerStdVectorStdVectorInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReturnPointerStdVectorStdVectorInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ReturnPointerStdVectorStdVectorInt, name)
    __repr__ = _swig_repr
    def fn(self): return _examplepy.ReturnPointerStdVectorStdVectorInt_fn(self)
    def __init__(self): 
        this = _examplepy.new_ReturnPointerStdVectorStdVectorInt()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _examplepy.delete_ReturnPointerStdVectorStdVectorInt
    __del__ = lambda self : None;
ReturnPointerStdVectorStdVectorInt_swigregister = _examplepy.ReturnPointerStdVectorStdVectorInt_swigregister
ReturnPointerStdVectorStdVectorInt_swigregister(ReturnPointerStdVectorStdVectorInt)

class ReturnPointerStdVectorSwigClass(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReturnPointerStdVectorSwigClass, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ReturnPointerStdVectorSwigClass, name)
    __repr__ = _swig_repr
    def fn(self): return _examplepy.ReturnPointerStdVectorSwigClass_fn(self)
    def __init__(self): 
        this = _examplepy.new_ReturnPointerStdVectorSwigClass()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _examplepy.delete_ReturnPointerStdVectorSwigClass
    __del__ = lambda self : None;
ReturnPointerStdVectorSwigClass_swigregister = _examplepy.ReturnPointerStdVectorSwigClass_swigregister
ReturnPointerStdVectorSwigClass_swigregister(ReturnPointerStdVectorSwigClass)

class ReturnPointerStdVectorSmartPointerSwigClass(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReturnPointerStdVectorSmartPointerSwigClass, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ReturnPointerStdVectorSmartPointerSwigClass, name)
    __repr__ = _swig_repr
    def fn(self): return _examplepy.ReturnPointerStdVectorSmartPointerSwigClass_fn(self)
    def __init__(self): 
        this = _examplepy.new_ReturnPointerStdVectorSmartPointerSwigClass()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _examplepy.delete_ReturnPointerStdVectorSmartPointerSwigClass
    __del__ = lambda self : None;
ReturnPointerStdVectorSmartPointerSwigClass_swigregister = _examplepy.ReturnPointerStdVectorSmartPointerSwigClass_swigregister
ReturnPointerStdVectorSmartPointerSwigClass_swigregister(ReturnPointerStdVectorSmartPointerSwigClass)

class ReturnPointerStdVectorPointerSwigClass(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReturnPointerStdVectorPointerSwigClass, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ReturnPointerStdVectorPointerSwigClass, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _examplepy.new_ReturnPointerStdVectorPointerSwigClass()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _examplepy.delete_ReturnPointerStdVectorPointerSwigClass
    __del__ = lambda self : None;
    def fn(self): return _examplepy.ReturnPointerStdVectorPointerSwigClass_fn(self)
ReturnPointerStdVectorPointerSwigClass_swigregister = _examplepy.ReturnPointerStdVectorPointerSwigClass_swigregister
ReturnPointerStdVectorPointerSwigClass_swigregister(ReturnPointerStdVectorPointerSwigClass)

class ReturnReferenceStdVectorInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReturnReferenceStdVectorInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ReturnReferenceStdVectorInt, name)
    __repr__ = _swig_repr
    def fn(self): return _examplepy.ReturnReferenceStdVectorInt_fn(self)
    def __init__(self): 
        this = _examplepy.new_ReturnReferenceStdVectorInt()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _examplepy.delete_ReturnReferenceStdVectorInt
    __del__ = lambda self : None;
ReturnReferenceStdVectorInt_swigregister = _examplepy.ReturnReferenceStdVectorInt_swigregister
ReturnReferenceStdVectorInt_swigregister(ReturnReferenceStdVectorInt)

class ReturnReferenceStdVectorStdVectorInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReturnReferenceStdVectorStdVectorInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ReturnReferenceStdVectorStdVectorInt, name)
    __repr__ = _swig_repr
    def fn(self): return _examplepy.ReturnReferenceStdVectorStdVectorInt_fn(self)
    def __init__(self): 
        this = _examplepy.new_ReturnReferenceStdVectorStdVectorInt()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _examplepy.delete_ReturnReferenceStdVectorStdVectorInt
    __del__ = lambda self : None;
ReturnReferenceStdVectorStdVectorInt_swigregister = _examplepy.ReturnReferenceStdVectorStdVectorInt_swigregister
ReturnReferenceStdVectorStdVectorInt_swigregister(ReturnReferenceStdVectorStdVectorInt)

class ReturnReferenceStdVectorSwigClass(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReturnReferenceStdVectorSwigClass, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ReturnReferenceStdVectorSwigClass, name)
    __repr__ = _swig_repr
    def fn(self): return _examplepy.ReturnReferenceStdVectorSwigClass_fn(self)
    def __init__(self): 
        this = _examplepy.new_ReturnReferenceStdVectorSwigClass()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _examplepy.delete_ReturnReferenceStdVectorSwigClass
    __del__ = lambda self : None;
ReturnReferenceStdVectorSwigClass_swigregister = _examplepy.ReturnReferenceStdVectorSwigClass_swigregister
ReturnReferenceStdVectorSwigClass_swigregister(ReturnReferenceStdVectorSwigClass)

class ReturnReferenceStdVectorSmartPointerSwigClass(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReturnReferenceStdVectorSmartPointerSwigClass, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ReturnReferenceStdVectorSmartPointerSwigClass, name)
    __repr__ = _swig_repr
    def fn(self): return _examplepy.ReturnReferenceStdVectorSmartPointerSwigClass_fn(self)
    def __init__(self): 
        this = _examplepy.new_ReturnReferenceStdVectorSmartPointerSwigClass()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _examplepy.delete_ReturnReferenceStdVectorSmartPointerSwigClass
    __del__ = lambda self : None;
ReturnReferenceStdVectorSmartPointerSwigClass_swigregister = _examplepy.ReturnReferenceStdVectorSmartPointerSwigClass_swigregister
ReturnReferenceStdVectorSmartPointerSwigClass_swigregister(ReturnReferenceStdVectorSmartPointerSwigClass)

class ReturnReferenceStdVectorPointerSwigClass(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReturnReferenceStdVectorPointerSwigClass, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ReturnReferenceStdVectorPointerSwigClass, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _examplepy.new_ReturnReferenceStdVectorPointerSwigClass()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _examplepy.delete_ReturnReferenceStdVectorPointerSwigClass
    __del__ = lambda self : None;
    def fn(self): return _examplepy.ReturnReferenceStdVectorPointerSwigClass_fn(self)
ReturnReferenceStdVectorPointerSwigClass_swigregister = _examplepy.ReturnReferenceStdVectorPointerSwigClass_swigregister
ReturnReferenceStdVectorPointerSwigClass_swigregister(ReturnReferenceStdVectorPointerSwigClass)



