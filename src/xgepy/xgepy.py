# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_xgepy', [dirname(__file__)])
        except ImportError:
            import _xgepy
            return _xgepy
        if fp is not None:
            try:
                _mod = imp.load_module('_xgepy', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _xgepy = swig_import_helper()
    del swig_import_helper
else:
    import _xgepy
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _xgepy.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _xgepy.SwigPyIterator_value(self)
    def incr(self, n=1): return _xgepy.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _xgepy.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _xgepy.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _xgepy.SwigPyIterator_equal(self, *args)
    def copy(self): return _xgepy.SwigPyIterator_copy(self)
    def next(self): return _xgepy.SwigPyIterator_next(self)
    def __next__(self): return _xgepy.SwigPyIterator___next__(self)
    def previous(self): return _xgepy.SwigPyIterator_previous(self)
    def advance(self, *args): return _xgepy.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _xgepy.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _xgepy.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _xgepy.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _xgepy.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _xgepy.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _xgepy.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _xgepy.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _xgepy.SHARED_PTR_DISOWN
class StdVectorUnsignedChar(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdVectorUnsignedChar, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdVectorUnsignedChar, name)
    __repr__ = _swig_repr
    def iterator(self): return _xgepy.StdVectorUnsignedChar_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _xgepy.StdVectorUnsignedChar___nonzero__(self)
    def __bool__(self): return _xgepy.StdVectorUnsignedChar___bool__(self)
    def __len__(self): return _xgepy.StdVectorUnsignedChar___len__(self)
    def pop(self): return _xgepy.StdVectorUnsignedChar_pop(self)
    def __getslice__(self, *args): return _xgepy.StdVectorUnsignedChar___getslice__(self, *args)
    def __setslice__(self, *args): return _xgepy.StdVectorUnsignedChar___setslice__(self, *args)
    def __delslice__(self, *args): return _xgepy.StdVectorUnsignedChar___delslice__(self, *args)
    def __delitem__(self, *args): return _xgepy.StdVectorUnsignedChar___delitem__(self, *args)
    def __getitem__(self, *args): return _xgepy.StdVectorUnsignedChar___getitem__(self, *args)
    def __setitem__(self, *args): return _xgepy.StdVectorUnsignedChar___setitem__(self, *args)
    def append(self, *args): return _xgepy.StdVectorUnsignedChar_append(self, *args)
    def empty(self): return _xgepy.StdVectorUnsignedChar_empty(self)
    def size(self): return _xgepy.StdVectorUnsignedChar_size(self)
    def clear(self): return _xgepy.StdVectorUnsignedChar_clear(self)
    def swap(self, *args): return _xgepy.StdVectorUnsignedChar_swap(self, *args)
    def get_allocator(self): return _xgepy.StdVectorUnsignedChar_get_allocator(self)
    def begin(self): return _xgepy.StdVectorUnsignedChar_begin(self)
    def end(self): return _xgepy.StdVectorUnsignedChar_end(self)
    def rbegin(self): return _xgepy.StdVectorUnsignedChar_rbegin(self)
    def rend(self): return _xgepy.StdVectorUnsignedChar_rend(self)
    def pop_back(self): return _xgepy.StdVectorUnsignedChar_pop_back(self)
    def erase(self, *args): return _xgepy.StdVectorUnsignedChar_erase(self, *args)
    def __init__(self, *args): 
        this = _xgepy.new_StdVectorUnsignedChar(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _xgepy.StdVectorUnsignedChar_push_back(self, *args)
    def front(self): return _xgepy.StdVectorUnsignedChar_front(self)
    def back(self): return _xgepy.StdVectorUnsignedChar_back(self)
    def assign(self, *args): return _xgepy.StdVectorUnsignedChar_assign(self, *args)
    def resize(self, *args): return _xgepy.StdVectorUnsignedChar_resize(self, *args)
    def insert(self, *args): return _xgepy.StdVectorUnsignedChar_insert(self, *args)
    def reserve(self, *args): return _xgepy.StdVectorUnsignedChar_reserve(self, *args)
    def capacity(self): return _xgepy.StdVectorUnsignedChar_capacity(self)
    __swig_destroy__ = _xgepy.delete_StdVectorUnsignedChar
    __del__ = lambda self : None;
StdVectorUnsignedChar_swigregister = _xgepy.StdVectorUnsignedChar_swigregister
StdVectorUnsignedChar_swigregister(StdVectorUnsignedChar)

class StdVectorInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdVectorInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdVectorInt, name)
    __repr__ = _swig_repr
    def iterator(self): return _xgepy.StdVectorInt_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _xgepy.StdVectorInt___nonzero__(self)
    def __bool__(self): return _xgepy.StdVectorInt___bool__(self)
    def __len__(self): return _xgepy.StdVectorInt___len__(self)
    def pop(self): return _xgepy.StdVectorInt_pop(self)
    def __getslice__(self, *args): return _xgepy.StdVectorInt___getslice__(self, *args)
    def __setslice__(self, *args): return _xgepy.StdVectorInt___setslice__(self, *args)
    def __delslice__(self, *args): return _xgepy.StdVectorInt___delslice__(self, *args)
    def __delitem__(self, *args): return _xgepy.StdVectorInt___delitem__(self, *args)
    def __getitem__(self, *args): return _xgepy.StdVectorInt___getitem__(self, *args)
    def __setitem__(self, *args): return _xgepy.StdVectorInt___setitem__(self, *args)
    def append(self, *args): return _xgepy.StdVectorInt_append(self, *args)
    def empty(self): return _xgepy.StdVectorInt_empty(self)
    def size(self): return _xgepy.StdVectorInt_size(self)
    def clear(self): return _xgepy.StdVectorInt_clear(self)
    def swap(self, *args): return _xgepy.StdVectorInt_swap(self, *args)
    def get_allocator(self): return _xgepy.StdVectorInt_get_allocator(self)
    def begin(self): return _xgepy.StdVectorInt_begin(self)
    def end(self): return _xgepy.StdVectorInt_end(self)
    def rbegin(self): return _xgepy.StdVectorInt_rbegin(self)
    def rend(self): return _xgepy.StdVectorInt_rend(self)
    def pop_back(self): return _xgepy.StdVectorInt_pop_back(self)
    def erase(self, *args): return _xgepy.StdVectorInt_erase(self, *args)
    def __init__(self, *args): 
        this = _xgepy.new_StdVectorInt(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _xgepy.StdVectorInt_push_back(self, *args)
    def front(self): return _xgepy.StdVectorInt_front(self)
    def back(self): return _xgepy.StdVectorInt_back(self)
    def assign(self, *args): return _xgepy.StdVectorInt_assign(self, *args)
    def resize(self, *args): return _xgepy.StdVectorInt_resize(self, *args)
    def insert(self, *args): return _xgepy.StdVectorInt_insert(self, *args)
    def reserve(self, *args): return _xgepy.StdVectorInt_reserve(self, *args)
    def capacity(self): return _xgepy.StdVectorInt_capacity(self)
    __swig_destroy__ = _xgepy.delete_StdVectorInt
    __del__ = lambda self : None;
StdVectorInt_swigregister = _xgepy.StdVectorInt_swigregister
StdVectorInt_swigregister(StdVectorInt)

class StdVectorStdVectorInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdVectorStdVectorInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdVectorStdVectorInt, name)
    __repr__ = _swig_repr
    def iterator(self): return _xgepy.StdVectorStdVectorInt_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _xgepy.StdVectorStdVectorInt___nonzero__(self)
    def __bool__(self): return _xgepy.StdVectorStdVectorInt___bool__(self)
    def __len__(self): return _xgepy.StdVectorStdVectorInt___len__(self)
    def pop(self): return _xgepy.StdVectorStdVectorInt_pop(self)
    def __getslice__(self, *args): return _xgepy.StdVectorStdVectorInt___getslice__(self, *args)
    def __setslice__(self, *args): return _xgepy.StdVectorStdVectorInt___setslice__(self, *args)
    def __delslice__(self, *args): return _xgepy.StdVectorStdVectorInt___delslice__(self, *args)
    def __delitem__(self, *args): return _xgepy.StdVectorStdVectorInt___delitem__(self, *args)
    def __getitem__(self, *args): return _xgepy.StdVectorStdVectorInt___getitem__(self, *args)
    def __setitem__(self, *args): return _xgepy.StdVectorStdVectorInt___setitem__(self, *args)
    def append(self, *args): return _xgepy.StdVectorStdVectorInt_append(self, *args)
    def empty(self): return _xgepy.StdVectorStdVectorInt_empty(self)
    def size(self): return _xgepy.StdVectorStdVectorInt_size(self)
    def clear(self): return _xgepy.StdVectorStdVectorInt_clear(self)
    def swap(self, *args): return _xgepy.StdVectorStdVectorInt_swap(self, *args)
    def get_allocator(self): return _xgepy.StdVectorStdVectorInt_get_allocator(self)
    def begin(self): return _xgepy.StdVectorStdVectorInt_begin(self)
    def end(self): return _xgepy.StdVectorStdVectorInt_end(self)
    def rbegin(self): return _xgepy.StdVectorStdVectorInt_rbegin(self)
    def rend(self): return _xgepy.StdVectorStdVectorInt_rend(self)
    def pop_back(self): return _xgepy.StdVectorStdVectorInt_pop_back(self)
    def erase(self, *args): return _xgepy.StdVectorStdVectorInt_erase(self, *args)
    def __init__(self, *args): 
        this = _xgepy.new_StdVectorStdVectorInt(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _xgepy.StdVectorStdVectorInt_push_back(self, *args)
    def front(self): return _xgepy.StdVectorStdVectorInt_front(self)
    def back(self): return _xgepy.StdVectorStdVectorInt_back(self)
    def assign(self, *args): return _xgepy.StdVectorStdVectorInt_assign(self, *args)
    def resize(self, *args): return _xgepy.StdVectorStdVectorInt_resize(self, *args)
    def insert(self, *args): return _xgepy.StdVectorStdVectorInt_insert(self, *args)
    def reserve(self, *args): return _xgepy.StdVectorStdVectorInt_reserve(self, *args)
    def capacity(self): return _xgepy.StdVectorStdVectorInt_capacity(self)
    __swig_destroy__ = _xgepy.delete_StdVectorStdVectorInt
    __del__ = lambda self : None;
StdVectorStdVectorInt_swigregister = _xgepy.StdVectorStdVectorInt_swigregister
StdVectorStdVectorInt_swigregister(StdVectorStdVectorInt)

class StdVectorFloat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdVectorFloat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdVectorFloat, name)
    __repr__ = _swig_repr
    def iterator(self): return _xgepy.StdVectorFloat_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _xgepy.StdVectorFloat___nonzero__(self)
    def __bool__(self): return _xgepy.StdVectorFloat___bool__(self)
    def __len__(self): return _xgepy.StdVectorFloat___len__(self)
    def pop(self): return _xgepy.StdVectorFloat_pop(self)
    def __getslice__(self, *args): return _xgepy.StdVectorFloat___getslice__(self, *args)
    def __setslice__(self, *args): return _xgepy.StdVectorFloat___setslice__(self, *args)
    def __delslice__(self, *args): return _xgepy.StdVectorFloat___delslice__(self, *args)
    def __delitem__(self, *args): return _xgepy.StdVectorFloat___delitem__(self, *args)
    def __getitem__(self, *args): return _xgepy.StdVectorFloat___getitem__(self, *args)
    def __setitem__(self, *args): return _xgepy.StdVectorFloat___setitem__(self, *args)
    def append(self, *args): return _xgepy.StdVectorFloat_append(self, *args)
    def empty(self): return _xgepy.StdVectorFloat_empty(self)
    def size(self): return _xgepy.StdVectorFloat_size(self)
    def clear(self): return _xgepy.StdVectorFloat_clear(self)
    def swap(self, *args): return _xgepy.StdVectorFloat_swap(self, *args)
    def get_allocator(self): return _xgepy.StdVectorFloat_get_allocator(self)
    def begin(self): return _xgepy.StdVectorFloat_begin(self)
    def end(self): return _xgepy.StdVectorFloat_end(self)
    def rbegin(self): return _xgepy.StdVectorFloat_rbegin(self)
    def rend(self): return _xgepy.StdVectorFloat_rend(self)
    def pop_back(self): return _xgepy.StdVectorFloat_pop_back(self)
    def erase(self, *args): return _xgepy.StdVectorFloat_erase(self, *args)
    def __init__(self, *args): 
        this = _xgepy.new_StdVectorFloat(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _xgepy.StdVectorFloat_push_back(self, *args)
    def front(self): return _xgepy.StdVectorFloat_front(self)
    def back(self): return _xgepy.StdVectorFloat_back(self)
    def assign(self, *args): return _xgepy.StdVectorFloat_assign(self, *args)
    def resize(self, *args): return _xgepy.StdVectorFloat_resize(self, *args)
    def insert(self, *args): return _xgepy.StdVectorFloat_insert(self, *args)
    def reserve(self, *args): return _xgepy.StdVectorFloat_reserve(self, *args)
    def capacity(self): return _xgepy.StdVectorFloat_capacity(self)
    __swig_destroy__ = _xgepy.delete_StdVectorFloat
    __del__ = lambda self : None;
StdVectorFloat_swigregister = _xgepy.StdVectorFloat_swigregister
StdVectorFloat_swigregister(StdVectorFloat)

class StdVectorString(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdVectorString, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdVectorString, name)
    __repr__ = _swig_repr
    def iterator(self): return _xgepy.StdVectorString_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _xgepy.StdVectorString___nonzero__(self)
    def __bool__(self): return _xgepy.StdVectorString___bool__(self)
    def __len__(self): return _xgepy.StdVectorString___len__(self)
    def pop(self): return _xgepy.StdVectorString_pop(self)
    def __getslice__(self, *args): return _xgepy.StdVectorString___getslice__(self, *args)
    def __setslice__(self, *args): return _xgepy.StdVectorString___setslice__(self, *args)
    def __delslice__(self, *args): return _xgepy.StdVectorString___delslice__(self, *args)
    def __delitem__(self, *args): return _xgepy.StdVectorString___delitem__(self, *args)
    def __getitem__(self, *args): return _xgepy.StdVectorString___getitem__(self, *args)
    def __setitem__(self, *args): return _xgepy.StdVectorString___setitem__(self, *args)
    def append(self, *args): return _xgepy.StdVectorString_append(self, *args)
    def empty(self): return _xgepy.StdVectorString_empty(self)
    def size(self): return _xgepy.StdVectorString_size(self)
    def clear(self): return _xgepy.StdVectorString_clear(self)
    def swap(self, *args): return _xgepy.StdVectorString_swap(self, *args)
    def get_allocator(self): return _xgepy.StdVectorString_get_allocator(self)
    def begin(self): return _xgepy.StdVectorString_begin(self)
    def end(self): return _xgepy.StdVectorString_end(self)
    def rbegin(self): return _xgepy.StdVectorString_rbegin(self)
    def rend(self): return _xgepy.StdVectorString_rend(self)
    def pop_back(self): return _xgepy.StdVectorString_pop_back(self)
    def erase(self, *args): return _xgepy.StdVectorString_erase(self, *args)
    def __init__(self, *args): 
        this = _xgepy.new_StdVectorString(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _xgepy.StdVectorString_push_back(self, *args)
    def front(self): return _xgepy.StdVectorString_front(self)
    def back(self): return _xgepy.StdVectorString_back(self)
    def assign(self, *args): return _xgepy.StdVectorString_assign(self, *args)
    def resize(self, *args): return _xgepy.StdVectorString_resize(self, *args)
    def insert(self, *args): return _xgepy.StdVectorString_insert(self, *args)
    def reserve(self, *args): return _xgepy.StdVectorString_reserve(self, *args)
    def capacity(self): return _xgepy.StdVectorString_capacity(self)
    __swig_destroy__ = _xgepy.delete_StdVectorString
    __del__ = lambda self : None;
StdVectorString_swigregister = _xgepy.StdVectorString_swigregister
StdVectorString_swigregister(StdVectorString)

class StdVectorVec3f(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdVectorVec3f, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdVectorVec3f, name)
    __repr__ = _swig_repr
    def iterator(self): return _xgepy.StdVectorVec3f_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _xgepy.StdVectorVec3f___nonzero__(self)
    def __bool__(self): return _xgepy.StdVectorVec3f___bool__(self)
    def __len__(self): return _xgepy.StdVectorVec3f___len__(self)
    def pop(self): return _xgepy.StdVectorVec3f_pop(self)
    def __getslice__(self, *args): return _xgepy.StdVectorVec3f___getslice__(self, *args)
    def __setslice__(self, *args): return _xgepy.StdVectorVec3f___setslice__(self, *args)
    def __delslice__(self, *args): return _xgepy.StdVectorVec3f___delslice__(self, *args)
    def __delitem__(self, *args): return _xgepy.StdVectorVec3f___delitem__(self, *args)
    def __getitem__(self, *args): return _xgepy.StdVectorVec3f___getitem__(self, *args)
    def __setitem__(self, *args): return _xgepy.StdVectorVec3f___setitem__(self, *args)
    def append(self, *args): return _xgepy.StdVectorVec3f_append(self, *args)
    def empty(self): return _xgepy.StdVectorVec3f_empty(self)
    def size(self): return _xgepy.StdVectorVec3f_size(self)
    def clear(self): return _xgepy.StdVectorVec3f_clear(self)
    def swap(self, *args): return _xgepy.StdVectorVec3f_swap(self, *args)
    def get_allocator(self): return _xgepy.StdVectorVec3f_get_allocator(self)
    def begin(self): return _xgepy.StdVectorVec3f_begin(self)
    def end(self): return _xgepy.StdVectorVec3f_end(self)
    def rbegin(self): return _xgepy.StdVectorVec3f_rbegin(self)
    def rend(self): return _xgepy.StdVectorVec3f_rend(self)
    def pop_back(self): return _xgepy.StdVectorVec3f_pop_back(self)
    def erase(self, *args): return _xgepy.StdVectorVec3f_erase(self, *args)
    def __init__(self, *args): 
        this = _xgepy.new_StdVectorVec3f(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _xgepy.StdVectorVec3f_push_back(self, *args)
    def front(self): return _xgepy.StdVectorVec3f_front(self)
    def back(self): return _xgepy.StdVectorVec3f_back(self)
    def assign(self, *args): return _xgepy.StdVectorVec3f_assign(self, *args)
    def resize(self, *args): return _xgepy.StdVectorVec3f_resize(self, *args)
    def insert(self, *args): return _xgepy.StdVectorVec3f_insert(self, *args)
    def reserve(self, *args): return _xgepy.StdVectorVec3f_reserve(self, *args)
    def capacity(self): return _xgepy.StdVectorVec3f_capacity(self)
    __swig_destroy__ = _xgepy.delete_StdVectorVec3f
    __del__ = lambda self : None;
StdVectorVec3f_swigregister = _xgepy.StdVectorVec3f_swigregister
StdVectorVec3f_swigregister(StdVectorVec3f)

class StdVectorSmartPointerHpc(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdVectorSmartPointerHpc, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdVectorSmartPointerHpc, name)
    __repr__ = _swig_repr
    def iterator(self): return _xgepy.StdVectorSmartPointerHpc_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _xgepy.StdVectorSmartPointerHpc___nonzero__(self)
    def __bool__(self): return _xgepy.StdVectorSmartPointerHpc___bool__(self)
    def __len__(self): return _xgepy.StdVectorSmartPointerHpc___len__(self)
    def pop(self): return _xgepy.StdVectorSmartPointerHpc_pop(self)
    def __getslice__(self, *args): return _xgepy.StdVectorSmartPointerHpc___getslice__(self, *args)
    def __setslice__(self, *args): return _xgepy.StdVectorSmartPointerHpc___setslice__(self, *args)
    def __delslice__(self, *args): return _xgepy.StdVectorSmartPointerHpc___delslice__(self, *args)
    def __delitem__(self, *args): return _xgepy.StdVectorSmartPointerHpc___delitem__(self, *args)
    def __getitem__(self, *args): return _xgepy.StdVectorSmartPointerHpc___getitem__(self, *args)
    def __setitem__(self, *args): return _xgepy.StdVectorSmartPointerHpc___setitem__(self, *args)
    def append(self, *args): return _xgepy.StdVectorSmartPointerHpc_append(self, *args)
    def empty(self): return _xgepy.StdVectorSmartPointerHpc_empty(self)
    def size(self): return _xgepy.StdVectorSmartPointerHpc_size(self)
    def clear(self): return _xgepy.StdVectorSmartPointerHpc_clear(self)
    def swap(self, *args): return _xgepy.StdVectorSmartPointerHpc_swap(self, *args)
    def get_allocator(self): return _xgepy.StdVectorSmartPointerHpc_get_allocator(self)
    def begin(self): return _xgepy.StdVectorSmartPointerHpc_begin(self)
    def end(self): return _xgepy.StdVectorSmartPointerHpc_end(self)
    def rbegin(self): return _xgepy.StdVectorSmartPointerHpc_rbegin(self)
    def rend(self): return _xgepy.StdVectorSmartPointerHpc_rend(self)
    def pop_back(self): return _xgepy.StdVectorSmartPointerHpc_pop_back(self)
    def erase(self, *args): return _xgepy.StdVectorSmartPointerHpc_erase(self, *args)
    def __init__(self, *args): 
        this = _xgepy.new_StdVectorSmartPointerHpc(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _xgepy.StdVectorSmartPointerHpc_push_back(self, *args)
    def front(self): return _xgepy.StdVectorSmartPointerHpc_front(self)
    def back(self): return _xgepy.StdVectorSmartPointerHpc_back(self)
    def assign(self, *args): return _xgepy.StdVectorSmartPointerHpc_assign(self, *args)
    def resize(self, *args): return _xgepy.StdVectorSmartPointerHpc_resize(self, *args)
    def insert(self, *args): return _xgepy.StdVectorSmartPointerHpc_insert(self, *args)
    def reserve(self, *args): return _xgepy.StdVectorSmartPointerHpc_reserve(self, *args)
    def capacity(self): return _xgepy.StdVectorSmartPointerHpc_capacity(self)
    __swig_destroy__ = _xgepy.delete_StdVectorSmartPointerHpc
    __del__ = lambda self : None;
StdVectorSmartPointerHpc_swigregister = _xgepy.StdVectorSmartPointerHpc_swigregister
StdVectorSmartPointerHpc_swigregister(StdVectorSmartPointerHpc)

class StdVectorSmartPointerBatch(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdVectorSmartPointerBatch, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdVectorSmartPointerBatch, name)
    __repr__ = _swig_repr
    def iterator(self): return _xgepy.StdVectorSmartPointerBatch_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _xgepy.StdVectorSmartPointerBatch___nonzero__(self)
    def __bool__(self): return _xgepy.StdVectorSmartPointerBatch___bool__(self)
    def __len__(self): return _xgepy.StdVectorSmartPointerBatch___len__(self)
    def pop(self): return _xgepy.StdVectorSmartPointerBatch_pop(self)
    def __getslice__(self, *args): return _xgepy.StdVectorSmartPointerBatch___getslice__(self, *args)
    def __setslice__(self, *args): return _xgepy.StdVectorSmartPointerBatch___setslice__(self, *args)
    def __delslice__(self, *args): return _xgepy.StdVectorSmartPointerBatch___delslice__(self, *args)
    def __delitem__(self, *args): return _xgepy.StdVectorSmartPointerBatch___delitem__(self, *args)
    def __getitem__(self, *args): return _xgepy.StdVectorSmartPointerBatch___getitem__(self, *args)
    def __setitem__(self, *args): return _xgepy.StdVectorSmartPointerBatch___setitem__(self, *args)
    def append(self, *args): return _xgepy.StdVectorSmartPointerBatch_append(self, *args)
    def empty(self): return _xgepy.StdVectorSmartPointerBatch_empty(self)
    def size(self): return _xgepy.StdVectorSmartPointerBatch_size(self)
    def clear(self): return _xgepy.StdVectorSmartPointerBatch_clear(self)
    def swap(self, *args): return _xgepy.StdVectorSmartPointerBatch_swap(self, *args)
    def get_allocator(self): return _xgepy.StdVectorSmartPointerBatch_get_allocator(self)
    def begin(self): return _xgepy.StdVectorSmartPointerBatch_begin(self)
    def end(self): return _xgepy.StdVectorSmartPointerBatch_end(self)
    def rbegin(self): return _xgepy.StdVectorSmartPointerBatch_rbegin(self)
    def rend(self): return _xgepy.StdVectorSmartPointerBatch_rend(self)
    def pop_back(self): return _xgepy.StdVectorSmartPointerBatch_pop_back(self)
    def erase(self, *args): return _xgepy.StdVectorSmartPointerBatch_erase(self, *args)
    def __init__(self, *args): 
        this = _xgepy.new_StdVectorSmartPointerBatch(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _xgepy.StdVectorSmartPointerBatch_push_back(self, *args)
    def front(self): return _xgepy.StdVectorSmartPointerBatch_front(self)
    def back(self): return _xgepy.StdVectorSmartPointerBatch_back(self)
    def assign(self, *args): return _xgepy.StdVectorSmartPointerBatch_assign(self, *args)
    def resize(self, *args): return _xgepy.StdVectorSmartPointerBatch_resize(self, *args)
    def insert(self, *args): return _xgepy.StdVectorSmartPointerBatch_insert(self, *args)
    def reserve(self, *args): return _xgepy.StdVectorSmartPointerBatch_reserve(self, *args)
    def capacity(self): return _xgepy.StdVectorSmartPointerBatch_capacity(self)
    __swig_destroy__ = _xgepy.delete_StdVectorSmartPointerBatch
    __del__ = lambda self : None;
StdVectorSmartPointerBatch_swigregister = _xgepy.StdVectorSmartPointerBatch_swigregister
StdVectorSmartPointerBatch_swigregister(StdVectorSmartPointerBatch)

class StdVectorSmartPointerTexture(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdVectorSmartPointerTexture, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdVectorSmartPointerTexture, name)
    __repr__ = _swig_repr
    def iterator(self): return _xgepy.StdVectorSmartPointerTexture_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _xgepy.StdVectorSmartPointerTexture___nonzero__(self)
    def __bool__(self): return _xgepy.StdVectorSmartPointerTexture___bool__(self)
    def __len__(self): return _xgepy.StdVectorSmartPointerTexture___len__(self)
    def pop(self): return _xgepy.StdVectorSmartPointerTexture_pop(self)
    def __getslice__(self, *args): return _xgepy.StdVectorSmartPointerTexture___getslice__(self, *args)
    def __setslice__(self, *args): return _xgepy.StdVectorSmartPointerTexture___setslice__(self, *args)
    def __delslice__(self, *args): return _xgepy.StdVectorSmartPointerTexture___delslice__(self, *args)
    def __delitem__(self, *args): return _xgepy.StdVectorSmartPointerTexture___delitem__(self, *args)
    def __getitem__(self, *args): return _xgepy.StdVectorSmartPointerTexture___getitem__(self, *args)
    def __setitem__(self, *args): return _xgepy.StdVectorSmartPointerTexture___setitem__(self, *args)
    def append(self, *args): return _xgepy.StdVectorSmartPointerTexture_append(self, *args)
    def empty(self): return _xgepy.StdVectorSmartPointerTexture_empty(self)
    def size(self): return _xgepy.StdVectorSmartPointerTexture_size(self)
    def clear(self): return _xgepy.StdVectorSmartPointerTexture_clear(self)
    def swap(self, *args): return _xgepy.StdVectorSmartPointerTexture_swap(self, *args)
    def get_allocator(self): return _xgepy.StdVectorSmartPointerTexture_get_allocator(self)
    def begin(self): return _xgepy.StdVectorSmartPointerTexture_begin(self)
    def end(self): return _xgepy.StdVectorSmartPointerTexture_end(self)
    def rbegin(self): return _xgepy.StdVectorSmartPointerTexture_rbegin(self)
    def rend(self): return _xgepy.StdVectorSmartPointerTexture_rend(self)
    def pop_back(self): return _xgepy.StdVectorSmartPointerTexture_pop_back(self)
    def erase(self, *args): return _xgepy.StdVectorSmartPointerTexture_erase(self, *args)
    def __init__(self, *args): 
        this = _xgepy.new_StdVectorSmartPointerTexture(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _xgepy.StdVectorSmartPointerTexture_push_back(self, *args)
    def front(self): return _xgepy.StdVectorSmartPointerTexture_front(self)
    def back(self): return _xgepy.StdVectorSmartPointerTexture_back(self)
    def assign(self, *args): return _xgepy.StdVectorSmartPointerTexture_assign(self, *args)
    def resize(self, *args): return _xgepy.StdVectorSmartPointerTexture_resize(self, *args)
    def insert(self, *args): return _xgepy.StdVectorSmartPointerTexture_insert(self, *args)
    def reserve(self, *args): return _xgepy.StdVectorSmartPointerTexture_reserve(self, *args)
    def capacity(self): return _xgepy.StdVectorSmartPointerTexture_capacity(self)
    __swig_destroy__ = _xgepy.delete_StdVectorSmartPointerTexture
    __del__ = lambda self : None;
StdVectorSmartPointerTexture_swigregister = _xgepy.StdVectorSmartPointerTexture_swigregister
StdVectorSmartPointerTexture_swigregister(StdVectorSmartPointerTexture)

HERE = _xgepy.HERE
class XgeModule(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XgeModule, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XgeModule, name)
    __repr__ = _swig_repr
    __swig_getmethods__["init"] = lambda x: _xgepy.XgeModule_init
    if _newclass:init = staticmethod(_xgepy.XgeModule_init)
    __swig_getmethods__["shutdown"] = lambda x: _xgepy.XgeModule_shutdown
    if _newclass:shutdown = staticmethod(_xgepy.XgeModule_shutdown)
    def __init__(self): 
        this = _xgepy.new_XgeModule()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _xgepy.delete_XgeModule
    __del__ = lambda self : None;
XgeModule_swigregister = _xgepy.XgeModule_swigregister
XgeModule_swigregister(XgeModule)

def XgeModule_init():
  return _xgepy.XgeModule_init()
XgeModule_init = _xgepy.XgeModule_init

def XgeModule_shutdown():
  return _xgepy.XgeModule_shutdown()
XgeModule_shutdown = _xgepy.XgeModule_shutdown

SPIN_LOCK_DEFAULT_MAX_DELTA_TIME = _xgepy.SPIN_LOCK_DEFAULT_MAX_DELTA_TIME
MEMPOOL_TABLE_SIZE = _xgepy.MEMPOOL_TABLE_SIZE
GRAPH_MAX_GEOMETRIC_DIMENSION = _xgepy.GRAPH_MAX_GEOMETRIC_DIMENSION
GRAPH_MAX_CELLS_PER_LEVEL = _xgepy.GRAPH_MAX_CELLS_PER_LEVEL
PLASM_MAX_NUM_SPLIT = _xgepy.PLASM_MAX_NUM_SPLIT
DEFAULT_FOV = _xgepy.DEFAULT_FOV
DEFAULT_FPS = _xgepy.DEFAULT_FPS
XGE_TRACK_MEMORY = _xgepy.XGE_TRACK_MEMORY
OCTREE_LOOSE_K_DEFAULT = _xgepy.OCTREE_LOOSE_K_DEFAULT
OCTREE_MAX_DEPTH_DEFAULT = _xgepy.OCTREE_MAX_DEPTH_DEFAULT
class Utils(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Utils, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Utils, name)
    __repr__ = _swig_repr
    __swig_getmethods__["IsPower2"] = lambda x: _xgepy.Utils_IsPower2
    if _newclass:IsPower2 = staticmethod(_xgepy.Utils_IsPower2)
    __swig_getmethods__["Degree2Rad"] = lambda x: _xgepy.Utils_Degree2Rad
    if _newclass:Degree2Rad = staticmethod(_xgepy.Utils_Degree2Rad)
    __swig_getmethods__["Rad2Degree"] = lambda x: _xgepy.Utils_Rad2Degree
    if _newclass:Rad2Degree = staticmethod(_xgepy.Utils_Rad2Degree)
    __swig_getmethods__["Clampf"] = lambda x: _xgepy.Utils_Clampf
    if _newclass:Clampf = staticmethod(_xgepy.Utils_Clampf)
    __swig_getmethods__["Clampi"] = lambda x: _xgepy.Utils_Clampi
    if _newclass:Clampi = staticmethod(_xgepy.Utils_Clampi)
    __swig_getmethods__["Overlap1d"] = lambda x: _xgepy.Utils_Overlap1d
    if _newclass:Overlap1d = staticmethod(_xgepy.Utils_Overlap1d)
    __swig_getmethods__["Mapf2i"] = lambda x: _xgepy.Utils_Mapf2i
    if _newclass:Mapf2i = staticmethod(_xgepy.Utils_Mapf2i)
    __swig_getmethods__["Mapi2f"] = lambda x: _xgepy.Utils_Mapi2f
    if _newclass:Mapi2f = staticmethod(_xgepy.Utils_Mapi2f)
    __swig_getmethods__["Error"] = lambda x: _xgepy.Utils_Error
    if _newclass:Error = staticmethod(_xgepy.Utils_Error)
    __swig_getmethods__["Format"] = lambda x: _xgepy.Utils_Format
    if _newclass:Format = staticmethod(_xgepy.Utils_Format)
    __swig_getmethods__["ParseInts"] = lambda x: _xgepy.Utils_ParseInts
    if _newclass:ParseInts = staticmethod(_xgepy.Utils_ParseInts)
    __swig_getmethods__["ParseFloats"] = lambda x: _xgepy.Utils_ParseFloats
    if _newclass:ParseFloats = staticmethod(_xgepy.Utils_ParseFloats)
    __swig_getmethods__["FloatRand"] = lambda x: _xgepy.Utils_FloatRand
    if _newclass:FloatRand = staticmethod(_xgepy.Utils_FloatRand)
    __swig_getmethods__["IntRand"] = lambda x: _xgepy.Utils_IntRand
    if _newclass:IntRand = staticmethod(_xgepy.Utils_IntRand)
    __swig_getmethods__["FuzzyEqual"] = lambda x: _xgepy.Utils_FuzzyEqual
    if _newclass:FuzzyEqual = staticmethod(_xgepy.Utils_FuzzyEqual)
    __swig_getmethods__["Log2i"] = lambda x: _xgepy.Utils_Log2i
    if _newclass:Log2i = staticmethod(_xgepy.Utils_Log2i)
    __swig_getmethods__["Pow2i"] = lambda x: _xgepy.Utils_Pow2i
    if _newclass:Pow2i = staticmethod(_xgepy.Utils_Pow2i)
    __swig_getmethods__["Replace"] = lambda x: _xgepy.Utils_Replace
    if _newclass:Replace = staticmethod(_xgepy.Utils_Replace)
    __swig_getmethods__["StartsWith"] = lambda x: _xgepy.Utils_StartsWith
    if _newclass:StartsWith = staticmethod(_xgepy.Utils_StartsWith)
    __swig_getmethods__["ToLower"] = lambda x: _xgepy.Utils_ToLower
    if _newclass:ToLower = staticmethod(_xgepy.Utils_ToLower)
    __swig_getmethods__["RTrim"] = lambda x: _xgepy.Utils_RTrim
    if _newclass:RTrim = staticmethod(_xgepy.Utils_RTrim)
    __swig_getmethods__["LTrim"] = lambda x: _xgepy.Utils_LTrim
    if _newclass:LTrim = staticmethod(_xgepy.Utils_LTrim)
    __swig_getmethods__["Trim"] = lambda x: _xgepy.Utils_Trim
    if _newclass:Trim = staticmethod(_xgepy.Utils_Trim)
    def __init__(self): 
        this = _xgepy.new_Utils()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _xgepy.delete_Utils
    __del__ = lambda self : None;
Utils_swigregister = _xgepy.Utils_swigregister
Utils_swigregister(Utils)

def Utils_IsPower2(*args):
  return _xgepy.Utils_IsPower2(*args)
Utils_IsPower2 = _xgepy.Utils_IsPower2

def Utils_Degree2Rad(*args):
  return _xgepy.Utils_Degree2Rad(*args)
Utils_Degree2Rad = _xgepy.Utils_Degree2Rad

def Utils_Rad2Degree(*args):
  return _xgepy.Utils_Rad2Degree(*args)
Utils_Rad2Degree = _xgepy.Utils_Rad2Degree

def Utils_Clampf(*args):
  return _xgepy.Utils_Clampf(*args)
Utils_Clampf = _xgepy.Utils_Clampf

def Utils_Clampi(*args):
  return _xgepy.Utils_Clampi(*args)
Utils_Clampi = _xgepy.Utils_Clampi

def Utils_Overlap1d(*args):
  return _xgepy.Utils_Overlap1d(*args)
Utils_Overlap1d = _xgepy.Utils_Overlap1d

def Utils_Mapf2i(*args):
  return _xgepy.Utils_Mapf2i(*args)
Utils_Mapf2i = _xgepy.Utils_Mapf2i

def Utils_Mapi2f(*args):
  return _xgepy.Utils_Mapi2f(*args)
Utils_Mapi2f = _xgepy.Utils_Mapi2f

def Utils_Error(*args):
  return _xgepy.Utils_Error(*args)
Utils_Error = _xgepy.Utils_Error

def Utils_Format(*args):
  return _xgepy.Utils_Format(*args)
Utils_Format = _xgepy.Utils_Format

def Utils_ParseInts(*args):
  return _xgepy.Utils_ParseInts(*args)
Utils_ParseInts = _xgepy.Utils_ParseInts

def Utils_ParseFloats(*args):
  return _xgepy.Utils_ParseFloats(*args)
Utils_ParseFloats = _xgepy.Utils_ParseFloats

def Utils_FloatRand(*args):
  return _xgepy.Utils_FloatRand(*args)
Utils_FloatRand = _xgepy.Utils_FloatRand

def Utils_IntRand(*args):
  return _xgepy.Utils_IntRand(*args)
Utils_IntRand = _xgepy.Utils_IntRand

def Utils_FuzzyEqual(*args):
  return _xgepy.Utils_FuzzyEqual(*args)
Utils_FuzzyEqual = _xgepy.Utils_FuzzyEqual

def Utils_Log2i(*args):
  return _xgepy.Utils_Log2i(*args)
Utils_Log2i = _xgepy.Utils_Log2i

def Utils_Pow2i(*args):
  return _xgepy.Utils_Pow2i(*args)
Utils_Pow2i = _xgepy.Utils_Pow2i

def Utils_Replace(*args):
  return _xgepy.Utils_Replace(*args)
Utils_Replace = _xgepy.Utils_Replace

def Utils_StartsWith(*args):
  return _xgepy.Utils_StartsWith(*args)
Utils_StartsWith = _xgepy.Utils_StartsWith

def Utils_ToLower(*args):
  return _xgepy.Utils_ToLower(*args)
Utils_ToLower = _xgepy.Utils_ToLower

def Utils_RTrim(*args):
  return _xgepy.Utils_RTrim(*args)
Utils_RTrim = _xgepy.Utils_RTrim

def Utils_LTrim(*args):
  return _xgepy.Utils_LTrim(*args)
Utils_LTrim = _xgepy.Utils_LTrim

def Utils_Trim(*args):
  return _xgepy.Utils_Trim(*args)
Utils_Trim = _xgepy.Utils_Trim

class Log(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Log, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Log, name)
    __repr__ = _swig_repr
    __swig_getmethods__["redirect"] = lambda x: _xgepy.Log_redirect
    if _newclass:redirect = staticmethod(_xgepy.Log_redirect)
    __swig_getmethods__["printf"] = lambda x: _xgepy.Log_printf
    if _newclass:printf = staticmethod(_xgepy.Log_printf)
    def __init__(self): 
        this = _xgepy.new_Log()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _xgepy.delete_Log
    __del__ = lambda self : None;
Log_swigregister = _xgepy.Log_swigregister
Log_swigregister(Log)

def Log_redirect(*args):
  return _xgepy.Log_redirect(*args)
Log_redirect = _xgepy.Log_redirect

def Log_printf(*args):
  return _xgepy.Log_printf(*args)
Log_printf = _xgepy.Log_printf

class Clock(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Clock, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Clock, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _xgepy.new_Clock()
        try: self.this.append(this)
        except: self.this = this
    def __sub__(self, *args): return _xgepy.Clock___sub__(self, *args)
    def assign(self, *args): return _xgepy.Clock_assign(self, *args)
    def reset(self): return _xgepy.Clock_reset(self)
    def sec(self): return _xgepy.Clock_sec(self)
    def msec(self): return _xgepy.Clock_msec(self)
    __swig_destroy__ = _xgepy.delete_Clock
    __del__ = lambda self : None;
Clock_swigregister = _xgepy.Clock_swigregister
Clock_swigregister(Clock)

class Keyboard(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Keyboard, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Keyboard, name)
    __repr__ = _swig_repr
    Key_Left = _xgepy.Keyboard_Key_Left
    Key_Up = _xgepy.Keyboard_Key_Up
    Key_Right = _xgepy.Keyboard_Key_Right
    Key_Down = _xgepy.Keyboard_Key_Down
    __swig_getmethods__["isShiftPressed"] = lambda x: _xgepy.Keyboard_isShiftPressed
    if _newclass:isShiftPressed = staticmethod(_xgepy.Keyboard_isShiftPressed)
    __swig_getmethods__["isAltPressed"] = lambda x: _xgepy.Keyboard_isAltPressed
    if _newclass:isAltPressed = staticmethod(_xgepy.Keyboard_isAltPressed)
    __swig_getmethods__["isControlPressed"] = lambda x: _xgepy.Keyboard_isControlPressed
    if _newclass:isControlPressed = staticmethod(_xgepy.Keyboard_isControlPressed)
    def __init__(self): 
        this = _xgepy.new_Keyboard()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _xgepy.delete_Keyboard
    __del__ = lambda self : None;
Keyboard_swigregister = _xgepy.Keyboard_swigregister
Keyboard_swigregister(Keyboard)

def Keyboard_isShiftPressed():
  return _xgepy.Keyboard_isShiftPressed()
Keyboard_isShiftPressed = _xgepy.Keyboard_isShiftPressed

def Keyboard_isAltPressed():
  return _xgepy.Keyboard_isAltPressed()
Keyboard_isAltPressed = _xgepy.Keyboard_isAltPressed

def Keyboard_isControlPressed():
  return _xgepy.Keyboard_isControlPressed()
Keyboard_isControlPressed = _xgepy.Keyboard_isControlPressed

class SpinLock(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SpinLock, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SpinLock, name)
    __repr__ = _swig_repr
    def __init__(self, max_delta_time=10): 
        this = _xgepy.new_SpinLock(max_delta_time)
        try: self.this.append(this)
        except: self.this = this
    def Lock(self): return _xgepy.SpinLock_Lock(self)
    def Unlock(self): return _xgepy.SpinLock_Unlock(self)
    __swig_destroy__ = _xgepy.delete_SpinLock
    __del__ = lambda self : None;
SpinLock_swigregister = _xgepy.SpinLock_swigregister
SpinLock_swigregister(SpinLock)

class Archive(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Archive, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Archive, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _xgepy.new_Archive()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _xgepy.delete_Archive
    __del__ = lambda self : None;
    def Open(self, *args): return _xgepy.Archive_Open(self, *args)
    def Close(self): return _xgepy.Archive_Close(self)
    def Saving(self): return _xgepy.Archive_Saving(self)
    def Loading(self): return _xgepy.Archive_Loading(self)
    def TextMode(self): return _xgepy.Archive_TextMode(self)
    def BinaryMode(self): return _xgepy.Archive_BinaryMode(self)
    def Push(self, *args): return _xgepy.Archive_Push(self, *args)
    def Pop(self, *args): return _xgepy.Archive_Pop(self, *args)
    def WriteString(self, *args): return _xgepy.Archive_WriteString(self, *args)
    def WriteInt(self, *args): return _xgepy.Archive_WriteInt(self, *args)
    def WriteUint(self, *args): return _xgepy.Archive_WriteUint(self, *args)
    def WriteUint64(self, *args): return _xgepy.Archive_WriteUint64(self, *args)
    def WriteFloat(self, *args): return _xgepy.Archive_WriteFloat(self, *args)
    def WriteVectorInt(self, *args): return _xgepy.Archive_WriteVectorInt(self, *args)
    def WriteVectorFloat(self, *args): return _xgepy.Archive_WriteVectorFloat(self, *args)
    def ReadString(self, *args): return _xgepy.Archive_ReadString(self, *args)
    def ReadInt(self, *args): return _xgepy.Archive_ReadInt(self, *args)
    def ReadUint(self, *args): return _xgepy.Archive_ReadUint(self, *args)
    def ReadUint64(self, *args): return _xgepy.Archive_ReadUint64(self, *args)
    def ReadFloat(self, *args): return _xgepy.Archive_ReadFloat(self, *args)
    def ReadVectorInt(self, *args): return _xgepy.Archive_ReadVectorInt(self, *args)
    def ReadVectorFloat(self, *args): return _xgepy.Archive_ReadVectorFloat(self, *args)
    def WriteRaw(self, *args): return _xgepy.Archive_WriteRaw(self, *args)
    def ReadRaw(self, *args): return _xgepy.Archive_ReadRaw(self, *args)
    def ExistsNode(self, *args): return _xgepy.Archive_ExistsNode(self, *args)
Archive_swigregister = _xgepy.Archive_swigregister
Archive_swigregister(Archive)
cvar = _xgepy.cvar

class Encoder(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Encoder, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Encoder, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _xgepy.new_Encoder()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _xgepy.delete_Encoder
    __del__ = lambda self : None;
    def WriteRaw(self, *args): return _xgepy.Encoder_WriteRaw(self, *args)
    def WriteChar(self, *args): return _xgepy.Encoder_WriteChar(self, *args)
    def WriteUchar(self, *args): return _xgepy.Encoder_WriteUchar(self, *args)
    def WriteShort(self, *args): return _xgepy.Encoder_WriteShort(self, *args)
    def WriteUshort(self, *args): return _xgepy.Encoder_WriteUshort(self, *args)
    def WriteInt(self, *args): return _xgepy.Encoder_WriteInt(self, *args)
    def WriteUint(self, *args): return _xgepy.Encoder_WriteUint(self, *args)
    def WriteInt64(self, *args): return _xgepy.Encoder_WriteInt64(self, *args)
    def WriteUint64(self, *args): return _xgepy.Encoder_WriteUint64(self, *args)
    def WriteFloat(self, *args): return _xgepy.Encoder_WriteFloat(self, *args)
    def WriteDouble(self, *args): return _xgepy.Encoder_WriteDouble(self, *args)
    def WriteString(self, *args): return _xgepy.Encoder_WriteString(self, *args)
    def c_str(self): return _xgepy.Encoder_c_str(self)
    def __str__(self): return _xgepy.Encoder___str__(self)
Encoder_swigregister = _xgepy.Encoder_swigregister
Encoder_swigregister(Encoder)

class Decoder(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Decoder, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Decoder, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _xgepy.new_Decoder(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _xgepy.delete_Decoder
    __del__ = lambda self : None;
    def ReadRaw(self, *args): return _xgepy.Decoder_ReadRaw(self, *args)
    def ReadChar(self): return _xgepy.Decoder_ReadChar(self)
    def ReadUchar(self): return _xgepy.Decoder_ReadUchar(self)
    def ReadShort(self): return _xgepy.Decoder_ReadShort(self)
    def ReadUshort(self): return _xgepy.Decoder_ReadUshort(self)
    def ReadInt(self): return _xgepy.Decoder_ReadInt(self)
    def ReadUint(self): return _xgepy.Decoder_ReadUint(self)
    def ReadInt64(self): return _xgepy.Decoder_ReadInt64(self)
    def ReadUint64(self): return _xgepy.Decoder_ReadUint64(self)
    def ReadFloat(self): return _xgepy.Decoder_ReadFloat(self)
    def ReadDouble(self): return _xgepy.Decoder_ReadDouble(self)
    def ReadString(self): return _xgepy.Decoder_ReadString(self)
Decoder_swigregister = _xgepy.Decoder_swigregister
Decoder_swigregister(Decoder)

class FileSystem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FileSystem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FileSystem, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ResourcesDir"] = _xgepy.FileSystem_ResourcesDir_set
    __swig_getmethods__["ResourcesDir"] = _xgepy.FileSystem_ResourcesDir_get
    if _newclass:ResourcesDir = _swig_property(_xgepy.FileSystem_ResourcesDir_get, _xgepy.FileSystem_ResourcesDir_set)
    __swig_getmethods__["FullPath"] = lambda x: _xgepy.FileSystem_FullPath
    if _newclass:FullPath = staticmethod(_xgepy.FileSystem_FullPath)
    __swig_getmethods__["ShortPath"] = lambda x: _xgepy.FileSystem_ShortPath
    if _newclass:ShortPath = staticmethod(_xgepy.FileSystem_ShortPath)
    __swig_getmethods__["Extension"] = lambda x: _xgepy.FileSystem_Extension
    if _newclass:Extension = staticmethod(_xgepy.FileSystem_Extension)
    __swig_getmethods__["ReadFile"] = lambda x: _xgepy.FileSystem_ReadFile
    if _newclass:ReadFile = staticmethod(_xgepy.FileSystem_ReadFile)
    __swig_getmethods__["FileSize"] = lambda x: _xgepy.FileSystem_FileSize
    if _newclass:FileSize = staticmethod(_xgepy.FileSystem_FileSize)
    __swig_getmethods__["FileExists"] = lambda x: _xgepy.FileSystem_FileExists
    if _newclass:FileExists = staticmethod(_xgepy.FileSystem_FileExists)
    def __init__(self): 
        this = _xgepy.new_FileSystem()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _xgepy.delete_FileSystem
    __del__ = lambda self : None;
FileSystem_swigregister = _xgepy.FileSystem_swigregister
FileSystem_swigregister(FileSystem)

def FileSystem_FullPath(*args):
  return _xgepy.FileSystem_FullPath(*args)
FileSystem_FullPath = _xgepy.FileSystem_FullPath

def FileSystem_ShortPath(*args):
  return _xgepy.FileSystem_ShortPath(*args)
FileSystem_ShortPath = _xgepy.FileSystem_ShortPath

def FileSystem_Extension(*args):
  return _xgepy.FileSystem_Extension(*args)
FileSystem_Extension = _xgepy.FileSystem_Extension

def FileSystem_ReadFile(*args):
  return _xgepy.FileSystem_ReadFile(*args)
FileSystem_ReadFile = _xgepy.FileSystem_ReadFile

def FileSystem_FileSize(*args):
  return _xgepy.FileSystem_FileSize(*args)
FileSystem_FileSize = _xgepy.FileSystem_FileSize

def FileSystem_FileExists(*args):
  return _xgepy.FileSystem_FileExists(*args)
FileSystem_FileExists = _xgepy.FileSystem_FileExists

class Vec2i(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec2i, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vec2i, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _xgepy.Vec2i_x_set
    __swig_getmethods__["x"] = _xgepy.Vec2i_x_get
    if _newclass:x = _swig_property(_xgepy.Vec2i_x_get, _xgepy.Vec2i_x_set)
    __swig_setmethods__["y"] = _xgepy.Vec2i_y_set
    __swig_getmethods__["y"] = _xgepy.Vec2i_y_get
    if _newclass:y = _swig_property(_xgepy.Vec2i_y_get, _xgepy.Vec2i_y_set)
    def __init__(self, *args): 
        this = _xgepy.new_Vec2i(*args)
        try: self.this.append(this)
        except: self.this = this
    def assign(self, *args): return _xgepy.Vec2i_assign(self, *args)
    def scale(self, *args): return _xgepy.Vec2i_scale(self, *args)
    def translate(self, *args): return _xgepy.Vec2i_translate(self, *args)
    def __eq__(self, *args): return _xgepy.Vec2i___eq__(self, *args)
    def get(self, *args): return _xgepy.Vec2i_get(self, *args)
    def set(self, *args): return _xgepy.Vec2i_set(self, *args)
    def __getitem_ref__(self, *args): return _xgepy.Vec2i___getitem_ref__(self, *args)
    def __getitem__(self, *args): return _xgepy.Vec2i___getitem__(self, *args)
    __swig_destroy__ = _xgepy.delete_Vec2i
    __del__ = lambda self : None;
Vec2i_swigregister = _xgepy.Vec2i_swigregister
Vec2i_swigregister(Vec2i)

class Vec2f(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec2f, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vec2f, name)
    __swig_setmethods__["x"] = _xgepy.Vec2f_x_set
    __swig_getmethods__["x"] = _xgepy.Vec2f_x_get
    if _newclass:x = _swig_property(_xgepy.Vec2f_x_get, _xgepy.Vec2f_x_set)
    __swig_setmethods__["y"] = _xgepy.Vec2f_y_set
    __swig_getmethods__["y"] = _xgepy.Vec2f_y_get
    if _newclass:y = _swig_property(_xgepy.Vec2f_y_get, _xgepy.Vec2f_y_set)
    def __init__(self, *args): 
        this = _xgepy.new_Vec2f(*args)
        try: self.this.append(this)
        except: self.this = this
    def assign(self, *args): return _xgepy.Vec2f_assign(self, *args)
    def __eq__(self, *args): return _xgepy.Vec2f___eq__(self, *args)
    def get(self, *args): return _xgepy.Vec2f_get(self, *args)
    def set(self, *args): return _xgepy.Vec2f_set(self, *args)
    def __getitem_ref__(self, *args): return _xgepy.Vec2f___getitem_ref__(self, *args)
    def __getitem__(self, *args): return _xgepy.Vec2f___getitem__(self, *args)
    def __str__(self): return _xgepy.Vec2f___str__(self)
    def __repr__(self): return _xgepy.Vec2f___repr__(self)
    __swig_destroy__ = _xgepy.delete_Vec2f
    __del__ = lambda self : None;
Vec2f_swigregister = _xgepy.Vec2f_swigregister
Vec2f_swigregister(Vec2f)

class Vec3f(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec3f, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vec3f, name)
    def Write(self, *args): return _xgepy.Vec3f_Write(self, *args)
    def Read(self, *args): return _xgepy.Vec3f_Read(self, *args)
    __swig_setmethods__["x"] = _xgepy.Vec3f_x_set
    __swig_getmethods__["x"] = _xgepy.Vec3f_x_get
    if _newclass:x = _swig_property(_xgepy.Vec3f_x_get, _xgepy.Vec3f_x_set)
    __swig_setmethods__["y"] = _xgepy.Vec3f_y_set
    __swig_getmethods__["y"] = _xgepy.Vec3f_y_get
    if _newclass:y = _swig_property(_xgepy.Vec3f_y_get, _xgepy.Vec3f_y_set)
    __swig_setmethods__["z"] = _xgepy.Vec3f_z_set
    __swig_getmethods__["z"] = _xgepy.Vec3f_z_get
    if _newclass:z = _swig_property(_xgepy.Vec3f_z_get, _xgepy.Vec3f_z_set)
    def __init__(self, *args): 
        this = _xgepy.new_Vec3f(*args)
        try: self.this.append(this)
        except: self.this = this
    def assign(self, *args): return _xgepy.Vec3f_assign(self, *args)
    def store(self, *args): return _xgepy.Vec3f_store(self, *args)
    def module2(self): return _xgepy.Vec3f_module2(self)
    def module(self): return _xgepy.Vec3f_module(self)
    def distance(self, *args): return _xgepy.Vec3f_distance(self, *args)
    def normalize(self): return _xgepy.Vec3f_normalize(self)
    def __imul__(self, *args): return _xgepy.Vec3f___imul__(self, *args)
    def __idiv__(self, *args): return _xgepy.Vec3f___idiv__(self, *args)
    def __iadd__(self, *args): return _xgepy.Vec3f___iadd__(self, *args)
    def __isub__(self, *args): return _xgepy.Vec3f___isub__(self, *args)
    def cross(self, *args): return _xgepy.Vec3f_cross(self, *args)
    def isValid(self): return _xgepy.Vec3f_isValid(self)
    def fuzzyEqual(self, *args): return _xgepy.Vec3f_fuzzyEqual(self, *args)
    def __add__(self, *args): return _xgepy.Vec3f___add__(self, *args)
    def __sub__(self, *args): return _xgepy.Vec3f___sub__(self, *args)
    def __mul__(self, *args): return _xgepy.Vec3f___mul__(self, *args)
    def __div__(self, *args): return _xgepy.Vec3f___div__(self, *args)
    def __eq__(self, *args): return _xgepy.Vec3f___eq__(self, *args)
    def __ne__(self, *args): return _xgepy.Vec3f___ne__(self, *args)
    def Abs(self): return _xgepy.Vec3f_Abs(self)
    def Max(self, *args): return _xgepy.Vec3f_Max(self, *args)
    def Min(self, *args): return _xgepy.Vec3f_Min(self, *args)
    def maxidx(self): return _xgepy.Vec3f_maxidx(self)
    def minidx(self): return _xgepy.Vec3f_minidx(self)
    def get(self, *args): return _xgepy.Vec3f_get(self, *args)
    def set(self, *args): return _xgepy.Vec3f_set(self, *args)
    def __getitem_ref__(self, *args): return _xgepy.Vec3f___getitem_ref__(self, *args)
    def __getitem__(self, *args): return _xgepy.Vec3f___getitem__(self, *args)
    def rotate(self, *args): return _xgepy.Vec3f_rotate(self, *args)
    def __repr__(self): return _xgepy.Vec3f___repr__(self)
    def __str__(self): return _xgepy.Vec3f___str__(self)
    __swig_destroy__ = _xgepy.delete_Vec3f
    __del__ = lambda self : None;
Vec3f_swigregister = _xgepy.Vec3f_swigregister
Vec3f_swigregister(Vec3f)

class Vec4f(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec4f, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vec4f, name)
    __swig_setmethods__["x"] = _xgepy.Vec4f_x_set
    __swig_getmethods__["x"] = _xgepy.Vec4f_x_get
    if _newclass:x = _swig_property(_xgepy.Vec4f_x_get, _xgepy.Vec4f_x_set)
    __swig_setmethods__["y"] = _xgepy.Vec4f_y_set
    __swig_getmethods__["y"] = _xgepy.Vec4f_y_get
    if _newclass:y = _swig_property(_xgepy.Vec4f_y_get, _xgepy.Vec4f_y_set)
    __swig_setmethods__["z"] = _xgepy.Vec4f_z_set
    __swig_getmethods__["z"] = _xgepy.Vec4f_z_get
    if _newclass:z = _swig_property(_xgepy.Vec4f_z_get, _xgepy.Vec4f_z_set)
    __swig_setmethods__["w"] = _xgepy.Vec4f_w_set
    __swig_getmethods__["w"] = _xgepy.Vec4f_w_get
    if _newclass:w = _swig_property(_xgepy.Vec4f_w_get, _xgepy.Vec4f_w_set)
    def __init__(self, *args): 
        this = _xgepy.new_Vec4f(*args)
        try: self.this.append(this)
        except: self.this = this
    def module2(self): return _xgepy.Vec4f_module2(self)
    def module(self): return _xgepy.Vec4f_module(self)
    def normalize(self): return _xgepy.Vec4f_normalize(self)
    def get(self, *args): return _xgepy.Vec4f_get(self, *args)
    def set(self, *args): return _xgepy.Vec4f_set(self, *args)
    def __getitem_ref__(self, *args): return _xgepy.Vec4f___getitem_ref__(self, *args)
    def __getitem__(self, *args): return _xgepy.Vec4f___getitem__(self, *args)
    def __imul__(self, *args): return _xgepy.Vec4f___imul__(self, *args)
    def __idiv__(self, *args): return _xgepy.Vec4f___idiv__(self, *args)
    def __iadd__(self, *args): return _xgepy.Vec4f___iadd__(self, *args)
    def __isub__(self, *args): return _xgepy.Vec4f___isub__(self, *args)
    def assign(self, *args): return _xgepy.Vec4f_assign(self, *args)
    def Min(self, *args): return _xgepy.Vec4f_Min(self, *args)
    def Max(self, *args): return _xgepy.Vec4f_Max(self, *args)
    def __add__(self, *args): return _xgepy.Vec4f___add__(self, *args)
    def __sub__(self, *args): return _xgepy.Vec4f___sub__(self, *args)
    def __div__(self, *args): return _xgepy.Vec4f___div__(self, *args)
    def __eq__(self, *args): return _xgepy.Vec4f___eq__(self, *args)
    def __ne__(self, *args): return _xgepy.Vec4f___ne__(self, *args)
    def __mul__(self, *args): return _xgepy.Vec4f___mul__(self, *args)
    def fuzzyEqual(self, *args): return _xgepy.Vec4f_fuzzyEqual(self, *args)
    def __repr__(self): return _xgepy.Vec4f___repr__(self)
    def __str__(self): return _xgepy.Vec4f___str__(self)
    __swig_destroy__ = _xgepy.delete_Vec4f
    __del__ = lambda self : None;
Vec4f_swigregister = _xgepy.Vec4f_swigregister
Vec4f_swigregister(Vec4f)

class Vecf(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vecf, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vecf, name)
    __swig_setmethods__["mem"] = _xgepy.Vecf_mem_set
    __swig_getmethods__["mem"] = _xgepy.Vecf_mem_get
    if _newclass:mem = _swig_property(_xgepy.Vecf_mem_get, _xgepy.Vecf_mem_set)
    __swig_setmethods__["dim"] = _xgepy.Vecf_dim_set
    __swig_getmethods__["dim"] = _xgepy.Vecf_dim_get
    if _newclass:dim = _swig_property(_xgepy.Vecf_dim_get, _xgepy.Vecf_dim_set)
    def __init__(self, *args): 
        this = _xgepy.new_Vecf(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _xgepy.delete_Vecf
    __del__ = lambda self : None;
    def get(self, *args): return _xgepy.Vecf_get(self, *args)
    def set(self, *args): return _xgepy.Vecf_set(self, *args)
    def __getitem_ref__(self, *args): return _xgepy.Vecf___getitem_ref__(self, *args)
    def __getitem__(self, *args): return _xgepy.Vecf___getitem__(self, *args)
    def __imul__(self, *args): return _xgepy.Vecf___imul__(self, *args)
    def __idiv__(self, *args): return _xgepy.Vecf___idiv__(self, *args)
    def __iadd__(self, *args): return _xgepy.Vecf___iadd__(self, *args)
    def __isub__(self, *args): return _xgepy.Vecf___isub__(self, *args)
    def assign(self, *args): return _xgepy.Vecf_assign(self, *args)
    def __add__(self, *args): return _xgepy.Vecf___add__(self, *args)
    def __sub__(self, *args): return _xgepy.Vecf___sub__(self, *args)
    def __div__(self, *args): return _xgepy.Vecf___div__(self, *args)
    def __eq__(self, *args): return _xgepy.Vecf___eq__(self, *args)
    def __ne__(self, *args): return _xgepy.Vecf___ne__(self, *args)
    def Min(self, *args): return _xgepy.Vecf_Min(self, *args)
    def Max(self, *args): return _xgepy.Vecf_Max(self, *args)
    def module2(self): return _xgepy.Vecf_module2(self)
    def module(self): return _xgepy.Vecf_module(self)
    def normalize(self): return _xgepy.Vecf_normalize(self)
    def fuzzyEqual(self, *args): return _xgepy.Vecf_fuzzyEqual(self, *args)
    def permutate(self, *args): return _xgepy.Vecf_permutate(self, *args)
    def __mul__(self, *args): return _xgepy.Vecf___mul__(self, *args)
    def __repr__(self): return _xgepy.Vecf___repr__(self)
    def __str__(self): return _xgepy.Vecf___str__(self)
Vecf_swigregister = _xgepy.Vecf_swigregister
Vecf_swigregister(Vecf)

class Triangle2i(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Triangle2i, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Triangle2i, name)
    __repr__ = _swig_repr
    __swig_setmethods__["p0"] = _xgepy.Triangle2i_p0_set
    __swig_getmethods__["p0"] = _xgepy.Triangle2i_p0_get
    if _newclass:p0 = _swig_property(_xgepy.Triangle2i_p0_get, _xgepy.Triangle2i_p0_set)
    __swig_setmethods__["p1"] = _xgepy.Triangle2i_p1_set
    __swig_getmethods__["p1"] = _xgepy.Triangle2i_p1_get
    if _newclass:p1 = _swig_property(_xgepy.Triangle2i_p1_get, _xgepy.Triangle2i_p1_set)
    __swig_setmethods__["p2"] = _xgepy.Triangle2i_p2_set
    __swig_getmethods__["p2"] = _xgepy.Triangle2i_p2_get
    if _newclass:p2 = _swig_property(_xgepy.Triangle2i_p2_get, _xgepy.Triangle2i_p2_set)
    def __init__(self, *args): 
        this = _xgepy.new_Triangle2i(*args)
        try: self.this.append(this)
        except: self.this = this
    def getPoint(self, *args): return _xgepy.Triangle2i_getPoint(self, *args)
    def getRefPoint(self, *args): return _xgepy.Triangle2i_getRefPoint(self, *args)
    def left(self): return _xgepy.Triangle2i_left(self)
    def right(self): return _xgepy.Triangle2i_right(self)
    def bottom(self): return _xgepy.Triangle2i_bottom(self)
    def top(self): return _xgepy.Triangle2i_top(self)
    def __eq__(self, *args): return _xgepy.Triangle2i___eq__(self, *args)
    def scale(self, *args): return _xgepy.Triangle2i_scale(self, *args)
    def translate(self, *args): return _xgepy.Triangle2i_translate(self, *args)
    def centerx(self): return _xgepy.Triangle2i_centerx(self)
    def centery(self): return _xgepy.Triangle2i_centery(self)
    __swig_destroy__ = _xgepy.delete_Triangle2i
    __del__ = lambda self : None;
Triangle2i_swigregister = _xgepy.Triangle2i_swigregister
Triangle2i_swigregister(Triangle2i)

class Plane4f(Vec4f):
    __swig_setmethods__ = {}
    for _s in [Vec4f]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Plane4f, name, value)
    __swig_getmethods__ = {}
    for _s in [Vec4f]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Plane4f, name)
    def __init__(self, *args): 
        this = _xgepy.new_Plane4f(*args)
        try: self.this.append(this)
        except: self.this = this
    def set(self, *args): return _xgepy.Plane4f_set(self, *args)
    def normalize(self): return _xgepy.Plane4f_normalize(self)
    def getProjectionMatrix(self, *args): return _xgepy.Plane4f_getProjectionMatrix(self, *args)
    def projectPoint(self, *args): return _xgepy.Plane4f_projectPoint(self, *args)
    def projectVector(self, *args): return _xgepy.Plane4f_projectVector(self, *args)
    __swig_getmethods__["bestFittingPlane"] = lambda x: _xgepy.Plane4f_bestFittingPlane
    if _newclass:bestFittingPlane = staticmethod(_xgepy.Plane4f_bestFittingPlane)
    def getNormal(self): return _xgepy.Plane4f_getNormal(self)
    def getDistance(self, *args): return _xgepy.Plane4f_getDistance(self, *args)
    def reverse(self): return _xgepy.Plane4f_reverse(self)
    def forceBelow(self, *args): return _xgepy.Plane4f_forceBelow(self, *args)
    def forceAbove(self, *args): return _xgepy.Plane4f_forceAbove(self, *args)
    def __repr__(self): return _xgepy.Plane4f___repr__(self)
    def __str__(self): return _xgepy.Plane4f___str__(self)
    __swig_destroy__ = _xgepy.delete_Plane4f
    __del__ = lambda self : None;
Plane4f_swigregister = _xgepy.Plane4f_swigregister
Plane4f_swigregister(Plane4f)

def Plane4f_bestFittingPlane(*args):
  return _xgepy.Plane4f_bestFittingPlane(*args)
Plane4f_bestFittingPlane = _xgepy.Plane4f_bestFittingPlane

class Planef(Vecf):
    __swig_setmethods__ = {}
    for _s in [Vecf]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Planef, name, value)
    __swig_getmethods__ = {}
    for _s in [Vecf]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Planef, name)
    def __init__(self, *args): 
        this = _xgepy.new_Planef(*args)
        try: self.this.append(this)
        except: self.this = this
    def normalize(self): return _xgepy.Planef_normalize(self)
    __swig_getmethods__["bestFittingPlane"] = lambda x: _xgepy.Planef_bestFittingPlane
    if _newclass:bestFittingPlane = staticmethod(_xgepy.Planef_bestFittingPlane)
    def getNormal(self): return _xgepy.Planef_getNormal(self)
    def getDistance(self, *args): return _xgepy.Planef_getDistance(self, *args)
    def reverse(self): return _xgepy.Planef_reverse(self)
    def forceBelow(self, *args): return _xgepy.Planef_forceBelow(self, *args)
    def forceAbove(self, *args): return _xgepy.Planef_forceAbove(self, *args)
    def getProjectionMatrix(self, *args): return _xgepy.Planef_getProjectionMatrix(self, *args)
    def projectPoint(self, *args): return _xgepy.Planef_projectPoint(self, *args)
    __swig_getmethods__["getRandomPlane"] = lambda x: _xgepy.Planef_getRandomPlane
    if _newclass:getRandomPlane = staticmethod(_xgepy.Planef_getRandomPlane)
    def getRandomPoint(self): return _xgepy.Planef_getRandomPoint(self)
    def getMainDirection(self): return _xgepy.Planef_getMainDirection(self)
    def __repr__(self): return _xgepy.Planef___repr__(self)
    def __str__(self): return _xgepy.Planef___str__(self)
    __swig_destroy__ = _xgepy.delete_Planef
    __del__ = lambda self : None;
Planef_swigregister = _xgepy.Planef_swigregister
Planef_swigregister(Planef)

def Planef_bestFittingPlane(*args):
  return _xgepy.Planef_bestFittingPlane(*args)
Planef_bestFittingPlane = _xgepy.Planef_bestFittingPlane

def Planef_getRandomPlane(*args):
  return _xgepy.Planef_getRandomPlane(*args)
Planef_getRandomPlane = _xgepy.Planef_getRandomPlane

class Mat4f(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Mat4f, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Mat4f, name)
    def Write(self, *args): return _xgepy.Mat4f_Write(self, *args)
    def Read(self, *args): return _xgepy.Mat4f_Read(self, *args)
    __swig_setmethods__["mat"] = _xgepy.Mat4f_mat_set
    __swig_getmethods__["mat"] = _xgepy.Mat4f_mat_get
    if _newclass:mat = _swig_property(_xgepy.Mat4f_mat_get, _xgepy.Mat4f_mat_set)
    def __init__(self, *args): 
        this = _xgepy.new_Mat4f(*args)
        try: self.this.append(this)
        except: self.this = this
    def assign(self, *args): return _xgepy.Mat4f_assign(self, *args)
    def c_vector(self): return _xgepy.Mat4f_c_vector(self)
    def __call__(self, *args): return _xgepy.Mat4f___call__(self, *args)
    def get(self, *args): return _xgepy.Mat4f_get(self, *args)
    def set(self, *args): return _xgepy.Mat4f_set(self, *args)
    def a11(self): return _xgepy.Mat4f_a11(self)
    def a12(self): return _xgepy.Mat4f_a12(self)
    def a13(self): return _xgepy.Mat4f_a13(self)
    def a14(self): return _xgepy.Mat4f_a14(self)
    def a21(self): return _xgepy.Mat4f_a21(self)
    def a22(self): return _xgepy.Mat4f_a22(self)
    def a23(self): return _xgepy.Mat4f_a23(self)
    def a24(self): return _xgepy.Mat4f_a24(self)
    def a31(self): return _xgepy.Mat4f_a31(self)
    def a32(self): return _xgepy.Mat4f_a32(self)
    def a33(self): return _xgepy.Mat4f_a33(self)
    def a34(self): return _xgepy.Mat4f_a34(self)
    def a41(self): return _xgepy.Mat4f_a41(self)
    def a42(self): return _xgepy.Mat4f_a42(self)
    def a43(self): return _xgepy.Mat4f_a43(self)
    def a44(self): return _xgepy.Mat4f_a44(self)
    def __getitem_ref__(self, *args): return _xgepy.Mat4f___getitem_ref__(self, *args)
    def __getitem__(self, *args): return _xgepy.Mat4f___getitem__(self, *args)
    def __eq__(self, *args): return _xgepy.Mat4f___eq__(self, *args)
    def transpose(self): return _xgepy.Mat4f_transpose(self)
    __swig_getmethods__["zero"] = lambda x: _xgepy.Mat4f_zero
    if _newclass:zero = staticmethod(_xgepy.Mat4f_zero)
    def determinant(self, *args): return _xgepy.Mat4f_determinant(self, *args)
    def invert(self): return _xgepy.Mat4f_invert(self)
    __swig_getmethods__["scale"] = lambda x: _xgepy.Mat4f_scale
    if _newclass:scale = staticmethod(_xgepy.Mat4f_scale)
    __swig_getmethods__["translate"] = lambda x: _xgepy.Mat4f_translate
    if _newclass:translate = staticmethod(_xgepy.Mat4f_translate)
    __swig_getmethods__["rotate"] = lambda x: _xgepy.Mat4f_rotate
    if _newclass:rotate = staticmethod(_xgepy.Mat4f_rotate)
    __swig_getmethods__["rotatex"] = lambda x: _xgepy.Mat4f_rotatex
    if _newclass:rotatex = staticmethod(_xgepy.Mat4f_rotatex)
    __swig_getmethods__["rotatey"] = lambda x: _xgepy.Mat4f_rotatey
    if _newclass:rotatey = staticmethod(_xgepy.Mat4f_rotatey)
    __swig_getmethods__["rotatez"] = lambda x: _xgepy.Mat4f_rotatez
    if _newclass:rotatez = staticmethod(_xgepy.Mat4f_rotatez)
    __swig_getmethods__["ortho"] = lambda x: _xgepy.Mat4f_ortho
    if _newclass:ortho = staticmethod(_xgepy.Mat4f_ortho)
    __swig_getmethods__["perspective"] = lambda x: _xgepy.Mat4f_perspective
    if _newclass:perspective = staticmethod(_xgepy.Mat4f_perspective)
    __swig_getmethods__["frustum"] = lambda x: _xgepy.Mat4f_frustum
    if _newclass:frustum = staticmethod(_xgepy.Mat4f_frustum)
    __swig_getmethods__["lookat"] = lambda x: _xgepy.Mat4f_lookat
    if _newclass:lookat = staticmethod(_xgepy.Mat4f_lookat)
    def fuzzyEqual(self, *args): return _xgepy.Mat4f_fuzzyEqual(self, *args)
    def almostZero(self, epsilon=0.001): return _xgepy.Mat4f_almostZero(self, epsilon)
    def almostIdentity(self, epsilon=0.001): return _xgepy.Mat4f_almostIdentity(self, epsilon)
    def row(self, *args): return _xgepy.Mat4f_row(self, *args)
    def col(self, *args): return _xgepy.Mat4f_col(self, *args)
    def __add__(self, *args): return _xgepy.Mat4f___add__(self, *args)
    def __sub__(self, *args): return _xgepy.Mat4f___sub__(self, *args)
    def __mul__(self, *args): return _xgepy.Mat4f___mul__(self, *args)
    def decompose(self, *args): return _xgepy.Mat4f_decompose(self, *args)
    __swig_getmethods__["getProjectionMatrix"] = lambda x: _xgepy.Mat4f_getProjectionMatrix
    if _newclass:getProjectionMatrix = staticmethod(_xgepy.Mat4f_getProjectionMatrix)
    def __str__(self): return _xgepy.Mat4f___str__(self)
    def __repr__(self): return _xgepy.Mat4f___repr__(self)
    __swig_destroy__ = _xgepy.delete_Mat4f
    __del__ = lambda self : None;
Mat4f_swigregister = _xgepy.Mat4f_swigregister
Mat4f_swigregister(Mat4f)

def Mat4f_zero():
  return _xgepy.Mat4f_zero()
Mat4f_zero = _xgepy.Mat4f_zero

def Mat4f_scale(*args):
  return _xgepy.Mat4f_scale(*args)
Mat4f_scale = _xgepy.Mat4f_scale

def Mat4f_translate(*args):
  return _xgepy.Mat4f_translate(*args)
Mat4f_translate = _xgepy.Mat4f_translate

def Mat4f_rotate(*args):
  return _xgepy.Mat4f_rotate(*args)
Mat4f_rotate = _xgepy.Mat4f_rotate

def Mat4f_rotatex(*args):
  return _xgepy.Mat4f_rotatex(*args)
Mat4f_rotatex = _xgepy.Mat4f_rotatex

def Mat4f_rotatey(*args):
  return _xgepy.Mat4f_rotatey(*args)
Mat4f_rotatey = _xgepy.Mat4f_rotatey

def Mat4f_rotatez(*args):
  return _xgepy.Mat4f_rotatez(*args)
Mat4f_rotatez = _xgepy.Mat4f_rotatez

def Mat4f_ortho(*args):
  return _xgepy.Mat4f_ortho(*args)
Mat4f_ortho = _xgepy.Mat4f_ortho

def Mat4f_perspective(*args):
  return _xgepy.Mat4f_perspective(*args)
Mat4f_perspective = _xgepy.Mat4f_perspective

def Mat4f_frustum(*args):
  return _xgepy.Mat4f_frustum(*args)
Mat4f_frustum = _xgepy.Mat4f_frustum

def Mat4f_lookat(*args):
  return _xgepy.Mat4f_lookat(*args)
Mat4f_lookat = _xgepy.Mat4f_lookat

def Mat4f_getProjectionMatrix(*args):
  return _xgepy.Mat4f_getProjectionMatrix(*args)
Mat4f_getProjectionMatrix = _xgepy.Mat4f_getProjectionMatrix

class Matf(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Matf, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Matf, name)
    def Write(self, *args): return _xgepy.Matf_Write(self, *args)
    def Read(self, *args): return _xgepy.Matf_Read(self, *args)
    __swig_setmethods__["mem"] = _xgepy.Matf_mem_set
    __swig_getmethods__["mem"] = _xgepy.Matf_mem_get
    if _newclass:mem = _swig_property(_xgepy.Matf_mem_get, _xgepy.Matf_mem_set)
    __swig_setmethods__["dim"] = _xgepy.Matf_dim_set
    __swig_getmethods__["dim"] = _xgepy.Matf_dim_get
    if _newclass:dim = _swig_property(_xgepy.Matf_dim_get, _xgepy.Matf_dim_set)
    def __init__(self, *args): 
        this = _xgepy.new_Matf(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _xgepy.delete_Matf
    __del__ = lambda self : None;
    def c_vector(self): return _xgepy.Matf_c_vector(self)
    def get(self, *args): return _xgepy.Matf_get(self, *args)
    def set(self, *args): return _xgepy.Matf_set(self, *args)
    def __call__(self, *args): return _xgepy.Matf___call__(self, *args)
    def __getitem_ref__(self, *args): return _xgepy.Matf___getitem_ref__(self, *args)
    def __getitem__(self, *args): return _xgepy.Matf___getitem__(self, *args)
    def row(self, *args): return _xgepy.Matf_row(self, *args)
    def col(self, *args): return _xgepy.Matf_col(self, *args)
    def swapRows(self, *args): return _xgepy.Matf_swapRows(self, *args)
    def swapCols(self, *args): return _xgepy.Matf_swapCols(self, *args)
    def toMat4f(self): return _xgepy.Matf_toMat4f(self)
    def transpose(self): return _xgepy.Matf_transpose(self)
    def assign(self, *args): return _xgepy.Matf_assign(self, *args)
    def __eq__(self, *args): return _xgepy.Matf___eq__(self, *args)
    def fuzzyEqual(self, *args): return _xgepy.Matf_fuzzyEqual(self, *args)
    __swig_getmethods__["zero"] = lambda x: _xgepy.Matf_zero
    if _newclass:zero = staticmethod(_xgepy.Matf_zero)
    def almostZero(self, epsilon=0.001): return _xgepy.Matf_almostZero(self, epsilon)
    def almostIdentity(self, epsilon=0.001): return _xgepy.Matf_almostIdentity(self, epsilon)
    def extract(self, *args): return _xgepy.Matf_extract(self, *args)
    def __add__(self, *args): return _xgepy.Matf___add__(self, *args)
    def __sub__(self, *args): return _xgepy.Matf___sub__(self, *args)
    __swig_getmethods__["scaleV"] = lambda x: _xgepy.Matf_scaleV
    if _newclass:scaleV = staticmethod(_xgepy.Matf_scaleV)
    __swig_getmethods__["scaleH"] = lambda x: _xgepy.Matf_scaleH
    if _newclass:scaleH = staticmethod(_xgepy.Matf_scaleH)
    __swig_getmethods__["translateV"] = lambda x: _xgepy.Matf_translateV
    if _newclass:translateV = staticmethod(_xgepy.Matf_translateV)
    __swig_getmethods__["translateH"] = lambda x: _xgepy.Matf_translateH
    if _newclass:translateH = staticmethod(_xgepy.Matf_translateH)
    __swig_getmethods__["rotateV"] = lambda x: _xgepy.Matf_rotateV
    if _newclass:rotateV = staticmethod(_xgepy.Matf_rotateV)
    __swig_getmethods__["rotateH"] = lambda x: _xgepy.Matf_rotateH
    if _newclass:rotateH = staticmethod(_xgepy.Matf_rotateH)
    def __mul__(self, *args): return _xgepy.Matf___mul__(self, *args)
    def invert(self): return _xgepy.Matf_invert(self)
    __swig_getmethods__["getProjectionMatrix"] = lambda x: _xgepy.Matf_getProjectionMatrix
    if _newclass:getProjectionMatrix = staticmethod(_xgepy.Matf_getProjectionMatrix)
    def __str__(self): return _xgepy.Matf___str__(self)
    def __repr__(self): return _xgepy.Matf___repr__(self)
Matf_swigregister = _xgepy.Matf_swigregister
Matf_swigregister(Matf)

def Matf_zero(*args):
  return _xgepy.Matf_zero(*args)
Matf_zero = _xgepy.Matf_zero

def Matf_scaleV(*args):
  return _xgepy.Matf_scaleV(*args)
Matf_scaleV = _xgepy.Matf_scaleV

def Matf_scaleH(*args):
  return _xgepy.Matf_scaleH(*args)
Matf_scaleH = _xgepy.Matf_scaleH

def Matf_translateV(*args):
  return _xgepy.Matf_translateV(*args)
Matf_translateV = _xgepy.Matf_translateV

def Matf_translateH(*args):
  return _xgepy.Matf_translateH(*args)
Matf_translateH = _xgepy.Matf_translateH

def Matf_rotateV(*args):
  return _xgepy.Matf_rotateV(*args)
Matf_rotateV = _xgepy.Matf_rotateV

def Matf_rotateH(*args):
  return _xgepy.Matf_rotateH(*args)
Matf_rotateH = _xgepy.Matf_rotateH

def Matf_getProjectionMatrix(*args):
  return _xgepy.Matf_getProjectionMatrix(*args)
Matf_getProjectionMatrix = _xgepy.Matf_getProjectionMatrix

class Ball3f(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Ball3f, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Ball3f, name)
    __swig_setmethods__["center"] = _xgepy.Ball3f_center_set
    __swig_getmethods__["center"] = _xgepy.Ball3f_center_get
    if _newclass:center = _swig_property(_xgepy.Ball3f_center_get, _xgepy.Ball3f_center_set)
    __swig_setmethods__["radius"] = _xgepy.Ball3f_radius_set
    __swig_getmethods__["radius"] = _xgepy.Ball3f_radius_get
    if _newclass:radius = _swig_property(_xgepy.Ball3f_radius_get, _xgepy.Ball3f_radius_set)
    def __init__(self, *args): 
        this = _xgepy.new_Ball3f(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_getmethods__["bestFittingBall"] = lambda x: _xgepy.Ball3f_bestFittingBall
    if _newclass:bestFittingBall = staticmethod(_xgepy.Ball3f_bestFittingBall)
    def isValid(self): return _xgepy.Ball3f_isValid(self)
    def assign(self, *args): return _xgepy.Ball3f_assign(self, *args)
    def __eq__(self, *args): return _xgepy.Ball3f___eq__(self, *args)
    def fuzzyEqual(self, *args): return _xgepy.Ball3f_fuzzyEqual(self, *args)
    def surface(self): return _xgepy.Ball3f_surface(self)
    def volume(self): return _xgepy.Ball3f_volume(self)
    def __str__(self): return _xgepy.Ball3f___str__(self)
    def __repr__(self): return _xgepy.Ball3f___repr__(self)
    __swig_destroy__ = _xgepy.delete_Ball3f
    __del__ = lambda self : None;
Ball3f_swigregister = _xgepy.Ball3f_swigregister
Ball3f_swigregister(Ball3f)

def Ball3f_bestFittingBall(*args):
  return _xgepy.Ball3f_bestFittingBall(*args)
Ball3f_bestFittingBall = _xgepy.Ball3f_bestFittingBall

class Ballf(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Ballf, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Ballf, name)
    __swig_setmethods__["center"] = _xgepy.Ballf_center_set
    __swig_getmethods__["center"] = _xgepy.Ballf_center_get
    if _newclass:center = _swig_property(_xgepy.Ballf_center_get, _xgepy.Ballf_center_set)
    __swig_setmethods__["radius"] = _xgepy.Ballf_radius_set
    __swig_getmethods__["radius"] = _xgepy.Ballf_radius_get
    if _newclass:radius = _swig_property(_xgepy.Ballf_radius_get, _xgepy.Ballf_radius_set)
    def __init__(self, *args): 
        this = _xgepy.new_Ballf(*args)
        try: self.this.append(this)
        except: self.this = this
    def dim(self): return _xgepy.Ballf_dim(self)
    __swig_getmethods__["bestFittingBall"] = lambda x: _xgepy.Ballf_bestFittingBall
    if _newclass:bestFittingBall = staticmethod(_xgepy.Ballf_bestFittingBall)
    def isValid(self): return _xgepy.Ballf_isValid(self)
    def assign(self, *args): return _xgepy.Ballf_assign(self, *args)
    def __eq__(self, *args): return _xgepy.Ballf___eq__(self, *args)
    def fuzzyEqual(self, *args): return _xgepy.Ballf_fuzzyEqual(self, *args)
    def __str__(self): return _xgepy.Ballf___str__(self)
    def __repr__(self): return _xgepy.Ballf___repr__(self)
    __swig_destroy__ = _xgepy.delete_Ballf
    __del__ = lambda self : None;
Ballf_swigregister = _xgepy.Ballf_swigregister
Ballf_swigregister(Ballf)

def Ballf_bestFittingBall(*args):
  return _xgepy.Ballf_bestFittingBall(*args)
Ballf_bestFittingBall = _xgepy.Ballf_bestFittingBall

class Box2i(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Box2i, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Box2i, name)
    __repr__ = _swig_repr
    __swig_setmethods__["p1"] = _xgepy.Box2i_p1_set
    __swig_getmethods__["p1"] = _xgepy.Box2i_p1_get
    if _newclass:p1 = _swig_property(_xgepy.Box2i_p1_get, _xgepy.Box2i_p1_set)
    __swig_setmethods__["p2"] = _xgepy.Box2i_p2_set
    __swig_getmethods__["p2"] = _xgepy.Box2i_p2_get
    if _newclass:p2 = _swig_property(_xgepy.Box2i_p2_get, _xgepy.Box2i_p2_set)
    __swig_setmethods__["align"] = _xgepy.Box2i_align_set
    __swig_getmethods__["align"] = _xgepy.Box2i_align_get
    if _newclass:align = _swig_property(_xgepy.Box2i_align_get, _xgepy.Box2i_align_set)
    def __init__(self, *args): 
        this = _xgepy.new_Box2i(*args)
        try: self.this.append(this)
        except: self.this = this
    def left(self): return _xgepy.Box2i_left(self)
    def right(self): return _xgepy.Box2i_right(self)
    def bottom(self): return _xgepy.Box2i_bottom(self)
    def top(self): return _xgepy.Box2i_top(self)
    def width(self): return _xgepy.Box2i_width(self)
    def height(self): return _xgepy.Box2i_height(self)
    def area(self): return _xgepy.Box2i_area(self)
    def isValid(self): return _xgepy.Box2i_isValid(self)
    def contains(self, *args): return _xgepy.Box2i_contains(self, *args)
    def __lt__(self, *args): return _xgepy.Box2i___lt__(self, *args)
    __swig_destroy__ = _xgepy.delete_Box2i
    __del__ = lambda self : None;
Box2i_swigregister = _xgepy.Box2i_swigregister
Box2i_swigregister(Box2i)

class Box3f(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Box3f, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Box3f, name)
    def Write(self, *args): return _xgepy.Box3f_Write(self, *args)
    def Read(self, *args): return _xgepy.Box3f_Read(self, *args)
    __swig_setmethods__["p1"] = _xgepy.Box3f_p1_set
    __swig_getmethods__["p1"] = _xgepy.Box3f_p1_get
    if _newclass:p1 = _swig_property(_xgepy.Box3f_p1_get, _xgepy.Box3f_p1_set)
    __swig_setmethods__["p2"] = _xgepy.Box3f_p2_set
    __swig_getmethods__["p2"] = _xgepy.Box3f_p2_get
    if _newclass:p2 = _swig_property(_xgepy.Box3f_p2_get, _xgepy.Box3f_p2_set)
    def __init__(self, *args): 
        this = _xgepy.new_Box3f(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_getmethods__["buildFromCenter"] = lambda x: _xgepy.Box3f_buildFromCenter
    if _newclass:buildFromCenter = staticmethod(_xgepy.Box3f_buildFromCenter)
    def reset(self): return _xgepy.Box3f_reset(self)
    def getPoint(self, *args): return _xgepy.Box3f_getPoint(self, *args)
    def getPlane(self, *args): return _xgepy.Box3f_getPlane(self, *args)
    def add(self, *args): return _xgepy.Box3f_add(self, *args)
    def isValid(self): return _xgepy.Box3f_isValid(self)
    def size(self): return _xgepy.Box3f_size(self)
    def minsize(self): return _xgepy.Box3f_minsize(self)
    def maxsize(self): return _xgepy.Box3f_maxsize(self)
    def translate(self, *args): return _xgepy.Box3f_translate(self, *args)
    def scale(self, *args): return _xgepy.Box3f_scale(self, *args)
    def center(self): return _xgepy.Box3f_center(self)
    def contains(self, *args): return _xgepy.Box3f_contains(self, *args)
    def overlap(self, *args): return _xgepy.Box3f_overlap(self, *args)
    def intersection(self, *args): return _xgepy.Box3f_intersection(self, *args)
    def __eq__(self, *args): return _xgepy.Box3f___eq__(self, *args)
    def fuzzyEqual(self, *args): return _xgepy.Box3f_fuzzyEqual(self, *args)
    def surface(self): return _xgepy.Box3f_surface(self)
    def volume(self): return _xgepy.Box3f_volume(self)
    def __repr__(self): return _xgepy.Box3f___repr__(self)
    def __str__(self): return _xgepy.Box3f___str__(self)
    __swig_destroy__ = _xgepy.delete_Box3f
    __del__ = lambda self : None;
Box3f_swigregister = _xgepy.Box3f_swigregister
Box3f_swigregister(Box3f)

def Box3f_buildFromCenter(*args):
  return _xgepy.Box3f_buildFromCenter(*args)
Box3f_buildFromCenter = _xgepy.Box3f_buildFromCenter

class Boxf(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Boxf, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Boxf, name)
    __swig_setmethods__["p1"] = _xgepy.Boxf_p1_set
    __swig_getmethods__["p1"] = _xgepy.Boxf_p1_get
    if _newclass:p1 = _swig_property(_xgepy.Boxf_p1_get, _xgepy.Boxf_p1_set)
    __swig_setmethods__["p2"] = _xgepy.Boxf_p2_set
    __swig_getmethods__["p2"] = _xgepy.Boxf_p2_get
    if _newclass:p2 = _swig_property(_xgepy.Boxf_p2_get, _xgepy.Boxf_p2_set)
    def __init__(self, *args): 
        this = _xgepy.new_Boxf(*args)
        try: self.this.append(this)
        except: self.this = this
    def reset(self, *args): return _xgepy.Boxf_reset(self, *args)
    def add(self, *args): return _xgepy.Boxf_add(self, *args)
    def isValid(self): return _xgepy.Boxf_isValid(self)
    def center(self): return _xgepy.Boxf_center(self)
    def dim(self): return _xgepy.Boxf_dim(self)
    def size(self): return _xgepy.Boxf_size(self)
    def minsizeidx(self): return _xgepy.Boxf_minsizeidx(self)
    def maxsizeidx(self): return _xgepy.Boxf_maxsizeidx(self)
    def minsize(self): return _xgepy.Boxf_minsize(self)
    def maxsize(self): return _xgepy.Boxf_maxsize(self)
    def __eq__(self, *args): return _xgepy.Boxf___eq__(self, *args)
    def fuzzyEqual(self, *args): return _xgepy.Boxf_fuzzyEqual(self, *args)
    def scale(self, *args): return _xgepy.Boxf_scale(self, *args)
    def volume(self): return _xgepy.Boxf_volume(self)
    def overlap(self, *args): return _xgepy.Boxf_overlap(self, *args)
    def contains(self, *args): return _xgepy.Boxf_contains(self, *args)
    def toBox3f(self): return _xgepy.Boxf_toBox3f(self)
    def isAbove(self, *args): return _xgepy.Boxf_isAbove(self, *args)
    def isBelow(self, *args): return _xgepy.Boxf_isBelow(self, *args)
    def __repr__(self): return _xgepy.Boxf___repr__(self)
    def __str__(self): return _xgepy.Boxf___str__(self)
    __swig_destroy__ = _xgepy.delete_Boxf
    __del__ = lambda self : None;
Boxf_swigregister = _xgepy.Boxf_swigregister
Boxf_swigregister(Boxf)

class Ray3f(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Ray3f, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Ray3f, name)
    __swig_setmethods__["origin"] = _xgepy.Ray3f_origin_set
    __swig_getmethods__["origin"] = _xgepy.Ray3f_origin_get
    if _newclass:origin = _swig_property(_xgepy.Ray3f_origin_get, _xgepy.Ray3f_origin_set)
    __swig_setmethods__["dir"] = _xgepy.Ray3f_dir_set
    __swig_getmethods__["dir"] = _xgepy.Ray3f_dir_get
    if _newclass:dir = _swig_property(_xgepy.Ray3f_dir_get, _xgepy.Ray3f_dir_set)
    def __init__(self, *args): 
        this = _xgepy.new_Ray3f(*args)
        try: self.this.append(this)
        except: self.this = this
    def getPoint(self, *args): return _xgepy.Ray3f_getPoint(self, *args)
    def setOrigin(self, *args): return _xgepy.Ray3f_setOrigin(self, *args)
    def setDir(self, *args): return _xgepy.Ray3f_setDir(self, *args)
    def intersection(self, *args): return _xgepy.Ray3f_intersection(self, *args)
    def __eq__(self, *args): return _xgepy.Ray3f___eq__(self, *args)
    def __ne__(self, *args): return _xgepy.Ray3f___ne__(self, *args)
    def intersectLine(self, *args): return _xgepy.Ray3f_intersectLine(self, *args)
    def intersectTriangle(self, *args): return _xgepy.Ray3f_intersectTriangle(self, *args)
    def intersectBox(self, *args): return _xgepy.Ray3f_intersectBox(self, *args)
    def __str__(self): return _xgepy.Ray3f___str__(self)
    def __repr__(self): return _xgepy.Ray3f___repr__(self)
    __swig_destroy__ = _xgepy.delete_Ray3f
    __del__ = lambda self : None;
Ray3f_swigregister = _xgepy.Ray3f_swigregister
Ray3f_swigregister(Ray3f)

class Rayf(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Rayf, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Rayf, name)
    __swig_setmethods__["origin"] = _xgepy.Rayf_origin_set
    __swig_getmethods__["origin"] = _xgepy.Rayf_origin_get
    if _newclass:origin = _swig_property(_xgepy.Rayf_origin_get, _xgepy.Rayf_origin_set)
    __swig_setmethods__["dir"] = _xgepy.Rayf_dir_set
    __swig_getmethods__["dir"] = _xgepy.Rayf_dir_get
    if _newclass:dir = _swig_property(_xgepy.Rayf_dir_get, _xgepy.Rayf_dir_set)
    def __init__(self, *args): 
        this = _xgepy.new_Rayf(*args)
        try: self.this.append(this)
        except: self.this = this
    def getPoint(self, *args): return _xgepy.Rayf_getPoint(self, *args)
    def setOrigin(self, *args): return _xgepy.Rayf_setOrigin(self, *args)
    def setDir(self, *args): return _xgepy.Rayf_setDir(self, *args)
    def intersection(self, *args): return _xgepy.Rayf_intersection(self, *args)
    def __eq__(self, *args): return _xgepy.Rayf___eq__(self, *args)
    def __ne__(self, *args): return _xgepy.Rayf___ne__(self, *args)
    def __str__(self): return _xgepy.Rayf___str__(self)
    def __repr__(self): return _xgepy.Rayf___repr__(self)
    __swig_destroy__ = _xgepy.delete_Rayf
    __del__ = lambda self : None;
Rayf_swigregister = _xgepy.Rayf_swigregister
Rayf_swigregister(Rayf)

class Quaternion(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Quaternion, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Quaternion, name)
    __swig_setmethods__["x"] = _xgepy.Quaternion_x_set
    __swig_getmethods__["x"] = _xgepy.Quaternion_x_get
    if _newclass:x = _swig_property(_xgepy.Quaternion_x_get, _xgepy.Quaternion_x_set)
    __swig_setmethods__["y"] = _xgepy.Quaternion_y_set
    __swig_getmethods__["y"] = _xgepy.Quaternion_y_get
    if _newclass:y = _swig_property(_xgepy.Quaternion_y_get, _xgepy.Quaternion_y_set)
    __swig_setmethods__["z"] = _xgepy.Quaternion_z_set
    __swig_getmethods__["z"] = _xgepy.Quaternion_z_get
    if _newclass:z = _swig_property(_xgepy.Quaternion_z_get, _xgepy.Quaternion_z_set)
    __swig_setmethods__["w"] = _xgepy.Quaternion_w_set
    __swig_getmethods__["w"] = _xgepy.Quaternion_w_get
    if _newclass:w = _swig_property(_xgepy.Quaternion_w_get, _xgepy.Quaternion_w_set)
    def __init__(self, *args): 
        this = _xgepy.new_Quaternion(*args)
        try: self.this.append(this)
        except: self.this = this
    def get(self, *args): return _xgepy.Quaternion_get(self, *args)
    def set(self, *args): return _xgepy.Quaternion_set(self, *args)
    def __getitem_ref__(self, *args): return _xgepy.Quaternion___getitem_ref__(self, *args)
    def __getitem__(self, *args): return _xgepy.Quaternion___getitem__(self, *args)
    def fromMatrix(self, *args): return _xgepy.Quaternion_fromMatrix(self, *args)
    def getMatrix(self): return _xgepy.Quaternion_getMatrix(self)
    def getAngle(self): return _xgepy.Quaternion_getAngle(self)
    def getAxis(self, *args): return _xgepy.Quaternion_getAxis(self, *args)
    def __eq__(self, *args): return _xgepy.Quaternion___eq__(self, *args)
    def assign(self, *args): return _xgepy.Quaternion_assign(self, *args)
    def fuzzyEqual(self, *args): return _xgepy.Quaternion_fuzzyEqual(self, *args)
    def __add__(self, *args): return _xgepy.Quaternion___add__(self, *args)
    def __sub__(self, *args): return _xgepy.Quaternion___sub__(self, *args)
    def __neg__(self): return _xgepy.Quaternion___neg__(self)
    def Dot(self, *args): return _xgepy.Quaternion_Dot(self, *args)
    def Norm(self): return _xgepy.Quaternion_Norm(self)
    def Inverse(self): return _xgepy.Quaternion_Inverse(self)
    def UnitInverse(self): return _xgepy.Quaternion_UnitInverse(self)
    def Exp(self): return _xgepy.Quaternion_Exp(self)
    def Log(self): return _xgepy.Quaternion_Log(self)
    def __mul__(self, *args): return _xgepy.Quaternion___mul__(self, *args)
    __swig_getmethods__["Slerp"] = lambda x: _xgepy.Quaternion_Slerp
    if _newclass:Slerp = staticmethod(_xgepy.Quaternion_Slerp)
    __swig_getmethods__["SlerpExtraSpins"] = lambda x: _xgepy.Quaternion_SlerpExtraSpins
    if _newclass:SlerpExtraSpins = staticmethod(_xgepy.Quaternion_SlerpExtraSpins)
    __swig_getmethods__["Intermediate"] = lambda x: _xgepy.Quaternion_Intermediate
    if _newclass:Intermediate = staticmethod(_xgepy.Quaternion_Intermediate)
    __swig_getmethods__["Squad"] = lambda x: _xgepy.Quaternion_Squad
    if _newclass:Squad = staticmethod(_xgepy.Quaternion_Squad)
    __swig_getmethods__["trackball"] = lambda x: _xgepy.Quaternion_trackball
    if _newclass:trackball = staticmethod(_xgepy.Quaternion_trackball)
    def __repr__(self): return _xgepy.Quaternion___repr__(self)
    __swig_destroy__ = _xgepy.delete_Quaternion
    __del__ = lambda self : None;
Quaternion_swigregister = _xgepy.Quaternion_swigregister
Quaternion_swigregister(Quaternion)
Quaternion.ZERO = _xgepy.cvar.Quaternion_ZERO
Quaternion.IDENTITY = _xgepy.cvar.Quaternion_IDENTITY

def Quaternion_Slerp(*args):
  return _xgepy.Quaternion_Slerp(*args)
Quaternion_Slerp = _xgepy.Quaternion_Slerp

def Quaternion_SlerpExtraSpins(*args):
  return _xgepy.Quaternion_SlerpExtraSpins(*args)
Quaternion_SlerpExtraSpins = _xgepy.Quaternion_SlerpExtraSpins

def Quaternion_Intermediate(*args):
  return _xgepy.Quaternion_Intermediate(*args)
Quaternion_Intermediate = _xgepy.Quaternion_Intermediate

def Quaternion_Squad(*args):
  return _xgepy.Quaternion_Squad(*args)
Quaternion_Squad = _xgepy.Quaternion_Squad

def Quaternion_trackball(*args):
  return _xgepy.Quaternion_trackball(*args)
Quaternion_trackball = _xgepy.Quaternion_trackball

class LocalSystem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LocalSystem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LocalSystem, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pos"] = _xgepy.LocalSystem_pos_set
    __swig_getmethods__["pos"] = _xgepy.LocalSystem_pos_get
    if _newclass:pos = _swig_property(_xgepy.LocalSystem_pos_get, _xgepy.LocalSystem_pos_set)
    __swig_setmethods__["dir"] = _xgepy.LocalSystem_dir_set
    __swig_getmethods__["dir"] = _xgepy.LocalSystem_dir_get
    if _newclass:dir = _swig_property(_xgepy.LocalSystem_dir_get, _xgepy.LocalSystem_dir_set)
    __swig_setmethods__["vup"] = _xgepy.LocalSystem_vup_set
    __swig_getmethods__["vup"] = _xgepy.LocalSystem_vup_get
    if _newclass:vup = _swig_property(_xgepy.LocalSystem_vup_get, _xgepy.LocalSystem_vup_set)
    def __init__(self): 
        this = _xgepy.new_LocalSystem()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _xgepy.delete_LocalSystem
    __del__ = lambda self : None;
LocalSystem_swigregister = _xgepy.LocalSystem_swigregister
LocalSystem_swigregister(LocalSystem)

class Array(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Array, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Array, name)
    def Write(self, *args): return _xgepy.Array_Write(self, *args)
    def Read(self, *args): return _xgepy.Array_Read(self, *args)
    def __init__(self, *args): 
        this = _xgepy.new_Array(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _xgepy.delete_Array
    __del__ = lambda self : None;
    def assign(self, *args): return _xgepy.Array_assign(self, *args)
    def size(self): return _xgepy.Array_size(self)
    def memsize(self): return _xgepy.Array_memsize(self)
    def mem(self): return _xgepy.Array_mem(self)
    def resize(self, *args): return _xgepy.Array_resize(self, *args)
    def append(self, *args): return _xgepy.Array_append(self, *args)
    def zero(self): return _xgepy.Array_zero(self)
    def __eq__(self, *args): return _xgepy.Array___eq__(self, *args)
    def __ne__(self, *args): return _xgepy.Array___ne__(self, *args)
    def get(self, *args): return _xgepy.Array_get(self, *args)
    def set(self, *args): return _xgepy.Array_set(self, *args)
    def __getitem_ref__(self, *args): return _xgepy.Array___getitem_ref__(self, *args)
    def __getitem__(self, *args): return _xgepy.Array___getitem__(self, *args)
    def extract(self, *args): return _xgepy.Array_extract(self, *args)
    __swig_getmethods__["parse"] = lambda x: _xgepy.Array_parse
    if _newclass:parse = staticmethod(_xgepy.Array_parse)
    def c_vector(self): return _xgepy.Array_c_vector(self)
    def __repr__(self): return _xgepy.Array___repr__(self)
    def __str__(self): return _xgepy.Array___str__(self)
Array_swigregister = _xgepy.Array_swigregister
Array_swigregister(Array)

def Array_parse(*args):
  return _xgepy.Array_parse(*args)
Array_parse = _xgepy.Array_parse

class Color4f(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Color4f, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Color4f, name)
    def Write(self, *args): return _xgepy.Color4f_Write(self, *args)
    def Read(self, *args): return _xgepy.Color4f_Read(self, *args)
    __swig_setmethods__["r"] = _xgepy.Color4f_r_set
    __swig_getmethods__["r"] = _xgepy.Color4f_r_get
    if _newclass:r = _swig_property(_xgepy.Color4f_r_get, _xgepy.Color4f_r_set)
    __swig_setmethods__["g"] = _xgepy.Color4f_g_set
    __swig_getmethods__["g"] = _xgepy.Color4f_g_get
    if _newclass:g = _swig_property(_xgepy.Color4f_g_get, _xgepy.Color4f_g_set)
    __swig_setmethods__["b"] = _xgepy.Color4f_b_set
    __swig_getmethods__["b"] = _xgepy.Color4f_b_get
    if _newclass:b = _swig_property(_xgepy.Color4f_b_get, _xgepy.Color4f_b_set)
    __swig_setmethods__["a"] = _xgepy.Color4f_a_set
    __swig_getmethods__["a"] = _xgepy.Color4f_a_get
    if _newclass:a = _swig_property(_xgepy.Color4f_a_get, _xgepy.Color4f_a_set)
    __swig_getmethods__["Black"] = lambda x: _xgepy.Color4f_Black
    if _newclass:Black = staticmethod(_xgepy.Color4f_Black)
    __swig_getmethods__["White"] = lambda x: _xgepy.Color4f_White
    if _newclass:White = staticmethod(_xgepy.Color4f_White)
    __swig_getmethods__["Red"] = lambda x: _xgepy.Color4f_Red
    if _newclass:Red = staticmethod(_xgepy.Color4f_Red)
    __swig_getmethods__["Green"] = lambda x: _xgepy.Color4f_Green
    if _newclass:Green = staticmethod(_xgepy.Color4f_Green)
    __swig_getmethods__["Blue"] = lambda x: _xgepy.Color4f_Blue
    if _newclass:Blue = staticmethod(_xgepy.Color4f_Blue)
    __swig_getmethods__["Yellow"] = lambda x: _xgepy.Color4f_Yellow
    if _newclass:Yellow = staticmethod(_xgepy.Color4f_Yellow)
    def __init__(self, *args): 
        this = _xgepy.new_Color4f(*args)
        try: self.this.append(this)
        except: self.this = this
    def get(self, *args): return _xgepy.Color4f_get(self, *args)
    def set(self, *args): return _xgepy.Color4f_set(self, *args)
    def __getitem_ref__(self, *args): return _xgepy.Color4f___getitem_ref__(self, *args)
    def __getitem__(self, *args): return _xgepy.Color4f___getitem__(self, *args)
    def __eq__(self, *args): return _xgepy.Color4f___eq__(self, *args)
    def __ne__(self, *args): return _xgepy.Color4f___ne__(self, *args)
    __swig_getmethods__["sscanf"] = lambda x: _xgepy.Color4f_sscanf
    if _newclass:sscanf = staticmethod(_xgepy.Color4f_sscanf)
    __swig_getmethods__["randomRGB"] = lambda x: _xgepy.Color4f_randomRGB
    if _newclass:randomRGB = staticmethod(_xgepy.Color4f_randomRGB)
    __swig_getmethods__["randomRGBA"] = lambda x: _xgepy.Color4f_randomRGBA
    if _newclass:randomRGBA = staticmethod(_xgepy.Color4f_randomRGBA)
    def __str__(self): return _xgepy.Color4f___str__(self)
    def __repr__(self): return _xgepy.Color4f___repr__(self)
    __swig_destroy__ = _xgepy.delete_Color4f
    __del__ = lambda self : None;
Color4f_swigregister = _xgepy.Color4f_swigregister
Color4f_swigregister(Color4f)

def Color4f_Black():
  return _xgepy.Color4f_Black()
Color4f_Black = _xgepy.Color4f_Black

def Color4f_White():
  return _xgepy.Color4f_White()
Color4f_White = _xgepy.Color4f_White

def Color4f_Red():
  return _xgepy.Color4f_Red()
Color4f_Red = _xgepy.Color4f_Red

def Color4f_Green():
  return _xgepy.Color4f_Green()
Color4f_Green = _xgepy.Color4f_Green

def Color4f_Blue():
  return _xgepy.Color4f_Blue()
Color4f_Blue = _xgepy.Color4f_Blue

def Color4f_Yellow():
  return _xgepy.Color4f_Yellow()
Color4f_Yellow = _xgepy.Color4f_Yellow

def Color4f_sscanf(*args):
  return _xgepy.Color4f_sscanf(*args)
Color4f_sscanf = _xgepy.Color4f_sscanf

def Color4f_randomRGB():
  return _xgepy.Color4f_randomRGB()
Color4f_randomRGB = _xgepy.Color4f_randomRGB

def Color4f_randomRGBA():
  return _xgepy.Color4f_randomRGBA()
Color4f_randomRGBA = _xgepy.Color4f_randomRGBA

class Frustum(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Frustum, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Frustum, name)
    __swig_setmethods__["walk_speed"] = _xgepy.Frustum_walk_speed_set
    __swig_getmethods__["walk_speed"] = _xgepy.Frustum_walk_speed_get
    if _newclass:walk_speed = _swig_property(_xgepy.Frustum_walk_speed_get, _xgepy.Frustum_walk_speed_set)
    __swig_setmethods__["x"] = _xgepy.Frustum_x_set
    __swig_getmethods__["x"] = _xgepy.Frustum_x_get
    if _newclass:x = _swig_property(_xgepy.Frustum_x_get, _xgepy.Frustum_x_set)
    __swig_setmethods__["y"] = _xgepy.Frustum_y_set
    __swig_getmethods__["y"] = _xgepy.Frustum_y_get
    if _newclass:y = _swig_property(_xgepy.Frustum_y_get, _xgepy.Frustum_y_set)
    __swig_setmethods__["width"] = _xgepy.Frustum_width_set
    __swig_getmethods__["width"] = _xgepy.Frustum_width_get
    if _newclass:width = _swig_property(_xgepy.Frustum_width_get, _xgepy.Frustum_width_set)
    __swig_setmethods__["height"] = _xgepy.Frustum_height_set
    __swig_getmethods__["height"] = _xgepy.Frustum_height_get
    if _newclass:height = _swig_property(_xgepy.Frustum_height_get, _xgepy.Frustum_height_set)
    __swig_setmethods__["pos"] = _xgepy.Frustum_pos_set
    __swig_getmethods__["pos"] = _xgepy.Frustum_pos_get
    if _newclass:pos = _swig_property(_xgepy.Frustum_pos_get, _xgepy.Frustum_pos_set)
    __swig_setmethods__["dir"] = _xgepy.Frustum_dir_set
    __swig_getmethods__["dir"] = _xgepy.Frustum_dir_get
    if _newclass:dir = _swig_property(_xgepy.Frustum_dir_get, _xgepy.Frustum_dir_set)
    __swig_setmethods__["vup"] = _xgepy.Frustum_vup_set
    __swig_getmethods__["vup"] = _xgepy.Frustum_vup_get
    if _newclass:vup = _swig_property(_xgepy.Frustum_vup_get, _xgepy.Frustum_vup_set)
    __swig_setmethods__["right"] = _xgepy.Frustum_right_set
    __swig_getmethods__["right"] = _xgepy.Frustum_right_get
    if _newclass:right = _swig_property(_xgepy.Frustum_right_get, _xgepy.Frustum_right_set)
    __swig_setmethods__["projection_matrix"] = _xgepy.Frustum_projection_matrix_set
    __swig_getmethods__["projection_matrix"] = _xgepy.Frustum_projection_matrix_get
    if _newclass:projection_matrix = _swig_property(_xgepy.Frustum_projection_matrix_get, _xgepy.Frustum_projection_matrix_set)
    __swig_setmethods__["mat_dir"] = _xgepy.Frustum_mat_dir_set
    __swig_getmethods__["mat_dir"] = _xgepy.Frustum_mat_dir_get
    if _newclass:mat_dir = _swig_property(_xgepy.Frustum_mat_dir_get, _xgepy.Frustum_mat_dir_set)
    __swig_setmethods__["mat_inv"] = _xgepy.Frustum_mat_inv_set
    __swig_getmethods__["mat_inv"] = _xgepy.Frustum_mat_inv_get
    if _newclass:mat_inv = _swig_property(_xgepy.Frustum_mat_inv_get, _xgepy.Frustum_mat_inv_set)
    __swig_setmethods__["aabb"] = _xgepy.Frustum_aabb_set
    __swig_getmethods__["aabb"] = _xgepy.Frustum_aabb_get
    if _newclass:aabb = _swig_property(_xgepy.Frustum_aabb_get, _xgepy.Frustum_aabb_set)
    PLANE_LEFT = _xgepy.Frustum_PLANE_LEFT
    PLANE_RIGHT = _xgepy.Frustum_PLANE_RIGHT
    PLANE_TOP = _xgepy.Frustum_PLANE_TOP
    PLANE_BOTTOM = _xgepy.Frustum_PLANE_BOTTOM
    PLANE_NEAR = _xgepy.Frustum_PLANE_NEAR
    PLANE_FAR = _xgepy.Frustum_PLANE_FAR
    __swig_setmethods__["planes"] = _xgepy.Frustum_planes_set
    __swig_getmethods__["planes"] = _xgepy.Frustum_planes_get
    if _newclass:planes = _swig_property(_xgepy.Frustum_planes_get, _xgepy.Frustum_planes_set)
    def __init__(self): 
        this = _xgepy.new_Frustum()
        try: self.this.append(this)
        except: self.this = this
    def getRay(self): return _xgepy.Frustum_getRay(self)
    def __eq__(self, *args): return _xgepy.Frustum___eq__(self, *args)
    POINT_NEAR_BOTTOM_LEFT = _xgepy.Frustum_POINT_NEAR_BOTTOM_LEFT
    POINT_NEAR_BOTTOM_RIGHT = _xgepy.Frustum_POINT_NEAR_BOTTOM_RIGHT
    POINT_NEAR_TOP_RIGHT = _xgepy.Frustum_POINT_NEAR_TOP_RIGHT
    POINT_NEAR_TOP_LEFT = _xgepy.Frustum_POINT_NEAR_TOP_LEFT
    POINT_FAR_BOTTOM_LEFT = _xgepy.Frustum_POINT_FAR_BOTTOM_LEFT
    POINT_FAR_BOTTOM_RIGHT = _xgepy.Frustum_POINT_FAR_BOTTOM_RIGHT
    POINT_FAR_TOP_RIGHT = _xgepy.Frustum_POINT_FAR_TOP_RIGHT
    POINT_FAR_TOP_LEFT = _xgepy.Frustum_POINT_FAR_TOP_LEFT
    __swig_setmethods__["points"] = _xgepy.Frustum_points_set
    __swig_getmethods__["points"] = _xgepy.Frustum_points_get
    if _newclass:points = _swig_property(_xgepy.Frustum_points_get, _xgepy.Frustum_points_set)
    def refresh(self): return _xgepy.Frustum_refresh(self)
    def intersect(self, *args): return _xgepy.Frustum_intersect(self, *args)
    def contains(self, *args): return _xgepy.Frustum_contains(self, *args)
    def getModelviewMatrix(self): return _xgepy.Frustum_getModelviewMatrix(self)
    def render(self, *args): return _xgepy.Frustum_render(self, *args)
    def project(self, *args): return _xgepy.Frustum_project(self, *args)
    def unproject(self, *args): return _xgepy.Frustum_unproject(self, *args)
    def guessBestPosition(self, *args): return _xgepy.Frustum_guessBestPosition(self, *args)
    def guessProjectionMatrix(self, *args): return _xgepy.Frustum_guessProjectionMatrix(self, *args)
    def fixVup(self): return _xgepy.Frustum_fixVup(self)
    def getScreenDistance(self, *args): return _xgepy.Frustum_getScreenDistance(self, *args)
    def nearOnScreen(self, *args): return _xgepy.Frustum_nearOnScreen(self, *args)
    def __repr__(self): return _xgepy.Frustum___repr__(self)
    def __str__(self): return _xgepy.Frustum___str__(self)
    __swig_destroy__ = _xgepy.delete_Frustum
    __del__ = lambda self : None;
Frustum_swigregister = _xgepy.Frustum_swigregister
Frustum_swigregister(Frustum)

class Texture(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Texture, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Texture, name)
    __swig_setmethods__["filename"] = _xgepy.Texture_filename_set
    __swig_getmethods__["filename"] = _xgepy.Texture_filename_get
    if _newclass:filename = _swig_property(_xgepy.Texture_filename_get, _xgepy.Texture_filename_set)
    __swig_setmethods__["bpp"] = _xgepy.Texture_bpp_set
    __swig_getmethods__["bpp"] = _xgepy.Texture_bpp_get
    if _newclass:bpp = _swig_property(_xgepy.Texture_bpp_get, _xgepy.Texture_bpp_set)
    __swig_setmethods__["width"] = _xgepy.Texture_width_set
    __swig_getmethods__["width"] = _xgepy.Texture_width_get
    if _newclass:width = _swig_property(_xgepy.Texture_width_get, _xgepy.Texture_width_set)
    __swig_setmethods__["height"] = _xgepy.Texture_height_set
    __swig_getmethods__["height"] = _xgepy.Texture_height_get
    if _newclass:height = _swig_property(_xgepy.Texture_height_get, _xgepy.Texture_height_set)
    __swig_setmethods__["buffer"] = _xgepy.Texture_buffer_set
    __swig_getmethods__["buffer"] = _xgepy.Texture_buffer_get
    if _newclass:buffer = _swig_property(_xgepy.Texture_buffer_get, _xgepy.Texture_buffer_set)
    def __init__(self, *args): 
        this = _xgepy.new_Texture(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _xgepy.delete_Texture
    __del__ = lambda self : None;
    __swig_getmethods__["open"] = lambda x: _xgepy.Texture_open
    if _newclass:open = staticmethod(_xgepy.Texture_open)
    __swig_getmethods__["flushCache"] = lambda x: _xgepy.Texture_flushCache
    if _newclass:flushCache = staticmethod(_xgepy.Texture_flushCache)
    __swig_getmethods__["getCache"] = lambda x: _xgepy.Texture_getCache
    if _newclass:getCache = staticmethod(_xgepy.Texture_getCache)
    def save(self, *args): return _xgepy.Texture_save(self, *args)
    def deallocBuffer(self): return _xgepy.Texture_deallocBuffer(self)
    def memsize(self): return _xgepy.Texture_memsize(self)
    def change(self, *args): return _xgepy.Texture_change(self, *args)
    def getPixel(self, *args): return _xgepy.Texture_getPixel(self, *args)
    def goodPixel(self, *args): return _xgepy.Texture_goodPixel(self, *args)
    def get(self, *args): return _xgepy.Texture_get(self, *args)
    def set(self, *args): return _xgepy.Texture_set(self, *args)
    def flipVertical(self): return _xgepy.Texture_flipVertical(self)
    def __repr__(self): return _xgepy.Texture___repr__(self)
    def __str__(self): return _xgepy.Texture___str__(self)
Texture_swigregister = _xgepy.Texture_swigregister
Texture_swigregister(Texture)

def Texture_open(*args):
  return _xgepy.Texture_open(*args)
Texture_open = _xgepy.Texture_open

def Texture_flushCache():
  return _xgepy.Texture_flushCache()
Texture_flushCache = _xgepy.Texture_flushCache

def Texture_getCache():
  return _xgepy.Texture_getCache()
Texture_getCache = _xgepy.Texture_getCache

class Manipulator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Manipulator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Manipulator, name)
    __repr__ = _swig_repr
    TRANSLATE = _xgepy.Manipulator_TRANSLATE
    SCALE = _xgepy.Manipulator_SCALE
    ROTATE = _xgepy.Manipulator_ROTATE
    __swig_setmethods__["EPSILON"] = _xgepy.Manipulator_EPSILON_set
    __swig_getmethods__["EPSILON"] = _xgepy.Manipulator_EPSILON_get
    if _newclass:EPSILON = _swig_property(_xgepy.Manipulator_EPSILON_get, _xgepy.Manipulator_EPSILON_set)
    __swig_setmethods__["freeze_x"] = _xgepy.Manipulator_freeze_x_set
    __swig_getmethods__["freeze_x"] = _xgepy.Manipulator_freeze_x_get
    if _newclass:freeze_x = _swig_property(_xgepy.Manipulator_freeze_x_get, _xgepy.Manipulator_freeze_x_set)
    __swig_setmethods__["freeze_y"] = _xgepy.Manipulator_freeze_y_set
    __swig_getmethods__["freeze_y"] = _xgepy.Manipulator_freeze_y_get
    if _newclass:freeze_y = _swig_property(_xgepy.Manipulator_freeze_y_get, _xgepy.Manipulator_freeze_y_set)
    __swig_setmethods__["freeze_z"] = _xgepy.Manipulator_freeze_z_set
    __swig_getmethods__["freeze_z"] = _xgepy.Manipulator_freeze_z_get
    if _newclass:freeze_z = _swig_property(_xgepy.Manipulator_freeze_z_get, _xgepy.Manipulator_freeze_z_set)
    def __init__(self, epsilon=0.1): 
        this = _xgepy.new_Manipulator(epsilon)
        try: self.this.append(this)
        except: self.this = this
    def setObject(self, *args): return _xgepy.Manipulator_setObject(self, *args)
    def isRunning(self): return _xgepy.Manipulator_isRunning(self)
    __swig_getmethods__["canManipulate"] = lambda x: _xgepy.Manipulator_canManipulate
    if _newclass:canManipulate = staticmethod(_xgepy.Manipulator_canManipulate)
    def onMouseDown(self, *args): return _xgepy.Manipulator_onMouseDown(self, *args)
    def onMouseMove(self, *args): return _xgepy.Manipulator_onMouseMove(self, *args)
    def onMouseUp(self, *args): return _xgepy.Manipulator_onMouseUp(self, *args)
    def render(self, *args): return _xgepy.Manipulator_render(self, *args)
    def setOperation(self, *args): return _xgepy.Manipulator_setOperation(self, *args)
    def getOperation(self): return _xgepy.Manipulator_getOperation(self)
    __swig_destroy__ = _xgepy.delete_Manipulator
    __del__ = lambda self : None;
Manipulator_swigregister = _xgepy.Manipulator_swigregister
Manipulator_swigregister(Manipulator)

def Manipulator_canManipulate(*args):
  return _xgepy.Manipulator_canManipulate(*args)
Manipulator_canManipulate = _xgepy.Manipulator_canManipulate

class Batch(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Batch, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Batch, name)
    __repr__ = _swig_repr
    def Write(self, *args): return _xgepy.Batch_Write(self, *args)
    def Read(self, *args): return _xgepy.Batch_Read(self, *args)
    POINTS = _xgepy.Batch_POINTS
    LINES = _xgepy.Batch_LINES
    LINE_LOOP = _xgepy.Batch_LINE_LOOP
    LINE_STRIP = _xgepy.Batch_LINE_STRIP
    TRIANGLES = _xgepy.Batch_TRIANGLES
    TRIANGLE_STRIP = _xgepy.Batch_TRIANGLE_STRIP
    TRIANGLE_FAN = _xgepy.Batch_TRIANGLE_FAN
    QUADS = _xgepy.Batch_QUADS
    QUAD_STRIP = _xgepy.Batch_QUAD_STRIP
    POLYGON = _xgepy.Batch_POLYGON
    __swig_setmethods__["primitive"] = _xgepy.Batch_primitive_set
    __swig_getmethods__["primitive"] = _xgepy.Batch_primitive_get
    if _newclass:primitive = _swig_property(_xgepy.Batch_primitive_get, _xgepy.Batch_primitive_set)
    __swig_setmethods__["ambient"] = _xgepy.Batch_ambient_set
    __swig_getmethods__["ambient"] = _xgepy.Batch_ambient_get
    if _newclass:ambient = _swig_property(_xgepy.Batch_ambient_get, _xgepy.Batch_ambient_set)
    __swig_setmethods__["diffuse"] = _xgepy.Batch_diffuse_set
    __swig_getmethods__["diffuse"] = _xgepy.Batch_diffuse_get
    if _newclass:diffuse = _swig_property(_xgepy.Batch_diffuse_get, _xgepy.Batch_diffuse_set)
    __swig_setmethods__["specular"] = _xgepy.Batch_specular_set
    __swig_getmethods__["specular"] = _xgepy.Batch_specular_get
    if _newclass:specular = _swig_property(_xgepy.Batch_specular_get, _xgepy.Batch_specular_set)
    __swig_setmethods__["emission"] = _xgepy.Batch_emission_set
    __swig_getmethods__["emission"] = _xgepy.Batch_emission_get
    if _newclass:emission = _swig_property(_xgepy.Batch_emission_get, _xgepy.Batch_emission_set)
    __swig_setmethods__["shininess"] = _xgepy.Batch_shininess_set
    __swig_getmethods__["shininess"] = _xgepy.Batch_shininess_get
    if _newclass:shininess = _swig_property(_xgepy.Batch_shininess_get, _xgepy.Batch_shininess_set)
    __swig_setmethods__["matrix"] = _xgepy.Batch_matrix_set
    __swig_getmethods__["matrix"] = _xgepy.Batch_matrix_get
    if _newclass:matrix = _swig_property(_xgepy.Batch_matrix_get, _xgepy.Batch_matrix_set)
    __swig_setmethods__["vertices"] = _xgepy.Batch_vertices_set
    __swig_getmethods__["vertices"] = _xgepy.Batch_vertices_get
    if _newclass:vertices = _swig_property(_xgepy.Batch_vertices_get, _xgepy.Batch_vertices_set)
    __swig_setmethods__["normals"] = _xgepy.Batch_normals_set
    __swig_getmethods__["normals"] = _xgepy.Batch_normals_get
    if _newclass:normals = _swig_property(_xgepy.Batch_normals_get, _xgepy.Batch_normals_set)
    __swig_setmethods__["colors"] = _xgepy.Batch_colors_set
    __swig_getmethods__["colors"] = _xgepy.Batch_colors_get
    if _newclass:colors = _swig_property(_xgepy.Batch_colors_get, _xgepy.Batch_colors_set)
    __swig_setmethods__["texture0"] = _xgepy.Batch_texture0_set
    __swig_getmethods__["texture0"] = _xgepy.Batch_texture0_get
    if _newclass:texture0 = _swig_property(_xgepy.Batch_texture0_get, _xgepy.Batch_texture0_set)
    __swig_setmethods__["texture0coords"] = _xgepy.Batch_texture0coords_set
    __swig_getmethods__["texture0coords"] = _xgepy.Batch_texture0coords_get
    if _newclass:texture0coords = _swig_property(_xgepy.Batch_texture0coords_get, _xgepy.Batch_texture0coords_set)
    __swig_setmethods__["texture1"] = _xgepy.Batch_texture1_set
    __swig_getmethods__["texture1"] = _xgepy.Batch_texture1_get
    if _newclass:texture1 = _swig_property(_xgepy.Batch_texture1_get, _xgepy.Batch_texture1_set)
    __swig_setmethods__["texture1coords"] = _xgepy.Batch_texture1coords_set
    __swig_getmethods__["texture1coords"] = _xgepy.Batch_texture1coords_get
    if _newclass:texture1coords = _swig_property(_xgepy.Batch_texture1coords_get, _xgepy.Batch_texture1coords_set)
    def __init__(self, *args): 
        this = _xgepy.new_Batch(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["DefaultAmbientColor"] = _xgepy.Batch_DefaultAmbientColor_set
    __swig_getmethods__["DefaultAmbientColor"] = _xgepy.Batch_DefaultAmbientColor_get
    if _newclass:DefaultAmbientColor = _swig_property(_xgepy.Batch_DefaultAmbientColor_get, _xgepy.Batch_DefaultAmbientColor_set)
    __swig_setmethods__["DefaultDiffuseColor"] = _xgepy.Batch_DefaultDiffuseColor_set
    __swig_getmethods__["DefaultDiffuseColor"] = _xgepy.Batch_DefaultDiffuseColor_get
    if _newclass:DefaultDiffuseColor = _swig_property(_xgepy.Batch_DefaultDiffuseColor_get, _xgepy.Batch_DefaultDiffuseColor_set)
    __swig_setmethods__["DefaultSpecularColor"] = _xgepy.Batch_DefaultSpecularColor_set
    __swig_getmethods__["DefaultSpecularColor"] = _xgepy.Batch_DefaultSpecularColor_get
    if _newclass:DefaultSpecularColor = _swig_property(_xgepy.Batch_DefaultSpecularColor_get, _xgepy.Batch_DefaultSpecularColor_set)
    __swig_setmethods__["DefaultEmissionColor"] = _xgepy.Batch_DefaultEmissionColor_set
    __swig_getmethods__["DefaultEmissionColor"] = _xgepy.Batch_DefaultEmissionColor_get
    if _newclass:DefaultEmissionColor = _swig_property(_xgepy.Batch_DefaultEmissionColor_get, _xgepy.Batch_DefaultEmissionColor_set)
    __swig_setmethods__["DefaultShininess"] = _xgepy.Batch_DefaultShininess_set
    __swig_getmethods__["DefaultShininess"] = _xgepy.Batch_DefaultShininess_get
    if _newclass:DefaultShininess = _swig_property(_xgepy.Batch_DefaultShininess_get, _xgepy.Batch_DefaultShininess_set)
    def setColor(self, *args): return _xgepy.Batch_setColor(self, *args)
    def invalidateBox(self): return _xgepy.Batch_invalidateBox(self)
    def getTriangles(self, *args): return _xgepy.Batch_getTriangles(self, *args)
    def getBox(self): return _xgepy.Batch_getBox(self)
    def getPick(self, *args): return _xgepy.Batch_getPick(self, *args)
    def getNormals(self): return _xgepy.Batch_getNormals(self)
    __swig_getmethods__["Quad"] = lambda x: _xgepy.Batch_Quad
    if _newclass:Quad = staticmethod(_xgepy.Batch_Quad)
    __swig_getmethods__["Cube"] = lambda x: _xgepy.Batch_Cube
    if _newclass:Cube = staticmethod(_xgepy.Batch_Cube)
    __swig_getmethods__["Sky"] = lambda x: _xgepy.Batch_Sky
    if _newclass:Sky = staticmethod(_xgepy.Batch_Sky)
    __swig_getmethods__["Circle"] = lambda x: _xgepy.Batch_Circle
    if _newclass:Circle = staticmethod(_xgepy.Batch_Circle)
    __swig_getmethods__["openPly"] = lambda x: _xgepy.Batch_openPly
    if _newclass:openPly = staticmethod(_xgepy.Batch_openPly)
    __swig_getmethods__["openObj"] = lambda x: _xgepy.Batch_openObj
    if _newclass:openObj = staticmethod(_xgepy.Batch_openObj)
    __swig_getmethods__["saveObj"] = lambda x: _xgepy.Batch_saveObj
    if _newclass:saveObj = staticmethod(_xgepy.Batch_saveObj)
    __swig_getmethods__["openPtx"] = lambda x: _xgepy.Batch_openPtx
    if _newclass:openPtx = staticmethod(_xgepy.Batch_openPtx)
    __swig_getmethods__["Save"] = lambda x: _xgepy.Batch_Save
    if _newclass:Save = staticmethod(_xgepy.Batch_Save)
    __swig_getmethods__["Open"] = lambda x: _xgepy.Batch_Open
    if _newclass:Open = staticmethod(_xgepy.Batch_Open)
    __swig_getmethods__["Merge"] = lambda x: _xgepy.Batch_Merge
    if _newclass:Merge = staticmethod(_xgepy.Batch_Merge)
    __swig_getmethods__["Optimize"] = lambda x: _xgepy.Batch_Optimize
    if _newclass:Optimize = staticmethod(_xgepy.Batch_Optimize)
    __swig_destroy__ = _xgepy.delete_Batch
    __del__ = lambda self : None;
Batch_swigregister = _xgepy.Batch_swigregister
Batch_swigregister(Batch)

def Batch_Quad(*args):
  return _xgepy.Batch_Quad(*args)
Batch_Quad = _xgepy.Batch_Quad

def Batch_Cube(*args):
  return _xgepy.Batch_Cube(*args)
Batch_Cube = _xgepy.Batch_Cube

def Batch_Sky(*args):
  return _xgepy.Batch_Sky(*args)
Batch_Sky = _xgepy.Batch_Sky

def Batch_Circle(*args):
  return _xgepy.Batch_Circle(*args)
Batch_Circle = _xgepy.Batch_Circle

def Batch_openPly(*args):
  return _xgepy.Batch_openPly(*args)
Batch_openPly = _xgepy.Batch_openPly

def Batch_openObj(*args):
  return _xgepy.Batch_openObj(*args)
Batch_openObj = _xgepy.Batch_openObj

def Batch_saveObj(*args):
  return _xgepy.Batch_saveObj(*args)
Batch_saveObj = _xgepy.Batch_saveObj

def Batch_openPtx(*args):
  return _xgepy.Batch_openPtx(*args)
Batch_openPtx = _xgepy.Batch_openPtx

def Batch_Save(*args):
  return _xgepy.Batch_Save(*args)
Batch_Save = _xgepy.Batch_Save

def Batch_Open(*args):
  return _xgepy.Batch_Open(*args)
Batch_Open = _xgepy.Batch_Open

def Batch_Merge(*args):
  return _xgepy.Batch_Merge(*args)
Batch_Merge = _xgepy.Batch_Merge

def Batch_Optimize(*args):
  return _xgepy.Batch_Optimize(*args)
Batch_Optimize = _xgepy.Batch_Optimize

class Pick(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Pick, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Pick, name)
    __repr__ = _swig_repr
    __swig_setmethods__["valid"] = _xgepy.Pick_valid_set
    __swig_getmethods__["valid"] = _xgepy.Pick_valid_get
    if _newclass:valid = _swig_property(_xgepy.Pick_valid_get, _xgepy.Pick_valid_set)
    __swig_setmethods__["distance"] = _xgepy.Pick_distance_set
    __swig_getmethods__["distance"] = _xgepy.Pick_distance_get
    if _newclass:distance = _swig_property(_xgepy.Pick_distance_get, _xgepy.Pick_distance_set)
    __swig_setmethods__["position"] = _xgepy.Pick_position_set
    __swig_getmethods__["position"] = _xgepy.Pick_position_get
    if _newclass:position = _swig_property(_xgepy.Pick_position_get, _xgepy.Pick_position_set)
    __swig_setmethods__["normal"] = _xgepy.Pick_normal_set
    __swig_getmethods__["normal"] = _xgepy.Pick_normal_get
    if _newclass:normal = _swig_property(_xgepy.Pick_normal_get, _xgepy.Pick_normal_set)
    __swig_setmethods__["matrix"] = _xgepy.Pick_matrix_set
    __swig_getmethods__["matrix"] = _xgepy.Pick_matrix_get
    if _newclass:matrix = _swig_property(_xgepy.Pick_matrix_get, _xgepy.Pick_matrix_set)
    __swig_setmethods__["path"] = _xgepy.Pick_path_set
    __swig_getmethods__["path"] = _xgepy.Pick_path_get
    if _newclass:path = _swig_property(_xgepy.Pick_path_get, _xgepy.Pick_path_set)
    def __init__(self, *args): 
        this = _xgepy.new_Pick(*args)
        try: self.this.append(this)
        except: self.this = this
    def isValid(self): return _xgepy.Pick_isValid(self)
    def guessMatrix(self, *args): return _xgepy.Pick_guessMatrix(self, *args)
    def __lt__(self, *args): return _xgepy.Pick___lt__(self, *args)
    __swig_destroy__ = _xgepy.delete_Pick
    __del__ = lambda self : None;
Pick_swigregister = _xgepy.Pick_swigregister
Pick_swigregister(Pick)

class GraphKMem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GraphKMem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GraphKMem, name)
    __repr__ = _swig_repr
    def Write(self, *args): return _xgepy.GraphKMem_Write(self, *args)
    def Read(self, *args): return _xgepy.GraphKMem_Read(self, *args)
    def __init__(self, *args): 
        this = _xgepy.new_GraphKMem(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _xgepy.delete_GraphKMem
    __del__ = lambda self : None;
    def assign(self, *args): return _xgepy.GraphKMem_assign(self, *args)
    def flush(self): return _xgepy.GraphKMem_flush(self)
    def alloc(self): return _xgepy.GraphKMem_alloc(self)
    def free(self, *args): return _xgepy.GraphKMem_free(self, *args)
    def needed(self, *args): return _xgepy.GraphKMem_needed(self, *args)
    def getNBlocked(self): return _xgepy.GraphKMem_getNBlocked(self)
    def getMax(self): return _xgepy.GraphKMem_getMax(self)
    def itemsize(self): return _xgepy.GraphKMem_itemsize(self)
    def memsize(self): return _xgepy.GraphKMem_memsize(self)
    def resize(self, *args): return _xgepy.GraphKMem_resize(self, *args)
    def PrintStatistics(self): return _xgepy.GraphKMem_PrintStatistics(self)
GraphKMem_swigregister = _xgepy.GraphKMem_swigregister
GraphKMem_swigregister(GraphKMem)

class GraphArch(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GraphArch, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GraphArch, name)
    __repr__ = _swig_repr
    __swig_setmethods__["N0"] = _xgepy.GraphArch_N0_set
    __swig_getmethods__["N0"] = _xgepy.GraphArch_N0_get
    if _newclass:N0 = _swig_property(_xgepy.GraphArch_N0_get, _xgepy.GraphArch_N0_set)
    __swig_setmethods__["N1"] = _xgepy.GraphArch_N1_set
    __swig_getmethods__["N1"] = _xgepy.GraphArch_N1_get
    if _newclass:N1 = _swig_property(_xgepy.GraphArch_N1_get, _xgepy.GraphArch_N1_set)
    __swig_setmethods__["N0_prev"] = _xgepy.GraphArch_N0_prev_set
    __swig_getmethods__["N0_prev"] = _xgepy.GraphArch_N0_prev_get
    if _newclass:N0_prev = _swig_property(_xgepy.GraphArch_N0_prev_get, _xgepy.GraphArch_N0_prev_set)
    __swig_setmethods__["N0_next"] = _xgepy.GraphArch_N0_next_set
    __swig_getmethods__["N0_next"] = _xgepy.GraphArch_N0_next_get
    if _newclass:N0_next = _swig_property(_xgepy.GraphArch_N0_next_get, _xgepy.GraphArch_N0_next_set)
    __swig_setmethods__["N1_prev"] = _xgepy.GraphArch_N1_prev_set
    __swig_getmethods__["N1_prev"] = _xgepy.GraphArch_N1_prev_get
    if _newclass:N1_prev = _swig_property(_xgepy.GraphArch_N1_prev_get, _xgepy.GraphArch_N1_prev_set)
    __swig_setmethods__["N1_next"] = _xgepy.GraphArch_N1_next_set
    __swig_getmethods__["N1_next"] = _xgepy.GraphArch_N1_next_get
    if _newclass:N1_next = _swig_property(_xgepy.GraphArch_N1_next_get, _xgepy.GraphArch_N1_next_set)
    __swig_setmethods__["Info"] = _xgepy.GraphArch_Info_set
    __swig_getmethods__["Info"] = _xgepy.GraphArch_Info_get
    if _newclass:Info = _swig_property(_xgepy.GraphArch_Info_get, _xgepy.GraphArch_Info_set)
    def __init__(self): 
        this = _xgepy.new_GraphArch()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _xgepy.delete_GraphArch
    __del__ = lambda self : None;
GraphArch_swigregister = _xgepy.GraphArch_swigregister
GraphArch_swigregister(GraphArch)

class GraphNode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GraphNode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GraphNode, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Level"] = _xgepy.GraphNode_Level_set
    __swig_getmethods__["Level"] = _xgepy.GraphNode_Level_get
    if _newclass:Level = _swig_property(_xgepy.GraphNode_Level_get, _xgepy.GraphNode_Level_set)
    __swig_setmethods__["Sign"] = _xgepy.GraphNode_Sign_set
    __swig_getmethods__["Sign"] = _xgepy.GraphNode_Sign_get
    if _newclass:Sign = _swig_property(_xgepy.GraphNode_Sign_get, _xgepy.GraphNode_Sign_set)
    __swig_setmethods__["Dw"] = _xgepy.GraphNode_Dw_set
    __swig_getmethods__["Dw"] = _xgepy.GraphNode_Dw_get
    if _newclass:Dw = _swig_property(_xgepy.GraphNode_Dw_get, _xgepy.GraphNode_Dw_set)
    __swig_setmethods__["Up"] = _xgepy.GraphNode_Up_set
    __swig_getmethods__["Up"] = _xgepy.GraphNode_Up_get
    if _newclass:Up = _swig_property(_xgepy.GraphNode_Up_get, _xgepy.GraphNode_Up_set)
    __swig_setmethods__["Ndw"] = _xgepy.GraphNode_Ndw_set
    __swig_getmethods__["Ndw"] = _xgepy.GraphNode_Ndw_get
    if _newclass:Ndw = _swig_property(_xgepy.GraphNode_Ndw_get, _xgepy.GraphNode_Ndw_set)
    __swig_setmethods__["Nup"] = _xgepy.GraphNode_Nup_set
    __swig_getmethods__["Nup"] = _xgepy.GraphNode_Nup_get
    if _newclass:Nup = _swig_property(_xgepy.GraphNode_Nup_get, _xgepy.GraphNode_Nup_set)
    __swig_setmethods__["Prev"] = _xgepy.GraphNode_Prev_set
    __swig_getmethods__["Prev"] = _xgepy.GraphNode_Prev_get
    if _newclass:Prev = _swig_property(_xgepy.GraphNode_Prev_get, _xgepy.GraphNode_Prev_set)
    __swig_setmethods__["Next"] = _xgepy.GraphNode_Next_set
    __swig_getmethods__["Next"] = _xgepy.GraphNode_Next_get
    if _newclass:Next = _swig_property(_xgepy.GraphNode_Next_get, _xgepy.GraphNode_Next_set)
    __swig_setmethods__["Id"] = _xgepy.GraphNode_Id_set
    __swig_getmethods__["Id"] = _xgepy.GraphNode_Id_get
    if _newclass:Id = _swig_property(_xgepy.GraphNode_Id_get, _xgepy.GraphNode_Id_set)
    __swig_setmethods__["Info"] = _xgepy.GraphNode_Info_set
    __swig_getmethods__["Info"] = _xgepy.GraphNode_Info_get
    if _newclass:Info = _swig_property(_xgepy.GraphNode_Info_get, _xgepy.GraphNode_Info_set)
    __swig_setmethods__["Tmp"] = _xgepy.GraphNode_Tmp_set
    __swig_getmethods__["Tmp"] = _xgepy.GraphNode_Tmp_get
    if _newclass:Tmp = _swig_property(_xgepy.GraphNode_Tmp_get, _xgepy.GraphNode_Tmp_set)
    def __init__(self): 
        this = _xgepy.new_GraphNode()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _xgepy.delete_GraphNode
    __del__ = lambda self : None;
GraphNode_swigregister = _xgepy.GraphNode_swigregister
GraphNode_swigregister(GraphNode)

class GraphIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GraphIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GraphIterator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _xgepy.new_GraphIterator(*args)
        try: self.this.append(this)
        except: self.this = this
    def end(self): return _xgepy.GraphIterator_end(self)
    def __ref__(self): return _xgepy.GraphIterator___ref__(self)
    def getNode(self): return _xgepy.GraphIterator_getNode(self)
    def getArch(self): return _xgepy.GraphIterator_getArch(self)
    def next(self): return _xgepy.GraphIterator_next(self)
    def prev(self): return _xgepy.GraphIterator_prev(self)
    def goForward(self): return _xgepy.GraphIterator_goForward(self)
    def goBackward(self): return _xgepy.GraphIterator_goBackward(self)
    __swig_destroy__ = _xgepy.delete_GraphIterator
    __del__ = lambda self : None;
GraphIterator_swigregister = _xgepy.GraphIterator_swigregister
GraphIterator_swigregister(GraphIterator)

class GraphListIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GraphListIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GraphListIterator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _xgepy.new_GraphListIterator(*args)
        try: self.this.append(this)
        except: self.this = this
    def end(self): return _xgepy.GraphListIterator_end(self)
    def __ref__(self): return _xgepy.GraphListIterator___ref__(self)
    def getNode(self): return _xgepy.GraphListIterator_getNode(self)
    def getPrevNode(self): return _xgepy.GraphListIterator_getPrevNode(self)
    def goForward(self): return _xgepy.GraphListIterator_goForward(self)
    def next(self): return _xgepy.GraphListIterator_next(self)
    __swig_destroy__ = _xgepy.delete_GraphListIterator
    __del__ = lambda self : None;
GraphListIterator_swigregister = _xgepy.GraphListIterator_swigregister
GraphListIterator_swigregister(GraphListIterator)

class GraphNavigator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GraphNavigator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GraphNavigator, name)
    __repr__ = _swig_repr
    __swig_setmethods__["nnav"] = _xgepy.GraphNavigator_nnav_set
    __swig_getmethods__["nnav"] = _xgepy.GraphNavigator_nnav_get
    if _newclass:nnav = _swig_property(_xgepy.GraphNavigator_nnav_get, _xgepy.GraphNavigator_nnav_set)
    __swig_setmethods__["nav"] = _xgepy.GraphNavigator_nav_set
    __swig_getmethods__["nav"] = _xgepy.GraphNavigator_nav_get
    if _newclass:nav = _swig_property(_xgepy.GraphNavigator_nav_get, _xgepy.GraphNavigator_nav_set)
    def __init__(self): 
        this = _xgepy.new_GraphNavigator()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _xgepy.delete_GraphNavigator
    __del__ = lambda self : None;
    def getNCells(self, *args): return _xgepy.GraphNavigator_getNCells(self, *args)
    def getCell(self, *args): return _xgepy.GraphNavigator_getCell(self, *args)
GraphNavigator_swigregister = _xgepy.GraphNavigator_swigregister
GraphNavigator_swigregister(GraphNavigator)

class Graph(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Graph, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Graph, name)
    __repr__ = _swig_repr
    def Write(self, *args): return _xgepy.Graph_Write(self, *args)
    def Read(self, *args): return _xgepy.Graph_Read(self, *args)
    DIRECTION_DOWN = _xgepy.Graph_DIRECTION_DOWN
    DIRECTION_UP = _xgepy.Graph_DIRECTION_UP
    DIRECTION_UP_AND_DOWN = _xgepy.Graph_DIRECTION_UP_AND_DOWN
    SIGN_ZER = _xgepy.Graph_SIGN_ZER
    SIGN_POS = _xgepy.Graph_SIGN_POS
    SIGN_NEG = _xgepy.Graph_SIGN_NEG
    SIGN_UNK = _xgepy.Graph_SIGN_UNK
    SIGN_BOT = _xgepy.Graph_SIGN_BOT
    SPLIT_FLAT = _xgepy.Graph_SPLIT_FLAT
    SPLIT_OK = _xgepy.Graph_SPLIT_OK
    SPLIT_IMPOSSIBLE = _xgepy.Graph_SPLIT_IMPOSSIBLE
    def __init__(self, *args): 
        this = _xgepy.new_Graph(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _xgepy.delete_Graph
    __del__ = lambda self : None;
    def getPointDim(self): return _xgepy.Graph_getPointDim(self)
    def clone(self): return _xgepy.Graph_clone(self)
    def assign(self, *args): return _xgepy.Graph_assign(self, *args)
    def clear(self): return _xgepy.Graph_clear(self)
    def getArch(self, *args): return _xgepy.Graph_getArch(self, *args)
    def getNode(self, *args): return _xgepy.Graph_getNode(self, *args)
    def getNDw(self, *args): return _xgepy.Graph_getNDw(self, *args)
    def getNUp(self, *args): return _xgepy.Graph_getNUp(self, *args)
    def getNumNode(self): return _xgepy.Graph_getNumNode(self)
    def getNumArch(self): return _xgepy.Graph_getNumArch(self)
    def getMaxNode(self): return _xgepy.Graph_getMaxNode(self)
    def getMaxArch(self): return _xgepy.Graph_getMaxArch(self)
    def getFirstDwArch(self, *args): return _xgepy.Graph_getFirstDwArch(self, *args)
    def getFirstUpArch(self, *args): return _xgepy.Graph_getFirstUpArch(self, *args)
    def getLastDwArch(self, *args): return _xgepy.Graph_getLastDwArch(self, *args)
    def getLastUpArch(self, *args): return _xgepy.Graph_getLastUpArch(self, *args)
    def getFirstDwNode(self, *args): return _xgepy.Graph_getFirstDwNode(self, *args)
    def getFirstUpNode(self, *args): return _xgepy.Graph_getFirstUpNode(self, *args)
    def getLastDwNode(self, *args): return _xgepy.Graph_getLastDwNode(self, *args)
    def getLastUpNode(self, *args): return _xgepy.Graph_getLastUpNode(self, *args)
    def getNextDwArch(self, *args): return _xgepy.Graph_getNextDwArch(self, *args)
    def getPrevDwArch(self, *args): return _xgepy.Graph_getPrevDwArch(self, *args)
    def getNextUpArch(self, *args): return _xgepy.Graph_getNextUpArch(self, *args)
    def getPrevUpArch(self, *args): return _xgepy.Graph_getPrevUpArch(self, *args)
    def getN0(self, *args): return _xgepy.Graph_getN0(self, *args)
    def getN1(self, *args): return _xgepy.Graph_getN1(self, *args)
    def Level(self, *args): return _xgepy.Graph_Level(self, *args)
    def Sign(self, *args): return _xgepy.Graph_Sign(self, *args)
    def NodeData(self, *args): return _xgepy.Graph_NodeData(self, *args)
    def ArchData(self, *args): return _xgepy.Graph_ArchData(self, *args)
    def NodeTmp(self, *args): return _xgepy.Graph_NodeTmp(self, *args)
    def getNCells(self, *args): return _xgepy.Graph_getNCells(self, *args)
    def getNextUpBrother(self, *args): return _xgepy.Graph_getNextUpBrother(self, *args)
    def getNextDwBrother(self, *args): return _xgepy.Graph_getNextDwBrother(self, *args)
    def getPrevUpBrother(self, *args): return _xgepy.Graph_getPrevUpBrother(self, *args)
    def getPrevDwBrother(self, *args): return _xgepy.Graph_getPrevDwBrother(self, *args)
    def goDw(self, *args): return _xgepy.Graph_goDw(self, *args)
    def goUp(self, *args): return _xgepy.Graph_goUp(self, *args)
    def each(self, *args): return _xgepy.Graph_each(self, *args)
    def addNode(self, *args): return _xgepy.Graph_addNode(self, *args)
    def addVertex(self, *args): return _xgepy.Graph_addVertex(self, *args)
    def addEdge(self, *args): return _xgepy.Graph_addEdge(self, *args)
    def addFace2d(self, *args): return _xgepy.Graph_addFace2d(self, *args)
    def addPlane(self, *args): return _xgepy.Graph_addPlane(self, *args)
    def addArch(self, *args): return _xgepy.Graph_addArch(self, *args)
    def addArchDirection(self, *args): return _xgepy.Graph_addArchDirection(self, *args)
    def findArch(self, *args): return _xgepy.Graph_findArch(self, *args)
    def findVertex(self, *args): return _xgepy.Graph_findVertex(self, *args)
    def findFirstCommonNode(self, *args): return _xgepy.Graph_findFirstCommonNode(self, *args)
    def remArch(self, *args): return _xgepy.Graph_remArch(self, *args)
    def swapDwOrder(self, *args): return _xgepy.Graph_swapDwOrder(self, *args)
    def changeLevel(self, *args): return _xgepy.Graph_changeLevel(self, *args)
    def getMaxDimCells(self): return _xgepy.Graph_getMaxDimCells(self)
    def join(self, *args): return _xgepy.Graph_join(self, *args)
    def orderFace2d(self, *args): return _xgepy.Graph_orderFace2d(self, *args)
    def Print(self, *args): return _xgepy.Graph_Print(self, *args)
    def PrintStatistics(self): return _xgepy.Graph_PrintStatistics(self)
    def findCells(self, *args): return _xgepy.Graph_findCells(self, *args)
    def remNode(self, *args): return _xgepy.Graph_remNode(self, *args)
    def getGeometry(self, *args): return _xgepy.Graph_getGeometry(self, *args)
    def getVecf(self, *args): return _xgepy.Graph_getVecf(self, *args)
    def setVecf(self, *args): return _xgepy.Graph_setVecf(self, *args)
    def releaseGeom(self, *args): return _xgepy.Graph_releaseGeom(self, *args)
    __swig_getmethods__["cuboid"] = lambda x: _xgepy.Graph_cuboid
    if _newclass:cuboid = staticmethod(_xgepy.Graph_cuboid)
    __swig_getmethods__["simplex"] = lambda x: _xgepy.Graph_simplex
    if _newclass:simplex = staticmethod(_xgepy.Graph_simplex)
    def getBoundingBox(self, *args): return _xgepy.Graph_getBoundingBox(self, *args)
    def getBoundingBall(self, *args): return _xgepy.Graph_getBoundingBall(self, *args)
    def getFittingPlane(self, *args): return _xgepy.Graph_getFittingPlane(self, *args)
    def toUnitBox(self, *args): return _xgepy.Graph_toUnitBox(self, *args)
    def fixBoundaryFaceOrientation(self, *args): return _xgepy.Graph_fixBoundaryFaceOrientation(self, *args)
    def translate(self, *args): return _xgepy.Graph_translate(self, *args)
    def scale(self, *args): return _xgepy.Graph_scale(self, *args)
    def rotate(self, *args): return _xgepy.Graph_rotate(self, *args)
    def transform(self, *args): return _xgepy.Graph_transform(self, *args)
    def permutate(self, *args): return _xgepy.Graph_permutate(self, *args)
    def triangulate(self, *args): return _xgepy.Graph_triangulate(self, *args)
    def embed(self, *args): return _xgepy.Graph_embed(self, *args)
    def extrude(self, *args): return _xgepy.Graph_extrude(self, *args)
    __swig_getmethods__["qhull"] = lambda x: _xgepy.Graph_qhull
    if _newclass:qhull = staticmethod(_xgepy.Graph_qhull)
    __swig_getmethods__["mkpol"] = lambda x: _xgepy.Graph_mkpol
    if _newclass:mkpol = staticmethod(_xgepy.Graph_mkpol)
    __swig_getmethods__["power"] = lambda x: _xgepy.Graph_power
    if _newclass:power = staticmethod(_xgepy.Graph_power)
    def split(self, *args): return _xgepy.Graph_split(self, *args)
    def check(self, *args): return _xgepy.Graph_check(self, *args)
    def contains(self, *args): return _xgepy.Graph_contains(self, *args)
    def getBatch(self): return _xgepy.Graph_getBatch(self)
Graph_swigregister = _xgepy.Graph_swigregister
Graph_swigregister(Graph)

def Graph_cuboid(*args):
  return _xgepy.Graph_cuboid(*args)
Graph_cuboid = _xgepy.Graph_cuboid

def Graph_simplex(*args):
  return _xgepy.Graph_simplex(*args)
Graph_simplex = _xgepy.Graph_simplex

def Graph_qhull(*args):
  return _xgepy.Graph_qhull(*args)
Graph_qhull = _xgepy.Graph_qhull

def Graph_mkpol(*args):
  return _xgepy.Graph_mkpol(*args)
Graph_mkpol = _xgepy.Graph_mkpol

def Graph_power(*args):
  return _xgepy.Graph_power(*args)
Graph_power = _xgepy.Graph_power

class OctreeNode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OctreeNode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OctreeNode, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _xgepy.new_OctreeNode(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _xgepy.delete_OctreeNode
    __del__ = lambda self : None;
    def getId(self): return _xgepy.OctreeNode_getId(self)
    def getNode(self, *args): return _xgepy.OctreeNode_getNode(self, *args)
    __swig_setmethods__["depth"] = _xgepy.OctreeNode_depth_set
    __swig_getmethods__["depth"] = _xgepy.OctreeNode_depth_get
    if _newclass:depth = _swig_property(_xgepy.OctreeNode_depth_get, _xgepy.OctreeNode_depth_set)
    __swig_setmethods__["parent"] = _xgepy.OctreeNode_parent_set
    __swig_getmethods__["parent"] = _xgepy.OctreeNode_parent_get
    if _newclass:parent = _swig_property(_xgepy.OctreeNode_parent_get, _xgepy.OctreeNode_parent_set)
    def getChild(self, *args): return _xgepy.OctreeNode_getChild(self, *args)
    __swig_setmethods__["box"] = _xgepy.OctreeNode_box_set
    __swig_getmethods__["box"] = _xgepy.OctreeNode_box_get
    if _newclass:box = _swig_property(_xgepy.OctreeNode_box_get, _xgepy.OctreeNode_box_set)
    __swig_setmethods__["batches"] = _xgepy.OctreeNode_batches_set
    __swig_getmethods__["batches"] = _xgepy.OctreeNode_batches_get
    if _newclass:batches = _swig_property(_xgepy.OctreeNode_batches_get, _xgepy.OctreeNode_batches_set)
OctreeNode_swigregister = _xgepy.OctreeNode_swigregister
OctreeNode_swigregister(OctreeNode)

class FrustumIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FrustumIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FrustumIterator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _xgepy.new_FrustumIterator(*args)
        try: self.this.append(this)
        except: self.this = this
    def end(self): return _xgepy.FrustumIterator_end(self)
    def getNode(self): return _xgepy.FrustumIterator_getNode(self)
    def getDistance(self): return _xgepy.FrustumIterator_getDistance(self)
    def moveNext(self): return _xgepy.FrustumIterator_moveNext(self)
    __swig_destroy__ = _xgepy.delete_FrustumIterator
    __del__ = lambda self : None;
FrustumIterator_swigregister = _xgepy.FrustumIterator_swigregister
FrustumIterator_swigregister(FrustumIterator)

class RayIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RayIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RayIterator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _xgepy.new_RayIterator(*args)
        try: self.this.append(this)
        except: self.this = this
    def end(self): return _xgepy.RayIterator_end(self)
    def getNode(self): return _xgepy.RayIterator_getNode(self)
    def getMinDistance(self): return _xgepy.RayIterator_getMinDistance(self)
    def moveNext(self): return _xgepy.RayIterator_moveNext(self)
    __swig_destroy__ = _xgepy.delete_RayIterator
    __del__ = lambda self : None;
RayIterator_swigregister = _xgepy.RayIterator_swigregister
RayIterator_swigregister(RayIterator)

class Octree(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Octree, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Octree, name)
    __repr__ = _swig_repr
    __swig_setmethods__["world_box"] = _xgepy.Octree_world_box_set
    __swig_getmethods__["world_box"] = _xgepy.Octree_world_box_get
    if _newclass:world_box = _swig_property(_xgepy.Octree_world_box_get, _xgepy.Octree_world_box_set)
    __swig_setmethods__["root"] = _xgepy.Octree_root_set
    __swig_getmethods__["root"] = _xgepy.Octree_root_get
    if _newclass:root = _swig_property(_xgepy.Octree_root_get, _xgepy.Octree_root_set)
    __swig_setmethods__["world_center"] = _xgepy.Octree_world_center_set
    __swig_getmethods__["world_center"] = _xgepy.Octree_world_center_get
    if _newclass:world_center = _swig_property(_xgepy.Octree_world_center_get, _xgepy.Octree_world_center_set)
    __swig_setmethods__["world_W"] = _xgepy.Octree_world_W_set
    __swig_getmethods__["world_W"] = _xgepy.Octree_world_W_get
    if _newclass:world_W = _swig_property(_xgepy.Octree_world_W_get, _xgepy.Octree_world_W_set)
    __swig_setmethods__["max_depth"] = _xgepy.Octree_max_depth_set
    __swig_getmethods__["max_depth"] = _xgepy.Octree_max_depth_get
    if _newclass:max_depth = _swig_property(_xgepy.Octree_max_depth_get, _xgepy.Octree_max_depth_set)
    __swig_setmethods__["LOOSE_K"] = _xgepy.Octree_LOOSE_K_set
    __swig_getmethods__["LOOSE_K"] = _xgepy.Octree_LOOSE_K_get
    if _newclass:LOOSE_K = _swig_property(_xgepy.Octree_LOOSE_K_get, _xgepy.Octree_LOOSE_K_set)
    def __init__(self, *args): 
        this = _xgepy.new_Octree(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _xgepy.delete_Octree
    __del__ = lambda self : None;
    def Lock(self): return _xgepy.Octree_Lock(self)
    def Unlock(self): return _xgepy.Octree_Unlock(self)
    def getBox(self): return _xgepy.Octree_getBox(self)
    def getNumNodes(self, node=None): return _xgepy.Octree_getNumNodes(self, node)
    def getMaxDepth(self, node=None): return _xgepy.Octree_getMaxDepth(self, node)
    def getNumBatches(self, node=None): return _xgepy.Octree_getNumBatches(self, node)
    def printStatistics(self): return _xgepy.Octree_printStatistics(self)
    def getNode(self, *args): return _xgepy.Octree_getNode(self, *args)
    def find(self, *args): return _xgepy.Octree_find(self, *args)
Octree_swigregister = _xgepy.Octree_swigregister
Octree_swigregister(Octree)

class GLCanvas(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GLCanvas, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GLCanvas, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_close"] = _xgepy.GLCanvas_m_close_set
    __swig_getmethods__["m_close"] = _xgepy.GLCanvas_m_close_get
    if _newclass:m_close = _swig_property(_xgepy.GLCanvas_m_close_get, _xgepy.GLCanvas_m_close_set)
    __swig_setmethods__["m_redisplay"] = _xgepy.GLCanvas_m_redisplay_set
    __swig_getmethods__["m_redisplay"] = _xgepy.GLCanvas_m_redisplay_get
    if _newclass:m_redisplay = _swig_property(_xgepy.GLCanvas_m_redisplay_get, _xgepy.GLCanvas_m_redisplay_set)
    __swig_setmethods__["trackball_mode"] = _xgepy.GLCanvas_trackball_mode_set
    __swig_getmethods__["trackball_mode"] = _xgepy.GLCanvas_trackball_mode_get
    if _newclass:trackball_mode = _swig_property(_xgepy.GLCanvas_trackball_mode_get, _xgepy.GLCanvas_trackball_mode_set)
    __swig_setmethods__["trackball_center"] = _xgepy.GLCanvas_trackball_center_set
    __swig_getmethods__["trackball_center"] = _xgepy.GLCanvas_trackball_center_get
    if _newclass:trackball_center = _swig_property(_xgepy.GLCanvas_trackball_center_get, _xgepy.GLCanvas_trackball_center_set)
    __swig_setmethods__["mouse_beginx"] = _xgepy.GLCanvas_mouse_beginx_set
    __swig_getmethods__["mouse_beginx"] = _xgepy.GLCanvas_mouse_beginx_get
    if _newclass:mouse_beginx = _swig_property(_xgepy.GLCanvas_mouse_beginx_get, _xgepy.GLCanvas_mouse_beginx_set)
    __swig_setmethods__["mouse_beginy"] = _xgepy.GLCanvas_mouse_beginy_set
    __swig_getmethods__["mouse_beginy"] = _xgepy.GLCanvas_mouse_beginy_get
    if _newclass:mouse_beginy = _swig_property(_xgepy.GLCanvas_mouse_beginy_get, _xgepy.GLCanvas_mouse_beginy_set)
    __swig_setmethods__["draw_lines"] = _xgepy.GLCanvas_draw_lines_set
    __swig_getmethods__["draw_lines"] = _xgepy.GLCanvas_draw_lines_get
    if _newclass:draw_lines = _swig_property(_xgepy.GLCanvas_draw_lines_get, _xgepy.GLCanvas_draw_lines_set)
    __swig_setmethods__["draw_axis"] = _xgepy.GLCanvas_draw_axis_set
    __swig_getmethods__["draw_axis"] = _xgepy.GLCanvas_draw_axis_get
    if _newclass:draw_axis = _swig_property(_xgepy.GLCanvas_draw_axis_get, _xgepy.GLCanvas_draw_axis_set)
    __swig_setmethods__["frustum"] = _xgepy.GLCanvas_frustum_set
    __swig_getmethods__["frustum"] = _xgepy.GLCanvas_frustum_get
    if _newclass:frustum = _swig_property(_xgepy.GLCanvas_frustum_get, _xgepy.GLCanvas_frustum_set)
    __swig_setmethods__["debug_frustum"] = _xgepy.GLCanvas_debug_frustum_set
    __swig_getmethods__["debug_frustum"] = _xgepy.GLCanvas_debug_frustum_get
    if _newclass:debug_frustum = _swig_property(_xgepy.GLCanvas_debug_frustum_get, _xgepy.GLCanvas_debug_frustum_set)
    __swig_setmethods__["octree"] = _xgepy.GLCanvas_octree_set
    __swig_getmethods__["octree"] = _xgepy.GLCanvas_octree_get
    if _newclass:octree = _swig_property(_xgepy.GLCanvas_octree_get, _xgepy.GLCanvas_octree_set)
    __swig_setmethods__["bProgressiveRendering"] = _xgepy.GLCanvas_bProgressiveRendering_set
    __swig_getmethods__["bProgressiveRendering"] = _xgepy.GLCanvas_bProgressiveRendering_get
    if _newclass:bProgressiveRendering = _swig_property(_xgepy.GLCanvas_bProgressiveRendering_get, _xgepy.GLCanvas_bProgressiveRendering_set)
    def __init__(self): 
        if self.__class__ == GLCanvas:
            _self = None
        else:
            _self = self
        this = _xgepy.new_GLCanvas(_self, )
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _xgepy.delete_GLCanvas
    __del__ = lambda self : None;
    def setOctree(self, *args): return _xgepy.GLCanvas_setOctree(self, *args)
    def bind(self): return _xgepy.GLCanvas_bind(self)
    def swapBuffers(self): return _xgepy.GLCanvas_swapBuffers(self)
    def unbind(self): return _xgepy.GLCanvas_unbind(self)
    def clearScreen(self, ClearColor=True, ClearDepth=True): return _xgepy.GLCanvas_clearScreen(self, ClearColor, ClearDepth)
    def setViewport(self, *args): return _xgepy.GLCanvas_setViewport(self, *args)
    def setProjectionMatrix(self, *args): return _xgepy.GLCanvas_setProjectionMatrix(self, *args)
    def setModelviewMatrix(self, *args): return _xgepy.GLCanvas_setModelviewMatrix(self, *args)
    def setDefaultLight(self, *args): return _xgepy.GLCanvas_setDefaultLight(self, *args)
    def pushModelviewMatrix(self, *args): return _xgepy.GLCanvas_pushModelviewMatrix(self, *args)
    def popModelviewMatrix(self): return _xgepy.GLCanvas_popModelviewMatrix(self)
    def pushProjectionMatrix(self, *args): return _xgepy.GLCanvas_pushProjectionMatrix(self, *args)
    def popProjectionMatrix(self): return _xgepy.GLCanvas_popProjectionMatrix(self)
    def setDepthTest(self, *args): return _xgepy.GLCanvas_setDepthTest(self, *args)
    def setDepthWrite(self, *args): return _xgepy.GLCanvas_setDepthWrite(self, *args)
    def setPolygonMode(self, *args): return _xgepy.GLCanvas_setPolygonMode(self, *args)
    def setPointSize(self, *args): return _xgepy.GLCanvas_setPointSize(self, *args)
    def setLineWidth(self, *args): return _xgepy.GLCanvas_setLineWidth(self, *args)
    def setPolygonOffset(self, *args): return _xgepy.GLCanvas_setPolygonOffset(self, *args)
    def renderBatch(self, *args): return _xgepy.GLCanvas_renderBatch(self, *args)
    def renderScene(self): return _xgepy.GLCanvas_renderScene(self)
    def redisplay(self): return _xgepy.GLCanvas_redisplay(self)
    def onKeyboard(self, *args): return _xgepy.GLCanvas_onKeyboard(self, *args)
    def onMouseDown(self, *args): return _xgepy.GLCanvas_onMouseDown(self, *args)
    def onMouseMove(self, *args): return _xgepy.GLCanvas_onMouseMove(self, *args)
    def onMouseUp(self, *args): return _xgepy.GLCanvas_onMouseUp(self, *args)
    def onMouseWheel(self, *args): return _xgepy.GLCanvas_onMouseWheel(self, *args)
    def onResize(self, *args): return _xgepy.GLCanvas_onResize(self, *args)
    def onTimer(self): return _xgepy.GLCanvas_onTimer(self)
    def close(self): return _xgepy.GLCanvas_close(self)
    def runLoop(self): return _xgepy.GLCanvas_runLoop(self)
    def getNative(self): return _xgepy.GLCanvas_getNative(self)
    __swig_getmethods__["getShared"] = lambda x: _xgepy.GLCanvas_getShared
    if _newclass:getShared = staticmethod(_xgepy.GLCanvas_getShared)
    __swig_getmethods__["setShared"] = lambda x: _xgepy.GLCanvas_setShared
    if _newclass:setShared = staticmethod(_xgepy.GLCanvas_setShared)
    __swig_getmethods__["getCurrent"] = lambda x: _xgepy.GLCanvas_getCurrent
    if _newclass:getCurrent = staticmethod(_xgepy.GLCanvas_getCurrent)
    def __disown__(self):
        self.this.disown()
        _xgepy.disown_GLCanvas(self)
        return weakref_proxy(self)
GLCanvas_swigregister = _xgepy.GLCanvas_swigregister
GLCanvas_swigregister(GLCanvas)

def GLCanvas_getShared():
  return _xgepy.GLCanvas_getShared()
GLCanvas_getShared = _xgepy.GLCanvas_getShared

def GLCanvas_setShared(*args):
  return _xgepy.GLCanvas_setShared(*args)
GLCanvas_setShared = _xgepy.GLCanvas_setShared

def GLCanvas_getCurrent():
  return _xgepy.GLCanvas_getCurrent()
GLCanvas_getCurrent = _xgepy.GLCanvas_getCurrent

class Unwrapper(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Unwrapper, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Unwrapper, name)
    __repr__ = _swig_repr
    __swig_setmethods__["texture_template"] = _xgepy.Unwrapper_texture_template_set
    __swig_getmethods__["texture_template"] = _xgepy.Unwrapper_texture_template_get
    if _newclass:texture_template = _swig_property(_xgepy.Unwrapper_texture_template_get, _xgepy.Unwrapper_texture_template_set)
    __swig_setmethods__["texturedim"] = _xgepy.Unwrapper_texturedim_set
    __swig_getmethods__["texturedim"] = _xgepy.Unwrapper_texturedim_get
    if _newclass:texturedim = _swig_property(_xgepy.Unwrapper_texturedim_get, _xgepy.Unwrapper_texturedim_set)
    __swig_setmethods__["factor"] = _xgepy.Unwrapper_factor_set
    __swig_getmethods__["factor"] = _xgepy.Unwrapper_factor_get
    if _newclass:factor = _swig_property(_xgepy.Unwrapper_factor_get, _xgepy.Unwrapper_factor_set)
    def __init__(self): 
        this = _xgepy.new_Unwrapper()
        try: self.this.append(this)
        except: self.this = this
    def Unwrap(self, *args): return _xgepy.Unwrapper_Unwrap(self, *args)
    def getNewLightTextures(self): return _xgepy.Unwrapper_getNewLightTextures(self)
    __swig_destroy__ = _xgepy.delete_Unwrapper
    __del__ = lambda self : None;
Unwrapper_swigregister = _xgepy.Unwrapper_swigregister
Unwrapper_swigregister(Unwrapper)

class Bake(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Bake, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Bake, name)
    __repr__ = _swig_repr
    __swig_setmethods__["DebugMode"] = _xgepy.Bake_DebugMode_set
    __swig_getmethods__["DebugMode"] = _xgepy.Bake_DebugMode_get
    if _newclass:DebugMode = _swig_property(_xgepy.Bake_DebugMode_get, _xgepy.Bake_DebugMode_set)
    __swig_setmethods__["PointOcclusion"] = _xgepy.Bake_PointOcclusion_set
    __swig_getmethods__["PointOcclusion"] = _xgepy.Bake_PointOcclusion_get
    if _newclass:PointOcclusion = _swig_property(_xgepy.Bake_PointOcclusion_get, _xgepy.Bake_PointOcclusion_set)
    def __init__(self): 
        this = _xgepy.new_Bake()
        try: self.this.append(this)
        except: self.this = this
    def Unwrap(self, *args): return _xgepy.Bake_Unwrap(self, *args)
    def Add(self, *args): return _xgepy.Bake_Add(self, *args)
    def Export(self): return _xgepy.Bake_Export(self)
    def run(self): return _xgepy.Bake_run(self)
    def PostProcess(self): return _xgepy.Bake_PostProcess(self)
    __swig_destroy__ = _xgepy.delete_Bake
    __del__ = lambda self : None;
Bake_swigregister = _xgepy.Bake_swigregister
Bake_swigregister(Bake)

HPC_PROP_NAME = _xgepy.HPC_PROP_NAME
HPC_PROP_RGB_COLOR = _xgepy.HPC_PROP_RGB_COLOR
HPC_PROP_VRML_MATERIAL = _xgepy.HPC_PROP_VRML_MATERIAL
HPC_PROP_VRML_TEXTURE = _xgepy.HPC_PROP_VRML_TEXTURE
HPC_PROP_VRML_CREASE = _xgepy.HPC_PROP_VRML_CREASE
HPC_PROP_VRML_CAMERA = _xgepy.HPC_PROP_VRML_CAMERA
HPC_PROP_VRML_LIGHT = _xgepy.HPC_PROP_VRML_LIGHT
class Hpc(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Hpc, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Hpc, name)
    __repr__ = _swig_repr
    def Write(self, *args): return _xgepy.Hpc_Write(self, *args)
    def Read(self, *args): return _xgepy.Hpc_Read(self, *args)
    __swig_setmethods__["spacedim"] = _xgepy.Hpc_spacedim_set
    __swig_getmethods__["spacedim"] = _xgepy.Hpc_spacedim_get
    if _newclass:spacedim = _swig_property(_xgepy.Hpc_spacedim_get, _xgepy.Hpc_spacedim_set)
    __swig_setmethods__["pointdim"] = _xgepy.Hpc_pointdim_set
    __swig_getmethods__["pointdim"] = _xgepy.Hpc_pointdim_get
    if _newclass:pointdim = _swig_property(_xgepy.Hpc_pointdim_get, _xgepy.Hpc_pointdim_set)
    __swig_setmethods__["vmat"] = _xgepy.Hpc_vmat_set
    __swig_getmethods__["vmat"] = _xgepy.Hpc_vmat_get
    if _newclass:vmat = _swig_property(_xgepy.Hpc_vmat_get, _xgepy.Hpc_vmat_set)
    __swig_setmethods__["hmat"] = _xgepy.Hpc_hmat_set
    __swig_getmethods__["hmat"] = _xgepy.Hpc_hmat_get
    if _newclass:hmat = _swig_property(_xgepy.Hpc_hmat_get, _xgepy.Hpc_hmat_set)
    __swig_setmethods__["prop"] = _xgepy.Hpc_prop_set
    __swig_getmethods__["prop"] = _xgepy.Hpc_prop_get
    if _newclass:prop = _swig_property(_xgepy.Hpc_prop_get, _xgepy.Hpc_prop_set)
    __swig_setmethods__["childs"] = _xgepy.Hpc_childs_set
    __swig_getmethods__["childs"] = _xgepy.Hpc_childs_get
    if _newclass:childs = _swig_property(_xgepy.Hpc_childs_get, _xgepy.Hpc_childs_set)
    __swig_setmethods__["g"] = _xgepy.Hpc_g_set
    __swig_getmethods__["g"] = _xgepy.Hpc_g_get
    if _newclass:g = _swig_property(_xgepy.Hpc_g_get, _xgepy.Hpc_g_set)
    __swig_setmethods__["batches"] = _xgepy.Hpc_batches_set
    __swig_getmethods__["batches"] = _xgepy.Hpc_batches_get
    if _newclass:batches = _swig_property(_xgepy.Hpc_batches_get, _xgepy.Hpc_batches_set)
    def __init__(self, *args): 
        this = _xgepy.new_Hpc(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _xgepy.delete_Hpc
    __del__ = lambda self : None;
    def getNumberOfChilds(self): return _xgepy.Hpc_getNumberOfChilds(self)
    def add(self, *args): return _xgepy.Hpc_add(self, *args)
    def fixDimensions(self): return _xgepy.Hpc_fixDimensions(self)
Hpc_swigregister = _xgepy.Hpc_swigregister
Hpc_swigregister(Hpc)

BOOL_CODE_OR = _xgepy.BOOL_CODE_OR
BOOL_CODE_AND = _xgepy.BOOL_CODE_AND
BOOL_CODE_DIFF = _xgepy.BOOL_CODE_DIFF
BOOL_CODE_XOR = _xgepy.BOOL_CODE_XOR
class Plasm(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Plasm, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Plasm, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    PLASM_DESTROY = _xgepy.Plasm_PLASM_DESTROY
    PLASM_CUBE = _xgepy.Plasm_PLASM_CUBE
    PLASM_SIMPLEX = _xgepy.Plasm_PLASM_SIMPLEX
    PLASM_MKPOL = _xgepy.Plasm_PLASM_MKPOL
    PLASM_MKPOLF = _xgepy.Plasm_PLASM_MKPOLF
    PLASM_STRUCT = _xgepy.Plasm_PLASM_STRUCT
    PLASM_COPY = _xgepy.Plasm_PLASM_COPY
    PLASM_GETSPACEDIM = _xgepy.Plasm_PLASM_GETSPACEDIM
    PLASM_GETPOINTDIM = _xgepy.Plasm_PLASM_GETPOINTDIM
    PLASM_TRANSFORM = _xgepy.Plasm_PLASM_TRANSFORM
    PLASM_SCALE = _xgepy.Plasm_PLASM_SCALE
    PLASM_TRANSLATE = _xgepy.Plasm_PLASM_TRANSLATE
    PLASM_ROTATE = _xgepy.Plasm_PLASM_ROTATE
    PLASM_EMBED = _xgepy.Plasm_PLASM_EMBED
    PLASM_LIMITS = _xgepy.Plasm_PLASM_LIMITS
    PLASM_JOIN = _xgepy.Plasm_PLASM_JOIN
    PLASM_POWER = _xgepy.Plasm_PLASM_POWER
    PLASM_BOOLOP = _xgepy.Plasm_PLASM_BOOLOP
    PLASM_SKELETON = _xgepy.Plasm_PLASM_SKELETON
    PLASM_UKPOL = _xgepy.Plasm_PLASM_UKPOL
    PLASM_UKPOLF = _xgepy.Plasm_PLASM_UKPOLF
    PLASM_ADDPROPERTY = _xgepy.Plasm_PLASM_ADDPROPERTY
    PLASM_GETPROPERTY = _xgepy.Plasm_PLASM_GETPROPERTY
    PLASM_SKIN = _xgepy.Plasm_PLASM_SKIN
    PLASM_SHRINK = _xgepy.Plasm_PLASM_SHRINK
    PLASM___END = _xgepy.Plasm_PLASM___END
    __swig_getmethods__["dereference"] = lambda x: _xgepy.Plasm_dereference
    if _newclass:dereference = staticmethod(_xgepy.Plasm_dereference)
    __swig_getmethods__["cube"] = lambda x: _xgepy.Plasm_cube
    if _newclass:cube = staticmethod(_xgepy.Plasm_cube)
    __swig_getmethods__["simplex"] = lambda x: _xgepy.Plasm_simplex
    if _newclass:simplex = staticmethod(_xgepy.Plasm_simplex)
    __swig_getmethods__["mkpol"] = lambda x: _xgepy.Plasm_mkpol
    if _newclass:mkpol = staticmethod(_xgepy.Plasm_mkpol)
    __swig_getmethods__["ukpol"] = lambda x: _xgepy.Plasm_ukpol
    if _newclass:ukpol = staticmethod(_xgepy.Plasm_ukpol)
    __swig_getmethods__["ukpolf"] = lambda x: _xgepy.Plasm_ukpolf
    if _newclass:ukpolf = staticmethod(_xgepy.Plasm_ukpolf)
    __swig_getmethods__["getSpaceDim"] = lambda x: _xgepy.Plasm_getSpaceDim
    if _newclass:getSpaceDim = staticmethod(_xgepy.Plasm_getSpaceDim)
    __swig_getmethods__["getPointDim"] = lambda x: _xgepy.Plasm_getPointDim
    if _newclass:getPointDim = staticmethod(_xgepy.Plasm_getPointDim)
    __swig_getmethods__["limits"] = lambda x: _xgepy.Plasm_limits
    if _newclass:limits = staticmethod(_xgepy.Plasm_limits)
    __swig_getmethods__["Print"] = lambda x: _xgepy.Plasm_Print
    if _newclass:Print = staticmethod(_xgepy.Plasm_Print)
    __swig_getmethods__["addProperty"] = lambda x: _xgepy.Plasm_addProperty
    if _newclass:addProperty = staticmethod(_xgepy.Plasm_addProperty)
    __swig_getmethods__["getProperty"] = lambda x: _xgepy.Plasm_getProperty
    if _newclass:getProperty = staticmethod(_xgepy.Plasm_getProperty)
    __swig_getmethods__["statistics"] = lambda x: _xgepy.Plasm_statistics
    if _newclass:statistics = staticmethod(_xgepy.Plasm_statistics)
    __swig_getmethods__["shrink"] = lambda x: _xgepy.Plasm_shrink
    if _newclass:shrink = staticmethod(_xgepy.Plasm_shrink)
    __swig_getmethods__["open"] = lambda x: _xgepy.Plasm_open
    if _newclass:open = staticmethod(_xgepy.Plasm_open)
    __swig_getmethods__["save"] = lambda x: _xgepy.Plasm_save
    if _newclass:save = staticmethod(_xgepy.Plasm_save)
    __swig_getmethods__["Struct"] = lambda x: _xgepy.Plasm_Struct
    if _newclass:Struct = staticmethod(_xgepy.Plasm_Struct)
    __swig_getmethods__["copy"] = lambda x: _xgepy.Plasm_copy
    if _newclass:copy = staticmethod(_xgepy.Plasm_copy)
    __swig_getmethods__["join"] = lambda x: _xgepy.Plasm_join
    if _newclass:join = staticmethod(_xgepy.Plasm_join)
    __swig_getmethods__["transform"] = lambda x: _xgepy.Plasm_transform
    if _newclass:transform = staticmethod(_xgepy.Plasm_transform)
    __swig_getmethods__["scale"] = lambda x: _xgepy.Plasm_scale
    if _newclass:scale = staticmethod(_xgepy.Plasm_scale)
    __swig_getmethods__["translate"] = lambda x: _xgepy.Plasm_translate
    if _newclass:translate = staticmethod(_xgepy.Plasm_translate)
    __swig_getmethods__["rotate"] = lambda x: _xgepy.Plasm_rotate
    if _newclass:rotate = staticmethod(_xgepy.Plasm_rotate)
    __swig_getmethods__["embed"] = lambda x: _xgepy.Plasm_embed
    if _newclass:embed = staticmethod(_xgepy.Plasm_embed)
    __swig_getmethods__["power"] = lambda x: _xgepy.Plasm_power
    if _newclass:power = staticmethod(_xgepy.Plasm_power)
    __swig_getmethods__["skeleton"] = lambda x: _xgepy.Plasm_skeleton
    if _newclass:skeleton = staticmethod(_xgepy.Plasm_skeleton)
    __swig_getmethods__["boolop"] = lambda x: _xgepy.Plasm_boolop
    if _newclass:boolop = staticmethod(_xgepy.Plasm_boolop)
    __swig_getmethods__["Skin"] = lambda x: _xgepy.Plasm_Skin
    if _newclass:Skin = staticmethod(_xgepy.Plasm_Skin)
    __swig_getmethods__["getTriangles"] = lambda x: _xgepy.Plasm_getTriangles
    if _newclass:getTriangles = staticmethod(_xgepy.Plasm_getTriangles)
    __swig_getmethods__["getBatches"] = lambda x: _xgepy.Plasm_getBatches
    if _newclass:getBatches = staticmethod(_xgepy.Plasm_getBatches)
    __swig_getmethods__["view"] = lambda x: _xgepy.Plasm_view
    if _newclass:view = staticmethod(_xgepy.Plasm_view)
    __swig_getmethods__["convertOldXml"] = lambda x: _xgepy.Plasm_convertOldXml
    if _newclass:convertOldXml = staticmethod(_xgepy.Plasm_convertOldXml)
    __swig_destroy__ = _xgepy.delete_Plasm
    __del__ = lambda self : None;
Plasm_swigregister = _xgepy.Plasm_swigregister
Plasm_swigregister(Plasm)

def Plasm_dereference(*args):
  return _xgepy.Plasm_dereference(*args)
Plasm_dereference = _xgepy.Plasm_dereference

def Plasm_cube(*args):
  return _xgepy.Plasm_cube(*args)
Plasm_cube = _xgepy.Plasm_cube

def Plasm_simplex(*args):
  return _xgepy.Plasm_simplex(*args)
Plasm_simplex = _xgepy.Plasm_simplex

def Plasm_mkpol(*args):
  return _xgepy.Plasm_mkpol(*args)
Plasm_mkpol = _xgepy.Plasm_mkpol

def Plasm_ukpol(*args):
  return _xgepy.Plasm_ukpol(*args)
Plasm_ukpol = _xgepy.Plasm_ukpol

def Plasm_ukpolf(*args):
  return _xgepy.Plasm_ukpolf(*args)
Plasm_ukpolf = _xgepy.Plasm_ukpolf

def Plasm_getSpaceDim(*args):
  return _xgepy.Plasm_getSpaceDim(*args)
Plasm_getSpaceDim = _xgepy.Plasm_getSpaceDim

def Plasm_getPointDim(*args):
  return _xgepy.Plasm_getPointDim(*args)
Plasm_getPointDim = _xgepy.Plasm_getPointDim

def Plasm_limits(*args):
  return _xgepy.Plasm_limits(*args)
Plasm_limits = _xgepy.Plasm_limits

def Plasm_Print(*args):
  return _xgepy.Plasm_Print(*args)
Plasm_Print = _xgepy.Plasm_Print

def Plasm_addProperty(*args):
  return _xgepy.Plasm_addProperty(*args)
Plasm_addProperty = _xgepy.Plasm_addProperty

def Plasm_getProperty(*args):
  return _xgepy.Plasm_getProperty(*args)
Plasm_getProperty = _xgepy.Plasm_getProperty

def Plasm_statistics(*args):
  return _xgepy.Plasm_statistics(*args)
Plasm_statistics = _xgepy.Plasm_statistics

def Plasm_shrink(*args):
  return _xgepy.Plasm_shrink(*args)
Plasm_shrink = _xgepy.Plasm_shrink

def Plasm_open(*args):
  return _xgepy.Plasm_open(*args)
Plasm_open = _xgepy.Plasm_open

def Plasm_save(*args):
  return _xgepy.Plasm_save(*args)
Plasm_save = _xgepy.Plasm_save

def Plasm_Struct(*args):
  return _xgepy.Plasm_Struct(*args)
Plasm_Struct = _xgepy.Plasm_Struct

def Plasm_copy(*args):
  return _xgepy.Plasm_copy(*args)
Plasm_copy = _xgepy.Plasm_copy

def Plasm_join(*args):
  return _xgepy.Plasm_join(*args)
Plasm_join = _xgepy.Plasm_join

def Plasm_transform(*args):
  return _xgepy.Plasm_transform(*args)
Plasm_transform = _xgepy.Plasm_transform

def Plasm_scale(*args):
  return _xgepy.Plasm_scale(*args)
Plasm_scale = _xgepy.Plasm_scale

def Plasm_translate(*args):
  return _xgepy.Plasm_translate(*args)
Plasm_translate = _xgepy.Plasm_translate

def Plasm_rotate(*args):
  return _xgepy.Plasm_rotate(*args)
Plasm_rotate = _xgepy.Plasm_rotate

def Plasm_embed(*args):
  return _xgepy.Plasm_embed(*args)
Plasm_embed = _xgepy.Plasm_embed

def Plasm_power(*args):
  return _xgepy.Plasm_power(*args)
Plasm_power = _xgepy.Plasm_power

def Plasm_skeleton(*args):
  return _xgepy.Plasm_skeleton(*args)
Plasm_skeleton = _xgepy.Plasm_skeleton

def Plasm_boolop(*args):
  return _xgepy.Plasm_boolop(*args)
Plasm_boolop = _xgepy.Plasm_boolop

def Plasm_Skin(*args):
  return _xgepy.Plasm_Skin(*args)
Plasm_Skin = _xgepy.Plasm_Skin

def Plasm_getTriangles(*args):
  return _xgepy.Plasm_getTriangles(*args)
Plasm_getTriangles = _xgepy.Plasm_getTriangles

def Plasm_getBatches(*args):
  return _xgepy.Plasm_getBatches(*args)
Plasm_getBatches = _xgepy.Plasm_getBatches

def Plasm_view(*args):
  return _xgepy.Plasm_view(*args)
Plasm_view = _xgepy.Plasm_view

def Plasm_convertOldXml(*args):
  return _xgepy.Plasm_convertOldXml(*args)
Plasm_convertOldXml = _xgepy.Plasm_convertOldXml

# This file is compatible with both classic and new-style classes.


