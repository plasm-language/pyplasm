/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.1
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGPYTHON
#define SWIG_DIRECTORS
#define SWIG_PYTHON_DIRECTOR_NO_VTABLE


#ifdef __cplusplus
using namespace std;
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Python.h has to appear first */
#include <Python.h>

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.
  
  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/* 
   Flags/methods for returning states.
   
   The SWIG conversion methods, as ConvertPtr, return an integer 
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).
   
   Use the following macros/flags to set or process the returning
   states.
   
   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }
    
   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {         
        if (<obj is ok>) {			       
          if (<need new object>) {		       
            *ptr = <ptr to new allocated object>; 
            return SWIG_NEWOBJ;		       
          } else {				       
            *ptr = <ptr to old object>;	       
            return SWIG_OLDOBJ;		       
          } 				       
        } else {				       
          return SWIG_BADOBJ;		       
        }					       
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call
 
      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0) 
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)  

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) { 
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) { 
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; 
}
#else /* no cast-rank mode */
#  define SWIG_AddCast
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/* 
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}
  
/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13



/* Compatibility macros for Python 3 */
#if PY_VERSION_HEX >= 0x03000000

#define PyClass_Check(obj) PyObject_IsInstance(obj, (PyObject *)&PyType_Type)
#define PyInt_Check(x) PyLong_Check(x)
#define PyInt_AsLong(x) PyLong_AsLong(x)
#define PyInt_FromLong(x) PyLong_FromLong(x)
#define PyString_Format(fmt, args)  PyUnicode_Format(fmt, args)

#endif

#ifndef Py_TYPE
#  define Py_TYPE(op) ((op)->ob_type)
#endif

/* SWIG APIs for compatibility of both Python 2 & 3 */

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_FromFormat PyUnicode_FromFormat
#else
#  define SWIG_Python_str_FromFormat PyString_FromFormat
#endif


/* Warning: This function will allocate a new string in Python 3,
 * so please call SWIG_Python_str_DelForPy3(x) to free the space.
 */
SWIGINTERN char*
SWIG_Python_str_AsChar(PyObject *str)
{
#if PY_VERSION_HEX >= 0x03000000
  char *cstr;
  char *newstr;
  Py_ssize_t len;
  str = PyUnicode_AsUTF8String(str);
  PyBytes_AsStringAndSize(str, &cstr, &len);
  newstr = (char *) malloc(len+1);
  memcpy(newstr, cstr, len+1);
  Py_XDECREF(str);
  return newstr;
#else
  return PyString_AsString(str);
#endif
}

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_DelForPy3(x) free( (void*) (x) )
#else
#  define SWIG_Python_str_DelForPy3(x) 
#endif


SWIGINTERN PyObject*
SWIG_Python_str_FromChar(const char *c)
{
#if PY_VERSION_HEX >= 0x03000000
  return PyUnicode_FromString(c); 
#else
  return PyString_FromString(c);
#endif
}

/* Add PyOS_snprintf for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# if defined(_MSC_VER) || defined(__BORLANDC__) || defined(_WATCOM)
#  define PyOS_snprintf _snprintf
# else
#  define PyOS_snprintf snprintf
# endif
#endif

/* A crude PyString_FromFormat implementation for old Pythons */
#if PY_VERSION_HEX < 0x02020000

#ifndef SWIG_PYBUFFER_SIZE
# define SWIG_PYBUFFER_SIZE 1024
#endif

static PyObject *
PyString_FromFormat(const char *fmt, ...) {
  va_list ap;
  char buf[SWIG_PYBUFFER_SIZE * 2];
  int res;
  va_start(ap, fmt);
  res = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return (res < 0 || res >= (int)sizeof(buf)) ? 0 : PyString_FromString(buf);
}
#endif

/* Add PyObject_Del for old Pythons */
#if PY_VERSION_HEX < 0x01060000
# define PyObject_Del(op) PyMem_DEL((op))
#endif
#ifndef PyObject_DEL
# define PyObject_DEL PyObject_Del
#endif

/* A crude PyExc_StopIteration exception for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# ifndef PyExc_StopIteration
#  define PyExc_StopIteration PyExc_RuntimeError
# endif
# ifndef PyObject_GenericGetAttr
#  define PyObject_GenericGetAttr 0
# endif
#endif

/* Py_NotImplemented is defined in 2.1 and up. */
#if PY_VERSION_HEX < 0x02010000
# ifndef Py_NotImplemented
#  define Py_NotImplemented PyExc_RuntimeError
# endif
#endif

/* A crude PyString_AsStringAndSize implementation for old Pythons */
#if PY_VERSION_HEX < 0x02010000
# ifndef PyString_AsStringAndSize
#  define PyString_AsStringAndSize(obj, s, len) {*s = PyString_AsString(obj); *len = *s ? strlen(*s) : 0;}
# endif
#endif

/* PySequence_Size for old Pythons */
#if PY_VERSION_HEX < 0x02000000
# ifndef PySequence_Size
#  define PySequence_Size PySequence_Length
# endif
#endif

/* PyBool_FromLong for old Pythons */
#if PY_VERSION_HEX < 0x02030000
static
PyObject *PyBool_FromLong(long ok)
{
  PyObject *result = ok ? Py_True : Py_False;
  Py_INCREF(result);
  return result;
}
#endif

/* Py_ssize_t for old Pythons */
/* This code is as recommended by: */
/* http://www.python.org/dev/peps/pep-0353/#conversion-guidelines */
#if PY_VERSION_HEX < 0x02050000 && !defined(PY_SSIZE_T_MIN)
typedef int Py_ssize_t;
# define PY_SSIZE_T_MAX INT_MAX
# define PY_SSIZE_T_MIN INT_MIN
#endif

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIME PyObject*
SWIG_Python_ErrorType(int code) {
  PyObject* type = 0;
  switch(code) {
  case SWIG_MemoryError:
    type = PyExc_MemoryError;
    break;
  case SWIG_IOError:
    type = PyExc_IOError;
    break;
  case SWIG_RuntimeError:
    type = PyExc_RuntimeError;
    break;
  case SWIG_IndexError:
    type = PyExc_IndexError;
    break;
  case SWIG_TypeError:
    type = PyExc_TypeError;
    break;
  case SWIG_DivisionByZero:
    type = PyExc_ZeroDivisionError;
    break;
  case SWIG_OverflowError:
    type = PyExc_OverflowError;
    break;
  case SWIG_SyntaxError:
    type = PyExc_SyntaxError;
    break;
  case SWIG_ValueError:
    type = PyExc_ValueError;
    break;
  case SWIG_SystemError:
    type = PyExc_SystemError;
    break;
  case SWIG_AttributeError:
    type = PyExc_AttributeError;
    break;
  default:
    type = PyExc_RuntimeError;
  }
  return type;
}


SWIGRUNTIME void
SWIG_Python_AddErrorMsg(const char* mesg)
{
  PyObject *type = 0;
  PyObject *value = 0;
  PyObject *traceback = 0;

  if (PyErr_Occurred()) PyErr_Fetch(&type, &value, &traceback);
  if (value) {
    char *tmp;
    PyObject *old_str = PyObject_Str(value);
    PyErr_Clear();
    Py_XINCREF(type);

    PyErr_Format(type, "%s %s", tmp = SWIG_Python_str_AsChar(old_str), mesg);
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(old_str);
    Py_DECREF(value);
  } else {
    PyErr_SetString(PyExc_RuntimeError, mesg);
  }
}

#if defined(SWIG_PYTHON_NO_THREADS)
#  if defined(SWIG_PYTHON_THREADS)
#    undef SWIG_PYTHON_THREADS
#  endif
#endif
#if defined(SWIG_PYTHON_THREADS) /* Threading support is enabled */
#  if !defined(SWIG_PYTHON_USE_GIL) && !defined(SWIG_PYTHON_NO_USE_GIL)
#    if (PY_VERSION_HEX >= 0x02030000) /* For 2.3 or later, use the PyGILState calls */
#      define SWIG_PYTHON_USE_GIL
#    endif
#  endif
#  if defined(SWIG_PYTHON_USE_GIL) /* Use PyGILState threads calls */
#    ifndef SWIG_PYTHON_INITIALIZE_THREADS
#     define SWIG_PYTHON_INITIALIZE_THREADS  PyEval_InitThreads() 
#    endif
#    ifdef __cplusplus /* C++ code */
       class SWIG_Python_Thread_Block {
         bool status;
         PyGILState_STATE state;
       public:
         void end() { if (status) { PyGILState_Release(state); status = false;} }
         SWIG_Python_Thread_Block() : status(true), state(PyGILState_Ensure()) {}
         ~SWIG_Python_Thread_Block() { end(); }
       };
       class SWIG_Python_Thread_Allow {
         bool status;
         PyThreadState *save;
       public:
         void end() { if (status) { PyEval_RestoreThread(save); status = false; }}
         SWIG_Python_Thread_Allow() : status(true), save(PyEval_SaveThread()) {}
         ~SWIG_Python_Thread_Allow() { end(); }
       };
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   SWIG_Python_Thread_Block _swig_thread_block
#      define SWIG_PYTHON_THREAD_END_BLOCK     _swig_thread_block.end()
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   SWIG_Python_Thread_Allow _swig_thread_allow
#      define SWIG_PYTHON_THREAD_END_ALLOW     _swig_thread_allow.end()
#    else /* C code */
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   PyGILState_STATE _swig_thread_block = PyGILState_Ensure()
#      define SWIG_PYTHON_THREAD_END_BLOCK     PyGILState_Release(_swig_thread_block)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   PyThreadState *_swig_thread_allow = PyEval_SaveThread()
#      define SWIG_PYTHON_THREAD_END_ALLOW     PyEval_RestoreThread(_swig_thread_allow)
#    endif
#  else /* Old thread way, not implemented, user must provide it */
#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      define SWIG_PYTHON_INITIALIZE_THREADS
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_BLOCK)
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_BLOCK)
#      define SWIG_PYTHON_THREAD_END_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_ALLOW)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_ALLOW)
#      define SWIG_PYTHON_THREAD_END_ALLOW
#    endif
#  endif
#else /* No thread support */
#  define SWIG_PYTHON_INITIALIZE_THREADS
#  define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#  define SWIG_PYTHON_THREAD_END_BLOCK
#  define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#  define SWIG_PYTHON_THREAD_END_ALLOW
#endif

/* -----------------------------------------------------------------------------
 * Python API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* cc-mode */
#endif
#endif

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
  int type;
  char *name;
  long lvalue;
  double dvalue;
  void   *pvalue;
  swig_type_info **ptype;
} swig_const_info;


/* -----------------------------------------------------------------------------
 * Wrapper of PyInstanceMethod_New() used in Python 3
 * It is exported to the generated module, used for -fastproxy
 * ----------------------------------------------------------------------------- */
SWIGRUNTIME PyObject* SWIG_PyInstanceMethod_New(PyObject *self, PyObject *func)
{
#if PY_VERSION_HEX >= 0x03000000
  return PyInstanceMethod_New(func);
#else
  return NULL;
#endif
}

#ifdef __cplusplus
#if 0
{ /* cc-mode */
#endif
}
#endif


/* -----------------------------------------------------------------------------
 * pyrun.swg
 *
 * This file contains the runtime support for Python modules
 * and includes code for managing global variables and pointer
 * type checking.
 *
 * ----------------------------------------------------------------------------- */

/* Common SWIG API */

/* for raw pointers */
#define SWIG_Python_ConvertPtr(obj, pptr, type, flags)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Python_ConvertPtr(obj, pptr, type, flags)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, own)
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(ptr, type, flags)
#define SWIG_CheckImplicit(ty)                          SWIG_Python_CheckImplicit(ty) 
#define SWIG_AcquirePtr(ptr, src)                       SWIG_Python_AcquirePtr(ptr, src)
#define swig_owntype                                    int

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Python_ConvertFunctionPtr(obj, pptr, type)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Python_NewPointerObj(ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Python_GetModule()
#define SWIG_SetModule(clientdata, pointer)             SWIG_Python_SetModule(pointer)
#define SWIG_NewClientData(obj)                         SwigPyClientData_New(obj)

#define SWIG_SetErrorObj                                SWIG_Python_SetErrorObj                            
#define SWIG_SetErrorMsg                        	SWIG_Python_SetErrorMsg				   
#define SWIG_ErrorType(code)                    	SWIG_Python_ErrorType(code)                        
#define SWIG_Error(code, msg)            		SWIG_Python_SetErrorMsg(SWIG_ErrorType(code), msg) 
#define SWIG_fail                        		goto fail					   


/* Runtime API implementation */

/* Error manipulation */

SWIGINTERN void 
SWIG_Python_SetErrorObj(PyObject *errtype, PyObject *obj) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK; 
  PyErr_SetObject(errtype, obj);
  Py_DECREF(obj);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

SWIGINTERN void 
SWIG_Python_SetErrorMsg(PyObject *errtype, const char *msg) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  PyErr_SetString(errtype, (char *) msg);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

#define SWIG_Python_Raise(obj, type, desc)  SWIG_Python_SetErrorObj(SWIG_Python_ExceptionType(desc), obj)

/* Set a constant value */

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, const char *name, PyObject *obj) {   
  PyDict_SetItemString(d, (char*) name, obj);
  Py_DECREF(obj);                            
}

/* Append a value to the result obj */

SWIGINTERN PyObject*
SWIG_Python_AppendOutput(PyObject* result, PyObject* obj) {
#if !defined(SWIG_PYTHON_OUTPUT_TUPLE)
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyList_Check(result)) {
      PyObject *o2 = result;
      result = PyList_New(1);
      PyList_SetItem(result, 0, o2);
    }
    PyList_Append(result,obj);
    Py_DECREF(obj);
  }
  return result;
#else
  PyObject*   o2;
  PyObject*   o3;
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyTuple_Check(result)) {
      o2 = result;
      result = PyTuple_New(1);
      PyTuple_SET_ITEM(result, 0, o2);
    }
    o3 = PyTuple_New(1);
    PyTuple_SET_ITEM(o3, 0, obj);
    o2 = result;
    result = PySequence_Concat(o2, o3);
    Py_DECREF(o2);
    Py_DECREF(o3);
  }
  return result;
#endif
}

/* Unpack the argument tuple */

SWIGINTERN int
SWIG_Python_UnpackTuple(PyObject *args, const char *name, Py_ssize_t min, Py_ssize_t max, PyObject **objs)
{
  if (!args) {
    if (!min && !max) {
      return 1;
    } else {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got none", 
		   name, (min == max ? "" : "at least "), (int)min);
      return 0;
    }
  }  
  if (!PyTuple_Check(args)) {
    PyErr_SetString(PyExc_SystemError, "UnpackTuple() argument list is not a tuple");
    return 0;
  } else {
    register Py_ssize_t l = PyTuple_GET_SIZE(args);
    if (l < min) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at least "), (int)min, (int)l);
      return 0;
    } else if (l > max) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at most "), (int)max, (int)l);
      return 0;
    } else {
      register int i;
      for (i = 0; i < l; ++i) {
	objs[i] = PyTuple_GET_ITEM(args, i);
      }
      for (; l < max; ++l) {
	objs[l] = 0;
      }
      return i + 1;
    }    
  }
}

/* A functor is a function object with one single object argument */
#if PY_VERSION_HEX >= 0x02020000
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunctionObjArgs(functor, obj, NULL);
#else
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunction(functor, "O", obj);
#endif

/*
  Helper for static pointer initialization for both C and C++ code, for example
  static PyObject *SWIG_STATIC_POINTER(MyVar) = NewSomething(...);
*/
#ifdef __cplusplus
#define SWIG_STATIC_POINTER(var)  var
#else
#define SWIG_STATIC_POINTER(var)  var = 0; if (!var) var
#endif

/* -----------------------------------------------------------------------------
 * Pointer declarations
 * ----------------------------------------------------------------------------- */

/* Flags for new pointer objects */
#define SWIG_POINTER_NOSHADOW       (SWIG_POINTER_OWN      << 1)
#define SWIG_POINTER_NEW            (SWIG_POINTER_NOSHADOW | SWIG_POINTER_OWN)

#define SWIG_POINTER_IMPLICIT_CONV  (SWIG_POINTER_DISOWN   << 1)

#ifdef __cplusplus
extern "C" {
#if 0
} /* cc-mode */
#endif
#endif

/*  How to access Py_None */
#if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#  ifndef SWIG_PYTHON_NO_BUILD_NONE
#    ifndef SWIG_PYTHON_BUILD_NONE
#      define SWIG_PYTHON_BUILD_NONE
#    endif
#  endif
#endif

#ifdef SWIG_PYTHON_BUILD_NONE
#  ifdef Py_None
#   undef Py_None
#   define Py_None SWIG_Py_None()
#  endif
SWIGRUNTIMEINLINE PyObject * 
_SWIG_Py_None(void)
{
  PyObject *none = Py_BuildValue((char*)"");
  Py_DECREF(none);
  return none;
}
SWIGRUNTIME PyObject * 
SWIG_Py_None(void)
{
  static PyObject *SWIG_STATIC_POINTER(none) = _SWIG_Py_None();
  return none;
}
#endif

/* The python void return value */

SWIGRUNTIMEINLINE PyObject * 
SWIG_Py_Void(void)
{
  PyObject *none = Py_None;
  Py_INCREF(none);
  return none;
}

/* SwigPyClientData */

typedef struct {
  PyObject *klass;
  PyObject *newraw;
  PyObject *newargs;
  PyObject *destroy;
  int delargs;
  int implicitconv;
} SwigPyClientData;

SWIGRUNTIMEINLINE int 
SWIG_Python_CheckImplicit(swig_type_info *ty)
{
  SwigPyClientData *data = (SwigPyClientData *)ty->clientdata;
  return data ? data->implicitconv : 0;
}

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_ExceptionType(swig_type_info *desc) {
  SwigPyClientData *data = desc ? (SwigPyClientData *) desc->clientdata : 0;
  PyObject *klass = data ? data->klass : 0;
  return (klass ? klass : PyExc_RuntimeError);
}


SWIGRUNTIME SwigPyClientData * 
SwigPyClientData_New(PyObject* obj)
{
  if (!obj) {
    return 0;
  } else {
    SwigPyClientData *data = (SwigPyClientData *)malloc(sizeof(SwigPyClientData));
    /* the klass element */
    data->klass = obj;
    Py_INCREF(data->klass);
    /* the newraw method and newargs arguments used to create a new raw instance */
    if (PyClass_Check(obj)) {
      data->newraw = 0;
      data->newargs = obj;
      Py_INCREF(obj);
    } else {
#if (PY_VERSION_HEX < 0x02020000)
      data->newraw = 0;
#else
      data->newraw = PyObject_GetAttrString(data->klass, (char *)"__new__");
#endif
      if (data->newraw) {
	Py_INCREF(data->newraw);
	data->newargs = PyTuple_New(1);
	PyTuple_SetItem(data->newargs, 0, obj);
      } else {
	data->newargs = obj;
      }
      Py_INCREF(data->newargs);
    }
    /* the destroy method, aka as the C++ delete method */
    data->destroy = PyObject_GetAttrString(data->klass, (char *)"__swig_destroy__");
    if (PyErr_Occurred()) {
      PyErr_Clear();
      data->destroy = 0;
    }
    if (data->destroy) {
      int flags;
      Py_INCREF(data->destroy);
      flags = PyCFunction_GET_FLAGS(data->destroy);
#ifdef METH_O
      data->delargs = !(flags & (METH_O));
#else
      data->delargs = 0;
#endif
    } else {
      data->delargs = 0;
    }
    data->implicitconv = 0;
    return data;
  }
}

SWIGRUNTIME void 
SwigPyClientData_Del(SwigPyClientData* data)
{
  Py_XDECREF(data->newraw);
  Py_XDECREF(data->newargs);
  Py_XDECREF(data->destroy);
}

/* =============== SwigPyObject =====================*/

typedef struct {
  PyObject_HEAD
  void *ptr;
  swig_type_info *ty;
  int own;
  PyObject *next;
} SwigPyObject;

SWIGRUNTIME PyObject *
SwigPyObject_long(SwigPyObject *v)
{
  return PyLong_FromVoidPtr(v->ptr);
}

SWIGRUNTIME PyObject *
SwigPyObject_format(const char* fmt, SwigPyObject *v)
{
  PyObject *res = NULL;
  PyObject *args = PyTuple_New(1);
  if (args) {
    if (PyTuple_SetItem(args, 0, SwigPyObject_long(v)) == 0) {
      PyObject *ofmt = SWIG_Python_str_FromChar(fmt);
      if (ofmt) {
#if PY_VERSION_HEX >= 0x03000000
	res = PyUnicode_Format(ofmt,args);
#else
	res = PyString_Format(ofmt,args);
#endif
	Py_DECREF(ofmt);
      }
      Py_DECREF(args);
    }
  }
  return res;
}

SWIGRUNTIME PyObject *
SwigPyObject_oct(SwigPyObject *v)
{
  return SwigPyObject_format("%o",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_hex(SwigPyObject *v)
{
  return SwigPyObject_format("%x",v);
}

SWIGRUNTIME PyObject *
#ifdef METH_NOARGS
SwigPyObject_repr(SwigPyObject *v)
#else
SwigPyObject_repr(SwigPyObject *v, PyObject *args)
#endif
{
  const char *name = SWIG_TypePrettyName(v->ty);
  PyObject *repr = SWIG_Python_str_FromFormat("<Swig Object of type '%s' at %p>", name, v);
  if (v->next) {
#ifdef METH_NOARGS
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next);
#else
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next, args);
#endif
#if PY_VERSION_HEX >= 0x03000000
    PyObject *joined = PyUnicode_Concat(repr, nrep);
    Py_DecRef(repr);
    Py_DecRef(nrep);
    repr = joined;
#else
    PyString_ConcatAndDel(&repr,nrep);
#endif
  }
  return repr;  
}

SWIGRUNTIME int
SwigPyObject_print(SwigPyObject *v, FILE *fp, int SWIGUNUSEDPARM(flags))
{
  char *str;
#ifdef METH_NOARGS
  PyObject *repr = SwigPyObject_repr(v);
#else
  PyObject *repr = SwigPyObject_repr(v, NULL);
#endif
  if (repr) {
    str = SWIG_Python_str_AsChar(repr); 
    fputs(str, fp);
    SWIG_Python_str_DelForPy3(str);
    Py_DECREF(repr);
    return 0; 
  } else {
    return 1; 
  }
}

SWIGRUNTIME PyObject *
SwigPyObject_str(SwigPyObject *v)
{
  char result[SWIG_BUFFER_SIZE];
  return SWIG_PackVoidPtr(result, v->ptr, v->ty->name, sizeof(result)) ?
    SWIG_Python_str_FromChar(result) : 0;
}

SWIGRUNTIME int
SwigPyObject_compare(SwigPyObject *v, SwigPyObject *w)
{
  void *i = v->ptr;
  void *j = w->ptr;
  return (i < j) ? -1 : ((i > j) ? 1 : 0);
}

/* Added for Python 3.x, would it also be useful for Python 2.x? */
SWIGRUNTIME PyObject*
SwigPyObject_richcompare(SwigPyObject *v, SwigPyObject *w, int op)
{
  PyObject* res;
  if( op != Py_EQ && op != Py_NE ) {
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
  }
  if( (SwigPyObject_compare(v, w)==0) == (op == Py_EQ) )
    res = Py_True;
  else
    res = Py_False;
  Py_INCREF(res);
  return res;  
}


SWIGRUNTIME PyTypeObject* _PySwigObject_type(void);

SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = _PySwigObject_type();
  return type;
}

SWIGRUNTIMEINLINE int
SwigPyObject_Check(PyObject *op) {
  return (Py_TYPE(op) == SwigPyObject_type())
    || (strcmp(Py_TYPE(op)->tp_name,"SwigPyObject") == 0);
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own);

SWIGRUNTIME void
SwigPyObject_dealloc(PyObject *v)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  PyObject *next = sobj->next;
  if (sobj->own == SWIG_POINTER_OWN) {
    swig_type_info *ty = sobj->ty;
    SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
    PyObject *destroy = data ? data->destroy : 0;
    if (destroy) {
      /* destroy is always a VARARGS method */
      PyObject *res;
      if (data->delargs) {
	/* we need to create a temporary object to carry the destroy operation */
	PyObject *tmp = SwigPyObject_New(sobj->ptr, ty, 0);
	res = SWIG_Python_CallFunctor(destroy, tmp);
	Py_DECREF(tmp);
      } else {
	PyCFunction meth = PyCFunction_GET_FUNCTION(destroy);
	PyObject *mself = PyCFunction_GET_SELF(destroy);
	res = ((*meth)(mself, v));
      }
      Py_XDECREF(res);
    } 
#if !defined(SWIG_PYTHON_SILENT_MEMLEAK)
    else {
      const char *name = SWIG_TypePrettyName(ty);
      printf("swig/python detected a memory leak of type '%s', no destructor found.\n", (name ? name : "unknown"));
    }
#endif
  } 
  Py_XDECREF(next);
  PyObject_DEL(v);
}

SWIGRUNTIME PyObject* 
SwigPyObject_append(PyObject* v, PyObject* next)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
#ifndef METH_O
  PyObject *tmp = 0;
  if (!PyArg_ParseTuple(next,(char *)"O:append", &tmp)) return NULL;
  next = tmp;
#endif
  if (!SwigPyObject_Check(next)) {
    return NULL;
  }
  sobj->next = next;
  Py_INCREF(next);
  return SWIG_Py_Void();
}

SWIGRUNTIME PyObject* 
#ifdef METH_NOARGS
SwigPyObject_next(PyObject* v)
#else
SwigPyObject_next(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (sobj->next) {    
    Py_INCREF(sobj->next);
    return sobj->next;
  } else {
    return SWIG_Py_Void();
  }
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
SwigPyObject_disown(PyObject *v)
#else
SwigPyObject_disown(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = 0;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
SwigPyObject_acquire(PyObject *v)
#else
SwigPyObject_acquire(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = SWIG_POINTER_OWN;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
SwigPyObject_own(PyObject *v, PyObject *args)
{
  PyObject *val = 0;
#if (PY_VERSION_HEX < 0x02020000)
  if (!PyArg_ParseTuple(args,(char *)"|O:own",&val))
#else
  if (!PyArg_UnpackTuple(args, (char *)"own", 0, 1, &val)) 
#endif
    {
      return NULL;
    } 
  else
    {
      SwigPyObject *sobj = (SwigPyObject *)v;
      PyObject *obj = PyBool_FromLong(sobj->own);
      if (val) {
#ifdef METH_NOARGS
	if (PyObject_IsTrue(val)) {
	  SwigPyObject_acquire(v);
	} else {
	  SwigPyObject_disown(v);
	}
#else
	if (PyObject_IsTrue(val)) {
	  SwigPyObject_acquire(v,args);
	} else {
	  SwigPyObject_disown(v,args);
	}
#endif
      } 
      return obj;
    }
}

#ifdef METH_O
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)SwigPyObject_disown,  METH_NOARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire, METH_NOARGS,  (char *)"aquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)SwigPyObject_own,     METH_VARARGS, (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)SwigPyObject_append,  METH_O,       (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)SwigPyObject_next,    METH_NOARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)SwigPyObject_repr,    METH_NOARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#else
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)SwigPyObject_disown,  METH_VARARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire, METH_VARARGS,  (char *)"aquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)SwigPyObject_own,     METH_VARARGS,  (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)SwigPyObject_append,  METH_VARARGS,  (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)SwigPyObject_next,    METH_VARARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)SwigPyObject_repr,   METH_VARARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#endif

#if PY_VERSION_HEX < 0x02020000
SWIGINTERN PyObject *
SwigPyObject_getattr(SwigPyObject *sobj,char *name)
{
  return Py_FindMethod(swigobject_methods, (PyObject *)sobj, name);
}
#endif

SWIGRUNTIME PyTypeObject*
_PySwigObject_type(void) {
  static char swigobject_doc[] = "Swig object carries a C/C++ instance pointer";
  
  static PyNumberMethods SwigPyObject_as_number = {
    (binaryfunc)0, /*nb_add*/
    (binaryfunc)0, /*nb_subtract*/
    (binaryfunc)0, /*nb_multiply*/
    /* nb_divide removed in Python 3 */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc)0, /*nb_divide*/
#endif
    (binaryfunc)0, /*nb_remainder*/
    (binaryfunc)0, /*nb_divmod*/
    (ternaryfunc)0,/*nb_power*/
    (unaryfunc)0,  /*nb_negative*/
    (unaryfunc)0,  /*nb_positive*/
    (unaryfunc)0,  /*nb_absolute*/
    (inquiry)0,    /*nb_nonzero*/
    0,		   /*nb_invert*/
    0,		   /*nb_lshift*/
    0,		   /*nb_rshift*/
    0,		   /*nb_and*/
    0,		   /*nb_xor*/
    0,		   /*nb_or*/
#if PY_VERSION_HEX < 0x03000000
    0,   /*nb_coerce*/
#endif
    (unaryfunc)SwigPyObject_long, /*nb_int*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_long, /*nb_long*/
#else
    0, /*nb_reserved*/
#endif
    (unaryfunc)0,                 /*nb_float*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_oct,  /*nb_oct*/
    (unaryfunc)SwigPyObject_hex,  /*nb_hex*/
#endif
#if PY_VERSION_HEX >= 0x03000000 /* 3.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index, nb_inplace_divide removed */
#elif PY_VERSION_HEX >= 0x02050000 /* 2.5.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index */
#elif PY_VERSION_HEX >= 0x02020000 /* 2.2.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_true_divide */
#elif PY_VERSION_HEX >= 0x02000000 /* 2.0.0 */
    0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_or */
#endif
  };

  static PyTypeObject swigpyobject_type;  
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp
      = {
	/* PyObject header changed in Python 3 */
#if PY_VERSION_HEX >= 0x03000000
	PyVarObject_HEAD_INIT(&PyType_Type, 0)
#else    
	PyObject_HEAD_INIT(NULL)
	0,				    /* ob_size */
#endif
	(char *)"SwigPyObject",		    /* tp_name */
	sizeof(SwigPyObject),		    /* tp_basicsize */
	0,			            /* tp_itemsize */
	(destructor)SwigPyObject_dealloc,   /* tp_dealloc */
	(printfunc)SwigPyObject_print,	    /* tp_print */
#if PY_VERSION_HEX < 0x02020000
	(getattrfunc)SwigPyObject_getattr,  /* tp_getattr */ 
#else
	(getattrfunc)0,			    /* tp_getattr */ 
#endif
	(setattrfunc)0,			    /* tp_setattr */ 
#if PY_VERSION_HEX >= 0x03000000
    0, /* tp_reserved in 3.0.1, tp_compare in 3.0.0 but not used */
#else
	(cmpfunc)SwigPyObject_compare,	    /* tp_compare */
#endif
	(reprfunc)SwigPyObject_repr,	    /* tp_repr */    
	&SwigPyObject_as_number,	    /* tp_as_number */
	0,				    /* tp_as_sequence */
	0,				    /* tp_as_mapping */
	(hashfunc)0,			    /* tp_hash */
	(ternaryfunc)0,			    /* tp_call */
	(reprfunc)SwigPyObject_str,	    /* tp_str */
	PyObject_GenericGetAttr,            /* tp_getattro */
	0,				    /* tp_setattro */
	0,		                    /* tp_as_buffer */
	Py_TPFLAGS_DEFAULT,	            /* tp_flags */
	swigobject_doc, 	            /* tp_doc */        
	0,                                  /* tp_traverse */
	0,                                  /* tp_clear */
	(richcmpfunc)SwigPyObject_richcompare,           /* tp_richcompare */
	0,                                  /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
	0,                                  /* tp_iter */
	0,                                  /* tp_iternext */
	swigobject_methods,		    /* tp_methods */ 
	0,			            /* tp_members */
	0,				    /* tp_getset */	    	
	0,			            /* tp_base */	        
	0,				    /* tp_dict */	    	
	0,				    /* tp_descr_get */  	
	0,				    /* tp_descr_set */  	
	0,				    /* tp_dictoffset */ 	
	0,				    /* tp_init */	    	
	0,				    /* tp_alloc */	    	
	0,			            /* tp_new */	    	
	0,	                            /* tp_free */	   
	0,                                  /* tp_is_gc */  
	0,				    /* tp_bases */   
	0,				    /* tp_mro */
	0,				    /* tp_cache */   
	0,				    /* tp_subclasses */
	0,				    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
	0,                                  /* tp_del */
#endif
#ifdef COUNT_ALLOCS
	0,0,0,0                             /* tp_alloc -> tp_next */
#endif
      };
    swigpyobject_type = tmp;
    /* for Python 3 we already assigned ob_type in PyVarObject_HEAD_INIT() */
#if PY_VERSION_HEX < 0x03000000
    swigpyobject_type.ob_type = &PyType_Type;
#endif
    type_init = 1;
  }
  return &swigpyobject_type;
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own)
{
  SwigPyObject *sobj = PyObject_NEW(SwigPyObject, SwigPyObject_type());
  if (sobj) {
    sobj->ptr  = ptr;
    sobj->ty   = ty;
    sobj->own  = own;
    sobj->next = 0;
  }
  return (PyObject *)sobj;
}

/* -----------------------------------------------------------------------------
 * Implements a simple Swig Packed type, and use it instead of string
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *pack;
  swig_type_info *ty;
  size_t size;
} SwigPyPacked;

SWIGRUNTIME int
SwigPyPacked_print(SwigPyPacked *v, FILE *fp, int SWIGUNUSEDPARM(flags))
{
  char result[SWIG_BUFFER_SIZE];
  fputs("<Swig Packed ", fp); 
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    fputs("at ", fp); 
    fputs(result, fp); 
  }
  fputs(v->ty->name,fp); 
  fputs(">", fp);
  return 0; 
}
  
SWIGRUNTIME PyObject *
SwigPyPacked_repr(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    return SWIG_Python_str_FromFormat("<Swig Packed at %s%s>", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromFormat("<Swig Packed %s>", v->ty->name);
  }  
}

SWIGRUNTIME PyObject *
SwigPyPacked_str(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){
    return SWIG_Python_str_FromFormat("%s%s", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromChar(v->ty->name);
  }  
}

SWIGRUNTIME int
SwigPyPacked_compare(SwigPyPacked *v, SwigPyPacked *w)
{
  size_t i = v->size;
  size_t j = w->size;
  int s = (i < j) ? -1 : ((i > j) ? 1 : 0);
  return s ? s : strncmp((char *)v->pack, (char *)w->pack, 2*v->size);
}

SWIGRUNTIME PyTypeObject* _PySwigPacked_type(void);

SWIGRUNTIME PyTypeObject*
SwigPyPacked_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = _PySwigPacked_type();
  return type;
}

SWIGRUNTIMEINLINE int
SwigPyPacked_Check(PyObject *op) {
  return ((op)->ob_type == _PySwigPacked_type()) 
    || (strcmp((op)->ob_type->tp_name,"SwigPyPacked") == 0);
}

SWIGRUNTIME void
SwigPyPacked_dealloc(PyObject *v)
{
  if (SwigPyPacked_Check(v)) {
    SwigPyPacked *sobj = (SwigPyPacked *) v;
    free(sobj->pack);
  }
  PyObject_DEL(v);
}

SWIGRUNTIME PyTypeObject*
_PySwigPacked_type(void) {
  static char swigpacked_doc[] = "Swig object carries a C/C++ instance pointer";
  static PyTypeObject swigpypacked_type;
  static int type_init = 0;  
  if (!type_init) {
    const PyTypeObject tmp
      = {
    /* PyObject header changed in Python 3 */
#if PY_VERSION_HEX>=0x03000000
    PyVarObject_HEAD_INIT(&PyType_Type, 0)
#else
	PyObject_HEAD_INIT(NULL)
    0,				    /* ob_size */	
#endif
	(char *)"SwigPyPacked",		    /* tp_name */	
	sizeof(SwigPyPacked),		    /* tp_basicsize */	
	0,				    /* tp_itemsize */	
	(destructor)SwigPyPacked_dealloc,   /* tp_dealloc */	
	(printfunc)SwigPyPacked_print,	    /* tp_print */   	
	(getattrfunc)0,			    /* tp_getattr */ 	
	(setattrfunc)0,			    /* tp_setattr */ 	
#if PY_VERSION_HEX>=0x03000000
    0, /* tp_reserved in 3.0.1 */
#else
    (cmpfunc)SwigPyPacked_compare,	    /* tp_compare */
#endif
	(reprfunc)SwigPyPacked_repr,	    /* tp_repr */
	0,	                            /* tp_as_number */
	0,				    /* tp_as_sequence */
	0,				    /* tp_as_mapping */
	(hashfunc)0,			    /* tp_hash */
	(ternaryfunc)0,			    /* tp_call */
	(reprfunc)SwigPyPacked_str,	    /* tp_str */
	PyObject_GenericGetAttr,            /* tp_getattro */
	0,				    /* tp_setattro */
	0,		                    /* tp_as_buffer */
	Py_TPFLAGS_DEFAULT,	            /* tp_flags */
	swigpacked_doc, 	            /* tp_doc */
	0,                                  /* tp_traverse */
	0,                                  /* tp_clear */
	0,                                  /* tp_richcompare */
	0,                                  /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
	0,                                  /* tp_iter */
	0,                                  /* tp_iternext */
	0,		                    /* tp_methods */ 
	0,			            /* tp_members */
	0,				    /* tp_getset */	    	
	0,			            /* tp_base */	        
	0,				    /* tp_dict */	    	
	0,				    /* tp_descr_get */  	
	0,				    /* tp_descr_set */  	
	0,				    /* tp_dictoffset */ 	
	0,				    /* tp_init */	    	
	0,				    /* tp_alloc */	    	
	0,			            /* tp_new */	    	
	0, 	                            /* tp_free */	   
        0,                                  /* tp_is_gc */  
	0,				    /* tp_bases */   
	0,				    /* tp_mro */
	0,				    /* tp_cache */   
 	0,				    /* tp_subclasses */
	0,				    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
	0,                                  /* tp_del */
#endif
#ifdef COUNT_ALLOCS
	0,0,0,0                             /* tp_alloc -> tp_next */
#endif
      };
    swigpypacked_type = tmp;
    /* for Python 3 the ob_type already assigned in PyVarObject_HEAD_INIT() */
#if PY_VERSION_HEX < 0x03000000
    swigpypacked_type.ob_type = &PyType_Type;
#endif
    type_init = 1;
  }
  return &swigpypacked_type;
}

SWIGRUNTIME PyObject *
SwigPyPacked_New(void *ptr, size_t size, swig_type_info *ty)
{
  SwigPyPacked *sobj = PyObject_NEW(SwigPyPacked, SwigPyPacked_type());
  if (sobj) {
    void *pack = malloc(size);
    if (pack) {
      memcpy(pack, ptr, size);
      sobj->pack = pack;
      sobj->ty   = ty;
      sobj->size = size;
    } else {
      PyObject_DEL((PyObject *) sobj);
      sobj = 0;
    }
  }
  return (PyObject *) sobj;
}

SWIGRUNTIME swig_type_info *
SwigPyPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
{
  if (SwigPyPacked_Check(obj)) {
    SwigPyPacked *sobj = (SwigPyPacked *)obj;
    if (sobj->size != size) return 0;
    memcpy(ptr, sobj->pack, size);
    return sobj->ty;
  } else {
    return 0;
  }
}

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIMEINLINE PyObject *
_SWIG_This(void)
{
    return SWIG_Python_str_FromChar("this");
}

static PyObject *swig_this = NULL;

SWIGRUNTIME PyObject *
SWIG_This(void)
{
  if (swig_this == NULL)
    swig_this = _SWIG_This();
  return swig_this;
}

/* #define SWIG_PYTHON_SLOW_GETSET_THIS */

/* TODO: I don't know how to implement the fast getset in Python 3 right now */
#if PY_VERSION_HEX>=0x03000000
#define SWIG_PYTHON_SLOW_GETSET_THIS 
#endif

SWIGRUNTIME SwigPyObject *
SWIG_Python_GetSwigThis(PyObject *pyobj) 
{
  if (SwigPyObject_Check(pyobj)) {
    return (SwigPyObject *) pyobj;
  } else {
    PyObject *obj = 0;
#if (!defined(SWIG_PYTHON_SLOW_GETSET_THIS) && (PY_VERSION_HEX >= 0x02030000))
    if (PyInstance_Check(pyobj)) {
      obj = _PyInstance_Lookup(pyobj, SWIG_This());      
    } else {
      PyObject **dictptr = _PyObject_GetDictPtr(pyobj);
      if (dictptr != NULL) {
	PyObject *dict = *dictptr;
	obj = dict ? PyDict_GetItem(dict, SWIG_This()) : 0;
      } else {
#ifdef PyWeakref_CheckProxy
	if (PyWeakref_CheckProxy(pyobj)) {
	  PyObject *wobj = PyWeakref_GET_OBJECT(pyobj);
	  return wobj ? SWIG_Python_GetSwigThis(wobj) : 0;
	}
#endif
	obj = PyObject_GetAttr(pyobj,SWIG_This());
	if (obj) {
	  Py_DECREF(obj);
	} else {
	  if (PyErr_Occurred()) PyErr_Clear();
	  return 0;
	}
      }
    }
#else
    obj = PyObject_GetAttr(pyobj,SWIG_This());
    if (obj) {
      Py_DECREF(obj);
    } else {
      if (PyErr_Occurred()) PyErr_Clear();
      return 0;
    }
#endif
    if (obj && !SwigPyObject_Check(obj)) {
      /* a PyObject is called 'this', try to get the 'real this'
	 SwigPyObject from it */ 
      return SWIG_Python_GetSwigThis(obj);
    }
    return (SwigPyObject *)obj;
  }
}

/* Acquire a pointer value */

SWIGRUNTIME int
SWIG_Python_AcquirePtr(PyObject *obj, int own) {
  if (own == SWIG_POINTER_OWN) {
    SwigPyObject *sobj = SWIG_Python_GetSwigThis(obj);
    if (sobj) {
      int oldown = sobj->own;
      sobj->own = own;
      return oldown;
    }
  }
  return 0;
}

/* Convert a pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPtrAndOwn(PyObject *obj, void **ptr, swig_type_info *ty, int flags, int *own) {
  if (!obj) return SWIG_ERROR;
  if (obj == Py_None) {
    if (ptr) *ptr = 0;
    return SWIG_OK;
  } else {
    SwigPyObject *sobj = SWIG_Python_GetSwigThis(obj);
    if (own)
      *own = 0;
    while (sobj) {
      void *vptr = sobj->ptr;
      if (ty) {
	swig_type_info *to = sobj->ty;
	if (to == ty) {
	  /* no type cast needed */
	  if (ptr) *ptr = vptr;
	  break;
	} else {
	  swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
	  if (!tc) {
	    sobj = (SwigPyObject *)sobj->next;
	  } else {
	    if (ptr) {
              int newmemory = 0;
              *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
              if (newmemory == SWIG_CAST_NEW_MEMORY) {
                assert(own); /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
                if (own)
                  *own = *own | SWIG_CAST_NEW_MEMORY;
              }
            }
	    break;
	  }
	}
      } else {
	if (ptr) *ptr = vptr;
	break;
      }
    }
    if (sobj) {
      if (own)
        *own = *own | sobj->own;
      if (flags & SWIG_POINTER_DISOWN) {
	sobj->own = 0;
      }
      return SWIG_OK;
    } else {
      int res = SWIG_ERROR;
      if (flags & SWIG_POINTER_IMPLICIT_CONV) {
	SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
	if (data && !data->implicitconv) {
	  PyObject *klass = data->klass;
	  if (klass) {
	    PyObject *impconv;
	    data->implicitconv = 1; /* avoid recursion and call 'explicit' constructors*/
	    impconv = SWIG_Python_CallFunctor(klass, obj);
	    data->implicitconv = 0;
	    if (PyErr_Occurred()) {
	      PyErr_Clear();
	      impconv = 0;
	    }
	    if (impconv) {
	      SwigPyObject *iobj = SWIG_Python_GetSwigThis(impconv);
	      if (iobj) {
		void *vptr;
		res = SWIG_Python_ConvertPtrAndOwn((PyObject*)iobj, &vptr, ty, 0, 0);
		if (SWIG_IsOK(res)) {
		  if (ptr) {
		    *ptr = vptr;
		    /* transfer the ownership to 'ptr' */
		    iobj->own = 0;
		    res = SWIG_AddCast(res);
		    res = SWIG_AddNewMask(res);
		  } else {
		    res = SWIG_AddCast(res);		    
		  }
		}
	      }
	      Py_DECREF(impconv);
	    }
	  }
	}
      }
      return res;
    }
  }
}

/* Convert a function ptr value */

SWIGRUNTIME int
SWIG_Python_ConvertFunctionPtr(PyObject *obj, void **ptr, swig_type_info *ty) {
  if (!PyCFunction_Check(obj)) {
    return SWIG_ConvertPtr(obj, ptr, ty, 0);
  } else {
    void *vptr = 0;
    
    /* here we get the method pointer for callbacks */
    const char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
    const char *desc = doc ? strstr(doc, "swig_ptr: ") : 0;
    if (desc)
      desc = ty ? SWIG_UnpackVoidPtr(desc + 10, &vptr, ty->name) : 0;
    if (!desc) 
      return SWIG_ERROR;
    if (ty) {
      swig_cast_info *tc = SWIG_TypeCheck(desc,ty);
      if (tc) {
        int newmemory = 0;
        *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
        assert(!newmemory); /* newmemory handling not yet implemented */
      } else {
        return SWIG_ERROR;
      }
    } else {
      *ptr = vptr;
    }
    return SWIG_OK;
  }
}

/* Convert a packed value value */

SWIGRUNTIME int
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = SwigPyPacked_UnpackData(obj, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}  

/* -----------------------------------------------------------------------------
 * Create a new pointer object
 * ----------------------------------------------------------------------------- */

/*
  Create a new instance object, without calling __init__, and set the
  'this' attribute.
*/

SWIGRUNTIME PyObject* 
SWIG_Python_NewShadowInstance(SwigPyClientData *data, PyObject *swig_this)
{
#if (PY_VERSION_HEX >= 0x02020000)
  PyObject *inst = 0;
  PyObject *newraw = data->newraw;
  if (newraw) {
    inst = PyObject_Call(newraw, data->newargs, NULL);
    if (inst) {
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
      PyObject **dictptr = _PyObject_GetDictPtr(inst);
      if (dictptr != NULL) {
	PyObject *dict = *dictptr;
	if (dict == NULL) {
	  dict = PyDict_New();
	  *dictptr = dict;
	  PyDict_SetItem(dict, SWIG_This(), swig_this);
	}
      }
#else
      PyObject *key = SWIG_This();
      PyObject_SetAttr(inst, key, swig_this);
#endif
    }
  } else {
#if PY_VERSION_HEX >= 0x03000000
    inst = PyBaseObject_Type.tp_new((PyTypeObject*) data->newargs, Py_None, Py_None);
    PyObject_SetAttr(inst, SWIG_This(), swig_this);
    Py_TYPE(inst)->tp_flags &= ~Py_TPFLAGS_VALID_VERSION_TAG;
#else
    PyObject *dict = PyDict_New();
    PyDict_SetItem(dict, SWIG_This(), swig_this);
    inst = PyInstance_NewRaw(data->newargs, dict);
    Py_DECREF(dict);
#endif
  }
  return inst;
#else
#if (PY_VERSION_HEX >= 0x02010000)
  PyObject *inst;
  PyObject *dict = PyDict_New();
  PyDict_SetItem(dict, SWIG_This(), swig_this);
  inst = PyInstance_NewRaw(data->newargs, dict);
  Py_DECREF(dict);
  return (PyObject *) inst;
#else
  PyInstanceObject *inst = PyObject_NEW(PyInstanceObject, &PyInstance_Type);
  if (inst == NULL) {
    return NULL;
  }
  inst->in_class = (PyClassObject *)data->newargs;
  Py_INCREF(inst->in_class);
  inst->in_dict = PyDict_New();
  if (inst->in_dict == NULL) {
    Py_DECREF(inst);
    return NULL;
  }
#ifdef Py_TPFLAGS_HAVE_WEAKREFS
  inst->in_weakreflist = NULL;
#endif
#ifdef Py_TPFLAGS_GC
  PyObject_GC_Init(inst);
#endif
  PyDict_SetItem(inst->in_dict, SWIG_This(), swig_this);
  return (PyObject *) inst;
#endif
#endif
}

SWIGRUNTIME void
SWIG_Python_SetSwigThis(PyObject *inst, PyObject *swig_this)
{
 PyObject *dict;
#if (PY_VERSION_HEX >= 0x02020000) && !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
 PyObject **dictptr = _PyObject_GetDictPtr(inst);
 if (dictptr != NULL) {
   dict = *dictptr;
   if (dict == NULL) {
     dict = PyDict_New();
     *dictptr = dict;
   }
   PyDict_SetItem(dict, SWIG_This(), swig_this);
   return;
 }
#endif
 dict = PyObject_GetAttrString(inst, (char*)"__dict__");
 PyDict_SetItem(dict, SWIG_This(), swig_this);
 Py_DECREF(dict);
} 


SWIGINTERN PyObject *
SWIG_Python_InitShadowInstance(PyObject *args) {
  PyObject *obj[2];
  if (!SWIG_Python_UnpackTuple(args,(char*)"swiginit", 2, 2, obj)) {
    return NULL;
  } else {
    SwigPyObject *sthis = SWIG_Python_GetSwigThis(obj[0]);
    if (sthis) {
      SwigPyObject_append((PyObject*) sthis, obj[1]);
    } else {
      SWIG_Python_SetSwigThis(obj[0], obj[1]);
    }
    return SWIG_Py_Void();
  }
}

/* Create a new pointer object */

SWIGRUNTIME PyObject *
SWIG_Python_NewPointerObj(void *ptr, swig_type_info *type, int flags) {
  if (!ptr) {
    return SWIG_Py_Void();
  } else {
    int own = (flags & SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;
    PyObject *robj = SwigPyObject_New(ptr, type, own);
    SwigPyClientData *clientdata = type ? (SwigPyClientData *)(type->clientdata) : 0;
    if (clientdata && !(flags & SWIG_POINTER_NOSHADOW)) {
      PyObject *inst = SWIG_Python_NewShadowInstance(clientdata, robj);
      if (inst) {
	Py_DECREF(robj);
	robj = inst;
      }
    }
    return robj;
  }
}

/* Create a new packed object */

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  return ptr ? SwigPyPacked_New((void *) ptr, sz, type) : SWIG_Py_Void();
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
void *SWIG_ReturnGlobalTypeList(void *);
#endif

SWIGRUNTIME swig_module_info *
SWIG_Python_GetModule(void) {
  static void *type_pointer = (void *)0;
  /* first check if module already created */
  if (!type_pointer) {
#ifdef SWIG_LINK_RUNTIME
    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
#else
    type_pointer = PyCObject_Import((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
				    (char*)"type_pointer" SWIG_TYPE_TABLE_NAME);
    if (PyErr_Occurred()) {
      PyErr_Clear();
      type_pointer = (void *)0;
    }
#endif
  }
  return (swig_module_info *) type_pointer;
}

#if PY_MAJOR_VERSION < 2
/* PyModule_AddObject function was introduced in Python 2.0.  The following function
   is copied out of Python/modsupport.c in python version 2.3.4 */
SWIGINTERN int
PyModule_AddObject(PyObject *m, char *name, PyObject *o)
{
  PyObject *dict;
  if (!PyModule_Check(m)) {
    PyErr_SetString(PyExc_TypeError,
		    "PyModule_AddObject() needs module as first arg");
    return SWIG_ERROR;
  }
  if (!o) {
    PyErr_SetString(PyExc_TypeError,
		    "PyModule_AddObject() needs non-NULL value");
    return SWIG_ERROR;
  }
  
  dict = PyModule_GetDict(m);
  if (dict == NULL) {
    /* Internal error -- modules must have a dict! */
    PyErr_Format(PyExc_SystemError, "module '%s' has no __dict__",
		 PyModule_GetName(m));
    return SWIG_ERROR;
  }
  if (PyDict_SetItemString(dict, name, o))
    return SWIG_ERROR;
  Py_DECREF(o);
  return SWIG_OK;
}
#endif

SWIGRUNTIME void
SWIG_Python_DestroyModule(void *vptr)
{
  swig_module_info *swig_module = (swig_module_info *) vptr;
  swig_type_info **types = swig_module->types;
  size_t i;
  for (i =0; i < swig_module->size; ++i) {
    swig_type_info *ty = types[i];
    if (ty->owndata) {
      SwigPyClientData *data = (SwigPyClientData *) ty->clientdata;
      if (data) SwigPyClientData_Del(data);
    }
  }
  Py_DECREF(SWIG_This());
  swig_this = NULL;
}

SWIGRUNTIME void
SWIG_Python_SetModule(swig_module_info *swig_module) {
  static PyMethodDef swig_empty_runtime_method_table[] = { {NULL, NULL, 0, NULL} };/* Sentinel */

#if PY_VERSION_HEX >= 0x03000000
 /* Add a dummy module object into sys.modules */
  PyObject *module = PyImport_AddModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION);
#else
  PyObject *module = Py_InitModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
				   swig_empty_runtime_method_table);
#endif
  PyObject *pointer = PyCObject_FromVoidPtr((void *) swig_module, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
}

/* The python cached type query */
SWIGRUNTIME PyObject *
SWIG_Python_TypeCache(void) {
  static PyObject *SWIG_STATIC_POINTER(cache) = PyDict_New();
  return cache;
}

SWIGRUNTIME swig_type_info *
SWIG_Python_TypeQuery(const char *type)
{
  PyObject *cache = SWIG_Python_TypeCache();
  PyObject *key = SWIG_Python_str_FromChar(type); 
  PyObject *obj = PyDict_GetItem(cache, key);
  swig_type_info *descriptor;
  if (obj) {
    descriptor = (swig_type_info *) PyCObject_AsVoidPtr(obj);
  } else {
    swig_module_info *swig_module = SWIG_Python_GetModule();
    descriptor = SWIG_TypeQueryModule(swig_module, swig_module, type);
    if (descriptor) {
      obj = PyCObject_FromVoidPtr(descriptor, NULL);
      PyDict_SetItem(cache, key, obj);
      Py_DECREF(obj);
    }
  }
  Py_DECREF(key);
  return descriptor;
}

/* 
   For backward compatibility only
*/
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_arg_fail(arg)      SWIG_Python_ArgFail(arg)
#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)

SWIGRUNTIME int
SWIG_Python_AddErrMesg(const char* mesg, int infront)
{  
  if (PyErr_Occurred()) {
    PyObject *type = 0;
    PyObject *value = 0;
    PyObject *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    if (value) {
      char *tmp;
      PyObject *old_str = PyObject_Str(value);
      Py_XINCREF(type);
      PyErr_Clear();
      if (infront) {
	PyErr_Format(type, "%s %s", mesg, tmp = SWIG_Python_str_AsChar(old_str));
      } else {
	PyErr_Format(type, "%s %s", tmp = SWIG_Python_str_AsChar(old_str), mesg);
      }
      SWIG_Python_str_DelForPy3(tmp);
      Py_DECREF(old_str);
    }
    return 1;
  } else {
    return 0;
  }
}
  
SWIGRUNTIME int
SWIG_Python_ArgFail(int argnum)
{
  if (PyErr_Occurred()) {
    /* add information about failing argument */
    char mesg[256];
    PyOS_snprintf(mesg, sizeof(mesg), "argument number %d:", argnum);
    return SWIG_Python_AddErrMesg(mesg, 1);
  } else {
    return 0;
  }
}

SWIGRUNTIMEINLINE const char *
SwigPyObject_GetDesc(PyObject *self)
{
  SwigPyObject *v = (SwigPyObject *)self;
  swig_type_info *ty = v ? v->ty : 0;
  return ty ? ty->str : (char*)"";
}

SWIGRUNTIME void
SWIG_Python_TypeError(const char *type, PyObject *obj)
{
  if (type) {
#if defined(SWIG_COBJECT_TYPES)
    if (obj && SwigPyObject_Check(obj)) {
      const char *otype = (const char *) SwigPyObject_GetDesc(obj);
      if (otype) {
	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'SwigPyObject(%s)' is received",
		     type, otype);
	return;
      }
    } else 
#endif      
    {
      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
      if (otype) {
	PyObject *str = PyObject_Str(obj);
	const char *cstr = str ? SWIG_Python_str_AsChar(str) : 0;
	if (cstr) {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
		       type, otype, cstr);
          SWIG_Python_str_DelForPy3(cstr);
	} else {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
		       type, otype);
	}
	Py_XDECREF(str);
	return;
      }
    }   
    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
  } else {
    PyErr_Format(PyExc_TypeError, "unexpected type is received");
  }
}


/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME void *
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int argnum, int flags) {
  void *result;
  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
    PyErr_Clear();
#if SWIG_POINTER_EXCEPTION
    if (flags) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
      SWIG_Python_ArgFail(argnum);
    }
#endif
  }
  return result;
}


#ifdef __cplusplus
#if 0
{ /* cc-mode */
#endif
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



  #define SWIG_exception(code, msg) do { SWIG_Error(code, msg); SWIG_fail;; } while(0) 

/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes that proxy
 * method calls from C++ to Python extensions.
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DIRECTOR_PYTHON_HEADER_
#define SWIG_DIRECTOR_PYTHON_HEADER_

#ifdef __cplusplus

#include <string>
#include <iostream>
#include <exception>
#include <vector>
#include <map>


/*
  Use -DSWIG_PYTHON_DIRECTOR_NO_VTABLE if you don't want to generate a 'virtual
  table', and avoid multiple GetAttr calls to retrieve the python
  methods.
*/

#ifndef SWIG_PYTHON_DIRECTOR_NO_VTABLE
#ifndef SWIG_PYTHON_DIRECTOR_VTABLE
#define SWIG_PYTHON_DIRECTOR_VTABLE
#endif
#endif



/*
  Use -DSWIG_DIRECTOR_NO_UEH if you prefer to avoid the use of the
  Undefined Exception Handler provided by swift
*/
#ifndef SWIG_DIRECTOR_NO_UEH
#ifndef SWIG_DIRECTOR_UEH
#define SWIG_DIRECTOR_UEH
#endif
#endif


/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif


/*
  Use -DSWIG_DIRECTOR_NORTTI if you prefer to avoid the use of the
  native C++ RTTI and dynamic_cast<>. But be aware that directors
  could stop working when using this option.
*/
#ifdef SWIG_DIRECTOR_NORTTI
/* 
   When we don't use the native C++ RTTI, we implement a minimal one
   only for Directors.
*/
# ifndef SWIG_DIRECTOR_RTDIR
# define SWIG_DIRECTOR_RTDIR
#include <map>

namespace Swig {
  class Director;
  SWIGINTERN std::map<void*,Director*>& get_rtdir_map() {
    static std::map<void*,Director*> rtdir_map;
    return rtdir_map;
  }

  SWIGINTERNINLINE void set_rtdir(void *vptr, Director *rtdir) {
    get_rtdir_map()[vptr] = rtdir;
  }

  SWIGINTERNINLINE Director *get_rtdir(void *vptr) {
    std::map<void*,Director*>::const_iterator pos = get_rtdir_map().find(vptr);
    Director *rtdir = (pos != get_rtdir_map().end()) ? pos->second : 0;
    return rtdir;
  }
}
# endif /* SWIG_DIRECTOR_RTDIR */

# define SWIG_DIRECTOR_CAST(ARG) Swig::get_rtdir(static_cast<void*>(ARG))
# define SWIG_DIRECTOR_RGTR(ARG1, ARG2) Swig::set_rtdir(static_cast<void*>(ARG1), ARG2)

#else

# define SWIG_DIRECTOR_CAST(ARG) dynamic_cast<Swig::Director *>(ARG)
# define SWIG_DIRECTOR_RGTR(ARG1, ARG2)

#endif /* SWIG_DIRECTOR_NORTTI */

extern "C" {
  struct swig_type_info;
}

namespace Swig {  

  /* memory handler */
  struct GCItem 
  {
    virtual ~GCItem() {}

    virtual int get_own() const
    {
      return 0;
    }
  };

  struct GCItem_var
  {
    GCItem_var(GCItem *item = 0) : _item(item)
    {
    }

    GCItem_var& operator=(GCItem *item)
    {
      GCItem *tmp = _item;
      _item = item;
      delete tmp;
      return *this;
    }

    ~GCItem_var() 
    {
      delete _item;
    }
    
    GCItem * operator->() const
    {
      return _item;
    }
    
  private:
    GCItem *_item;
  };
  
  struct GCItem_Object : GCItem
  {
    GCItem_Object(int own) : _own(own)
    {
    }
    
    virtual ~GCItem_Object() 
    {
    }

    int get_own() const
    {
      return _own;
    }
    
  private:
    int _own;
  };

  template <typename Type>
  struct GCItem_T : GCItem
  {
    GCItem_T(Type *ptr) : _ptr(ptr)
    {
    }
    
    virtual ~GCItem_T() 
    {
      delete _ptr;
    }
    
  private:
    Type *_ptr;
  };

  template <typename Type>
  struct GCArray_T : GCItem
  {
    GCArray_T(Type *ptr) : _ptr(ptr)
    {
    }
    
    virtual ~GCArray_T() 
    {
      delete[] _ptr;
    }
    
  private:
    Type *_ptr;
  };

  /* base class for director exceptions */
  class DirectorException {
  protected:
    std::string swig_msg;
  public:
    DirectorException(PyObject *error, const char* hdr ="", const char* msg ="") 
      : swig_msg(hdr)
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; 
      if (strlen(msg)) {
        swig_msg += " ";
        swig_msg += msg;
      }
      if (!PyErr_Occurred()) {
        PyErr_SetString(error, getMessage());
      }
      SWIG_PYTHON_THREAD_END_BLOCK; 
    }

    const char *getMessage() const
    { 
      return swig_msg.c_str(); 
    }

    static void raise(PyObject *error, const char *msg) 
    {
      throw DirectorException(error, msg);
    }

    static void raise(const char *msg) 
    {
      raise(PyExc_RuntimeError, msg);
    }
  };

  /* unknown exception handler  */
  class UnknownExceptionHandler 
  {
#ifdef SWIG_DIRECTOR_UEH
    static void handler()  {
      try {
        throw;
      } catch (DirectorException& e) {
        std::cerr << "SWIG Director exception caught:" << std::endl
                  << e.getMessage() << std::endl;
      } catch (std::exception& e) {
        std::cerr << "std::exception caught: "<< e.what() << std::endl;
      } catch (...) {
        std::cerr << "Unknown exception caught." << std::endl;
      }
      
      std::cerr << std::endl
                << "Python interpreter traceback:" << std::endl;
      PyErr_Print();
      std::cerr << std::endl;
      
      std::cerr << "This exception was caught by the SWIG unexpected exception handler." << std::endl
                << "Try using %feature(\"director:except\") to avoid reaching this point." << std::endl
                << std::endl
                << "Exception is being re-thrown, program will like abort/terminate." << std::endl;
      throw;
    }

  public:
    
    std::unexpected_handler old;
    UnknownExceptionHandler(std::unexpected_handler nh = handler)
    {
      old = std::set_unexpected(nh);
    }

    ~UnknownExceptionHandler()
    {
      std::set_unexpected(old);
    }
#endif
  };

  /* type mismatch in the return value from a python method call */
  class DirectorTypeMismatchException : public Swig::DirectorException {
  public:
    DirectorTypeMismatchException(PyObject *error, const char* msg="") 
      : Swig::DirectorException(error, "SWIG director type mismatch", msg)
    {
    }

    DirectorTypeMismatchException(const char* msg="") 
      : Swig::DirectorException(PyExc_TypeError, "SWIG director type mismatch", msg)
    {
    }

    static void raise(PyObject *error, const char *msg)
    {
      throw DirectorTypeMismatchException(error, msg);
    }

    static void raise(const char *msg)
    {
      throw DirectorTypeMismatchException(msg);
    }
  };

  /* any python exception that occurs during a director method call */
  class DirectorMethodException : public Swig::DirectorException {
  public:
    DirectorMethodException(const char* msg = "") 
      : DirectorException(PyExc_RuntimeError, "SWIG director method error.", msg)
    {
    }    

    static void raise(const char *msg)
    {
      throw DirectorMethodException(msg);
    }
  };

  /* attempt to call a pure virtual method via a director method */
  class DirectorPureVirtualException : public Swig::DirectorException
  {
  public:
    DirectorPureVirtualException(const char* msg = "") 
      : DirectorException(PyExc_RuntimeError, "SWIG director pure virtual method called", msg)
    { 
    }

    static void raise(const char *msg) 
    {
      throw DirectorPureVirtualException(msg);
    }
  };


#if defined(SWIG_PYTHON_THREADS)
/*  __THREAD__ is the old macro to activate some thread support */
# if !defined(__THREAD__)
#   define __THREAD__ 1
# endif
#endif

#ifdef __THREAD__
# include "pythread.h"
  class Guard
  {
    PyThread_type_lock & mutex_;
    
  public:
    Guard(PyThread_type_lock & mutex) : mutex_(mutex)
    {
      PyThread_acquire_lock(mutex_, WAIT_LOCK);
    }
    
    ~Guard()
    {
      PyThread_release_lock(mutex_);
    }
  };
# define SWIG_GUARD(mutex) Guard _guard(mutex)
#else
# define SWIG_GUARD(mutex) 
#endif

  /* director base class */
  class Director {
  private:
    /* pointer to the wrapped python object */
    PyObject* swig_self;
    /* flag indicating whether the object is owned by python or c++ */
    mutable bool swig_disown_flag;

    /* decrement the reference count of the wrapped python object */
    void swig_decref() const { 
      if (swig_disown_flag) {
        SWIG_PYTHON_THREAD_BEGIN_BLOCK; 
        Py_DECREF(swig_self); 
        SWIG_PYTHON_THREAD_END_BLOCK; 
      }
    }

  public:
    /* wrap a python object, optionally taking ownership */
    Director(PyObject* self) : swig_self(self), swig_disown_flag(false) {
      swig_incref();
    }


    /* discard our reference at destruction */
    virtual ~Director() {
      swig_decref(); 
    }


    /* return a pointer to the wrapped python object */
    PyObject *swig_get_self() const { 
      return swig_self; 
    }

    /* acquire ownership of the wrapped python object (the sense of "disown"
     * is from python) */
    void swig_disown() const { 
      if (!swig_disown_flag) { 
        swig_disown_flag=true;
        swig_incref(); 
      } 
    }

    /* increase the reference count of the wrapped python object */
    void swig_incref() const { 
      if (swig_disown_flag) {
        Py_INCREF(swig_self); 
      }
    }

    /* methods to implement pseudo protected director members */
    virtual bool swig_get_inner(const char* /* protected_method_name */) const {
      return true;
    }
    
    virtual void swig_set_inner(const char* /* protected_method_name */, bool /* val */) const {
    }

  /* ownership management */
  private:
    typedef std::map<void*, GCItem_var> swig_ownership_map;
    mutable swig_ownership_map swig_owner;
#ifdef __THREAD__
    static PyThread_type_lock swig_mutex_own;
#endif

  public:
    template <typename Type>
    void swig_acquire_ownership_array(Type *vptr)  const
    {
      if (vptr) {
        SWIG_GUARD(swig_mutex_own);
        swig_owner[vptr] = new GCArray_T<Type>(vptr);
      }
    }
    
    template <typename Type>
    void swig_acquire_ownership(Type *vptr)  const
    {
      if (vptr) {
        SWIG_GUARD(swig_mutex_own);
        swig_owner[vptr] = new GCItem_T<Type>(vptr);
      }
    }

    void swig_acquire_ownership_obj(void *vptr, int own) const
    {
      if (vptr && own) {
        SWIG_GUARD(swig_mutex_own);
        swig_owner[vptr] = new GCItem_Object(own);
      }
    }
    
    int swig_release_ownership(void *vptr) const
    {
      int own = 0;
      if (vptr) {
        SWIG_GUARD(swig_mutex_own);
        swig_ownership_map::iterator iter = swig_owner.find(vptr);
        if (iter != swig_owner.end()) {
          own = iter->second->get_own();
          swig_owner.erase(iter);
        }
      }
      return own;
    }
  };

#ifdef __THREAD__
  PyThread_type_lock Director::swig_mutex_own = PyThread_allocate_lock();
#endif
}

#endif /* __cplusplus */


#endif

/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_Archive swig_types[0]
#define SWIGTYPE_p_Bake swig_types[1]
#define SWIGTYPE_p_Ball3f swig_types[2]
#define SWIGTYPE_p_Ballf swig_types[3]
#define SWIGTYPE_p_Batch swig_types[4]
#define SWIGTYPE_p_Box2i swig_types[5]
#define SWIGTYPE_p_Box3f swig_types[6]
#define SWIGTYPE_p_Boxf swig_types[7]
#define SWIGTYPE_p_Clock swig_types[8]
#define SWIGTYPE_p_Color4f swig_types[9]
#define SWIGTYPE_p_Decoder swig_types[10]
#define SWIGTYPE_p_Encoder swig_types[11]
#define SWIGTYPE_p_Engine swig_types[12]
#define SWIGTYPE_p_EngineResource swig_types[13]
#define SWIGTYPE_p_EngineTessellator swig_types[14]
#define SWIGTYPE_p_FileSystem swig_types[15]
#define SWIGTYPE_p_Frustum swig_types[16]
#define SWIGTYPE_p_FrustumIterator swig_types[17]
#define SWIGTYPE_p_Graph swig_types[18]
#define SWIGTYPE_p_GraphArch swig_types[19]
#define SWIGTYPE_p_GraphIterator swig_types[20]
#define SWIGTYPE_p_GraphKMem swig_types[21]
#define SWIGTYPE_p_GraphListIterator swig_types[22]
#define SWIGTYPE_p_GraphNavigator swig_types[23]
#define SWIGTYPE_p_GraphNode swig_types[24]
#define SWIGTYPE_p_Hpc swig_types[25]
#define SWIGTYPE_p_Keyboard swig_types[26]
#define SWIGTYPE_p_LocalSystem swig_types[27]
#define SWIGTYPE_p_Log swig_types[28]
#define SWIGTYPE_p_Manipulator swig_types[29]
#define SWIGTYPE_p_Mat4f swig_types[30]
#define SWIGTYPE_p_Matf swig_types[31]
#define SWIGTYPE_p_MouseEvent swig_types[32]
#define SWIGTYPE_p_Octree swig_types[33]
#define SWIGTYPE_p_OctreeNode swig_types[34]
#define SWIGTYPE_p_Pick swig_types[35]
#define SWIGTYPE_p_Plane4f swig_types[36]
#define SWIGTYPE_p_Planef swig_types[37]
#define SWIGTYPE_p_Plasm swig_types[38]
#define SWIGTYPE_p_Quaternion swig_types[39]
#define SWIGTYPE_p_Ray3f swig_types[40]
#define SWIGTYPE_p_RayIterator swig_types[41]
#define SWIGTYPE_p_Rayf swig_types[42]
#define SWIGTYPE_p_SpinLock swig_types[43]
#define SWIGTYPE_p_Texture swig_types[44]
#define SWIGTYPE_p_Triangle2i swig_types[45]
#define SWIGTYPE_p_Unwrapper swig_types[46]
#define SWIGTYPE_p_Utils swig_types[47]
#define SWIGTYPE_p_Vec2f swig_types[48]
#define SWIGTYPE_p_Vec2i swig_types[49]
#define SWIGTYPE_p_Vec3f swig_types[50]
#define SWIGTYPE_p_Vec4f swig_types[51]
#define SWIGTYPE_p_Vecf swig_types[52]
#define SWIGTYPE_p_Vector swig_types[53]
#define SWIGTYPE_p_Viewer swig_types[54]
#define SWIGTYPE_p_allocator_type swig_types[55]
#define SWIGTYPE_p_char swig_types[56]
#define SWIGTYPE_p_const_iterator swig_types[57]
#define SWIGTYPE_p_contour_t swig_types[58]
#define SWIGTYPE_p_difference_type swig_types[59]
#define SWIGTYPE_p_double swig_types[60]
#define SWIGTYPE_p_float swig_types[61]
#define SWIGTYPE_p_int swig_types[62]
#define SWIGTYPE_p_long_long swig_types[63]
#define SWIGTYPE_p_p_PyObject swig_types[64]
#define SWIGTYPE_p_p_unsigned_int swig_types[65]
#define SWIGTYPE_p_polygon_set_t swig_types[66]
#define SWIGTYPE_p_polygon_t swig_types[67]
#define SWIGTYPE_p_size_type swig_types[68]
#define SWIGTYPE_p_std__invalid_argument swig_types[69]
#define SWIGTYPE_p_std__mapT_long_long_long_long_std__lessT_long_long_t_std__allocatorT_std__pairT_long_long_const_long_long_t_t_t swig_types[70]
#define SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t swig_types[71]
#define SWIGTYPE_p_std__tr1__shared_ptrT_Batch_t swig_types[72]
#define SWIGTYPE_p_std__tr1__shared_ptrT_EngineResource_t swig_types[73]
#define SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t swig_types[74]
#define SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t swig_types[75]
#define SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t swig_types[76]
#define SWIGTYPE_p_std__tr1__shared_ptrT_Octree_t swig_types[77]
#define SWIGTYPE_p_std__tr1__shared_ptrT_Texture_t swig_types[78]
#define SWIGTYPE_p_std__tr1__shared_ptrT_Vector_t swig_types[79]
#define SWIGTYPE_p_std__tr1__shared_ptrT_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t_t swig_types[80]
#define SWIGTYPE_p_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t swig_types[81]
#define SWIGTYPE_p_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t__allocator_type swig_types[82]
#define SWIGTYPE_p_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t__value_type swig_types[83]
#define SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t swig_types[84]
#define SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t__allocator_type swig_types[85]
#define SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t swig_types[86]
#define SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t__allocator_type swig_types[87]
#define SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t swig_types[88]
#define SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t__allocator_type swig_types[89]
#define SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Batch_t_std__allocatorT_std__tr1__shared_ptrT_Batch_t_t_t swig_types[90]
#define SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Batch_t_std__allocatorT_std__tr1__shared_ptrT_Batch_t_t_t__allocator_type swig_types[91]
#define SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_EngineResource_t_std__allocatorT_std__tr1__shared_ptrT_EngineResource_t_t_t swig_types[92]
#define SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_EngineResource_t_std__allocatorT_std__tr1__shared_ptrT_EngineResource_t_t_t__allocator_type swig_types[93]
#define SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Hpc_t_std__allocatorT_std__tr1__shared_ptrT_Hpc_t_t_t swig_types[94]
#define SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Hpc_t_std__allocatorT_std__tr1__shared_ptrT_Hpc_t_t_t__allocator_type swig_types[95]
#define SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Texture_t_std__allocatorT_std__tr1__shared_ptrT_Texture_t_t_t swig_types[96]
#define SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Texture_t_std__allocatorT_std__tr1__shared_ptrT_Texture_t_t_t__allocator_type swig_types[97]
#define SWIGTYPE_p_std__vectorT_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t_std__allocatorT_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t_t_t swig_types[98]
#define SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t swig_types[99]
#define SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t__allocator_type swig_types[100]
#define SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t_std__allocatorT_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t_std__allocatorT_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t_t_t_t_t swig_types[101]
#define SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t swig_types[102]
#define SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t__allocator_type swig_types[103]
#define SWIGTYPE_p_swig__SwigPyIterator swig_types[104]
#define SWIGTYPE_p_unsigned_char swig_types[105]
#define SWIGTYPE_p_unsigned_int swig_types[106]
#define SWIGTYPE_p_unsigned_long swig_types[107]
#define SWIGTYPE_p_unsigned_long_long swig_types[108]
#define SWIGTYPE_p_value_type swig_types[109]
static swig_type_info *swig_types[111];
static swig_module_info swig_module = {swig_types, 110, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#if (PY_VERSION_HEX <= 0x02000000)
# if !defined(SWIG_PYTHON_CLASSIC)
#  error "This python version requires swig to be run with the '-classic' option"
# endif
#endif

/*-----------------------------------------------
              @(target):= _xgepy.so
  ------------------------------------------------*/
#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_init    PyInit__xgepy

#else
#  define SWIG_init    init_xgepy

#endif
#define SWIG_name    "_xgepy"

#define SWIGVERSION 0x020001 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


namespace swig {
  class SwigPtr_PyObject {
  protected:
    PyObject *_obj;

  public:
    SwigPtr_PyObject() :_obj(0)
    {
    }

    SwigPtr_PyObject(const SwigPtr_PyObject& item) : _obj(item._obj)
    {
      Py_XINCREF(_obj);      
    }
    
    SwigPtr_PyObject(PyObject *obj, bool initial_ref = true) :_obj(obj)
    {
      if (initial_ref) {
        Py_XINCREF(_obj);
      }
    }
    
    SwigPtr_PyObject & operator=(const SwigPtr_PyObject& item) 
    {
      Py_XINCREF(item._obj);
      Py_XDECREF(_obj);
      _obj = item._obj;
      return *this;      
    }
    
    ~SwigPtr_PyObject() 
    {
      Py_XDECREF(_obj);
    }
    
    operator PyObject *() const
    {
      return _obj;
    }

    PyObject *operator->() const
    {
      return _obj;
    }
  };
}


namespace swig {
  struct SwigVar_PyObject : SwigPtr_PyObject {
    SwigVar_PyObject(PyObject* obj = 0) : SwigPtr_PyObject(obj, false) { }
    
    SwigVar_PyObject & operator = (PyObject* obj)
    {
      Py_XDECREF(_obj);
      _obj = obj;
      return *this;      
    }
  };
}

 #include "xge/xge.h" 

#include <stdexcept>


#if defined(__GNUC__)
#  if __GNUC__ == 2 && __GNUC_MINOR <= 96
#     define SWIG_STD_NOMODERN_STL
#  endif
#endif


#include <string>
#include <stdexcept>


#include <string>


#include <iostream>

  
namespace swig {
  struct stop_iteration {
  };

  struct SwigPyIterator {
  private:
    SwigPtr_PyObject _seq;

  protected:
    SwigPyIterator(PyObject *seq) : _seq(seq)
    {
    }
      
  public:
    virtual ~SwigPyIterator() {}

    // Access iterator method, required by Python
    virtual PyObject *value() const = 0;

    // Forward iterator method, required by Python
    virtual SwigPyIterator *incr(size_t n = 1) = 0;
    
    // Backward iterator method, very common in C++, but not required in Python
    virtual SwigPyIterator *decr(size_t /*n*/ = 1)
    {
      throw stop_iteration();
    }

    // Random access iterator methods, but not required in Python
    virtual ptrdiff_t distance(const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }

    virtual bool equal (const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }
    
    // C++ common/needed methods
    virtual SwigPyIterator *copy() const = 0;

    PyObject *next()     
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      PyObject *obj = value();
      incr();       
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads
      return obj;     
    }

    /* Make an alias for Python 3.x */
    PyObject *__next__()
    {
      return next();
    }

    PyObject *previous()
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      decr();
      PyObject *obj = value();
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads       
      return obj;
    }

    SwigPyIterator *advance(ptrdiff_t n)
    {
      return  (n > 0) ?  incr(n) : decr(-n);
    }
      
    bool operator == (const SwigPyIterator& x)  const
    {
      return equal(x);
    }
      
    bool operator != (const SwigPyIterator& x) const
    {
      return ! operator==(x);
    }
      
    SwigPyIterator& operator += (ptrdiff_t n)
    {
      return *advance(n);
    }

    SwigPyIterator& operator -= (ptrdiff_t n)
    {
      return *advance(-n);
    }
      
    SwigPyIterator* operator + (ptrdiff_t n) const
    {
      return copy()->advance(n);
    }

    SwigPyIterator* operator - (ptrdiff_t n) const
    {
      return copy()->advance(-n);
    }
      
    ptrdiff_t operator - (const SwigPyIterator& x) const
    {
      return x.distance(*this);
    }
      
    static swig_type_info* descriptor() {
      static int init = 0;
      static swig_type_info* desc = 0;
      if (!init) {
	desc = SWIG_TypeQuery("swig::SwigPyIterator *");
	init = 1;
      }	
      return desc;
    }    
  };
}


SWIGINTERN int
SWIG_AsVal_double (PyObject *obj, double *val)
{
  int res = SWIG_TypeError;
  if (PyFloat_Check(obj)) {
    if (val) *val = PyFloat_AsDouble(obj);
    return SWIG_OK;
  } else if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else if (PyLong_Check(obj)) {
    double v = PyLong_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    double d = PyFloat_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = d;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      long v = PyLong_AsLong(obj);
      if (!PyErr_Occurred()) {
	if (val) *val = v;
	return SWIG_AddCast(SWIG_AddCast(SWIG_OK));
      } else {
	PyErr_Clear();
      }
    }
  }
#endif
  return res;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx = floor(x);
   double cx = ceil(x);
   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_long (PyObject *obj, unsigned long *val) 
{
  if (PyInt_Check(obj)) {
    long v = PyInt_AsLong(obj);
    if (v >= 0) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      return SWIG_OverflowError;
    }
  } else if (PyLong_Check(obj)) {
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, ULONG_MAX)) {
	if (val) *val = (unsigned long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERNINLINE int
SWIG_AsVal_size_t (PyObject * obj, size_t *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, val ? &v : 0);
  if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
  return res;
}


  #define SWIG_From_long   PyInt_FromLong 


SWIGINTERNINLINE PyObject *
SWIG_From_ptrdiff_t  (ptrdiff_t value)
{    
  return SWIG_From_long  (static_cast< long >(value));
}


SWIGINTERNINLINE PyObject*
  SWIG_From_bool  (bool value)
{
  return PyBool_FromLong(value ? 1 : 0);
}


SWIGINTERN int
SWIG_AsVal_long (PyObject *obj, long* val)
{
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else if (PyLong_Check(obj)) {
    long v = PyLong_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    long v = PyInt_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, LONG_MIN, LONG_MAX)) {
	if (val) *val = (long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERNINLINE int
SWIG_AsVal_ptrdiff_t (PyObject * obj, ptrdiff_t *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, val ? &v : 0);
  if (SWIG_IsOK(res) && val) *val = static_cast< ptrdiff_t >(v);
  return res;
}


#include <stdexcept>


#include <algorithm>


#include <vector>


#include <utility>


#include <map>
#include <algorithm>
#include <stdexcept>


SWIGINTERNINLINE PyObject *
SWIG_From_int  (int value)
{    
  return SWIG_From_long  (value);
}


namespace swig {  
  template <class Type>
  struct noconst_traits {
    typedef Type noconst_type;
  };

  template <class Type>
  struct noconst_traits<const Type> {
    typedef Type noconst_type;
  };

  /*
    type categories
  */
  struct pointer_category { };  
  struct value_category { };

  /*
    General traits that provides type_name and type_info
  */
  template <class Type> struct traits { };

  template <class Type>
  inline const char* type_name() {
    return traits<typename noconst_traits<Type >::noconst_type >::type_name();
  }

  template <class Type> 
  struct traits_info {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }    
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  template <class Type>
  inline swig_type_info *type_info() {
    return traits_info<Type>::type_info();
  }

  /*
    Partial specialization for pointers
  */
  template <class Type> struct traits <Type *> {
    typedef pointer_category category;
    static std::string make_ptr_name(const char* name) {
      std::string ptrname = name;
      ptrname += " *";
      return ptrname;
    }    
    static const char* type_name() {
      static std::string name = make_ptr_name(swig::type_name<Type>());
      return name.c_str();
    }
  };

  template <class Type, class Category> 
  struct traits_as { };
 
  template <class Type, class Category> 
  struct traits_check { };

}


namespace swig {  
  /*
    Traits that provides the from method
  */
  template <class Type> struct traits_from_ptr {
    static PyObject *from(Type *val, int owner = 0) {
      return SWIG_NewPointerObj(val, type_info<Type>(), owner);
    }
  };

  template <class Type> struct traits_from {
    static PyObject *from(const Type& val) {
      return traits_from_ptr<Type>::from(new Type(val), 1);
    }
  };

  template <class Type> struct traits_from<Type *> {
    static PyObject *from(Type* val) {
      return traits_from_ptr<Type>::from(val, 0);
    }
  };

  template <class Type> struct traits_from<const Type *> {
    static PyObject *from(const Type* val) {
      return traits_from_ptr<Type>::from(const_cast<Type*>(val), 0);
    }
  };


  template <class Type>
  inline PyObject *from(const Type& val) {
    return traits_from<Type>::from(val);
  }

  template <class Type>
  inline PyObject *from_ptr(Type* val, int owner) {
    return traits_from_ptr<Type>::from(val, owner);
  }

  /*
    Traits that provides the asval/as/check method
  */
  template <class Type>
  struct traits_asptr {   
    static int asptr(PyObject *obj, Type **val) {
      Type *p;
      int res = SWIG_ConvertPtr(obj, (void**)&p, type_info<Type>(), 0);
      if (SWIG_IsOK(res)) {
	if (val) *val = p;
      }
      return res;
    }
  }; 

  template <class Type>
  inline int asptr(PyObject *obj, Type **vptr) {
    return traits_asptr<Type>::asptr(obj, vptr);
  }

  template <class Type> 
  struct traits_asval {
    static int asval(PyObject *obj, Type *val) {
      if (val) {
	Type *p = 0;
	int res = traits_asptr<Type>::asptr(obj, &p);
	if (!SWIG_IsOK(res)) return res;	
	if (p) {
	  typedef typename noconst_traits<Type>::noconst_type noconst_type;
	  *(const_cast<noconst_type*>(val)) = *p;
	  if (SWIG_IsNewObj(res)){
	    delete p;
	    res = SWIG_DelNewMask(res);
	  }
	  return res;
	} else {
	  return SWIG_ERROR;
	}
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };

  template <class Type> struct traits_asval<Type*> {
    static int asval(PyObject *obj, Type **val) {
      if (val) {
        typedef typename noconst_traits<Type>::noconst_type noconst_type;
        noconst_type *p = 0;
        int res = traits_asptr<noconst_type>::asptr(obj,  &p);
        if (SWIG_IsOK(res)) {
          *(const_cast<noconst_type**>(val)) = p;
	}
	return res;
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };
  
  template <class Type>
  inline int asval(PyObject *obj, Type *val) {
    return traits_asval<Type>::asval(obj, val);
  }

  template <class Type> 
  struct traits_as<Type, value_category> {
    static Type as(PyObject *obj, bool throw_error) {
      Type v;
      int res = asval(obj, &v);
      if (!obj || !SWIG_IsOK(res)) {
	if (!PyErr_Occurred()) {
	  ::SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
      }
      return v;
    }
  };

  template <class Type> 
  struct traits_as<Type, pointer_category> {
    static Type as(PyObject *obj, bool throw_error) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res) && v) {
	if (SWIG_IsNewObj(res)) {
	  Type r(*v);
	  delete v;
	  return r;
	} else {
	  return *v;
	}
      } else {
	// Uninitialized return value, no Type() constructor required.
	static Type *v_def = (Type*) malloc(sizeof(Type));
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
	memset(v_def,0,sizeof(Type));
	return *v_def;
      }
    }
  };

  template <class Type> 
  struct traits_as<Type*, pointer_category> {
    static Type* as(PyObject *obj, bool throw_error) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res)) {
	return v;
      } else {
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
	return 0;
      }
    }
  };
    
  template <class Type>
  inline Type as(PyObject *obj, bool te = false) {
    return traits_as<Type, typename traits<Type>::category>::as(obj, te);
  }

  template <class Type> 
  struct traits_check<Type, value_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asval(obj, (Type *)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type> 
  struct traits_check<Type, pointer_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asptr(obj, (Type **)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type>
  inline bool check(PyObject *obj) {
    return traits_check<Type, typename traits<Type>::category>::check(obj);
  }
}


#include <functional>

namespace std {
  template <>
  struct less <PyObject *>: public binary_function<PyObject *, PyObject *, bool>
  {
    bool
    operator()(PyObject * v, PyObject *w) const
    { 
      bool res;
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      res = PyObject_RichCompareBool(v, w, Py_LT) ? true : false;
      /* This may fall into a case of inconsistent
               eg. ObjA > ObjX > ObjB
               but ObjA < ObjB
      */
      if( PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError) )
      {
        /* Objects can't be compared, this mostly occurred in Python 3.0 */
        /* Compare their ptr directly for a workaround */
        res = (v < w);
        PyErr_Clear();
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
      return res;
    }
  };

  template <>
  struct less <swig::SwigPtr_PyObject>: public binary_function<swig::SwigPtr_PyObject, swig::SwigPtr_PyObject, bool>
  {
    bool
    operator()(const swig::SwigPtr_PyObject& v, const swig::SwigPtr_PyObject& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

  template <>
  struct less <swig::SwigVar_PyObject>: public binary_function<swig::SwigVar_PyObject, swig::SwigVar_PyObject, bool>
  {
    bool
    operator()(const swig::SwigVar_PyObject& v, const swig::SwigVar_PyObject& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

}

namespace swig {
  template <> struct traits<PyObject *> {
    typedef value_category category;
    static const char* type_name() { return "PyObject *"; }
  };  

  template <>  struct traits_asval<PyObject * > {   
    typedef PyObject * value_type;
    static int asval(PyObject *obj, value_type *val) {
      if (val) *val = obj;
      return SWIG_OK;
    }
  };

  template <> 
  struct traits_check<PyObject *, value_category> {
    static bool check(PyObject *) {
      return true;
    }
  };

  template <>  struct traits_from<PyObject *> {
    typedef PyObject * value_type;
    static PyObject *from(const value_type& val) {
      Py_XINCREF(val);
      return val;
    }
  };
  
}

namespace swig {
  inline size_t
  check_index(ptrdiff_t i, size_t size, bool insert = false) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size)
	return (size_t) (i + size);
    } else if ( (size_t) i < size ) {
      return (size_t) i;
    } else if (insert && ((size_t) i == size)) {
      return size;
    }
    
    throw std::out_of_range("index out of range");
  }

  inline size_t
  slice_index(ptrdiff_t i, size_t size) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size) {
	return (size_t) (i + size);
      } else {
	throw std::out_of_range("index out of range");
      }
    } else {
      return ( (size_t) i < size ) ? ((size_t) i) : size;
    }
  }

  template <class Sequence, class Difference>
  inline typename Sequence::iterator
  getpos(Sequence* self, Difference i)  {
    typename Sequence::iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline typename Sequence::const_iterator
  cgetpos(const Sequence* self, Difference i)  {
    typename Sequence::const_iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline Sequence*
  getslice(const Sequence* self, Difference i, Difference j) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size);
    typename Sequence::size_type jj = swig::slice_index(j, size);

    if (jj > ii) {
      typename Sequence::const_iterator vb = self->begin();
      typename Sequence::const_iterator ve = self->begin();
      std::advance(vb,ii);
      std::advance(ve,jj);
      return new Sequence(vb, ve);
    } else {
      return new Sequence();
    }
  }

  template <class Sequence, class Difference, class InputSeq>
  inline void
  setslice(Sequence* self, Difference i, Difference j, const InputSeq& v) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size, true);
    typename Sequence::size_type jj = swig::slice_index(j, size);
    if (jj < ii) jj = ii;
    size_t ssize = jj - ii;
    if (ssize <= v.size()) {
      typename Sequence::iterator sb = self->begin();
      typename InputSeq::const_iterator vmid = v.begin();
      std::advance(sb,ii);
      std::advance(vmid, jj - ii);
      self->insert(std::copy(v.begin(), vmid, sb), vmid, v.end());
    } else {
      typename Sequence::iterator sb = self->begin();
      typename Sequence::iterator se = self->begin();
      std::advance(sb,ii);
      std::advance(se,jj);
      self->erase(sb,se);
      self->insert(sb, v.begin(), v.end());
    }
  }

  template <class Sequence, class Difference>
  inline void
  delslice(Sequence* self, Difference i, Difference j) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size, true);
    typename Sequence::size_type jj = swig::slice_index(j, size);
    if (jj > ii) {
      typename Sequence::iterator sb = self->begin();
      typename Sequence::iterator se = self->begin();
      std::advance(sb,ii);
      std::advance(se,jj);
      self->erase(sb,se);
    }
  }
}


#if defined(__SUNPRO_CC) && defined(_RWSTD_VER)
#  if !defined(SWIG_NO_STD_NOITERATOR_TRAITS_STL)
#    define SWIG_STD_NOITERATOR_TRAITS_STL
#  endif
#endif

#if !defined(SWIG_STD_NOITERATOR_TRAITS_STL)
#include <iterator>
#else
namespace std {
  template <class Iterator>
  struct iterator_traits {
    typedef ptrdiff_t difference_type;
    typedef typename Iterator::value_type value_type;
  };

  template <class Iterator, class Category,class T, class Reference, class Pointer, class Distance>
  struct iterator_traits<__reverse_bi_iterator<Iterator,Category,T,Reference,Pointer,Distance> > {
    typedef Distance difference_type;
    typedef T value_type;
  };

  template <class T>
  struct iterator_traits<T*> {
    typedef T value_type;
    typedef ptrdiff_t difference_type;
  };

  template<typename _InputIterator>
  inline typename iterator_traits<_InputIterator>::difference_type
  distance(_InputIterator __first, _InputIterator __last)
  {
    typename iterator_traits<_InputIterator>::difference_type __n = 0;
    while (__first != __last) {
      ++__first; ++__n;
    }
    return __n;
  }
}
#endif


namespace swig {
  template<typename OutIterator>
  class SwigPyIterator_T :  public SwigPyIterator
  {
  public:
    typedef OutIterator out_iterator;
    typedef typename std::iterator_traits<out_iterator>::value_type value_type;    
    typedef SwigPyIterator_T<out_iterator> self_type;

    SwigPyIterator_T(out_iterator curr, PyObject *seq)
      : SwigPyIterator(seq), current(curr)
    {
    }

    const out_iterator& get_current() const
    {
      return current;
    }

    
    bool equal (const SwigPyIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return (current == iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }
    
    ptrdiff_t distance(const SwigPyIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return std::distance(current, iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }    
    
  protected:
    out_iterator current;
  };
  
  template <class ValueType>
  struct from_oper 
  {
    typedef const ValueType& argument_type;
    typedef PyObject *result_type;
    result_type operator()(argument_type v) const
    {
      return swig::from(v);
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyIteratorOpen_T :  public SwigPyIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;
    typedef SwigPyIteratorOpen_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyIteratorOpen_T(out_iterator curr, PyObject *seq)
      : SwigPyIterator_T<OutIterator>(curr, seq)
    {
    }
    
    PyObject *value() const {
      return from(static_cast<const value_type&>(*(base::current)));
    }
    
    SwigPyIterator *copy() const
    {
      return new self_type(*this);
    }

    SwigPyIterator *incr(size_t n = 1)
    {
      while (n--) {
	++base::current;
      }
      return this;
    }

    SwigPyIterator *decr(size_t n = 1)
    {
      while (n--) {
	--base::current;
      }
      return this;
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyIteratorClosed_T :  public SwigPyIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;    
    typedef SwigPyIteratorClosed_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyIteratorClosed_T(out_iterator curr, out_iterator first, out_iterator last, PyObject *seq)
      : SwigPyIterator_T<OutIterator>(curr, seq), begin(first), end(last)
    {
    }
    
    PyObject *value() const {
      if (base::current == end) {
	throw stop_iteration();
      } else {
	return from(static_cast<const value_type&>(*(base::current)));
      }
    }
    
    SwigPyIterator *copy() const
    {
      return new self_type(*this);
    }

    SwigPyIterator *incr(size_t n = 1)
    {
      while (n--) {
	if (base::current == end) {
	  throw stop_iteration();
	} else {
	  ++base::current;
	}
      }
      return this;
    }

    SwigPyIterator *decr(size_t n = 1)
    {
      while (n--) {
	if (base::current == begin) {
	  throw stop_iteration();
	} else {
	  --base::current;
	}
      }
      return this;
    }

  private:
    out_iterator begin;
    out_iterator end;
  };

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_iterator(const OutIter& current, const OutIter& begin,const OutIter& end, PyObject *seq = 0)
  {
    return new SwigPyIteratorClosed_T<OutIter>(current, begin, end, seq);
  }

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_iterator(const OutIter& current, PyObject *seq = 0)
  {
    return new SwigPyIteratorOpen_T<OutIter>(current, seq);
  }
}


namespace swig
{
  template <class T>
  struct SwigPySequence_Ref
  {
    SwigPySequence_Ref(PyObject* seq, int index)
      : _seq(seq), _index(index)
    {
    }
    
    operator T () const
    {
      swig::SwigVar_PyObject item = PySequence_GetItem(_seq, _index);
      try {
	return swig::as<T>(item, true);
      } catch (std::exception& e) {
	char msg[1024];
	sprintf(msg, "in sequence element %d ", _index);
	if (!PyErr_Occurred()) {
	  ::SWIG_Error(SWIG_TypeError,  swig::type_name<T>());
	}
	SWIG_Python_AddErrorMsg(msg);
	SWIG_Python_AddErrorMsg(e.what());
	throw;
      }
    }

    SwigPySequence_Ref& operator=(const T& v)
    {
      PySequence_SetItem(_seq, _index, swig::from<T>(v));
      return *this;
    }

  private:
    PyObject* _seq;
    int _index;
  };

  template <class T>
  struct SwigPySequence_ArrowProxy
  {
    SwigPySequence_ArrowProxy(const T& x): m_value(x) {}
    const T* operator->() const { return &m_value; }
    operator const T*() const { return &m_value; }
    T m_value;
  };

  template <class T, class Reference >
  struct SwigPySequence_InputIterator
  {
    typedef SwigPySequence_InputIterator<T, Reference > self;

    typedef std::random_access_iterator_tag iterator_category;
    typedef Reference reference;
    typedef T value_type;
    typedef T* pointer;
    typedef int difference_type;

    SwigPySequence_InputIterator()
    {
    }

    SwigPySequence_InputIterator(PyObject* seq, int index)
      : _seq(seq), _index(index)
    {
    }

    reference operator*() const
    {
      return reference(_seq, _index);
    }

    SwigPySequence_ArrowProxy<T>
    operator->() const {
      return SwigPySequence_ArrowProxy<T>(operator*());
    }

    bool operator==(const self& ri) const
    {
      return (_index == ri._index) && (_seq == ri._seq);
    }

    bool operator!=(const self& ri) const
    {
      return !(operator==(ri));
    }

    self& operator ++ ()
    {
      ++_index;
      return *this;
    }

    self& operator -- ()
    {
      --_index;
      return *this;
    }

    self& operator += (difference_type n)
    {
      _index += n;
      return *this;
    }

    self operator +(difference_type n) const
    {
      return self(_seq, _index + n);
    }

    self& operator -= (difference_type n)
    {
      _index -= n;
      return *this;
    }

    self operator -(difference_type n) const
    {
      return self(_seq, _index - n);
    }

    difference_type operator - (const self& ri) const
    {
      return _index - ri._index;
    }

    bool operator < (const self& ri) const
    {
      return _index < ri._index;
    }

    reference
    operator[](difference_type n) const
    {
      return reference(_seq, _index + n);
    }

  private:
    PyObject* _seq;
    difference_type _index;
  };

  template <class T>
  struct SwigPySequence_Cont
  {
    typedef SwigPySequence_Ref<T> reference;
    typedef const SwigPySequence_Ref<T> const_reference;
    typedef T value_type;
    typedef T* pointer;
    typedef int difference_type;
    typedef int size_type;
    typedef const pointer const_pointer;
    typedef SwigPySequence_InputIterator<T, reference> iterator;
    typedef SwigPySequence_InputIterator<T, const_reference> const_iterator;

    SwigPySequence_Cont(PyObject* seq) : _seq(0)
    {
      if (!PySequence_Check(seq)) {
	throw std::invalid_argument("a sequence is expected");
      }
      _seq = seq;
      Py_INCREF(_seq);
    }

    ~SwigPySequence_Cont()
    {
      Py_XDECREF(_seq);
    }

    size_type size() const
    {
      return static_cast<size_type>(PySequence_Size(_seq));
    }

    bool empty() const
    {
      return size() == 0;
    }

    iterator begin()
    {
      return iterator(_seq, 0);
    }

    const_iterator begin() const
    {
      return const_iterator(_seq, 0);
    }

    iterator end()
    {
      return iterator(_seq, size());
    }

    const_iterator end() const
    {
      return const_iterator(_seq, size());
    }

    reference operator[](difference_type n)
    {
      return reference(_seq, n);
    }

    const_reference operator[](difference_type n)  const
    {
      return const_reference(_seq, n);
    }

    bool check(bool set_err = true) const
    {
      int s = size();
      for (int i = 0; i < s; ++i) {
	swig::SwigVar_PyObject item = PySequence_GetItem(_seq, i);
	if (!swig::check<value_type>(item)) {
	  if (set_err) {
	    char msg[1024];
	    sprintf(msg, "in sequence element %d", i);
	    SWIG_Error(SWIG_RuntimeError, msg);
	  }
	  return false;
	}
      }
      return true;
    }

  private:
    PyObject* _seq;
  };

}


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


SWIGINTERN int
SWIG_AsVal_unsigned_SS_char (PyObject * obj, unsigned char *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UCHAR_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned char >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long  (unsigned long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLong(value) : PyInt_FromLong(static_cast< long >(value)); 
}


SWIGINTERNINLINE PyObject *
SWIG_From_unsigned_SS_char  (unsigned char value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}


namespace swig {
  template <> struct traits<unsigned char > {
    typedef value_category category;
    static const char* type_name() { return"unsigned char"; }
  };  
  template <>  struct traits_asval<unsigned char > {   
    typedef unsigned char value_type;
    static int asval(PyObject *obj, value_type *val) { 
      return SWIG_AsVal_unsigned_SS_char (obj, val);
    }
  };
  template <>  struct traits_from<unsigned char > {
    typedef unsigned char value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_unsigned_SS_char  (val);
    }
  };
}


namespace swig {
  template <class SwigPySeq, class Seq>
  inline void
  assign(const SwigPySeq& swigpyseq, Seq* seq) {
    // seq->assign(swigpyseq.begin(), swigpyseq.end()); // not used as not always implemented
    typedef typename SwigPySeq::value_type value_type;
    typename SwigPySeq::const_iterator it = swigpyseq.begin();
    for (;it != swigpyseq.end(); ++it) {
      seq->insert(seq->end(),(value_type)(*it));
    }
  }

  template <class Seq, class T = typename Seq::value_type >
  struct traits_asptr_stdseq {
    typedef Seq sequence;
    typedef T value_type;

    static int asptr(PyObject *obj, sequence **seq) {
      if (obj == Py_None || SWIG_Python_GetSwigThis(obj)) {
	sequence *p;
	if (::SWIG_ConvertPtr(obj,(void**)&p,
			      swig::type_info<sequence>(),0) == SWIG_OK) {
	  if (seq) *seq = p;
	  return SWIG_OLDOBJ;
	}
      } else if (PySequence_Check(obj)) {
	try {
	  SwigPySequence_Cont<value_type> swigpyseq(obj);
	  if (seq) {
	    sequence *pseq = new sequence();
	    assign(swigpyseq, pseq);
	    *seq = pseq;
	    return SWIG_NEWOBJ;
	  } else {
	    return swigpyseq.check() ? SWIG_OK : SWIG_ERROR;
	  }
	} catch (std::exception& e) {
	  if (seq) {
	    if (!PyErr_Occurred()) {
	      PyErr_SetString(PyExc_TypeError, e.what());
	    }
	  }
	  return SWIG_ERROR;
	}
      }
      return SWIG_ERROR;
    }
  };

  template <class Seq, class T = typename Seq::value_type >
  struct traits_from_stdseq {
    typedef Seq sequence;
    typedef T value_type;
    typedef typename Seq::size_type size_type;
    typedef typename sequence::const_iterator const_iterator;

    static PyObject *from(const sequence& seq) {
#ifdef SWIG_PYTHON_EXTRA_NATIVE_CONTAINERS
      swig_type_info *desc = swig::type_info<sequence>();
      if (desc && desc->clientdata) {
	return SWIG_NewPointerObj(new sequence(seq), desc, SWIG_POINTER_OWN);
      }
#endif
      size_type size = seq.size();
      if (size <= (size_type)INT_MAX) {
	PyObject *obj = PyTuple_New((int)size);
	int i = 0;
	for (const_iterator it = seq.begin();
	     it != seq.end(); ++it, ++i) {
	  PyTuple_SetItem(obj,i,swig::from<value_type>(*it));
	}
	return obj;
      } else {
	PyErr_SetString(PyExc_OverflowError,"sequence size not valid in python");
	return NULL;
      }
    }
  };
}


  namespace swig {
    template <class T>
    struct traits_asptr<std::vector<T> >  {
      static int asptr(PyObject *obj, std::vector<T> **vec) {
	return traits_asptr_stdseq<std::vector<T> >::asptr(obj, vec);
      }
    };
    
    template <class T>
    struct traits_from<std::vector<T> > {
      static PyObject *from(const std::vector<T>& vec) {
	return traits_from_stdseq<std::vector<T> >::from(vec);
      }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<unsigned char, std::allocator< unsigned char > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "unsigned char" "," "std::allocator< unsigned char >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_unsigned_SS_char_Sg__iterator(std::vector< unsigned char > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_unsigned_SS_char_Sg____nonzero__(std::vector< unsigned char > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_unsigned_SS_char_Sg____bool__(std::vector< unsigned char > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< unsigned char >::size_type std_vector_Sl_unsigned_SS_char_Sg____len__(std::vector< unsigned char > const *self){
      return self->size();
    }

SWIGINTERNINLINE PyObject *
SWIG_From_size_t  (size_t value)
{    
  return SWIG_From_unsigned_SS_long  (static_cast< unsigned long >(value));
}

SWIGINTERN std::vector< unsigned char >::value_type std_vector_Sl_unsigned_SS_char_Sg__pop(std::vector< unsigned char > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<unsigned char,std::allocator< unsigned char > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< unsigned char,std::allocator< unsigned char > > *std_vector_Sl_unsigned_SS_char_Sg____getslice__(std::vector< unsigned char > *self,std::vector< unsigned char >::difference_type i,std::vector< unsigned char >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_unsigned_SS_char_Sg____setslice__(std::vector< unsigned char > *self,std::vector< unsigned char >::difference_type i,std::vector< unsigned char >::difference_type j,std::vector< unsigned char,std::allocator< unsigned char > > const &v){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_unsigned_SS_char_Sg____delslice__(std::vector< unsigned char > *self,std::vector< unsigned char >::difference_type i,std::vector< unsigned char >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_unsigned_SS_char_Sg____delitem____SWIG_0(std::vector< unsigned char > *self,std::vector< unsigned char >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< unsigned char,std::allocator< unsigned char > > *std_vector_Sl_unsigned_SS_char_Sg____getitem____SWIG_0(std::vector< unsigned char > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(slice, self->size(), &i, &j, &step);
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_unsigned_SS_char_Sg____setitem____SWIG_0(std::vector< unsigned char > *self,PySliceObject *slice,std::vector< unsigned char,std::allocator< unsigned char > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, self->size(), &i, &j, &step);
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_unsigned_SS_char_Sg____delitem____SWIG_1(std::vector< unsigned char > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, self->size(), &i, &j, &step);
      swig::delslice(self, i,j);
    }
SWIGINTERN std::vector< unsigned char >::value_type const &std_vector_Sl_unsigned_SS_char_Sg____getitem____SWIG_1(std::vector< unsigned char > const *self,std::vector< unsigned char >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_unsigned_SS_char_Sg____setitem____SWIG_1(std::vector< unsigned char > *self,std::vector< unsigned char >::difference_type i,std::vector< unsigned char >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_unsigned_SS_char_Sg__append(std::vector< unsigned char > *self,std::vector< unsigned char >::value_type const &x){
      self->push_back(x);
    }

SWIGINTERN int
SWIG_AsVal_int (PyObject * obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


namespace swig {
  template <> struct traits<int > {
    typedef value_category category;
    static const char* type_name() { return"int"; }
  };  
  template <>  struct traits_asval<int > {   
    typedef int value_type;
    static int asval(PyObject *obj, value_type *val) { 
      return SWIG_AsVal_int (obj, val);
    }
  };
  template <>  struct traits_from<int > {
    typedef int value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_int  (val);
    }
  };
}


      namespace swig {
	template <>  struct traits<std::vector<int, std::allocator< int > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "int" "," "std::allocator< int >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_int_Sg__iterator(std::vector< int > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_int_Sg____nonzero__(std::vector< int > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_int_Sg____bool__(std::vector< int > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< int >::size_type std_vector_Sl_int_Sg____len__(std::vector< int > const *self){
      return self->size();
    }
SWIGINTERN std::vector< int >::value_type std_vector_Sl_int_Sg__pop(std::vector< int > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<int,std::allocator< int > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< int,std::allocator< int > > *std_vector_Sl_int_Sg____getslice__(std::vector< int > *self,std::vector< int >::difference_type i,std::vector< int >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_int_Sg____setslice__(std::vector< int > *self,std::vector< int >::difference_type i,std::vector< int >::difference_type j,std::vector< int,std::allocator< int > > const &v){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_int_Sg____delslice__(std::vector< int > *self,std::vector< int >::difference_type i,std::vector< int >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_int_Sg____delitem____SWIG_0(std::vector< int > *self,std::vector< int >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< int,std::allocator< int > > *std_vector_Sl_int_Sg____getitem____SWIG_0(std::vector< int > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(slice, self->size(), &i, &j, &step);
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_int_Sg____setitem____SWIG_0(std::vector< int > *self,PySliceObject *slice,std::vector< int,std::allocator< int > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, self->size(), &i, &j, &step);
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_int_Sg____delitem____SWIG_1(std::vector< int > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, self->size(), &i, &j, &step);
      swig::delslice(self, i,j);
    }
SWIGINTERN std::vector< int >::value_type const &std_vector_Sl_int_Sg____getitem____SWIG_1(std::vector< int > const *self,std::vector< int >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_int_Sg____setitem____SWIG_1(std::vector< int > *self,std::vector< int >::difference_type i,std::vector< int >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_int_Sg__append(std::vector< int > *self,std::vector< int >::value_type const &x){
      self->push_back(x);
    }

      namespace swig {
	template <>  struct traits<std::vector<std::vector< int,std::allocator< int > >, std::allocator< std::vector< int,std::allocator< int > > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "std::vector< int,std::allocator< int > >" "," "std::allocator< std::vector< int,std::allocator< int > > >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_std_vector_Sl_int_Sg__Sg__iterator(std::vector< std::vector< int > > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_std_vector_Sl_int_Sg__Sg____nonzero__(std::vector< std::vector< int > > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_std_vector_Sl_int_Sg__Sg____bool__(std::vector< std::vector< int > > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< std::vector< int > >::size_type std_vector_Sl_std_vector_Sl_int_Sg__Sg____len__(std::vector< std::vector< int > > const *self){
      return self->size();
    }
SWIGINTERN std::vector< std::vector< int > >::value_type std_vector_Sl_std_vector_Sl_int_Sg__Sg__pop(std::vector< std::vector< int > > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *std_vector_Sl_std_vector_Sl_int_Sg__Sg____getslice__(std::vector< std::vector< int > > *self,std::vector< std::vector< int > >::difference_type i,std::vector< std::vector< int > >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_int_Sg__Sg____setslice__(std::vector< std::vector< int > > *self,std::vector< std::vector< int > >::difference_type i,std::vector< std::vector< int > >::difference_type j,std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const &v){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_int_Sg__Sg____delslice__(std::vector< std::vector< int > > *self,std::vector< std::vector< int > >::difference_type i,std::vector< std::vector< int > >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_int_Sg__Sg____delitem____SWIG_0(std::vector< std::vector< int > > *self,std::vector< std::vector< int > >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *std_vector_Sl_std_vector_Sl_int_Sg__Sg____getitem____SWIG_0(std::vector< std::vector< int > > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(slice, self->size(), &i, &j, &step);
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_int_Sg__Sg____setitem____SWIG_0(std::vector< std::vector< int > > *self,PySliceObject *slice,std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, self->size(), &i, &j, &step);
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_int_Sg__Sg____delitem____SWIG_1(std::vector< std::vector< int > > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, self->size(), &i, &j, &step);
      swig::delslice(self, i,j);
    }
SWIGINTERN std::vector< std::vector< int > >::value_type const &std_vector_Sl_std_vector_Sl_int_Sg__Sg____getitem____SWIG_1(std::vector< std::vector< int > > const *self,std::vector< std::vector< int > >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_int_Sg__Sg____setitem____SWIG_1(std::vector< std::vector< int > > *self,std::vector< std::vector< int > >::difference_type i,std::vector< std::vector< int > >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_int_Sg__Sg__append(std::vector< std::vector< int > > *self,std::vector< std::vector< int > >::value_type const &x){
      self->push_back(x);
    }

SWIGINTERN int
SWIG_AsVal_float (PyObject * obj, float *val)
{
  double v;
  int res = SWIG_AsVal_double (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < -FLT_MAX || v > FLT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< float >(v);
    }
  }  
  return res;
}


  #define SWIG_From_double   PyFloat_FromDouble 


SWIGINTERNINLINE PyObject *
SWIG_From_float  (float value)
{    
  return SWIG_From_double  (value);
}


namespace swig {
  template <> struct traits<float > {
    typedef value_category category;
    static const char* type_name() { return"float"; }
  };  
  template <>  struct traits_asval<float > {   
    typedef float value_type;
    static int asval(PyObject *obj, value_type *val) { 
      return SWIG_AsVal_float (obj, val);
    }
  };
  template <>  struct traits_from<float > {
    typedef float value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_float  (val);
    }
  };
}


      namespace swig {
	template <>  struct traits<std::vector<float, std::allocator< float > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "float" "," "std::allocator< float >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_float_Sg__iterator(std::vector< float > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_float_Sg____nonzero__(std::vector< float > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_float_Sg____bool__(std::vector< float > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< float >::size_type std_vector_Sl_float_Sg____len__(std::vector< float > const *self){
      return self->size();
    }
SWIGINTERN std::vector< float >::value_type std_vector_Sl_float_Sg__pop(std::vector< float > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<float,std::allocator< float > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< float,std::allocator< float > > *std_vector_Sl_float_Sg____getslice__(std::vector< float > *self,std::vector< float >::difference_type i,std::vector< float >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_float_Sg____setslice__(std::vector< float > *self,std::vector< float >::difference_type i,std::vector< float >::difference_type j,std::vector< float,std::allocator< float > > const &v){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_float_Sg____delslice__(std::vector< float > *self,std::vector< float >::difference_type i,std::vector< float >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_float_Sg____delitem____SWIG_0(std::vector< float > *self,std::vector< float >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< float,std::allocator< float > > *std_vector_Sl_float_Sg____getitem____SWIG_0(std::vector< float > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(slice, self->size(), &i, &j, &step);
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_float_Sg____setitem____SWIG_0(std::vector< float > *self,PySliceObject *slice,std::vector< float,std::allocator< float > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, self->size(), &i, &j, &step);
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_float_Sg____delitem____SWIG_1(std::vector< float > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, self->size(), &i, &j, &step);
      swig::delslice(self, i,j);
    }
SWIGINTERN std::vector< float >::value_type const &std_vector_Sl_float_Sg____getitem____SWIG_1(std::vector< float > const *self,std::vector< float >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_float_Sg____setitem____SWIG_1(std::vector< float > *self,std::vector< float >::difference_type i,std::vector< float >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_float_Sg__append(std::vector< float > *self,std::vector< float >::value_type const &x){
      self->push_back(x);
    }

SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(PyObject *obj, char** cptr, size_t* psize, int *alloc)
{
#if PY_VERSION_HEX>=0x03000000
  if (PyUnicode_Check(obj))
#else  
  if (PyString_Check(obj))
#endif
  {
    char *cstr; Py_ssize_t len;
#if PY_VERSION_HEX>=0x03000000
    if (!alloc && cptr) {
        /* We can't allow converting without allocation, since the internal
           representation of string in Python 3 is UCS-2/UCS-4 but we require
           a UTF-8 representation.
           TODO(bhy) More detailed explanation */
        return SWIG_RuntimeError;
    }
    obj = PyUnicode_AsUTF8String(obj);
    PyBytes_AsStringAndSize(obj, &cstr, &len);
    if(alloc) *alloc = SWIG_NEWOBJ;
#else
    PyString_AsStringAndSize(obj, &cstr, &len);
#endif
    if (cptr) {
      if (alloc) {
	/* 
	   In python the user should not be able to modify the inner
	   string representation. To warranty that, if you define
	   SWIG_PYTHON_SAFE_CSTRINGS, a new/copy of the python string
	   buffer is always returned.

	   The default behavior is just to return the pointer value,
	   so, be careful.
	*/ 
#if defined(SWIG_PYTHON_SAFE_CSTRINGS)
	if (*alloc != SWIG_OLDOBJ) 
#else
	if (*alloc == SWIG_NEWOBJ) 
#endif
	  {
	    *cptr = reinterpret_cast< char* >(memcpy((new char[len + 1]), cstr, sizeof(char)*(len + 1)));
	    *alloc = SWIG_NEWOBJ;
	  }
	else {
	  *cptr = cstr;
	  *alloc = SWIG_OLDOBJ;
	}
      } else {
        #if PY_VERSION_HEX>=0x03000000
        assert(0); /* Should never reach here in Python 3 */
        #endif
	*cptr = SWIG_Python_str_AsChar(obj);
      }
    }
    if (psize) *psize = len + 1;
#if PY_VERSION_HEX>=0x03000000
    Py_XDECREF(obj);
#endif
    return SWIG_OK;
  } else {
    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      void* vptr = 0;
      if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = (char *) vptr;
	if (psize) *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsPtr_std_string (PyObject * obj, std::string **val) 
{
  char* buf = 0 ; size_t size = 0; int alloc = SWIG_OLDOBJ;
  if (SWIG_IsOK((SWIG_AsCharPtrAndSize(obj, &buf, &size, &alloc)))) {
    if (buf) {
      if (val) *val = new std::string(buf, size - 1);
      if (alloc == SWIG_NEWOBJ) delete[] buf;
      return SWIG_NEWOBJ;
    } else {
      if (val) *val = 0;
      return SWIG_OLDOBJ;
    }
  } else {
    static int init = 0;
    static swig_type_info* descriptor = 0;
    if (!init) {
      descriptor = SWIG_TypeQuery("std::string" " *");
      init = 1;
    }
    if (descriptor) {
      std::string *vptr;
      int res = SWIG_ConvertPtr(obj, (void**)&vptr, descriptor, 0);
      if (SWIG_IsOK(res) && val) *val = vptr;
      return res;
    }
  }
  return SWIG_ERROR;
}


SWIGINTERN int
SWIG_AsVal_std_string (PyObject * obj, std::string *val)
{
  std::string* v = (std::string *) 0;
  int res = SWIG_AsPtr_std_string (obj, &v);
  if (!SWIG_IsOK(res)) return res;
  if (v) {
    if (val) *val = *v;
    if (SWIG_IsNewObj(res)) {
      delete v;
      res = SWIG_DelNewMask(res);
    }
    return res;
  }
  return SWIG_ERROR;
}


SWIGINTERNINLINE PyObject *
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      return pchar_descriptor ? 
	SWIG_NewPointerObj(const_cast< char * >(carray), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
#if PY_VERSION_HEX >= 0x03000000
      return PyUnicode_FromStringAndSize(carray, static_cast< int >(size));
#else
      return PyString_FromStringAndSize(carray, static_cast< int >(size));
#endif
    }
  } else {
    return SWIG_Py_Void();
  }
}


SWIGINTERNINLINE PyObject *
SWIG_From_std_string  (const std::string& s)
{
  if (s.size()) {
    return SWIG_FromCharPtrAndSize(s.data(), s.size());
  } else {
    return SWIG_FromCharPtrAndSize(s.c_str(), 0);
  }
}


namespace swig {
  template <> struct traits<std::string > {
    typedef value_category category;
    static const char* type_name() { return"std::string"; }
  };  
  template <>  struct traits_asval<std::string > {   
    typedef std::string value_type;
    static int asval(PyObject *obj, value_type *val) { 
      return SWIG_AsVal_std_string (obj, val);
    }
  };
  template <>  struct traits_from<std::string > {
    typedef std::string value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_std_string  (val);
    }
  };
}


      namespace swig {
	template <>  struct traits<std::vector<std::string, std::allocator< std::string > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "std::string" "," "std::allocator< std::string >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_std_string_Sg__iterator(std::vector< std::string > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_std_string_Sg____nonzero__(std::vector< std::string > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_std_string_Sg____bool__(std::vector< std::string > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< std::string >::size_type std_vector_Sl_std_string_Sg____len__(std::vector< std::string > const *self){
      return self->size();
    }
SWIGINTERN std::vector< std::string >::value_type std_vector_Sl_std_string_Sg__pop(std::vector< std::string > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<std::string,std::allocator< std::string > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< std::string,std::allocator< std::string > > *std_vector_Sl_std_string_Sg____getslice__(std::vector< std::string > *self,std::vector< std::string >::difference_type i,std::vector< std::string >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____setslice__(std::vector< std::string > *self,std::vector< std::string >::difference_type i,std::vector< std::string >::difference_type j,std::vector< std::string,std::allocator< std::string > > const &v){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____delslice__(std::vector< std::string > *self,std::vector< std::string >::difference_type i,std::vector< std::string >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____delitem____SWIG_0(std::vector< std::string > *self,std::vector< std::string >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< std::string,std::allocator< std::string > > *std_vector_Sl_std_string_Sg____getitem____SWIG_0(std::vector< std::string > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(slice, self->size(), &i, &j, &step);
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____setitem____SWIG_0(std::vector< std::string > *self,PySliceObject *slice,std::vector< std::string,std::allocator< std::string > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, self->size(), &i, &j, &step);
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____delitem____SWIG_1(std::vector< std::string > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, self->size(), &i, &j, &step);
      swig::delslice(self, i,j);
    }
SWIGINTERN std::vector< std::string >::value_type const &std_vector_Sl_std_string_Sg____getitem____SWIG_1(std::vector< std::string > const *self,std::vector< std::string >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____setitem____SWIG_1(std::vector< std::string > *self,std::vector< std::string >::difference_type i,std::vector< std::string >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_std_string_Sg__append(std::vector< std::string > *self,std::vector< std::string >::value_type const &x){
      self->push_back(x);
    }

  namespace swig {
    template <>  struct traits<Vec3f > {
      typedef pointer_category category;
      static const char* type_name() { return"Vec3f"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<Vec3f, std::allocator< Vec3f > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "Vec3f" "," "std::allocator< Vec3f >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_Vec3f_Sg__iterator(std::vector< Vec3f > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_Vec3f_Sg____nonzero__(std::vector< Vec3f > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_Vec3f_Sg____bool__(std::vector< Vec3f > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< Vec3f >::size_type std_vector_Sl_Vec3f_Sg____len__(std::vector< Vec3f > const *self){
      return self->size();
    }
SWIGINTERN std::vector< Vec3f >::value_type std_vector_Sl_Vec3f_Sg__pop(std::vector< Vec3f > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<Vec3f,std::allocator< Vec3f > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< Vec3f,std::allocator< Vec3f > > *std_vector_Sl_Vec3f_Sg____getslice__(std::vector< Vec3f > *self,std::vector< Vec3f >::difference_type i,std::vector< Vec3f >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_Vec3f_Sg____setslice__(std::vector< Vec3f > *self,std::vector< Vec3f >::difference_type i,std::vector< Vec3f >::difference_type j,std::vector< Vec3f,std::allocator< Vec3f > > const &v){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_Vec3f_Sg____delslice__(std::vector< Vec3f > *self,std::vector< Vec3f >::difference_type i,std::vector< Vec3f >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_Vec3f_Sg____delitem____SWIG_0(std::vector< Vec3f > *self,std::vector< Vec3f >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< Vec3f,std::allocator< Vec3f > > *std_vector_Sl_Vec3f_Sg____getitem____SWIG_0(std::vector< Vec3f > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(slice, self->size(), &i, &j, &step);
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_Vec3f_Sg____setitem____SWIG_0(std::vector< Vec3f > *self,PySliceObject *slice,std::vector< Vec3f,std::allocator< Vec3f > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, self->size(), &i, &j, &step);
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_Vec3f_Sg____delitem____SWIG_1(std::vector< Vec3f > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, self->size(), &i, &j, &step);
      swig::delslice(self, i,j);
    }
SWIGINTERN std::vector< Vec3f >::value_type const &std_vector_Sl_Vec3f_Sg____getitem____SWIG_1(std::vector< Vec3f > const *self,std::vector< Vec3f >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_Vec3f_Sg____setitem____SWIG_1(std::vector< Vec3f > *self,std::vector< Vec3f >::difference_type i,std::vector< Vec3f >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_Vec3f_Sg__append(std::vector< Vec3f > *self,std::vector< Vec3f >::value_type const &x){
      self->push_back(x);
    }

  namespace swig {
    template <>  struct traits<std::tr1::shared_ptr< Hpc > > {
      typedef pointer_category category;
      static const char* type_name() { return"std::tr1::shared_ptr< Hpc >"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<std::tr1::shared_ptr< Hpc >, std::allocator< std::tr1::shared_ptr< Hpc > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "std::tr1::shared_ptr< Hpc >" "," "std::allocator< std::tr1::shared_ptr< Hpc > >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_std_tr1_shared_ptr_Sl_Hpc_Sg__Sg__iterator(std::vector< std::tr1::shared_ptr< Hpc > > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_std_tr1_shared_ptr_Sl_Hpc_Sg__Sg____nonzero__(std::vector< std::tr1::shared_ptr< Hpc > > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_std_tr1_shared_ptr_Sl_Hpc_Sg__Sg____bool__(std::vector< std::tr1::shared_ptr< Hpc > > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< std::tr1::shared_ptr< Hpc > >::size_type std_vector_Sl_std_tr1_shared_ptr_Sl_Hpc_Sg__Sg____len__(std::vector< std::tr1::shared_ptr< Hpc > > const *self){
      return self->size();
    }
SWIGINTERN std::vector< std::tr1::shared_ptr< Hpc > >::value_type std_vector_Sl_std_tr1_shared_ptr_Sl_Hpc_Sg__Sg__pop(std::vector< std::tr1::shared_ptr< Hpc > > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<std::tr1::shared_ptr< Hpc >,std::allocator< std::tr1::shared_ptr< Hpc > > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< std::tr1::shared_ptr< Hpc >,std::allocator< std::tr1::shared_ptr< Hpc > > > *std_vector_Sl_std_tr1_shared_ptr_Sl_Hpc_Sg__Sg____getslice__(std::vector< std::tr1::shared_ptr< Hpc > > *self,std::vector< std::tr1::shared_ptr< Hpc > >::difference_type i,std::vector< std::tr1::shared_ptr< Hpc > >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_std_tr1_shared_ptr_Sl_Hpc_Sg__Sg____setslice__(std::vector< std::tr1::shared_ptr< Hpc > > *self,std::vector< std::tr1::shared_ptr< Hpc > >::difference_type i,std::vector< std::tr1::shared_ptr< Hpc > >::difference_type j,std::vector< std::tr1::shared_ptr< Hpc >,std::allocator< std::tr1::shared_ptr< Hpc > > > const &v){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_std_tr1_shared_ptr_Sl_Hpc_Sg__Sg____delslice__(std::vector< std::tr1::shared_ptr< Hpc > > *self,std::vector< std::tr1::shared_ptr< Hpc > >::difference_type i,std::vector< std::tr1::shared_ptr< Hpc > >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_std_tr1_shared_ptr_Sl_Hpc_Sg__Sg____delitem____SWIG_0(std::vector< std::tr1::shared_ptr< Hpc > > *self,std::vector< std::tr1::shared_ptr< Hpc > >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< std::tr1::shared_ptr< Hpc >,std::allocator< std::tr1::shared_ptr< Hpc > > > *std_vector_Sl_std_tr1_shared_ptr_Sl_Hpc_Sg__Sg____getitem____SWIG_0(std::vector< std::tr1::shared_ptr< Hpc > > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(slice, self->size(), &i, &j, &step);
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_std_tr1_shared_ptr_Sl_Hpc_Sg__Sg____setitem____SWIG_0(std::vector< std::tr1::shared_ptr< Hpc > > *self,PySliceObject *slice,std::vector< std::tr1::shared_ptr< Hpc >,std::allocator< std::tr1::shared_ptr< Hpc > > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, self->size(), &i, &j, &step);
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_std_tr1_shared_ptr_Sl_Hpc_Sg__Sg____delitem____SWIG_1(std::vector< std::tr1::shared_ptr< Hpc > > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, self->size(), &i, &j, &step);
      swig::delslice(self, i,j);
    }
SWIGINTERN std::vector< std::tr1::shared_ptr< Hpc > >::value_type const &std_vector_Sl_std_tr1_shared_ptr_Sl_Hpc_Sg__Sg____getitem____SWIG_1(std::vector< std::tr1::shared_ptr< Hpc > > const *self,std::vector< std::tr1::shared_ptr< Hpc > >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_std_tr1_shared_ptr_Sl_Hpc_Sg__Sg____setitem____SWIG_1(std::vector< std::tr1::shared_ptr< Hpc > > *self,std::vector< std::tr1::shared_ptr< Hpc > >::difference_type i,std::vector< std::tr1::shared_ptr< Hpc > >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_std_tr1_shared_ptr_Sl_Hpc_Sg__Sg__append(std::vector< std::tr1::shared_ptr< Hpc > > *self,std::vector< std::tr1::shared_ptr< Hpc > >::value_type const &x){
      self->push_back(x);
    }

  namespace swig {
    template <>  struct traits<std::tr1::shared_ptr< Batch > > {
      typedef pointer_category category;
      static const char* type_name() { return"std::tr1::shared_ptr< Batch >"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<std::tr1::shared_ptr< Batch >, std::allocator< std::tr1::shared_ptr< Batch > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "std::tr1::shared_ptr< Batch >" "," "std::allocator< std::tr1::shared_ptr< Batch > >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_std_tr1_shared_ptr_Sl_Batch_Sg__Sg__iterator(std::vector< std::tr1::shared_ptr< Batch > > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_std_tr1_shared_ptr_Sl_Batch_Sg__Sg____nonzero__(std::vector< std::tr1::shared_ptr< Batch > > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_std_tr1_shared_ptr_Sl_Batch_Sg__Sg____bool__(std::vector< std::tr1::shared_ptr< Batch > > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< std::tr1::shared_ptr< Batch > >::size_type std_vector_Sl_std_tr1_shared_ptr_Sl_Batch_Sg__Sg____len__(std::vector< std::tr1::shared_ptr< Batch > > const *self){
      return self->size();
    }
SWIGINTERN std::vector< std::tr1::shared_ptr< Batch > >::value_type std_vector_Sl_std_tr1_shared_ptr_Sl_Batch_Sg__Sg__pop(std::vector< std::tr1::shared_ptr< Batch > > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > *std_vector_Sl_std_tr1_shared_ptr_Sl_Batch_Sg__Sg____getslice__(std::vector< std::tr1::shared_ptr< Batch > > *self,std::vector< std::tr1::shared_ptr< Batch > >::difference_type i,std::vector< std::tr1::shared_ptr< Batch > >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_std_tr1_shared_ptr_Sl_Batch_Sg__Sg____setslice__(std::vector< std::tr1::shared_ptr< Batch > > *self,std::vector< std::tr1::shared_ptr< Batch > >::difference_type i,std::vector< std::tr1::shared_ptr< Batch > >::difference_type j,std::vector< std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > const &v){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_std_tr1_shared_ptr_Sl_Batch_Sg__Sg____delslice__(std::vector< std::tr1::shared_ptr< Batch > > *self,std::vector< std::tr1::shared_ptr< Batch > >::difference_type i,std::vector< std::tr1::shared_ptr< Batch > >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_std_tr1_shared_ptr_Sl_Batch_Sg__Sg____delitem____SWIG_0(std::vector< std::tr1::shared_ptr< Batch > > *self,std::vector< std::tr1::shared_ptr< Batch > >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > *std_vector_Sl_std_tr1_shared_ptr_Sl_Batch_Sg__Sg____getitem____SWIG_0(std::vector< std::tr1::shared_ptr< Batch > > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(slice, self->size(), &i, &j, &step);
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_std_tr1_shared_ptr_Sl_Batch_Sg__Sg____setitem____SWIG_0(std::vector< std::tr1::shared_ptr< Batch > > *self,PySliceObject *slice,std::vector< std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, self->size(), &i, &j, &step);
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_std_tr1_shared_ptr_Sl_Batch_Sg__Sg____delitem____SWIG_1(std::vector< std::tr1::shared_ptr< Batch > > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, self->size(), &i, &j, &step);
      swig::delslice(self, i,j);
    }
SWIGINTERN std::vector< std::tr1::shared_ptr< Batch > >::value_type const &std_vector_Sl_std_tr1_shared_ptr_Sl_Batch_Sg__Sg____getitem____SWIG_1(std::vector< std::tr1::shared_ptr< Batch > > const *self,std::vector< std::tr1::shared_ptr< Batch > >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_std_tr1_shared_ptr_Sl_Batch_Sg__Sg____setitem____SWIG_1(std::vector< std::tr1::shared_ptr< Batch > > *self,std::vector< std::tr1::shared_ptr< Batch > >::difference_type i,std::vector< std::tr1::shared_ptr< Batch > >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_std_tr1_shared_ptr_Sl_Batch_Sg__Sg__append(std::vector< std::tr1::shared_ptr< Batch > > *self,std::vector< std::tr1::shared_ptr< Batch > >::value_type const &x){
      self->push_back(x);
    }

  namespace swig {
    template <>  struct traits<std::tr1::shared_ptr< Texture > > {
      typedef pointer_category category;
      static const char* type_name() { return"std::tr1::shared_ptr< Texture >"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<std::tr1::shared_ptr< Texture >, std::allocator< std::tr1::shared_ptr< Texture > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "std::tr1::shared_ptr< Texture >" "," "std::allocator< std::tr1::shared_ptr< Texture > >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_std_tr1_shared_ptr_Sl_Texture_Sg__Sg__iterator(std::vector< std::tr1::shared_ptr< Texture > > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_std_tr1_shared_ptr_Sl_Texture_Sg__Sg____nonzero__(std::vector< std::tr1::shared_ptr< Texture > > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_std_tr1_shared_ptr_Sl_Texture_Sg__Sg____bool__(std::vector< std::tr1::shared_ptr< Texture > > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< std::tr1::shared_ptr< Texture > >::size_type std_vector_Sl_std_tr1_shared_ptr_Sl_Texture_Sg__Sg____len__(std::vector< std::tr1::shared_ptr< Texture > > const *self){
      return self->size();
    }
SWIGINTERN std::vector< std::tr1::shared_ptr< Texture > >::value_type std_vector_Sl_std_tr1_shared_ptr_Sl_Texture_Sg__Sg__pop(std::vector< std::tr1::shared_ptr< Texture > > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<std::tr1::shared_ptr< Texture >,std::allocator< std::tr1::shared_ptr< Texture > > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< std::tr1::shared_ptr< Texture >,std::allocator< std::tr1::shared_ptr< Texture > > > *std_vector_Sl_std_tr1_shared_ptr_Sl_Texture_Sg__Sg____getslice__(std::vector< std::tr1::shared_ptr< Texture > > *self,std::vector< std::tr1::shared_ptr< Texture > >::difference_type i,std::vector< std::tr1::shared_ptr< Texture > >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_std_tr1_shared_ptr_Sl_Texture_Sg__Sg____setslice__(std::vector< std::tr1::shared_ptr< Texture > > *self,std::vector< std::tr1::shared_ptr< Texture > >::difference_type i,std::vector< std::tr1::shared_ptr< Texture > >::difference_type j,std::vector< std::tr1::shared_ptr< Texture >,std::allocator< std::tr1::shared_ptr< Texture > > > const &v){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_std_tr1_shared_ptr_Sl_Texture_Sg__Sg____delslice__(std::vector< std::tr1::shared_ptr< Texture > > *self,std::vector< std::tr1::shared_ptr< Texture > >::difference_type i,std::vector< std::tr1::shared_ptr< Texture > >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_std_tr1_shared_ptr_Sl_Texture_Sg__Sg____delitem____SWIG_0(std::vector< std::tr1::shared_ptr< Texture > > *self,std::vector< std::tr1::shared_ptr< Texture > >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< std::tr1::shared_ptr< Texture >,std::allocator< std::tr1::shared_ptr< Texture > > > *std_vector_Sl_std_tr1_shared_ptr_Sl_Texture_Sg__Sg____getitem____SWIG_0(std::vector< std::tr1::shared_ptr< Texture > > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(slice, self->size(), &i, &j, &step);
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_std_tr1_shared_ptr_Sl_Texture_Sg__Sg____setitem____SWIG_0(std::vector< std::tr1::shared_ptr< Texture > > *self,PySliceObject *slice,std::vector< std::tr1::shared_ptr< Texture >,std::allocator< std::tr1::shared_ptr< Texture > > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, self->size(), &i, &j, &step);
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_std_tr1_shared_ptr_Sl_Texture_Sg__Sg____delitem____SWIG_1(std::vector< std::tr1::shared_ptr< Texture > > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, self->size(), &i, &j, &step);
      swig::delslice(self, i,j);
    }
SWIGINTERN std::vector< std::tr1::shared_ptr< Texture > >::value_type const &std_vector_Sl_std_tr1_shared_ptr_Sl_Texture_Sg__Sg____getitem____SWIG_1(std::vector< std::tr1::shared_ptr< Texture > > const *self,std::vector< std::tr1::shared_ptr< Texture > >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_std_tr1_shared_ptr_Sl_Texture_Sg__Sg____setitem____SWIG_1(std::vector< std::tr1::shared_ptr< Texture > > *self,std::vector< std::tr1::shared_ptr< Texture > >::difference_type i,std::vector< std::tr1::shared_ptr< Texture > >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_std_tr1_shared_ptr_Sl_Texture_Sg__Sg__append(std::vector< std::tr1::shared_ptr< Texture > > *self,std::vector< std::tr1::shared_ptr< Texture > >::value_type const &x){
      self->push_back(x);
    }

  namespace swig {
    template <>  struct traits<std::tr1::shared_ptr< EngineResource > > {
      typedef pointer_category category;
      static const char* type_name() { return"std::tr1::shared_ptr< EngineResource >"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<std::tr1::shared_ptr< EngineResource >, std::allocator< std::tr1::shared_ptr< EngineResource > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "std::tr1::shared_ptr< EngineResource >" "," "std::allocator< std::tr1::shared_ptr< EngineResource > >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_std_tr1_shared_ptr_Sl_EngineResource_Sg__Sg__iterator(std::vector< std::tr1::shared_ptr< EngineResource > > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_std_tr1_shared_ptr_Sl_EngineResource_Sg__Sg____nonzero__(std::vector< std::tr1::shared_ptr< EngineResource > > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_std_tr1_shared_ptr_Sl_EngineResource_Sg__Sg____bool__(std::vector< std::tr1::shared_ptr< EngineResource > > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< std::tr1::shared_ptr< EngineResource > >::size_type std_vector_Sl_std_tr1_shared_ptr_Sl_EngineResource_Sg__Sg____len__(std::vector< std::tr1::shared_ptr< EngineResource > > const *self){
      return self->size();
    }
SWIGINTERN std::vector< std::tr1::shared_ptr< EngineResource > >::value_type std_vector_Sl_std_tr1_shared_ptr_Sl_EngineResource_Sg__Sg__pop(std::vector< std::tr1::shared_ptr< EngineResource > > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<std::tr1::shared_ptr< EngineResource >,std::allocator< std::tr1::shared_ptr< EngineResource > > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< std::tr1::shared_ptr< EngineResource >,std::allocator< std::tr1::shared_ptr< EngineResource > > > *std_vector_Sl_std_tr1_shared_ptr_Sl_EngineResource_Sg__Sg____getslice__(std::vector< std::tr1::shared_ptr< EngineResource > > *self,std::vector< std::tr1::shared_ptr< EngineResource > >::difference_type i,std::vector< std::tr1::shared_ptr< EngineResource > >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_std_tr1_shared_ptr_Sl_EngineResource_Sg__Sg____setslice__(std::vector< std::tr1::shared_ptr< EngineResource > > *self,std::vector< std::tr1::shared_ptr< EngineResource > >::difference_type i,std::vector< std::tr1::shared_ptr< EngineResource > >::difference_type j,std::vector< std::tr1::shared_ptr< EngineResource >,std::allocator< std::tr1::shared_ptr< EngineResource > > > const &v){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_std_tr1_shared_ptr_Sl_EngineResource_Sg__Sg____delslice__(std::vector< std::tr1::shared_ptr< EngineResource > > *self,std::vector< std::tr1::shared_ptr< EngineResource > >::difference_type i,std::vector< std::tr1::shared_ptr< EngineResource > >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_std_tr1_shared_ptr_Sl_EngineResource_Sg__Sg____delitem____SWIG_0(std::vector< std::tr1::shared_ptr< EngineResource > > *self,std::vector< std::tr1::shared_ptr< EngineResource > >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< std::tr1::shared_ptr< EngineResource >,std::allocator< std::tr1::shared_ptr< EngineResource > > > *std_vector_Sl_std_tr1_shared_ptr_Sl_EngineResource_Sg__Sg____getitem____SWIG_0(std::vector< std::tr1::shared_ptr< EngineResource > > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(slice, self->size(), &i, &j, &step);
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_std_tr1_shared_ptr_Sl_EngineResource_Sg__Sg____setitem____SWIG_0(std::vector< std::tr1::shared_ptr< EngineResource > > *self,PySliceObject *slice,std::vector< std::tr1::shared_ptr< EngineResource >,std::allocator< std::tr1::shared_ptr< EngineResource > > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, self->size(), &i, &j, &step);
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_std_tr1_shared_ptr_Sl_EngineResource_Sg__Sg____delitem____SWIG_1(std::vector< std::tr1::shared_ptr< EngineResource > > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, self->size(), &i, &j, &step);
      swig::delslice(self, i,j);
    }
SWIGINTERN std::vector< std::tr1::shared_ptr< EngineResource > >::value_type const &std_vector_Sl_std_tr1_shared_ptr_Sl_EngineResource_Sg__Sg____getitem____SWIG_1(std::vector< std::tr1::shared_ptr< EngineResource > > const *self,std::vector< std::tr1::shared_ptr< EngineResource > >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_std_tr1_shared_ptr_Sl_EngineResource_Sg__Sg____setitem____SWIG_1(std::vector< std::tr1::shared_ptr< EngineResource > > *self,std::vector< std::tr1::shared_ptr< EngineResource > >::difference_type i,std::vector< std::tr1::shared_ptr< EngineResource > >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_std_tr1_shared_ptr_Sl_EngineResource_Sg__Sg__append(std::vector< std::tr1::shared_ptr< EngineResource > > *self,std::vector< std::tr1::shared_ptr< EngineResource > >::value_type const &x){
      self->push_back(x);
    }

SWIGINTERNINLINE PyObject * 
SWIG_FromCharPtr(const char *cptr)
{ 
  return SWIG_FromCharPtrAndSize(cptr, (cptr ? strlen(cptr) : 0));
}





SWIGINTERN int
SWIG_AsVal_bool (PyObject *obj, bool *val)
{
  int r = PyObject_IsTrue(obj);
  if (r == -1)
    return SWIG_ERROR;
  if (val) *val = r ? true : false;
  return SWIG_OK;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_long_SS_long (PyObject *obj, unsigned long long *val)
{
  int res = SWIG_TypeError;
  if (PyLong_Check(obj)) {
    unsigned long long v = PyLong_AsUnsignedLongLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  } else {
    unsigned long v;
    res = SWIG_AsVal_unsigned_SS_long (obj,&v);
    if (SWIG_IsOK(res)) {
      if (val) *val = v;
      return res;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    const double mant_max = 1LL << DBL_MANT_DIG;
    double d;
    res = SWIG_AsVal_double (obj,&d);
    if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, mant_max)) {
      if (val) *val = (unsigned long long)(d);
      return SWIG_AddCast(res);
    }
    res = SWIG_TypeError;
  }
#endif
  return res;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_int (PyObject * obj, unsigned int *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UINT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned int >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE PyObject *
SWIG_From_unsigned_SS_int  (unsigned int value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}


SWIGINTERNINLINE PyObject* 
SWIG_From_long_SS_long  (long long value)
{
  return ((value < LONG_MIN) || (value > LONG_MAX)) ?
    PyLong_FromLongLong(value) : PyInt_FromLong(static_cast< long >(value)); 
}


SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long_SS_long  (unsigned long long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLongLong(value) : PyInt_FromLong(static_cast< long >(value)); 
}


SWIGINTERN int
SWIG_AsCharArray(PyObject * obj, char *val, size_t size)
{ 
  char* cptr = 0; size_t csize = 0; int alloc = SWIG_OLDOBJ;
  int res = SWIG_AsCharPtrAndSize(obj, &cptr, &csize, &alloc);
  if (SWIG_IsOK(res)) {
    if ((csize == size + 1) && cptr && !(cptr[csize-1])) --csize;
    if (csize <= size) {
      if (val) {
	if (csize) memcpy(val, cptr, csize*sizeof(char));
	if (csize < size) memset(val + csize, 0, (size - csize)*sizeof(char));
      }
      if (alloc == SWIG_NEWOBJ) {
	delete[] cptr;
	res = SWIG_DelNewMask(res);
      }      
      return res;
    }
    if (alloc == SWIG_NEWOBJ) delete[] cptr;
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_char (PyObject * obj, char *val)
{    
  int res = SWIG_AsCharArray(obj, val, 1);
  if (!SWIG_IsOK(res)) {
    long v;
    res = SWIG_AddCast(SWIG_AsVal_long (obj, &v));
    if (SWIG_IsOK(res)) {
      if ((CHAR_MIN <= v) && (v <= CHAR_MAX)) {
	if (val) *val = static_cast< char >(v);
      } else {
	res = SWIG_OverflowError;
      }
    }
  }
  return res;
}


SWIGINTERN int
SWIG_AsVal_short (PyObject * obj, short *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < SHRT_MIN || v > SHRT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< short >(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_short (PyObject * obj, unsigned short *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > USHRT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned short >(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsVal_long_SS_long (PyObject *obj, long long *val)
{
  int res = SWIG_TypeError;
  if (PyLong_Check(obj)) {
    long long v = PyLong_AsLongLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  } else {
    long v;
    res = SWIG_AsVal_long (obj,&v);
    if (SWIG_IsOK(res)) {
      if (val) *val = v;
      return res;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    const double mant_max = 1LL << DBL_MANT_DIG;
    const double mant_min = -mant_max;
    double d;
    res = SWIG_AsVal_double (obj,&d);
    if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, mant_min, mant_max)) {
      if (val) *val = (long long)(d);
      return SWIG_AddCast(res);
    }
    res = SWIG_TypeError;
  }
#endif
  return res;
}


SWIGINTERNINLINE PyObject *
SWIG_From_char  (char c) 
{ 
  return SWIG_FromCharPtrAndSize(&c,1);
}


SWIGINTERNINLINE PyObject *
SWIG_From_short  (short value)
{    
  return SWIG_From_long  (value);
}


SWIGINTERNINLINE PyObject *
SWIG_From_unsigned_SS_short  (unsigned short value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}


struct SWIG_null_deleter {
  void operator() (void const *) const {
  }
};
#define SWIG_NO_NULL_DELETER_0 , SWIG_null_deleter()
#define SWIG_NO_NULL_DELETER_1
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_OWN



/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "xgepy.h"

SwigDirector_Viewer::SwigDirector_Viewer(PyObject *self): Viewer(), Swig::Director(self) {
  SWIG_DIRECTOR_RGTR((Viewer *)this, this); 
}




SwigDirector_Viewer::SwigDirector_Viewer(PyObject *self, std::tr1::shared_ptr< Octree > octree): Viewer(octree), Swig::Director(self) {
  SWIG_DIRECTOR_RGTR((Viewer *)this, this); 
}




SwigDirector_Viewer::~SwigDirector_Viewer() {
}

void SwigDirector_Viewer::Render() {
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call Viewer.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 0;
  const char * const swig_method_name = "Render";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, NULL, NULL);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *) "Render", NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'Viewer.Render'");
    }
  }
}


void SwigDirector_Viewer::Redisplay() {
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call Viewer.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 1;
  const char * const swig_method_name = "Redisplay";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, NULL, NULL);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *) "Redisplay", NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'Viewer.Redisplay'");
    }
  }
}


void SwigDirector_Viewer::Keyboard(int key, int x, int y) {
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_From_int(static_cast< int >(key));
  swig::SwigVar_PyObject obj1;
  obj1 = SWIG_From_int(static_cast< int >(x));
  swig::SwigVar_PyObject obj2;
  obj2 = SWIG_From_int(static_cast< int >(y));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call Viewer.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 2;
  const char * const swig_method_name = "Keyboard";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, (char *)"(OOO)" ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *)"Keyboard", (char *)"(OOO)" ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'Viewer.Keyboard'");
    }
  }
}


void SwigDirector_Viewer::Mouse(MouseEvent args) {
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(&args), SWIGTYPE_p_MouseEvent,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call Viewer.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 3;
  const char * const swig_method_name = "Mouse";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, (char *)"(O)" ,(PyObject *)obj0);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *)"Mouse", (char *)"(O)" ,(PyObject *)obj0);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'Viewer.Mouse'");
    }
  }
}


void SwigDirector_Viewer::Resize(int width, int height) {
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_From_int(static_cast< int >(width));
  swig::SwigVar_PyObject obj1;
  obj1 = SWIG_From_int(static_cast< int >(height));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call Viewer.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 4;
  const char * const swig_method_name = "Resize";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, (char *)"(OO)" ,(PyObject *)obj0,(PyObject *)obj1);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *)"Resize", (char *)"(OO)" ,(PyObject *)obj0,(PyObject *)obj1);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'Viewer.Resize'");
    }
  }
}


void SwigDirector_Viewer::Close() {
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call Viewer.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 5;
  const char * const swig_method_name = "Close";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, NULL, NULL);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *) "Close", NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'Viewer.Close'");
    }
  }
}


void SwigDirector_Viewer::Run() {
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call Viewer.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 6;
  const char * const swig_method_name = "Run";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, NULL, NULL);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *) "Run", NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'Viewer.Run'");
    }
  }
}


void SwigDirector_Viewer::Wait() {
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call Viewer.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 7;
  const char * const swig_method_name = "Wait";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, NULL, NULL);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *) "Wait", NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'Viewer.Wait'");
    }
  }
}


void SwigDirector_Viewer::doJob(int arg0) {
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_From_int(static_cast< int >(arg0));
  swig_set_inner("doJob", true);
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call Viewer.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 8;
  const char * const swig_method_name = "doJob";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, (char *)"(O)" ,(PyObject *)obj0);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *)"doJob", (char *)"(O)" ,(PyObject *)obj0);
#endif
  swig_set_inner("doJob", false);
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'Viewer.doJob'");
    }
  }
}


#ifdef __cplusplus
extern "C" {
#endif
SWIGINTERN PyObject *_wrap_delete_SwigPyIterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SwigPyIterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SwigPyIterator" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_value(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_value",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_value" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)((swig::SwigPyIterator const *)arg1)->value();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_incr",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_incr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_incr" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  try {
    result = (swig::SwigPyIterator *)(arg1)->incr(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_incr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_incr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (swig::SwigPyIterator *)(arg1)->incr();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SwigPyIterator_incr__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator_incr__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SwigPyIterator_incr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    incr(swig::SwigPyIterator *,size_t)\n"
    "    incr(swig::SwigPyIterator *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_decr",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_decr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_decr" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  try {
    result = (swig::SwigPyIterator *)(arg1)->decr(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_decr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_decr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (swig::SwigPyIterator *)(arg1)->decr();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SwigPyIterator_decr__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator_decr__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SwigPyIterator_decr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    decr(swig::SwigPyIterator *,size_t)\n"
    "    decr(swig::SwigPyIterator *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_distance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ptrdiff_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_distance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_distance" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator_distance" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator_distance" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  try {
    result = ((swig::SwigPyIterator const *)arg1)->distance((swig::SwigPyIterator const &)*arg2);
  }
  catch(std::invalid_argument &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))),SWIGTYPE_p_std__invalid_argument,SWIG_POINTER_OWN), "std::invalid_argument", SWIGTYPE_p_std__invalid_argument); SWIG_fail;
  }
  
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_equal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_equal",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_equal" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator_equal" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator_equal" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  try {
    result = (bool)((swig::SwigPyIterator const *)arg1)->equal((swig::SwigPyIterator const &)*arg2);
  }
  catch(std::invalid_argument &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))),SWIGTYPE_p_std__invalid_argument,SWIG_POINTER_OWN), "std::invalid_argument", SWIGTYPE_p_std__invalid_argument); SWIG_fail;
  }
  
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_copy",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_copy" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->copy();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_next",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_next" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->next();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___next__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator___next__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___next__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->__next__();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_previous(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_previous",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_previous" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->previous();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_advance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_advance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_advance" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_advance" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)(arg1)->advance(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___eq__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___eq__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___eq__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = (bool)((swig::SwigPyIterator const *)arg1)->operator ==((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___ne__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___ne__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___ne__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = (bool)((swig::SwigPyIterator const *)arg1)->operator !=((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___iadd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___iadd__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___iadd__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___iadd__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *) &(arg1)->operator +=(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___isub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___isub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___isub__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___isub__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *) &(arg1)->operator -=(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___add__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___add__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___add__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___add__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->operator +(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___sub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___sub__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->operator -(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ptrdiff_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___sub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___sub__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = ((swig::SwigPyIterator const *)arg1)->operator -((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_swig__SwigPyIterator, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SwigPyIterator___sub____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator___sub____SWIG_0(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *SwigPyIterator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_swig__SwigPyIterator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_StdVectorUnsignedChar_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorUnsignedChar_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorUnsignedChar_iterator" "', argument " "1"" of type '" "std::vector< unsigned char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned char > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_unsigned_SS_char_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorUnsignedChar___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorUnsignedChar___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorUnsignedChar___nonzero__" "', argument " "1"" of type '" "std::vector< unsigned char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned char > * >(argp1);
  result = (bool)std_vector_Sl_unsigned_SS_char_Sg____nonzero__((std::vector< unsigned char > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorUnsignedChar___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorUnsignedChar___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorUnsignedChar___bool__" "', argument " "1"" of type '" "std::vector< unsigned char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned char > * >(argp1);
  result = (bool)std_vector_Sl_unsigned_SS_char_Sg____bool__((std::vector< unsigned char > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorUnsignedChar___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< unsigned char >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorUnsignedChar___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorUnsignedChar___len__" "', argument " "1"" of type '" "std::vector< unsigned char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned char > * >(argp1);
  result = std_vector_Sl_unsigned_SS_char_Sg____len__((std::vector< unsigned char > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorUnsignedChar_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< unsigned char >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorUnsignedChar_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorUnsignedChar_pop" "', argument " "1"" of type '" "std::vector< unsigned char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned char > * >(argp1);
  try {
    result = (std::vector< unsigned char >::value_type)std_vector_Sl_unsigned_SS_char_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorUnsignedChar___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  std::vector< unsigned char >::difference_type arg2 ;
  std::vector< unsigned char >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< unsigned char,std::allocator< unsigned char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StdVectorUnsignedChar___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorUnsignedChar___getslice__" "', argument " "1"" of type '" "std::vector< unsigned char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned char > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StdVectorUnsignedChar___getslice__" "', argument " "2"" of type '" "std::vector< unsigned char >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< unsigned char >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StdVectorUnsignedChar___getslice__" "', argument " "3"" of type '" "std::vector< unsigned char >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< unsigned char >::difference_type >(val3);
  try {
    result = (std::vector< unsigned char,std::allocator< unsigned char > > *)std_vector_Sl_unsigned_SS_char_Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorUnsignedChar___setslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  std::vector< unsigned char >::difference_type arg2 ;
  std::vector< unsigned char >::difference_type arg3 ;
  std::vector< unsigned char,std::allocator< unsigned char > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:StdVectorUnsignedChar___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorUnsignedChar___setslice__" "', argument " "1"" of type '" "std::vector< unsigned char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned char > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StdVectorUnsignedChar___setslice__" "', argument " "2"" of type '" "std::vector< unsigned char >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< unsigned char >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StdVectorUnsignedChar___setslice__" "', argument " "3"" of type '" "std::vector< unsigned char >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< unsigned char >::difference_type >(val3);
  {
    std::vector<unsigned char,std::allocator< unsigned char > > *ptr = (std::vector<unsigned char,std::allocator< unsigned char > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "StdVectorUnsignedChar___setslice__" "', argument " "4"" of type '" "std::vector< unsigned char,std::allocator< unsigned char > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StdVectorUnsignedChar___setslice__" "', argument " "4"" of type '" "std::vector< unsigned char,std::allocator< unsigned char > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_unsigned_SS_char_Sg____setslice__(arg1,arg2,arg3,(std::vector< unsigned char,std::allocator< unsigned char > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorUnsignedChar___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  std::vector< unsigned char >::difference_type arg2 ;
  std::vector< unsigned char >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StdVectorUnsignedChar___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorUnsignedChar___delslice__" "', argument " "1"" of type '" "std::vector< unsigned char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned char > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StdVectorUnsignedChar___delslice__" "', argument " "2"" of type '" "std::vector< unsigned char >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< unsigned char >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StdVectorUnsignedChar___delslice__" "', argument " "3"" of type '" "std::vector< unsigned char >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< unsigned char >::difference_type >(val3);
  try {
    std_vector_Sl_unsigned_SS_char_Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorUnsignedChar___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  std::vector< unsigned char >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StdVectorUnsignedChar___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorUnsignedChar___delitem__" "', argument " "1"" of type '" "std::vector< unsigned char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned char > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StdVectorUnsignedChar___delitem__" "', argument " "2"" of type '" "std::vector< unsigned char >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< unsigned char >::difference_type >(val2);
  try {
    std_vector_Sl_unsigned_SS_char_Sg____delitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorUnsignedChar___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< unsigned char,std::allocator< unsigned char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StdVectorUnsignedChar___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorUnsignedChar___getitem__" "', argument " "1"" of type '" "std::vector< unsigned char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned char > * >(argp1);
  {
    arg2 = (PySliceObject *) obj1;
  }
  try {
    result = (std::vector< unsigned char,std::allocator< unsigned char > > *)std_vector_Sl_unsigned_SS_char_Sg____getitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorUnsignedChar___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< unsigned char,std::allocator< unsigned char > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StdVectorUnsignedChar___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorUnsignedChar___setitem__" "', argument " "1"" of type '" "std::vector< unsigned char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned char > * >(argp1);
  {
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector<unsigned char,std::allocator< unsigned char > > *ptr = (std::vector<unsigned char,std::allocator< unsigned char > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "StdVectorUnsignedChar___setitem__" "', argument " "3"" of type '" "std::vector< unsigned char,std::allocator< unsigned char > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StdVectorUnsignedChar___setitem__" "', argument " "3"" of type '" "std::vector< unsigned char,std::allocator< unsigned char > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_unsigned_SS_char_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< unsigned char,std::allocator< unsigned char > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorUnsignedChar___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StdVectorUnsignedChar___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorUnsignedChar___delitem__" "', argument " "1"" of type '" "std::vector< unsigned char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned char > * >(argp1);
  {
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_vector_Sl_unsigned_SS_char_Sg____delitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorUnsignedChar___delitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<unsigned char,std::allocator< unsigned char > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_StdVectorUnsignedChar___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<unsigned char,std::allocator< unsigned char > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_StdVectorUnsignedChar___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'StdVectorUnsignedChar___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    __delitem__(std::vector< unsigned char > *,std::vector< unsigned char >::difference_type)\n"
    "    __delitem__(std::vector< unsigned char > *,PySliceObject *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorUnsignedChar___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  std::vector< unsigned char >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< unsigned char >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StdVectorUnsignedChar___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorUnsignedChar___getitem__" "', argument " "1"" of type '" "std::vector< unsigned char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned char > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StdVectorUnsignedChar___getitem__" "', argument " "2"" of type '" "std::vector< unsigned char >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< unsigned char >::difference_type >(val2);
  try {
    result = (std::vector< unsigned char >::value_type *) &std_vector_Sl_unsigned_SS_char_Sg____getitem____SWIG_1((std::vector< unsigned char > const *)arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorUnsignedChar___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<unsigned char,std::allocator< unsigned char > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_StdVectorUnsignedChar___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<unsigned char,std::allocator< unsigned char > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_StdVectorUnsignedChar___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'StdVectorUnsignedChar___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    __getitem__(std::vector< unsigned char > *,PySliceObject *)\n"
    "    __getitem__(std::vector< unsigned char > const *,std::vector< unsigned char >::difference_type)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorUnsignedChar___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  std::vector< unsigned char >::difference_type arg2 ;
  std::vector< unsigned char >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< unsigned char >::value_type temp3 ;
  unsigned char val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StdVectorUnsignedChar___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorUnsignedChar___setitem__" "', argument " "1"" of type '" "std::vector< unsigned char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned char > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StdVectorUnsignedChar___setitem__" "', argument " "2"" of type '" "std::vector< unsigned char >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< unsigned char >::difference_type >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_char(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StdVectorUnsignedChar___setitem__" "', argument " "3"" of type '" "std::vector< unsigned char >::value_type""'");
  } 
  temp3 = static_cast< std::vector< unsigned char >::value_type >(val3);
  arg3 = &temp3;
  try {
    std_vector_Sl_unsigned_SS_char_Sg____setitem____SWIG_1(arg1,arg2,(unsigned char const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorUnsignedChar___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<unsigned char,std::allocator< unsigned char > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<unsigned char,std::allocator< unsigned char > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_StdVectorUnsignedChar___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<unsigned char,std::allocator< unsigned char > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_StdVectorUnsignedChar___setitem____SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'StdVectorUnsignedChar___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    __setitem__(std::vector< unsigned char > *,PySliceObject *,std::vector< unsigned char,std::allocator< unsigned char > > const &)\n"
    "    __setitem__(std::vector< unsigned char > *,std::vector< unsigned char >::difference_type,std::vector< unsigned char >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorUnsignedChar_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  std::vector< unsigned char >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< unsigned char >::value_type temp2 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StdVectorUnsignedChar_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorUnsignedChar_append" "', argument " "1"" of type '" "std::vector< unsigned char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned char > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StdVectorUnsignedChar_append" "', argument " "2"" of type '" "std::vector< unsigned char >::value_type""'");
  } 
  temp2 = static_cast< std::vector< unsigned char >::value_type >(val2);
  arg2 = &temp2;
  std_vector_Sl_unsigned_SS_char_Sg__append(arg1,(unsigned char const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StdVectorUnsignedChar__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned char > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_StdVectorUnsignedChar")) SWIG_fail;
  result = (std::vector< unsigned char > *)new std::vector< unsigned char >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StdVectorUnsignedChar__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned char > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< unsigned char > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_StdVectorUnsignedChar",&obj0)) SWIG_fail;
  {
    std::vector<unsigned char,std::allocator< unsigned char > > *ptr = (std::vector<unsigned char,std::allocator< unsigned char > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_StdVectorUnsignedChar" "', argument " "1"" of type '" "std::vector< unsigned char > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_StdVectorUnsignedChar" "', argument " "1"" of type '" "std::vector< unsigned char > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< unsigned char > *)new std::vector< unsigned char >((std::vector< unsigned char > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorUnsignedChar_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorUnsignedChar_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorUnsignedChar_empty" "', argument " "1"" of type '" "std::vector< unsigned char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned char > * >(argp1);
  result = (bool)((std::vector< unsigned char > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorUnsignedChar_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< unsigned char >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorUnsignedChar_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorUnsignedChar_size" "', argument " "1"" of type '" "std::vector< unsigned char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned char > * >(argp1);
  result = ((std::vector< unsigned char > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorUnsignedChar_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorUnsignedChar_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorUnsignedChar_clear" "', argument " "1"" of type '" "std::vector< unsigned char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned char > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorUnsignedChar_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  std::vector< unsigned char > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StdVectorUnsignedChar_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorUnsignedChar_swap" "', argument " "1"" of type '" "std::vector< unsigned char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StdVectorUnsignedChar_swap" "', argument " "2"" of type '" "std::vector< unsigned char > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StdVectorUnsignedChar_swap" "', argument " "2"" of type '" "std::vector< unsigned char > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< unsigned char > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorUnsignedChar_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< unsigned char > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorUnsignedChar_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorUnsignedChar_get_allocator" "', argument " "1"" of type '" "std::vector< unsigned char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned char > * >(argp1);
  result = ((std::vector< unsigned char > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< unsigned char >::allocator_type(static_cast< const std::vector< unsigned char >::allocator_type& >(result))), SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t__allocator_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorUnsignedChar_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< unsigned char >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorUnsignedChar_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorUnsignedChar_begin" "', argument " "1"" of type '" "std::vector< unsigned char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned char > * >(argp1);
  result = ((std::vector< unsigned char > const *)arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< unsigned char >::const_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorUnsignedChar_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< unsigned char >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorUnsignedChar_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorUnsignedChar_end" "', argument " "1"" of type '" "std::vector< unsigned char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned char > * >(argp1);
  result = ((std::vector< unsigned char > const *)arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< unsigned char >::const_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorUnsignedChar_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< unsigned char >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorUnsignedChar_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorUnsignedChar_rbegin" "', argument " "1"" of type '" "std::vector< unsigned char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned char > * >(argp1);
  result = ((std::vector< unsigned char > const *)arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< unsigned char >::const_reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorUnsignedChar_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< unsigned char >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorUnsignedChar_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorUnsignedChar_rend" "', argument " "1"" of type '" "std::vector< unsigned char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned char > * >(argp1);
  result = ((std::vector< unsigned char > const *)arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< unsigned char >::const_reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StdVectorUnsignedChar__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned char >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< unsigned char > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_StdVectorUnsignedChar",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_StdVectorUnsignedChar" "', argument " "1"" of type '" "std::vector< unsigned char >::size_type""'");
  } 
  arg1 = static_cast< std::vector< unsigned char >::size_type >(val1);
  result = (std::vector< unsigned char > *)new std::vector< unsigned char >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorUnsignedChar_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorUnsignedChar_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorUnsignedChar_pop_back" "', argument " "1"" of type '" "std::vector< unsigned char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned char > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorUnsignedChar_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  std::vector< unsigned char >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StdVectorUnsignedChar_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorUnsignedChar_resize" "', argument " "1"" of type '" "std::vector< unsigned char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned char > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StdVectorUnsignedChar_resize" "', argument " "2"" of type '" "std::vector< unsigned char >::size_type""'");
  } 
  arg2 = static_cast< std::vector< unsigned char >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorUnsignedChar_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  std::vector< unsigned char >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< unsigned char >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StdVectorUnsignedChar_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorUnsignedChar_erase" "', argument " "1"" of type '" "std::vector< unsigned char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StdVectorUnsignedChar_erase" "', argument " "2"" of type '" "std::vector< unsigned char >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< unsigned char >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< unsigned char >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StdVectorUnsignedChar_erase" "', argument " "2"" of type '" "std::vector< unsigned char >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< unsigned char >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorUnsignedChar_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  std::vector< unsigned char >::iterator arg2 ;
  std::vector< unsigned char >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< unsigned char >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StdVectorUnsignedChar_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorUnsignedChar_erase" "', argument " "1"" of type '" "std::vector< unsigned char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StdVectorUnsignedChar_erase" "', argument " "2"" of type '" "std::vector< unsigned char >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< unsigned char >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< unsigned char >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StdVectorUnsignedChar_erase" "', argument " "2"" of type '" "std::vector< unsigned char >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StdVectorUnsignedChar_erase" "', argument " "3"" of type '" "std::vector< unsigned char >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< unsigned char >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< unsigned char >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StdVectorUnsignedChar_erase" "', argument " "3"" of type '" "std::vector< unsigned char >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< unsigned char >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorUnsignedChar_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<unsigned char,std::allocator< unsigned char > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< unsigned char >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_StdVectorUnsignedChar_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<unsigned char,std::allocator< unsigned char > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< unsigned char >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< unsigned char >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_StdVectorUnsignedChar_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'StdVectorUnsignedChar_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    erase(std::vector< unsigned char > *,std::vector< unsigned char >::iterator)\n"
    "    erase(std::vector< unsigned char > *,std::vector< unsigned char >::iterator,std::vector< unsigned char >::iterator)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StdVectorUnsignedChar__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned char >::size_type arg1 ;
  std::vector< unsigned char >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< unsigned char >::value_type temp2 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< unsigned char > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_StdVectorUnsignedChar",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_StdVectorUnsignedChar" "', argument " "1"" of type '" "std::vector< unsigned char >::size_type""'");
  } 
  arg1 = static_cast< std::vector< unsigned char >::size_type >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_StdVectorUnsignedChar" "', argument " "2"" of type '" "std::vector< unsigned char >::value_type""'");
  } 
  temp2 = static_cast< std::vector< unsigned char >::value_type >(val2);
  arg2 = &temp2;
  result = (std::vector< unsigned char > *)new std::vector< unsigned char >(arg1,(std::vector< unsigned char >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StdVectorUnsignedChar(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_StdVectorUnsignedChar__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_StdVectorUnsignedChar__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<unsigned char,std::allocator< unsigned char > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_StdVectorUnsignedChar__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_StdVectorUnsignedChar__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_StdVectorUnsignedChar'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< unsigned char >()\n"
    "    std::vector< unsigned char >(std::vector< unsigned char > const &)\n"
    "    std::vector< unsigned char >(std::vector< unsigned char >::size_type)\n"
    "    std::vector< unsigned char >(std::vector< unsigned char >::size_type,std::vector< unsigned char >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorUnsignedChar_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  std::vector< unsigned char >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< unsigned char >::value_type temp2 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StdVectorUnsignedChar_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorUnsignedChar_push_back" "', argument " "1"" of type '" "std::vector< unsigned char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned char > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StdVectorUnsignedChar_push_back" "', argument " "2"" of type '" "std::vector< unsigned char >::value_type""'");
  } 
  temp2 = static_cast< std::vector< unsigned char >::value_type >(val2);
  arg2 = &temp2;
  (arg1)->push_back((std::vector< unsigned char >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorUnsignedChar_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< unsigned char >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorUnsignedChar_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorUnsignedChar_front" "', argument " "1"" of type '" "std::vector< unsigned char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned char > * >(argp1);
  result = (std::vector< unsigned char >::value_type *) &((std::vector< unsigned char > const *)arg1)->front();
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorUnsignedChar_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< unsigned char >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorUnsignedChar_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorUnsignedChar_back" "', argument " "1"" of type '" "std::vector< unsigned char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned char > * >(argp1);
  result = (std::vector< unsigned char >::value_type *) &((std::vector< unsigned char > const *)arg1)->back();
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorUnsignedChar_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  std::vector< unsigned char >::size_type arg2 ;
  std::vector< unsigned char >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< unsigned char >::value_type temp3 ;
  unsigned char val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StdVectorUnsignedChar_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorUnsignedChar_assign" "', argument " "1"" of type '" "std::vector< unsigned char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned char > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StdVectorUnsignedChar_assign" "', argument " "2"" of type '" "std::vector< unsigned char >::size_type""'");
  } 
  arg2 = static_cast< std::vector< unsigned char >::size_type >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_char(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StdVectorUnsignedChar_assign" "', argument " "3"" of type '" "std::vector< unsigned char >::value_type""'");
  } 
  temp3 = static_cast< std::vector< unsigned char >::value_type >(val3);
  arg3 = &temp3;
  (arg1)->assign(arg2,(std::vector< unsigned char >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorUnsignedChar_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  std::vector< unsigned char >::size_type arg2 ;
  std::vector< unsigned char >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< unsigned char >::value_type temp3 ;
  unsigned char val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StdVectorUnsignedChar_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorUnsignedChar_resize" "', argument " "1"" of type '" "std::vector< unsigned char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned char > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StdVectorUnsignedChar_resize" "', argument " "2"" of type '" "std::vector< unsigned char >::size_type""'");
  } 
  arg2 = static_cast< std::vector< unsigned char >::size_type >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_char(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StdVectorUnsignedChar_resize" "', argument " "3"" of type '" "std::vector< unsigned char >::value_type""'");
  } 
  temp3 = static_cast< std::vector< unsigned char >::value_type >(val3);
  arg3 = &temp3;
  (arg1)->resize(arg2,(std::vector< unsigned char >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorUnsignedChar_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<unsigned char,std::allocator< unsigned char > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_StdVectorUnsignedChar_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<unsigned char,std::allocator< unsigned char > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_StdVectorUnsignedChar_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'StdVectorUnsignedChar_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    resize(std::vector< unsigned char > *,std::vector< unsigned char >::size_type)\n"
    "    resize(std::vector< unsigned char > *,std::vector< unsigned char >::size_type,std::vector< unsigned char >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorUnsignedChar_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  std::vector< unsigned char >::iterator arg2 ;
  std::vector< unsigned char >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< unsigned char >::value_type temp3 ;
  unsigned char val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< unsigned char >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StdVectorUnsignedChar_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorUnsignedChar_insert" "', argument " "1"" of type '" "std::vector< unsigned char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StdVectorUnsignedChar_insert" "', argument " "2"" of type '" "std::vector< unsigned char >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< unsigned char >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< unsigned char >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StdVectorUnsignedChar_insert" "', argument " "2"" of type '" "std::vector< unsigned char >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_unsigned_SS_char(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StdVectorUnsignedChar_insert" "', argument " "3"" of type '" "std::vector< unsigned char >::value_type""'");
  } 
  temp3 = static_cast< std::vector< unsigned char >::value_type >(val3);
  arg3 = &temp3;
  result = (arg1)->insert(arg2,(std::vector< unsigned char >::value_type const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< unsigned char >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorUnsignedChar_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  std::vector< unsigned char >::iterator arg2 ;
  std::vector< unsigned char >::size_type arg3 ;
  std::vector< unsigned char >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  std::vector< unsigned char >::value_type temp4 ;
  unsigned char val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:StdVectorUnsignedChar_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorUnsignedChar_insert" "', argument " "1"" of type '" "std::vector< unsigned char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StdVectorUnsignedChar_insert" "', argument " "2"" of type '" "std::vector< unsigned char >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< unsigned char >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< unsigned char >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StdVectorUnsignedChar_insert" "', argument " "2"" of type '" "std::vector< unsigned char >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StdVectorUnsignedChar_insert" "', argument " "3"" of type '" "std::vector< unsigned char >::size_type""'");
  } 
  arg3 = static_cast< std::vector< unsigned char >::size_type >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_char(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "StdVectorUnsignedChar_insert" "', argument " "4"" of type '" "std::vector< unsigned char >::value_type""'");
  } 
  temp4 = static_cast< std::vector< unsigned char >::value_type >(val4);
  arg4 = &temp4;
  (arg1)->insert(arg2,arg3,(std::vector< unsigned char >::value_type const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorUnsignedChar_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<unsigned char,std::allocator< unsigned char > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< unsigned char >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_StdVectorUnsignedChar_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<unsigned char,std::allocator< unsigned char > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< unsigned char >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_char(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_StdVectorUnsignedChar_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'StdVectorUnsignedChar_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    insert(std::vector< unsigned char > *,std::vector< unsigned char >::iterator,std::vector< unsigned char >::value_type const &)\n"
    "    insert(std::vector< unsigned char > *,std::vector< unsigned char >::iterator,std::vector< unsigned char >::size_type,std::vector< unsigned char >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorUnsignedChar_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  std::vector< unsigned char >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StdVectorUnsignedChar_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorUnsignedChar_reserve" "', argument " "1"" of type '" "std::vector< unsigned char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned char > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StdVectorUnsignedChar_reserve" "', argument " "2"" of type '" "std::vector< unsigned char >::size_type""'");
  } 
  arg2 = static_cast< std::vector< unsigned char >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorUnsignedChar_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< unsigned char >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorUnsignedChar_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorUnsignedChar_capacity" "', argument " "1"" of type '" "std::vector< unsigned char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned char > * >(argp1);
  result = ((std::vector< unsigned char > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_StdVectorUnsignedChar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_StdVectorUnsignedChar",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_StdVectorUnsignedChar" "', argument " "1"" of type '" "std::vector< unsigned char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned char > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *StdVectorUnsignedChar_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_StdVectorInt_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorInt_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorInt_iterator" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_int_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorInt___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorInt___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorInt___nonzero__" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = (bool)std_vector_Sl_int_Sg____nonzero__((std::vector< int > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorInt___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorInt___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorInt___bool__" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = (bool)std_vector_Sl_int_Sg____bool__((std::vector< int > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorInt___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorInt___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorInt___len__" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = std_vector_Sl_int_Sg____len__((std::vector< int > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorInt_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorInt_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorInt_pop" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  try {
    result = (std::vector< int >::value_type)std_vector_Sl_int_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorInt___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  std::vector< int >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< int,std::allocator< int > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StdVectorInt___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorInt___getslice__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StdVectorInt___getslice__" "', argument " "2"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StdVectorInt___getslice__" "', argument " "3"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< int >::difference_type >(val3);
  try {
    result = (std::vector< int,std::allocator< int > > *)std_vector_Sl_int_Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorInt___setslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  std::vector< int >::difference_type arg3 ;
  std::vector< int,std::allocator< int > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:StdVectorInt___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorInt___setslice__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StdVectorInt___setslice__" "', argument " "2"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StdVectorInt___setslice__" "', argument " "3"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< int >::difference_type >(val3);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "StdVectorInt___setslice__" "', argument " "4"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StdVectorInt___setslice__" "', argument " "4"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_int_Sg____setslice__(arg1,arg2,arg3,(std::vector< int,std::allocator< int > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorInt___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  std::vector< int >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StdVectorInt___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorInt___delslice__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StdVectorInt___delslice__" "', argument " "2"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StdVectorInt___delslice__" "', argument " "3"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< int >::difference_type >(val3);
  try {
    std_vector_Sl_int_Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorInt___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StdVectorInt___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorInt___delitem__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StdVectorInt___delitem__" "', argument " "2"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  try {
    std_vector_Sl_int_Sg____delitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorInt___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< int,std::allocator< int > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StdVectorInt___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorInt___getitem__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    arg2 = (PySliceObject *) obj1;
  }
  try {
    result = (std::vector< int,std::allocator< int > > *)std_vector_Sl_int_Sg____getitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorInt___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StdVectorInt___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorInt___setitem__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "StdVectorInt___setitem__" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StdVectorInt___setitem__" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_int_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorInt___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StdVectorInt___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorInt___delitem__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_vector_Sl_int_Sg____delitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorInt___delitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_StdVectorInt___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_StdVectorInt___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'StdVectorInt___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    __delitem__(std::vector< int > *,std::vector< int >::difference_type)\n"
    "    __delitem__(std::vector< int > *,PySliceObject *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorInt___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< int >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StdVectorInt___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorInt___getitem__" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StdVectorInt___getitem__" "', argument " "2"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  try {
    result = (std::vector< int >::value_type *) &std_vector_Sl_int_Sg____getitem____SWIG_1((std::vector< int > const *)arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_From_int(static_cast< int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorInt___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_StdVectorInt___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_StdVectorInt___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'StdVectorInt___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    __getitem__(std::vector< int > *,PySliceObject *)\n"
    "    __getitem__(std::vector< int > const *,std::vector< int >::difference_type)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorInt___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< int >::value_type temp3 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StdVectorInt___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorInt___setitem__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StdVectorInt___setitem__" "', argument " "2"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StdVectorInt___setitem__" "', argument " "3"" of type '" "std::vector< int >::value_type""'");
  } 
  temp3 = static_cast< std::vector< int >::value_type >(val3);
  arg3 = &temp3;
  try {
    std_vector_Sl_int_Sg____setitem____SWIG_1(arg1,arg2,(int const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorInt___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_StdVectorInt___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_StdVectorInt___setitem____SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'StdVectorInt___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    __setitem__(std::vector< int > *,PySliceObject *,std::vector< int,std::allocator< int > > const &)\n"
    "    __setitem__(std::vector< int > *,std::vector< int >::difference_type,std::vector< int >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorInt_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int >::value_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StdVectorInt_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorInt_append" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StdVectorInt_append" "', argument " "2"" of type '" "std::vector< int >::value_type""'");
  } 
  temp2 = static_cast< std::vector< int >::value_type >(val2);
  arg2 = &temp2;
  std_vector_Sl_int_Sg__append(arg1,(int const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StdVectorInt__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_StdVectorInt")) SWIG_fail;
  result = (std::vector< int > *)new std::vector< int >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StdVectorInt__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_StdVectorInt",&obj0)) SWIG_fail;
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_StdVectorInt" "', argument " "1"" of type '" "std::vector< int > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_StdVectorInt" "', argument " "1"" of type '" "std::vector< int > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< int > *)new std::vector< int >((std::vector< int > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorInt_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorInt_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorInt_empty" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = (bool)((std::vector< int > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorInt_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorInt_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorInt_size" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = ((std::vector< int > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorInt_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorInt_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorInt_clear" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorInt_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StdVectorInt_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorInt_swap" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StdVectorInt_swap" "', argument " "2"" of type '" "std::vector< int > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StdVectorInt_swap" "', argument " "2"" of type '" "std::vector< int > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< int > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorInt_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< int > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorInt_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorInt_get_allocator" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = ((std::vector< int > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< int >::allocator_type(static_cast< const std::vector< int >::allocator_type& >(result))), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t__allocator_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorInt_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorInt_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorInt_begin" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = ((std::vector< int > const *)arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< int >::const_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorInt_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorInt_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorInt_end" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = ((std::vector< int > const *)arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< int >::const_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorInt_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorInt_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorInt_rbegin" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = ((std::vector< int > const *)arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< int >::const_reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorInt_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorInt_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorInt_rend" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = ((std::vector< int > const *)arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< int >::const_reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StdVectorInt__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_StdVectorInt",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_StdVectorInt" "', argument " "1"" of type '" "std::vector< int >::size_type""'");
  } 
  arg1 = static_cast< std::vector< int >::size_type >(val1);
  result = (std::vector< int > *)new std::vector< int >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorInt_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorInt_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorInt_pop_back" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorInt_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StdVectorInt_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorInt_resize" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StdVectorInt_resize" "', argument " "2"" of type '" "std::vector< int >::size_type""'");
  } 
  arg2 = static_cast< std::vector< int >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorInt_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< int >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StdVectorInt_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorInt_erase" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StdVectorInt_erase" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< int >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StdVectorInt_erase" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< int >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorInt_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::iterator arg2 ;
  std::vector< int >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< int >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StdVectorInt_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorInt_erase" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StdVectorInt_erase" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< int >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StdVectorInt_erase" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StdVectorInt_erase" "', argument " "3"" of type '" "std::vector< int >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< int >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StdVectorInt_erase" "', argument " "3"" of type '" "std::vector< int >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< int >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorInt_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_StdVectorInt_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_StdVectorInt_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'StdVectorInt_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    erase(std::vector< int > *,std::vector< int >::iterator)\n"
    "    erase(std::vector< int > *,std::vector< int >::iterator,std::vector< int >::iterator)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StdVectorInt__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int >::size_type arg1 ;
  std::vector< int >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< int >::value_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_StdVectorInt",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_StdVectorInt" "', argument " "1"" of type '" "std::vector< int >::size_type""'");
  } 
  arg1 = static_cast< std::vector< int >::size_type >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_StdVectorInt" "', argument " "2"" of type '" "std::vector< int >::value_type""'");
  } 
  temp2 = static_cast< std::vector< int >::value_type >(val2);
  arg2 = &temp2;
  result = (std::vector< int > *)new std::vector< int >(arg1,(std::vector< int >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StdVectorInt(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_StdVectorInt__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_StdVectorInt__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_StdVectorInt__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_StdVectorInt__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_StdVectorInt'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< int >()\n"
    "    std::vector< int >(std::vector< int > const &)\n"
    "    std::vector< int >(std::vector< int >::size_type)\n"
    "    std::vector< int >(std::vector< int >::size_type,std::vector< int >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorInt_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int >::value_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StdVectorInt_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorInt_push_back" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StdVectorInt_push_back" "', argument " "2"" of type '" "std::vector< int >::value_type""'");
  } 
  temp2 = static_cast< std::vector< int >::value_type >(val2);
  arg2 = &temp2;
  (arg1)->push_back((std::vector< int >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorInt_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorInt_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorInt_front" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = (std::vector< int >::value_type *) &((std::vector< int > const *)arg1)->front();
  resultobj = SWIG_From_int(static_cast< int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorInt_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorInt_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorInt_back" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = (std::vector< int >::value_type *) &((std::vector< int > const *)arg1)->back();
  resultobj = SWIG_From_int(static_cast< int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorInt_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< int >::value_type temp3 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StdVectorInt_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorInt_assign" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StdVectorInt_assign" "', argument " "2"" of type '" "std::vector< int >::size_type""'");
  } 
  arg2 = static_cast< std::vector< int >::size_type >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StdVectorInt_assign" "', argument " "3"" of type '" "std::vector< int >::value_type""'");
  } 
  temp3 = static_cast< std::vector< int >::value_type >(val3);
  arg3 = &temp3;
  (arg1)->assign(arg2,(std::vector< int >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorInt_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< int >::value_type temp3 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StdVectorInt_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorInt_resize" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StdVectorInt_resize" "', argument " "2"" of type '" "std::vector< int >::size_type""'");
  } 
  arg2 = static_cast< std::vector< int >::size_type >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StdVectorInt_resize" "', argument " "3"" of type '" "std::vector< int >::value_type""'");
  } 
  temp3 = static_cast< std::vector< int >::value_type >(val3);
  arg3 = &temp3;
  (arg1)->resize(arg2,(std::vector< int >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorInt_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_StdVectorInt_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_StdVectorInt_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'StdVectorInt_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    resize(std::vector< int > *,std::vector< int >::size_type)\n"
    "    resize(std::vector< int > *,std::vector< int >::size_type,std::vector< int >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorInt_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::iterator arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< int >::value_type temp3 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< int >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StdVectorInt_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorInt_insert" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StdVectorInt_insert" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< int >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StdVectorInt_insert" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StdVectorInt_insert" "', argument " "3"" of type '" "std::vector< int >::value_type""'");
  } 
  temp3 = static_cast< std::vector< int >::value_type >(val3);
  arg3 = &temp3;
  result = (arg1)->insert(arg2,(std::vector< int >::value_type const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< int >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorInt_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::iterator arg2 ;
  std::vector< int >::size_type arg3 ;
  std::vector< int >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  std::vector< int >::value_type temp4 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:StdVectorInt_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorInt_insert" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StdVectorInt_insert" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< int >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StdVectorInt_insert" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StdVectorInt_insert" "', argument " "3"" of type '" "std::vector< int >::size_type""'");
  } 
  arg3 = static_cast< std::vector< int >::size_type >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "StdVectorInt_insert" "', argument " "4"" of type '" "std::vector< int >::value_type""'");
  } 
  temp4 = static_cast< std::vector< int >::value_type >(val4);
  arg4 = &temp4;
  (arg1)->insert(arg2,arg3,(std::vector< int >::value_type const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorInt_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_StdVectorInt_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_StdVectorInt_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'StdVectorInt_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    insert(std::vector< int > *,std::vector< int >::iterator,std::vector< int >::value_type const &)\n"
    "    insert(std::vector< int > *,std::vector< int >::iterator,std::vector< int >::size_type,std::vector< int >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorInt_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StdVectorInt_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorInt_reserve" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StdVectorInt_reserve" "', argument " "2"" of type '" "std::vector< int >::size_type""'");
  } 
  arg2 = static_cast< std::vector< int >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorInt_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorInt_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorInt_capacity" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = ((std::vector< int > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_StdVectorInt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_StdVectorInt",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_StdVectorInt" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *StdVectorInt_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_StdVectorStdVectorInt_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorStdVectorInt_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorStdVectorInt_iterator" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_std_vector_Sl_int_Sg__Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorStdVectorInt___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorStdVectorInt___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorStdVectorInt___nonzero__" "', argument " "1"" of type '" "std::vector< std::vector< int > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  result = (bool)std_vector_Sl_std_vector_Sl_int_Sg__Sg____nonzero__((std::vector< std::vector< int > > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorStdVectorInt___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorStdVectorInt___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorStdVectorInt___bool__" "', argument " "1"" of type '" "std::vector< std::vector< int > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  result = (bool)std_vector_Sl_std_vector_Sl_int_Sg__Sg____bool__((std::vector< std::vector< int > > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorStdVectorInt___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< int > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorStdVectorInt___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorStdVectorInt___len__" "', argument " "1"" of type '" "std::vector< std::vector< int > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  result = std_vector_Sl_std_vector_Sl_int_Sg__Sg____len__((std::vector< std::vector< int > > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorStdVectorInt_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< int > >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorStdVectorInt_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorStdVectorInt_pop" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  try {
    result = std_vector_Sl_std_vector_Sl_int_Sg__Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = swig::from(static_cast< std::vector<int,std::allocator< int > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorStdVectorInt___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int > >::difference_type arg2 ;
  std::vector< std::vector< int > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StdVectorStdVectorInt___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorStdVectorInt___getslice__" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StdVectorStdVectorInt___getslice__" "', argument " "2"" of type '" "std::vector< std::vector< int > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< int > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StdVectorStdVectorInt___getslice__" "', argument " "3"" of type '" "std::vector< std::vector< int > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< int > >::difference_type >(val3);
  try {
    result = (std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *)std_vector_Sl_std_vector_Sl_int_Sg__Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorStdVectorInt___setslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int > >::difference_type arg2 ;
  std::vector< std::vector< int > >::difference_type arg3 ;
  std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:StdVectorStdVectorInt___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorStdVectorInt___setslice__" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StdVectorStdVectorInt___setslice__" "', argument " "2"" of type '" "std::vector< std::vector< int > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< int > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StdVectorStdVectorInt___setslice__" "', argument " "3"" of type '" "std::vector< std::vector< int > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< int > >::difference_type >(val3);
  {
    std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *ptr = (std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "StdVectorStdVectorInt___setslice__" "', argument " "4"" of type '" "std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StdVectorStdVectorInt___setslice__" "', argument " "4"" of type '" "std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_std_vector_Sl_int_Sg__Sg____setslice__(arg1,arg2,arg3,(std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorStdVectorInt___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int > >::difference_type arg2 ;
  std::vector< std::vector< int > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StdVectorStdVectorInt___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorStdVectorInt___delslice__" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StdVectorStdVectorInt___delslice__" "', argument " "2"" of type '" "std::vector< std::vector< int > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< int > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StdVectorStdVectorInt___delslice__" "', argument " "3"" of type '" "std::vector< std::vector< int > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< int > >::difference_type >(val3);
  try {
    std_vector_Sl_std_vector_Sl_int_Sg__Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorStdVectorInt___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StdVectorStdVectorInt___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorStdVectorInt___delitem__" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StdVectorStdVectorInt___delitem__" "', argument " "2"" of type '" "std::vector< std::vector< int > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< int > >::difference_type >(val2);
  try {
    std_vector_Sl_std_vector_Sl_int_Sg__Sg____delitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorStdVectorInt___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StdVectorStdVectorInt___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorStdVectorInt___getitem__" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  {
    arg2 = (PySliceObject *) obj1;
  }
  try {
    result = (std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *)std_vector_Sl_std_vector_Sl_int_Sg__Sg____getitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorStdVectorInt___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StdVectorStdVectorInt___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorStdVectorInt___setitem__" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  {
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *ptr = (std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "StdVectorStdVectorInt___setitem__" "', argument " "3"" of type '" "std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StdVectorStdVectorInt___setitem__" "', argument " "3"" of type '" "std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_std_vector_Sl_int_Sg__Sg____setitem____SWIG_0(arg1,arg2,(std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorStdVectorInt___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StdVectorStdVectorInt___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorStdVectorInt___delitem__" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  {
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_vector_Sl_std_vector_Sl_int_Sg__Sg____delitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorStdVectorInt___delitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_StdVectorStdVectorInt___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_StdVectorStdVectorInt___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'StdVectorStdVectorInt___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    __delitem__(std::vector< std::vector< int > > *,std::vector< std::vector< int > >::difference_type)\n"
    "    __delitem__(std::vector< std::vector< int > > *,PySliceObject *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorStdVectorInt___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::vector< int > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StdVectorStdVectorInt___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorStdVectorInt___getitem__" "', argument " "1"" of type '" "std::vector< std::vector< int > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StdVectorStdVectorInt___getitem__" "', argument " "2"" of type '" "std::vector< std::vector< int > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< int > >::difference_type >(val2);
  try {
    result = (std::vector< std::vector< int > >::value_type *) &std_vector_Sl_std_vector_Sl_int_Sg__Sg____getitem____SWIG_1((std::vector< std::vector< int > > const *)arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = swig::from(static_cast< std::vector<int,std::allocator< int > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorStdVectorInt___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_StdVectorStdVectorInt___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_StdVectorStdVectorInt___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'StdVectorStdVectorInt___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    __getitem__(std::vector< std::vector< int > > *,PySliceObject *)\n"
    "    __getitem__(std::vector< std::vector< int > > const *,std::vector< std::vector< int > >::difference_type)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorStdVectorInt___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int > >::difference_type arg2 ;
  std::vector< std::vector< int > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StdVectorStdVectorInt___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorStdVectorInt___setitem__" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StdVectorStdVectorInt___setitem__" "', argument " "2"" of type '" "std::vector< std::vector< int > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< int > >::difference_type >(val2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "StdVectorStdVectorInt___setitem__" "', argument " "3"" of type '" "std::vector< std::vector< int > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StdVectorStdVectorInt___setitem__" "', argument " "3"" of type '" "std::vector< std::vector< int > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_std_vector_Sl_int_Sg__Sg____setitem____SWIG_1(arg1,arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorStdVectorInt___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_StdVectorStdVectorInt___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_StdVectorStdVectorInt___setitem____SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'StdVectorStdVectorInt___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    __setitem__(std::vector< std::vector< int > > *,PySliceObject *,std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const &)\n"
    "    __setitem__(std::vector< std::vector< int > > *,std::vector< std::vector< int > >::difference_type,std::vector< std::vector< int > >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorStdVectorInt_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StdVectorStdVectorInt_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorStdVectorInt_append" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StdVectorStdVectorInt_append" "', argument " "2"" of type '" "std::vector< std::vector< int > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StdVectorStdVectorInt_append" "', argument " "2"" of type '" "std::vector< std::vector< int > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  std_vector_Sl_std_vector_Sl_int_Sg__Sg__append(arg1,(std::vector< int,std::allocator< int > > const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StdVectorStdVectorInt__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_StdVectorStdVectorInt")) SWIG_fail;
  result = (std::vector< std::vector< int > > *)new std::vector< std::vector< int > >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StdVectorStdVectorInt__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int,std::allocator< int > > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< int > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_StdVectorStdVectorInt",&obj0)) SWIG_fail;
  {
    std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *ptr = (std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_StdVectorStdVectorInt" "', argument " "1"" of type '" "std::vector< std::vector< int,std::allocator< int > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_StdVectorStdVectorInt" "', argument " "1"" of type '" "std::vector< std::vector< int,std::allocator< int > > > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< std::vector< int > > *)new std::vector< std::vector< int > >((std::vector< std::vector< int,std::allocator< int > > > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorStdVectorInt_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorStdVectorInt_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorStdVectorInt_empty" "', argument " "1"" of type '" "std::vector< std::vector< int > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  result = (bool)((std::vector< std::vector< int > > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorStdVectorInt_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< int > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorStdVectorInt_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorStdVectorInt_size" "', argument " "1"" of type '" "std::vector< std::vector< int > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  result = ((std::vector< std::vector< int > > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorStdVectorInt_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorStdVectorInt_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorStdVectorInt_clear" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorStdVectorInt_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int,std::allocator< int > > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StdVectorStdVectorInt_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorStdVectorInt_swap" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StdVectorStdVectorInt_swap" "', argument " "2"" of type '" "std::vector< std::vector< int,std::allocator< int > > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StdVectorStdVectorInt_swap" "', argument " "2"" of type '" "std::vector< std::vector< int,std::allocator< int > > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::vector< int,std::allocator< int > > > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorStdVectorInt_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< std::vector< int,std::allocator< int > > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorStdVectorInt_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorStdVectorInt_get_allocator" "', argument " "1"" of type '" "std::vector< std::vector< int > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  result = ((std::vector< std::vector< int > > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< std::vector< int > >::allocator_type(static_cast< const std::vector< std::vector< int > >::allocator_type& >(result))), SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t__allocator_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorStdVectorInt_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< int > >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorStdVectorInt_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorStdVectorInt_begin" "', argument " "1"" of type '" "std::vector< std::vector< int > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  result = ((std::vector< std::vector< int > > const *)arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< int > >::const_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorStdVectorInt_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< int > >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorStdVectorInt_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorStdVectorInt_end" "', argument " "1"" of type '" "std::vector< std::vector< int > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  result = ((std::vector< std::vector< int > > const *)arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< int > >::const_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorStdVectorInt_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< int > >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorStdVectorInt_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorStdVectorInt_rbegin" "', argument " "1"" of type '" "std::vector< std::vector< int > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  result = ((std::vector< std::vector< int > > const *)arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< int > >::const_reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorStdVectorInt_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< int > >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorStdVectorInt_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorStdVectorInt_rend" "', argument " "1"" of type '" "std::vector< std::vector< int > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  result = ((std::vector< std::vector< int > > const *)arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< int > >::const_reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StdVectorStdVectorInt__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< int > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_StdVectorStdVectorInt",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_StdVectorStdVectorInt" "', argument " "1"" of type '" "std::vector< std::vector< int > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::vector< int > >::size_type >(val1);
  result = (std::vector< std::vector< int > > *)new std::vector< std::vector< int > >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorStdVectorInt_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorStdVectorInt_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorStdVectorInt_pop_back" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorStdVectorInt_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StdVectorStdVectorInt_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorStdVectorInt_resize" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StdVectorStdVectorInt_resize" "', argument " "2"" of type '" "std::vector< std::vector< int > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< int > >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorStdVectorInt_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int > >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::vector< int > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StdVectorStdVectorInt_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorStdVectorInt_erase" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StdVectorStdVectorInt_erase" "', argument " "2"" of type '" "std::vector< std::vector< int > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::vector< int > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< int > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StdVectorStdVectorInt_erase" "', argument " "2"" of type '" "std::vector< std::vector< int > >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< int > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorStdVectorInt_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int > >::iterator arg2 ;
  std::vector< std::vector< int > >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< std::vector< int > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StdVectorStdVectorInt_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorStdVectorInt_erase" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StdVectorStdVectorInt_erase" "', argument " "2"" of type '" "std::vector< std::vector< int > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::vector< int > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< int > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StdVectorStdVectorInt_erase" "', argument " "2"" of type '" "std::vector< std::vector< int > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StdVectorStdVectorInt_erase" "', argument " "3"" of type '" "std::vector< std::vector< int > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::vector< int > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< int > >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StdVectorStdVectorInt_erase" "', argument " "3"" of type '" "std::vector< std::vector< int > >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< int > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorStdVectorInt_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< int > >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_StdVectorStdVectorInt_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< int > >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< int > >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_StdVectorStdVectorInt_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'StdVectorStdVectorInt_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    erase(std::vector< std::vector< int > > *,std::vector< std::vector< int > >::iterator)\n"
    "    erase(std::vector< std::vector< int > > *,std::vector< std::vector< int > >::iterator,std::vector< std::vector< int > >::iterator)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StdVectorStdVectorInt__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > >::size_type arg1 ;
  std::vector< std::vector< int > >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::vector< int > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_StdVectorStdVectorInt",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_StdVectorStdVectorInt" "', argument " "1"" of type '" "std::vector< std::vector< int > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::vector< int > >::size_type >(val1);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_StdVectorStdVectorInt" "', argument " "2"" of type '" "std::vector< std::vector< int > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_StdVectorStdVectorInt" "', argument " "2"" of type '" "std::vector< std::vector< int > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (std::vector< std::vector< int > > *)new std::vector< std::vector< int > >(arg1,(std::vector< std::vector< int > >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StdVectorStdVectorInt(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_StdVectorStdVectorInt__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_StdVectorStdVectorInt__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_StdVectorStdVectorInt__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector<int,std::allocator< int > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_StdVectorStdVectorInt__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_StdVectorStdVectorInt'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< int > >()\n"
    "    std::vector< std::vector< int > >(std::vector< std::vector< int,std::allocator< int > > > const &)\n"
    "    std::vector< std::vector< int > >(std::vector< std::vector< int > >::size_type)\n"
    "    std::vector< std::vector< int > >(std::vector< std::vector< int > >::size_type,std::vector< std::vector< int > >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorStdVectorInt_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StdVectorStdVectorInt_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorStdVectorInt_push_back" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StdVectorStdVectorInt_push_back" "', argument " "2"" of type '" "std::vector< std::vector< int > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StdVectorStdVectorInt_push_back" "', argument " "2"" of type '" "std::vector< std::vector< int > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->push_back((std::vector< std::vector< int > >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorStdVectorInt_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< int > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorStdVectorInt_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorStdVectorInt_front" "', argument " "1"" of type '" "std::vector< std::vector< int > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  result = (std::vector< std::vector< int > >::value_type *) &((std::vector< std::vector< int > > const *)arg1)->front();
  resultobj = swig::from(static_cast< std::vector<int,std::allocator< int > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorStdVectorInt_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< int > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorStdVectorInt_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorStdVectorInt_back" "', argument " "1"" of type '" "std::vector< std::vector< int > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  result = (std::vector< std::vector< int > >::value_type *) &((std::vector< std::vector< int > > const *)arg1)->back();
  resultobj = swig::from(static_cast< std::vector<int,std::allocator< int > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorStdVectorInt_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int > >::size_type arg2 ;
  std::vector< std::vector< int > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StdVectorStdVectorInt_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorStdVectorInt_assign" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StdVectorStdVectorInt_assign" "', argument " "2"" of type '" "std::vector< std::vector< int > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< int > >::size_type >(val2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "StdVectorStdVectorInt_assign" "', argument " "3"" of type '" "std::vector< std::vector< int > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StdVectorStdVectorInt_assign" "', argument " "3"" of type '" "std::vector< std::vector< int > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->assign(arg2,(std::vector< std::vector< int > >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorStdVectorInt_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int > >::size_type arg2 ;
  std::vector< std::vector< int > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StdVectorStdVectorInt_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorStdVectorInt_resize" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StdVectorStdVectorInt_resize" "', argument " "2"" of type '" "std::vector< std::vector< int > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< int > >::size_type >(val2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "StdVectorStdVectorInt_resize" "', argument " "3"" of type '" "std::vector< std::vector< int > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StdVectorStdVectorInt_resize" "', argument " "3"" of type '" "std::vector< std::vector< int > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->resize(arg2,(std::vector< std::vector< int > >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorStdVectorInt_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_StdVectorStdVectorInt_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_StdVectorStdVectorInt_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'StdVectorStdVectorInt_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    resize(std::vector< std::vector< int > > *,std::vector< std::vector< int > >::size_type)\n"
    "    resize(std::vector< std::vector< int > > *,std::vector< std::vector< int > >::size_type,std::vector< std::vector< int > >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorStdVectorInt_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int > >::iterator arg2 ;
  std::vector< std::vector< int > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< std::vector< int > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StdVectorStdVectorInt_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorStdVectorInt_insert" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StdVectorStdVectorInt_insert" "', argument " "2"" of type '" "std::vector< std::vector< int > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::vector< int > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< int > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StdVectorStdVectorInt_insert" "', argument " "2"" of type '" "std::vector< std::vector< int > >::iterator""'");
    }
  }
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "StdVectorStdVectorInt_insert" "', argument " "3"" of type '" "std::vector< std::vector< int > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StdVectorStdVectorInt_insert" "', argument " "3"" of type '" "std::vector< std::vector< int > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->insert(arg2,(std::vector< std::vector< int > >::value_type const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< int > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorStdVectorInt_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int > >::iterator arg2 ;
  std::vector< std::vector< int > >::size_type arg3 ;
  std::vector< std::vector< int > >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:StdVectorStdVectorInt_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorStdVectorInt_insert" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StdVectorStdVectorInt_insert" "', argument " "2"" of type '" "std::vector< std::vector< int > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::vector< int > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< int > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StdVectorStdVectorInt_insert" "', argument " "2"" of type '" "std::vector< std::vector< int > >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StdVectorStdVectorInt_insert" "', argument " "3"" of type '" "std::vector< std::vector< int > >::size_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< int > >::size_type >(val3);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "StdVectorStdVectorInt_insert" "', argument " "4"" of type '" "std::vector< std::vector< int > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StdVectorStdVectorInt_insert" "', argument " "4"" of type '" "std::vector< std::vector< int > >::value_type const &""'"); 
    }
    arg4 = ptr;
  }
  (arg1)->insert(arg2,arg3,(std::vector< std::vector< int > >::value_type const &)*arg4);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorStdVectorInt_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< int > >::iterator > *>(iter) != 0));
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_StdVectorStdVectorInt_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< int > >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<int,std::allocator< int > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_StdVectorStdVectorInt_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'StdVectorStdVectorInt_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    insert(std::vector< std::vector< int > > *,std::vector< std::vector< int > >::iterator,std::vector< std::vector< int > >::value_type const &)\n"
    "    insert(std::vector< std::vector< int > > *,std::vector< std::vector< int > >::iterator,std::vector< std::vector< int > >::size_type,std::vector< std::vector< int > >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorStdVectorInt_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StdVectorStdVectorInt_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorStdVectorInt_reserve" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StdVectorStdVectorInt_reserve" "', argument " "2"" of type '" "std::vector< std::vector< int > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< int > >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorStdVectorInt_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< int > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorStdVectorInt_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorStdVectorInt_capacity" "', argument " "1"" of type '" "std::vector< std::vector< int > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  result = ((std::vector< std::vector< int > > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_StdVectorStdVectorInt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_StdVectorStdVectorInt",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_StdVectorStdVectorInt" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *StdVectorStdVectorInt_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_StdVectorFloat_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorFloat_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorFloat_iterator" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_float_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorFloat___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorFloat___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorFloat___nonzero__" "', argument " "1"" of type '" "std::vector< float > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  result = (bool)std_vector_Sl_float_Sg____nonzero__((std::vector< float > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorFloat___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorFloat___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorFloat___bool__" "', argument " "1"" of type '" "std::vector< float > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  result = (bool)std_vector_Sl_float_Sg____bool__((std::vector< float > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorFloat___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorFloat___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorFloat___len__" "', argument " "1"" of type '" "std::vector< float > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  result = std_vector_Sl_float_Sg____len__((std::vector< float > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorFloat_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorFloat_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorFloat_pop" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  try {
    result = (std::vector< float >::value_type)std_vector_Sl_float_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorFloat___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::difference_type arg2 ;
  std::vector< float >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< float,std::allocator< float > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StdVectorFloat___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorFloat___getslice__" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StdVectorFloat___getslice__" "', argument " "2"" of type '" "std::vector< float >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< float >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StdVectorFloat___getslice__" "', argument " "3"" of type '" "std::vector< float >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< float >::difference_type >(val3);
  try {
    result = (std::vector< float,std::allocator< float > > *)std_vector_Sl_float_Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorFloat___setslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::difference_type arg2 ;
  std::vector< float >::difference_type arg3 ;
  std::vector< float,std::allocator< float > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:StdVectorFloat___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorFloat___setslice__" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StdVectorFloat___setslice__" "', argument " "2"" of type '" "std::vector< float >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< float >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StdVectorFloat___setslice__" "', argument " "3"" of type '" "std::vector< float >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< float >::difference_type >(val3);
  {
    std::vector<float,std::allocator< float > > *ptr = (std::vector<float,std::allocator< float > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "StdVectorFloat___setslice__" "', argument " "4"" of type '" "std::vector< float,std::allocator< float > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StdVectorFloat___setslice__" "', argument " "4"" of type '" "std::vector< float,std::allocator< float > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_float_Sg____setslice__(arg1,arg2,arg3,(std::vector< float,std::allocator< float > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorFloat___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::difference_type arg2 ;
  std::vector< float >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StdVectorFloat___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorFloat___delslice__" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StdVectorFloat___delslice__" "', argument " "2"" of type '" "std::vector< float >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< float >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StdVectorFloat___delslice__" "', argument " "3"" of type '" "std::vector< float >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< float >::difference_type >(val3);
  try {
    std_vector_Sl_float_Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorFloat___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StdVectorFloat___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorFloat___delitem__" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StdVectorFloat___delitem__" "', argument " "2"" of type '" "std::vector< float >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< float >::difference_type >(val2);
  try {
    std_vector_Sl_float_Sg____delitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorFloat___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< float,std::allocator< float > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StdVectorFloat___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorFloat___getitem__" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  {
    arg2 = (PySliceObject *) obj1;
  }
  try {
    result = (std::vector< float,std::allocator< float > > *)std_vector_Sl_float_Sg____getitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorFloat___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< float,std::allocator< float > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StdVectorFloat___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorFloat___setitem__" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  {
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector<float,std::allocator< float > > *ptr = (std::vector<float,std::allocator< float > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "StdVectorFloat___setitem__" "', argument " "3"" of type '" "std::vector< float,std::allocator< float > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StdVectorFloat___setitem__" "', argument " "3"" of type '" "std::vector< float,std::allocator< float > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_float_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< float,std::allocator< float > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorFloat___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StdVectorFloat___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorFloat___delitem__" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  {
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_vector_Sl_float_Sg____delitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorFloat___delitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<float,std::allocator< float > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_StdVectorFloat___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<float,std::allocator< float > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_StdVectorFloat___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'StdVectorFloat___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    __delitem__(std::vector< float > *,std::vector< float >::difference_type)\n"
    "    __delitem__(std::vector< float > *,PySliceObject *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorFloat___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< float >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StdVectorFloat___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorFloat___getitem__" "', argument " "1"" of type '" "std::vector< float > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StdVectorFloat___getitem__" "', argument " "2"" of type '" "std::vector< float >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< float >::difference_type >(val2);
  try {
    result = (std::vector< float >::value_type *) &std_vector_Sl_float_Sg____getitem____SWIG_1((std::vector< float > const *)arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_From_float(static_cast< float >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorFloat___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<float,std::allocator< float > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_StdVectorFloat___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<float,std::allocator< float > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_StdVectorFloat___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'StdVectorFloat___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    __getitem__(std::vector< float > *,PySliceObject *)\n"
    "    __getitem__(std::vector< float > const *,std::vector< float >::difference_type)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorFloat___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::difference_type arg2 ;
  std::vector< float >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< float >::value_type temp3 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StdVectorFloat___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorFloat___setitem__" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StdVectorFloat___setitem__" "', argument " "2"" of type '" "std::vector< float >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< float >::difference_type >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StdVectorFloat___setitem__" "', argument " "3"" of type '" "std::vector< float >::value_type""'");
  } 
  temp3 = static_cast< std::vector< float >::value_type >(val3);
  arg3 = &temp3;
  try {
    std_vector_Sl_float_Sg____setitem____SWIG_1(arg1,arg2,(float const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorFloat___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<float,std::allocator< float > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<float,std::allocator< float > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_StdVectorFloat___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<float,std::allocator< float > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_StdVectorFloat___setitem____SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'StdVectorFloat___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    __setitem__(std::vector< float > *,PySliceObject *,std::vector< float,std::allocator< float > > const &)\n"
    "    __setitem__(std::vector< float > *,std::vector< float >::difference_type,std::vector< float >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorFloat_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< float >::value_type temp2 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StdVectorFloat_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorFloat_append" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StdVectorFloat_append" "', argument " "2"" of type '" "std::vector< float >::value_type""'");
  } 
  temp2 = static_cast< std::vector< float >::value_type >(val2);
  arg2 = &temp2;
  std_vector_Sl_float_Sg__append(arg1,(float const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StdVectorFloat__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_StdVectorFloat")) SWIG_fail;
  result = (std::vector< float > *)new std::vector< float >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StdVectorFloat__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< float > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_StdVectorFloat",&obj0)) SWIG_fail;
  {
    std::vector<float,std::allocator< float > > *ptr = (std::vector<float,std::allocator< float > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_StdVectorFloat" "', argument " "1"" of type '" "std::vector< float > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_StdVectorFloat" "', argument " "1"" of type '" "std::vector< float > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< float > *)new std::vector< float >((std::vector< float > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorFloat_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorFloat_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorFloat_empty" "', argument " "1"" of type '" "std::vector< float > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  result = (bool)((std::vector< float > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorFloat_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorFloat_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorFloat_size" "', argument " "1"" of type '" "std::vector< float > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  result = ((std::vector< float > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorFloat_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorFloat_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorFloat_clear" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorFloat_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StdVectorFloat_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorFloat_swap" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StdVectorFloat_swap" "', argument " "2"" of type '" "std::vector< float > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StdVectorFloat_swap" "', argument " "2"" of type '" "std::vector< float > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< float > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorFloat_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< float > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorFloat_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorFloat_get_allocator" "', argument " "1"" of type '" "std::vector< float > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  result = ((std::vector< float > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< float >::allocator_type(static_cast< const std::vector< float >::allocator_type& >(result))), SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t__allocator_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorFloat_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorFloat_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorFloat_begin" "', argument " "1"" of type '" "std::vector< float > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  result = ((std::vector< float > const *)arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< float >::const_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorFloat_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorFloat_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorFloat_end" "', argument " "1"" of type '" "std::vector< float > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  result = ((std::vector< float > const *)arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< float >::const_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorFloat_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorFloat_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorFloat_rbegin" "', argument " "1"" of type '" "std::vector< float > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  result = ((std::vector< float > const *)arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< float >::const_reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorFloat_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorFloat_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorFloat_rend" "', argument " "1"" of type '" "std::vector< float > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  result = ((std::vector< float > const *)arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< float >::const_reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StdVectorFloat__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_StdVectorFloat",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_StdVectorFloat" "', argument " "1"" of type '" "std::vector< float >::size_type""'");
  } 
  arg1 = static_cast< std::vector< float >::size_type >(val1);
  result = (std::vector< float > *)new std::vector< float >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorFloat_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorFloat_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorFloat_pop_back" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorFloat_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StdVectorFloat_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorFloat_resize" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StdVectorFloat_resize" "', argument " "2"" of type '" "std::vector< float >::size_type""'");
  } 
  arg2 = static_cast< std::vector< float >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorFloat_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< float >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StdVectorFloat_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorFloat_erase" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StdVectorFloat_erase" "', argument " "2"" of type '" "std::vector< float >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< float >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< float >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StdVectorFloat_erase" "', argument " "2"" of type '" "std::vector< float >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< float >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorFloat_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::iterator arg2 ;
  std::vector< float >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< float >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StdVectorFloat_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorFloat_erase" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StdVectorFloat_erase" "', argument " "2"" of type '" "std::vector< float >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< float >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< float >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StdVectorFloat_erase" "', argument " "2"" of type '" "std::vector< float >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StdVectorFloat_erase" "', argument " "3"" of type '" "std::vector< float >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< float >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< float >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StdVectorFloat_erase" "', argument " "3"" of type '" "std::vector< float >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< float >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorFloat_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<float,std::allocator< float > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< float >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_StdVectorFloat_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<float,std::allocator< float > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< float >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< float >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_StdVectorFloat_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'StdVectorFloat_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    erase(std::vector< float > *,std::vector< float >::iterator)\n"
    "    erase(std::vector< float > *,std::vector< float >::iterator,std::vector< float >::iterator)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StdVectorFloat__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float >::size_type arg1 ;
  std::vector< float >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< float >::value_type temp2 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< float > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_StdVectorFloat",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_StdVectorFloat" "', argument " "1"" of type '" "std::vector< float >::size_type""'");
  } 
  arg1 = static_cast< std::vector< float >::size_type >(val1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_StdVectorFloat" "', argument " "2"" of type '" "std::vector< float >::value_type""'");
  } 
  temp2 = static_cast< std::vector< float >::value_type >(val2);
  arg2 = &temp2;
  result = (std::vector< float > *)new std::vector< float >(arg1,(std::vector< float >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StdVectorFloat(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_StdVectorFloat__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_StdVectorFloat__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<float,std::allocator< float > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_StdVectorFloat__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_StdVectorFloat__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_StdVectorFloat'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< float >()\n"
    "    std::vector< float >(std::vector< float > const &)\n"
    "    std::vector< float >(std::vector< float >::size_type)\n"
    "    std::vector< float >(std::vector< float >::size_type,std::vector< float >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorFloat_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< float >::value_type temp2 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StdVectorFloat_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorFloat_push_back" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StdVectorFloat_push_back" "', argument " "2"" of type '" "std::vector< float >::value_type""'");
  } 
  temp2 = static_cast< std::vector< float >::value_type >(val2);
  arg2 = &temp2;
  (arg1)->push_back((std::vector< float >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorFloat_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorFloat_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorFloat_front" "', argument " "1"" of type '" "std::vector< float > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  result = (std::vector< float >::value_type *) &((std::vector< float > const *)arg1)->front();
  resultobj = SWIG_From_float(static_cast< float >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorFloat_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorFloat_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorFloat_back" "', argument " "1"" of type '" "std::vector< float > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  result = (std::vector< float >::value_type *) &((std::vector< float > const *)arg1)->back();
  resultobj = SWIG_From_float(static_cast< float >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorFloat_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::size_type arg2 ;
  std::vector< float >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< float >::value_type temp3 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StdVectorFloat_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorFloat_assign" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StdVectorFloat_assign" "', argument " "2"" of type '" "std::vector< float >::size_type""'");
  } 
  arg2 = static_cast< std::vector< float >::size_type >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StdVectorFloat_assign" "', argument " "3"" of type '" "std::vector< float >::value_type""'");
  } 
  temp3 = static_cast< std::vector< float >::value_type >(val3);
  arg3 = &temp3;
  (arg1)->assign(arg2,(std::vector< float >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorFloat_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::size_type arg2 ;
  std::vector< float >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< float >::value_type temp3 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StdVectorFloat_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorFloat_resize" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StdVectorFloat_resize" "', argument " "2"" of type '" "std::vector< float >::size_type""'");
  } 
  arg2 = static_cast< std::vector< float >::size_type >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StdVectorFloat_resize" "', argument " "3"" of type '" "std::vector< float >::value_type""'");
  } 
  temp3 = static_cast< std::vector< float >::value_type >(val3);
  arg3 = &temp3;
  (arg1)->resize(arg2,(std::vector< float >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorFloat_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<float,std::allocator< float > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_StdVectorFloat_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<float,std::allocator< float > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_StdVectorFloat_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'StdVectorFloat_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    resize(std::vector< float > *,std::vector< float >::size_type)\n"
    "    resize(std::vector< float > *,std::vector< float >::size_type,std::vector< float >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorFloat_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::iterator arg2 ;
  std::vector< float >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< float >::value_type temp3 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< float >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StdVectorFloat_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorFloat_insert" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StdVectorFloat_insert" "', argument " "2"" of type '" "std::vector< float >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< float >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< float >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StdVectorFloat_insert" "', argument " "2"" of type '" "std::vector< float >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StdVectorFloat_insert" "', argument " "3"" of type '" "std::vector< float >::value_type""'");
  } 
  temp3 = static_cast< std::vector< float >::value_type >(val3);
  arg3 = &temp3;
  result = (arg1)->insert(arg2,(std::vector< float >::value_type const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< float >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorFloat_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::iterator arg2 ;
  std::vector< float >::size_type arg3 ;
  std::vector< float >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  std::vector< float >::value_type temp4 ;
  float val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:StdVectorFloat_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorFloat_insert" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StdVectorFloat_insert" "', argument " "2"" of type '" "std::vector< float >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< float >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< float >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StdVectorFloat_insert" "', argument " "2"" of type '" "std::vector< float >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StdVectorFloat_insert" "', argument " "3"" of type '" "std::vector< float >::size_type""'");
  } 
  arg3 = static_cast< std::vector< float >::size_type >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "StdVectorFloat_insert" "', argument " "4"" of type '" "std::vector< float >::value_type""'");
  } 
  temp4 = static_cast< std::vector< float >::value_type >(val4);
  arg4 = &temp4;
  (arg1)->insert(arg2,arg3,(std::vector< float >::value_type const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorFloat_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<float,std::allocator< float > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< float >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_StdVectorFloat_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<float,std::allocator< float > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< float >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_StdVectorFloat_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'StdVectorFloat_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    insert(std::vector< float > *,std::vector< float >::iterator,std::vector< float >::value_type const &)\n"
    "    insert(std::vector< float > *,std::vector< float >::iterator,std::vector< float >::size_type,std::vector< float >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorFloat_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StdVectorFloat_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorFloat_reserve" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StdVectorFloat_reserve" "', argument " "2"" of type '" "std::vector< float >::size_type""'");
  } 
  arg2 = static_cast< std::vector< float >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorFloat_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorFloat_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorFloat_capacity" "', argument " "1"" of type '" "std::vector< float > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  result = ((std::vector< float > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_StdVectorFloat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_StdVectorFloat",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_StdVectorFloat" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *StdVectorFloat_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_StdVectorString_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorString_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorString_iterator" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_std_string_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorString___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorString___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorString___nonzero__" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = (bool)std_vector_Sl_std_string_Sg____nonzero__((std::vector< std::string > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorString___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorString___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorString___bool__" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = (bool)std_vector_Sl_std_string_Sg____bool__((std::vector< std::string > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorString___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorString___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorString___len__" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = std_vector_Sl_std_string_Sg____len__((std::vector< std::string > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorString_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorString_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorString_pop" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  try {
    result = std_vector_Sl_std_string_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorString___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  std::vector< std::string >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StdVectorString___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorString___getslice__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StdVectorString___getslice__" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StdVectorString___getslice__" "', argument " "3"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::string >::difference_type >(val3);
  try {
    result = (std::vector< std::string,std::allocator< std::string > > *)std_vector_Sl_std_string_Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorString___setslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  std::vector< std::string >::difference_type arg3 ;
  std::vector< std::string,std::allocator< std::string > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:StdVectorString___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorString___setslice__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StdVectorString___setslice__" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StdVectorString___setslice__" "', argument " "3"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::string >::difference_type >(val3);
  {
    std::vector<std::string,std::allocator< std::string > > *ptr = (std::vector<std::string,std::allocator< std::string > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "StdVectorString___setslice__" "', argument " "4"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StdVectorString___setslice__" "', argument " "4"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_std_string_Sg____setslice__(arg1,arg2,arg3,(std::vector< std::string,std::allocator< std::string > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorString___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  std::vector< std::string >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StdVectorString___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorString___delslice__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StdVectorString___delslice__" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StdVectorString___delslice__" "', argument " "3"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::string >::difference_type >(val3);
  try {
    std_vector_Sl_std_string_Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorString___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StdVectorString___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorString___delitem__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StdVectorString___delitem__" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  try {
    std_vector_Sl_std_string_Sg____delitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorString___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StdVectorString___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorString___getitem__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    arg2 = (PySliceObject *) obj1;
  }
  try {
    result = (std::vector< std::string,std::allocator< std::string > > *)std_vector_Sl_std_string_Sg____getitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorString___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StdVectorString___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorString___setitem__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector<std::string,std::allocator< std::string > > *ptr = (std::vector<std::string,std::allocator< std::string > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "StdVectorString___setitem__" "', argument " "3"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StdVectorString___setitem__" "', argument " "3"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_std_string_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< std::string,std::allocator< std::string > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorString___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StdVectorString___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorString___delitem__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_vector_Sl_std_string_Sg____delitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorString___delitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_StdVectorString___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_StdVectorString___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'StdVectorString___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    __delitem__(std::vector< std::string > *,std::vector< std::string >::difference_type)\n"
    "    __delitem__(std::vector< std::string > *,PySliceObject *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorString___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::string >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StdVectorString___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorString___getitem__" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StdVectorString___getitem__" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  try {
    result = (std::vector< std::string >::value_type *) &std_vector_Sl_std_string_Sg____getitem____SWIG_1((std::vector< std::string > const *)arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorString___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_StdVectorString___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_StdVectorString___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'StdVectorString___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    __getitem__(std::vector< std::string > *,PySliceObject *)\n"
    "    __getitem__(std::vector< std::string > const *,std::vector< std::string >::difference_type)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorString___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StdVectorString___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorString___setitem__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StdVectorString___setitem__" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "StdVectorString___setitem__" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StdVectorString___setitem__" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_std_string_Sg____setitem____SWIG_1(arg1,arg2,(std::string const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorString___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<std::string,std::allocator< std::string > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_StdVectorString___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_StdVectorString___setitem____SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'StdVectorString___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    __setitem__(std::vector< std::string > *,PySliceObject *,std::vector< std::string,std::allocator< std::string > > const &)\n"
    "    __setitem__(std::vector< std::string > *,std::vector< std::string >::difference_type,std::vector< std::string >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorString_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StdVectorString_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorString_append" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StdVectorString_append" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StdVectorString_append" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  std_vector_Sl_std_string_Sg__append(arg1,(std::string const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StdVectorString__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_StdVectorString")) SWIG_fail;
  result = (std::vector< std::string > *)new std::vector< std::string >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StdVectorString__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_StdVectorString",&obj0)) SWIG_fail;
  {
    std::vector<std::string,std::allocator< std::string > > *ptr = (std::vector<std::string,std::allocator< std::string > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_StdVectorString" "', argument " "1"" of type '" "std::vector< std::string > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_StdVectorString" "', argument " "1"" of type '" "std::vector< std::string > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< std::string > *)new std::vector< std::string >((std::vector< std::string > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorString_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorString_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorString_empty" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = (bool)((std::vector< std::string > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorString_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorString_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorString_size" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = ((std::vector< std::string > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorString_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorString_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorString_clear" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorString_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StdVectorString_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorString_swap" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StdVectorString_swap" "', argument " "2"" of type '" "std::vector< std::string > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StdVectorString_swap" "', argument " "2"" of type '" "std::vector< std::string > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::string > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorString_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< std::string > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorString_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorString_get_allocator" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = ((std::vector< std::string > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< std::string >::allocator_type(static_cast< const std::vector< std::string >::allocator_type& >(result))), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t__allocator_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorString_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorString_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorString_begin" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = ((std::vector< std::string > const *)arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::string >::const_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorString_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorString_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorString_end" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = ((std::vector< std::string > const *)arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::string >::const_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorString_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorString_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorString_rbegin" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = ((std::vector< std::string > const *)arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::string >::const_reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorString_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorString_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorString_rend" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = ((std::vector< std::string > const *)arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::string >::const_reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StdVectorString__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_StdVectorString",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_StdVectorString" "', argument " "1"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::string >::size_type >(val1);
  result = (std::vector< std::string > *)new std::vector< std::string >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorString_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorString_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorString_pop_back" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorString_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StdVectorString_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorString_resize" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StdVectorString_resize" "', argument " "2"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorString_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::string >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StdVectorString_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorString_erase" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StdVectorString_erase" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::string >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StdVectorString_erase" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::string >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorString_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::iterator arg2 ;
  std::vector< std::string >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< std::string >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StdVectorString_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorString_erase" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StdVectorString_erase" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::string >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StdVectorString_erase" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StdVectorString_erase" "', argument " "3"" of type '" "std::vector< std::string >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::string >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StdVectorString_erase" "', argument " "3"" of type '" "std::vector< std::string >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::string >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorString_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_StdVectorString_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_StdVectorString_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'StdVectorString_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    erase(std::vector< std::string > *,std::vector< std::string >::iterator)\n"
    "    erase(std::vector< std::string > *,std::vector< std::string >::iterator,std::vector< std::string >::iterator)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StdVectorString__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string >::size_type arg1 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_StdVectorString",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_StdVectorString" "', argument " "1"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::string >::size_type >(val1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_StdVectorString" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_StdVectorString" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (std::vector< std::string > *)new std::vector< std::string >(arg1,(std::vector< std::string >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StdVectorString(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_StdVectorString__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_StdVectorString__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_StdVectorString__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_StdVectorString__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_StdVectorString'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::string >()\n"
    "    std::vector< std::string >(std::vector< std::string > const &)\n"
    "    std::vector< std::string >(std::vector< std::string >::size_type)\n"
    "    std::vector< std::string >(std::vector< std::string >::size_type,std::vector< std::string >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorString_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StdVectorString_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorString_push_back" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StdVectorString_push_back" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StdVectorString_push_back" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->push_back((std::vector< std::string >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorString_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorString_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorString_front" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = (std::vector< std::string >::value_type *) &((std::vector< std::string > const *)arg1)->front();
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorString_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorString_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorString_back" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = (std::vector< std::string >::value_type *) &((std::vector< std::string > const *)arg1)->back();
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorString_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StdVectorString_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorString_assign" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StdVectorString_assign" "', argument " "2"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::size_type >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "StdVectorString_assign" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StdVectorString_assign" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->assign(arg2,(std::vector< std::string >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorString_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StdVectorString_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorString_resize" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StdVectorString_resize" "', argument " "2"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::size_type >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "StdVectorString_resize" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StdVectorString_resize" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->resize(arg2,(std::vector< std::string >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorString_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_StdVectorString_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_StdVectorString_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'StdVectorString_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    resize(std::vector< std::string > *,std::vector< std::string >::size_type)\n"
    "    resize(std::vector< std::string > *,std::vector< std::string >::size_type,std::vector< std::string >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorString_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::iterator arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< std::string >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StdVectorString_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorString_insert" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StdVectorString_insert" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::string >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StdVectorString_insert" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "StdVectorString_insert" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StdVectorString_insert" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->insert(arg2,(std::vector< std::string >::value_type const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::string >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorString_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::iterator arg2 ;
  std::vector< std::string >::size_type arg3 ;
  std::vector< std::string >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:StdVectorString_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorString_insert" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StdVectorString_insert" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::string >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StdVectorString_insert" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StdVectorString_insert" "', argument " "3"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg3 = static_cast< std::vector< std::string >::size_type >(val3);
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "StdVectorString_insert" "', argument " "4"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StdVectorString_insert" "', argument " "4"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg4 = ptr;
  }
  (arg1)->insert(arg2,arg3,(std::vector< std::string >::value_type const &)*arg4);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorString_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_StdVectorString_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_StdVectorString_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'StdVectorString_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    insert(std::vector< std::string > *,std::vector< std::string >::iterator,std::vector< std::string >::value_type const &)\n"
    "    insert(std::vector< std::string > *,std::vector< std::string >::iterator,std::vector< std::string >::size_type,std::vector< std::string >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorString_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StdVectorString_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorString_reserve" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StdVectorString_reserve" "', argument " "2"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorString_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorString_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorString_capacity" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = ((std::vector< std::string > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_StdVectorString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_StdVectorString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_StdVectorString" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *StdVectorString_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_StdVectorVec3f_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Vec3f > *arg1 = (std::vector< Vec3f > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorVec3f_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorVec3f_iterator" "', argument " "1"" of type '" "std::vector< Vec3f > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Vec3f > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_Vec3f_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorVec3f___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Vec3f > *arg1 = (std::vector< Vec3f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorVec3f___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorVec3f___nonzero__" "', argument " "1"" of type '" "std::vector< Vec3f > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Vec3f > * >(argp1);
  result = (bool)std_vector_Sl_Vec3f_Sg____nonzero__((std::vector< Vec3f > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorVec3f___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Vec3f > *arg1 = (std::vector< Vec3f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorVec3f___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorVec3f___bool__" "', argument " "1"" of type '" "std::vector< Vec3f > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Vec3f > * >(argp1);
  result = (bool)std_vector_Sl_Vec3f_Sg____bool__((std::vector< Vec3f > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorVec3f___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Vec3f > *arg1 = (std::vector< Vec3f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Vec3f >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorVec3f___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorVec3f___len__" "', argument " "1"" of type '" "std::vector< Vec3f > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Vec3f > * >(argp1);
  result = std_vector_Sl_Vec3f_Sg____len__((std::vector< Vec3f > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorVec3f_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Vec3f > *arg1 = (std::vector< Vec3f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Vec3f >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorVec3f_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorVec3f_pop" "', argument " "1"" of type '" "std::vector< Vec3f > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Vec3f > * >(argp1);
  try {
    result = std_vector_Sl_Vec3f_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj((new std::vector< Vec3f >::value_type(static_cast< const std::vector< Vec3f >::value_type& >(result))), SWIGTYPE_p_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t__value_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorVec3f___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Vec3f > *arg1 = (std::vector< Vec3f > *) 0 ;
  std::vector< Vec3f >::difference_type arg2 ;
  std::vector< Vec3f >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< Vec3f,std::allocator< Vec3f > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StdVectorVec3f___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorVec3f___getslice__" "', argument " "1"" of type '" "std::vector< Vec3f > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Vec3f > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StdVectorVec3f___getslice__" "', argument " "2"" of type '" "std::vector< Vec3f >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Vec3f >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StdVectorVec3f___getslice__" "', argument " "3"" of type '" "std::vector< Vec3f >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< Vec3f >::difference_type >(val3);
  try {
    result = (std::vector< Vec3f,std::allocator< Vec3f > > *)std_vector_Sl_Vec3f_Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorVec3f___setslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Vec3f > *arg1 = (std::vector< Vec3f > *) 0 ;
  std::vector< Vec3f >::difference_type arg2 ;
  std::vector< Vec3f >::difference_type arg3 ;
  std::vector< Vec3f,std::allocator< Vec3f > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:StdVectorVec3f___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorVec3f___setslice__" "', argument " "1"" of type '" "std::vector< Vec3f > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Vec3f > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StdVectorVec3f___setslice__" "', argument " "2"" of type '" "std::vector< Vec3f >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Vec3f >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StdVectorVec3f___setslice__" "', argument " "3"" of type '" "std::vector< Vec3f >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< Vec3f >::difference_type >(val3);
  {
    std::vector<Vec3f,std::allocator< Vec3f > > *ptr = (std::vector<Vec3f,std::allocator< Vec3f > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "StdVectorVec3f___setslice__" "', argument " "4"" of type '" "std::vector< Vec3f,std::allocator< Vec3f > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StdVectorVec3f___setslice__" "', argument " "4"" of type '" "std::vector< Vec3f,std::allocator< Vec3f > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_Vec3f_Sg____setslice__(arg1,arg2,arg3,(std::vector< Vec3f,std::allocator< Vec3f > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorVec3f___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Vec3f > *arg1 = (std::vector< Vec3f > *) 0 ;
  std::vector< Vec3f >::difference_type arg2 ;
  std::vector< Vec3f >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StdVectorVec3f___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorVec3f___delslice__" "', argument " "1"" of type '" "std::vector< Vec3f > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Vec3f > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StdVectorVec3f___delslice__" "', argument " "2"" of type '" "std::vector< Vec3f >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Vec3f >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StdVectorVec3f___delslice__" "', argument " "3"" of type '" "std::vector< Vec3f >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< Vec3f >::difference_type >(val3);
  try {
    std_vector_Sl_Vec3f_Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorVec3f___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Vec3f > *arg1 = (std::vector< Vec3f > *) 0 ;
  std::vector< Vec3f >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StdVectorVec3f___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorVec3f___delitem__" "', argument " "1"" of type '" "std::vector< Vec3f > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Vec3f > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StdVectorVec3f___delitem__" "', argument " "2"" of type '" "std::vector< Vec3f >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Vec3f >::difference_type >(val2);
  try {
    std_vector_Sl_Vec3f_Sg____delitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorVec3f___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Vec3f > *arg1 = (std::vector< Vec3f > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< Vec3f,std::allocator< Vec3f > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StdVectorVec3f___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorVec3f___getitem__" "', argument " "1"" of type '" "std::vector< Vec3f > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Vec3f > * >(argp1);
  {
    arg2 = (PySliceObject *) obj1;
  }
  try {
    result = (std::vector< Vec3f,std::allocator< Vec3f > > *)std_vector_Sl_Vec3f_Sg____getitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorVec3f___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Vec3f > *arg1 = (std::vector< Vec3f > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< Vec3f,std::allocator< Vec3f > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StdVectorVec3f___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorVec3f___setitem__" "', argument " "1"" of type '" "std::vector< Vec3f > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Vec3f > * >(argp1);
  {
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector<Vec3f,std::allocator< Vec3f > > *ptr = (std::vector<Vec3f,std::allocator< Vec3f > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "StdVectorVec3f___setitem__" "', argument " "3"" of type '" "std::vector< Vec3f,std::allocator< Vec3f > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StdVectorVec3f___setitem__" "', argument " "3"" of type '" "std::vector< Vec3f,std::allocator< Vec3f > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_Vec3f_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< Vec3f,std::allocator< Vec3f > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorVec3f___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Vec3f > *arg1 = (std::vector< Vec3f > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StdVectorVec3f___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorVec3f___delitem__" "', argument " "1"" of type '" "std::vector< Vec3f > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Vec3f > * >(argp1);
  {
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_vector_Sl_Vec3f_Sg____delitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorVec3f___delitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<Vec3f,std::allocator< Vec3f > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_StdVectorVec3f___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<Vec3f,std::allocator< Vec3f > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_StdVectorVec3f___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'StdVectorVec3f___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    __delitem__(std::vector< Vec3f > *,std::vector< Vec3f >::difference_type)\n"
    "    __delitem__(std::vector< Vec3f > *,PySliceObject *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorVec3f___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Vec3f > *arg1 = (std::vector< Vec3f > *) 0 ;
  std::vector< Vec3f >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< Vec3f >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StdVectorVec3f___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorVec3f___getitem__" "', argument " "1"" of type '" "std::vector< Vec3f > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Vec3f > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StdVectorVec3f___getitem__" "', argument " "2"" of type '" "std::vector< Vec3f >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Vec3f >::difference_type >(val2);
  try {
    result = (std::vector< Vec3f >::value_type *) &std_vector_Sl_Vec3f_Sg____getitem____SWIG_1((std::vector< Vec3f > const *)arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t__value_type, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorVec3f___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<Vec3f,std::allocator< Vec3f > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_StdVectorVec3f___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<Vec3f,std::allocator< Vec3f > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_StdVectorVec3f___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'StdVectorVec3f___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    __getitem__(std::vector< Vec3f > *,PySliceObject *)\n"
    "    __getitem__(std::vector< Vec3f > const *,std::vector< Vec3f >::difference_type)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorVec3f___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Vec3f > *arg1 = (std::vector< Vec3f > *) 0 ;
  std::vector< Vec3f >::difference_type arg2 ;
  std::vector< Vec3f >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StdVectorVec3f___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorVec3f___setitem__" "', argument " "1"" of type '" "std::vector< Vec3f > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Vec3f > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StdVectorVec3f___setitem__" "', argument " "2"" of type '" "std::vector< Vec3f >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Vec3f >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "StdVectorVec3f___setitem__" "', argument " "3"" of type '" "std::vector< Vec3f >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StdVectorVec3f___setitem__" "', argument " "3"" of type '" "std::vector< Vec3f >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Vec3f >::value_type * >(argp3);
  try {
    std_vector_Sl_Vec3f_Sg____setitem____SWIG_1(arg1,arg2,(Vec3f const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorVec3f___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<Vec3f,std::allocator< Vec3f > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<Vec3f,std::allocator< Vec3f > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_StdVectorVec3f___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<Vec3f,std::allocator< Vec3f > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t__value_type, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_StdVectorVec3f___setitem____SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'StdVectorVec3f___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    __setitem__(std::vector< Vec3f > *,PySliceObject *,std::vector< Vec3f,std::allocator< Vec3f > > const &)\n"
    "    __setitem__(std::vector< Vec3f > *,std::vector< Vec3f >::difference_type,std::vector< Vec3f >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorVec3f_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Vec3f > *arg1 = (std::vector< Vec3f > *) 0 ;
  std::vector< Vec3f >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StdVectorVec3f_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorVec3f_append" "', argument " "1"" of type '" "std::vector< Vec3f > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Vec3f > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StdVectorVec3f_append" "', argument " "2"" of type '" "std::vector< Vec3f >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StdVectorVec3f_append" "', argument " "2"" of type '" "std::vector< Vec3f >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Vec3f >::value_type * >(argp2);
  std_vector_Sl_Vec3f_Sg__append(arg1,(Vec3f const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StdVectorVec3f__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Vec3f > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_StdVectorVec3f")) SWIG_fail;
  result = (std::vector< Vec3f > *)new std::vector< Vec3f >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StdVectorVec3f__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Vec3f > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< Vec3f > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_StdVectorVec3f",&obj0)) SWIG_fail;
  {
    std::vector<Vec3f,std::allocator< Vec3f > > *ptr = (std::vector<Vec3f,std::allocator< Vec3f > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_StdVectorVec3f" "', argument " "1"" of type '" "std::vector< Vec3f > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_StdVectorVec3f" "', argument " "1"" of type '" "std::vector< Vec3f > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< Vec3f > *)new std::vector< Vec3f >((std::vector< Vec3f > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorVec3f_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Vec3f > *arg1 = (std::vector< Vec3f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorVec3f_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorVec3f_empty" "', argument " "1"" of type '" "std::vector< Vec3f > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Vec3f > * >(argp1);
  result = (bool)((std::vector< Vec3f > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorVec3f_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Vec3f > *arg1 = (std::vector< Vec3f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Vec3f >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorVec3f_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorVec3f_size" "', argument " "1"" of type '" "std::vector< Vec3f > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Vec3f > * >(argp1);
  result = ((std::vector< Vec3f > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorVec3f_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Vec3f > *arg1 = (std::vector< Vec3f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorVec3f_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorVec3f_clear" "', argument " "1"" of type '" "std::vector< Vec3f > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Vec3f > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorVec3f_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Vec3f > *arg1 = (std::vector< Vec3f > *) 0 ;
  std::vector< Vec3f > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StdVectorVec3f_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorVec3f_swap" "', argument " "1"" of type '" "std::vector< Vec3f > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Vec3f > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StdVectorVec3f_swap" "', argument " "2"" of type '" "std::vector< Vec3f > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StdVectorVec3f_swap" "', argument " "2"" of type '" "std::vector< Vec3f > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Vec3f > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorVec3f_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Vec3f > *arg1 = (std::vector< Vec3f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< Vec3f > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorVec3f_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorVec3f_get_allocator" "', argument " "1"" of type '" "std::vector< Vec3f > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Vec3f > * >(argp1);
  result = ((std::vector< Vec3f > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< Vec3f >::allocator_type(static_cast< const std::vector< Vec3f >::allocator_type& >(result))), SWIGTYPE_p_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t__allocator_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorVec3f_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Vec3f > *arg1 = (std::vector< Vec3f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Vec3f >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorVec3f_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorVec3f_begin" "', argument " "1"" of type '" "std::vector< Vec3f > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Vec3f > * >(argp1);
  result = ((std::vector< Vec3f > const *)arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Vec3f >::const_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorVec3f_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Vec3f > *arg1 = (std::vector< Vec3f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Vec3f >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorVec3f_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorVec3f_end" "', argument " "1"" of type '" "std::vector< Vec3f > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Vec3f > * >(argp1);
  result = ((std::vector< Vec3f > const *)arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Vec3f >::const_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorVec3f_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Vec3f > *arg1 = (std::vector< Vec3f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Vec3f >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorVec3f_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorVec3f_rbegin" "', argument " "1"" of type '" "std::vector< Vec3f > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Vec3f > * >(argp1);
  result = ((std::vector< Vec3f > const *)arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Vec3f >::const_reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorVec3f_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Vec3f > *arg1 = (std::vector< Vec3f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Vec3f >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorVec3f_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorVec3f_rend" "', argument " "1"" of type '" "std::vector< Vec3f > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Vec3f > * >(argp1);
  result = ((std::vector< Vec3f > const *)arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Vec3f >::const_reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StdVectorVec3f__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Vec3f >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Vec3f > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_StdVectorVec3f",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_StdVectorVec3f" "', argument " "1"" of type '" "std::vector< Vec3f >::size_type""'");
  } 
  arg1 = static_cast< std::vector< Vec3f >::size_type >(val1);
  result = (std::vector< Vec3f > *)new std::vector< Vec3f >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorVec3f_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Vec3f > *arg1 = (std::vector< Vec3f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorVec3f_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorVec3f_pop_back" "', argument " "1"" of type '" "std::vector< Vec3f > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Vec3f > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorVec3f_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Vec3f > *arg1 = (std::vector< Vec3f > *) 0 ;
  std::vector< Vec3f >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StdVectorVec3f_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorVec3f_resize" "', argument " "1"" of type '" "std::vector< Vec3f > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Vec3f > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StdVectorVec3f_resize" "', argument " "2"" of type '" "std::vector< Vec3f >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Vec3f >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorVec3f_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Vec3f > *arg1 = (std::vector< Vec3f > *) 0 ;
  std::vector< Vec3f >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< Vec3f >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StdVectorVec3f_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorVec3f_erase" "', argument " "1"" of type '" "std::vector< Vec3f > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Vec3f > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StdVectorVec3f_erase" "', argument " "2"" of type '" "std::vector< Vec3f >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< Vec3f >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< Vec3f >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StdVectorVec3f_erase" "', argument " "2"" of type '" "std::vector< Vec3f >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Vec3f >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorVec3f_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Vec3f > *arg1 = (std::vector< Vec3f > *) 0 ;
  std::vector< Vec3f >::iterator arg2 ;
  std::vector< Vec3f >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< Vec3f >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StdVectorVec3f_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorVec3f_erase" "', argument " "1"" of type '" "std::vector< Vec3f > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Vec3f > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StdVectorVec3f_erase" "', argument " "2"" of type '" "std::vector< Vec3f >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< Vec3f >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< Vec3f >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StdVectorVec3f_erase" "', argument " "2"" of type '" "std::vector< Vec3f >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StdVectorVec3f_erase" "', argument " "3"" of type '" "std::vector< Vec3f >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< Vec3f >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< Vec3f >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StdVectorVec3f_erase" "', argument " "3"" of type '" "std::vector< Vec3f >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Vec3f >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorVec3f_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<Vec3f,std::allocator< Vec3f > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< Vec3f >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_StdVectorVec3f_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<Vec3f,std::allocator< Vec3f > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< Vec3f >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< Vec3f >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_StdVectorVec3f_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'StdVectorVec3f_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    erase(std::vector< Vec3f > *,std::vector< Vec3f >::iterator)\n"
    "    erase(std::vector< Vec3f > *,std::vector< Vec3f >::iterator,std::vector< Vec3f >::iterator)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StdVectorVec3f__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Vec3f >::size_type arg1 ;
  std::vector< Vec3f >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< Vec3f > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_StdVectorVec3f",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_StdVectorVec3f" "', argument " "1"" of type '" "std::vector< Vec3f >::size_type""'");
  } 
  arg1 = static_cast< std::vector< Vec3f >::size_type >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_StdVectorVec3f" "', argument " "2"" of type '" "std::vector< Vec3f >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_StdVectorVec3f" "', argument " "2"" of type '" "std::vector< Vec3f >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Vec3f >::value_type * >(argp2);
  result = (std::vector< Vec3f > *)new std::vector< Vec3f >(arg1,(std::vector< Vec3f >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StdVectorVec3f(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_StdVectorVec3f__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_StdVectorVec3f__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<Vec3f,std::allocator< Vec3f > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_StdVectorVec3f__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t__value_type, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_StdVectorVec3f__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_StdVectorVec3f'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Vec3f >()\n"
    "    std::vector< Vec3f >(std::vector< Vec3f > const &)\n"
    "    std::vector< Vec3f >(std::vector< Vec3f >::size_type)\n"
    "    std::vector< Vec3f >(std::vector< Vec3f >::size_type,std::vector< Vec3f >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorVec3f_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Vec3f > *arg1 = (std::vector< Vec3f > *) 0 ;
  std::vector< Vec3f >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StdVectorVec3f_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorVec3f_push_back" "', argument " "1"" of type '" "std::vector< Vec3f > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Vec3f > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StdVectorVec3f_push_back" "', argument " "2"" of type '" "std::vector< Vec3f >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StdVectorVec3f_push_back" "', argument " "2"" of type '" "std::vector< Vec3f >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Vec3f >::value_type * >(argp2);
  (arg1)->push_back((std::vector< Vec3f >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorVec3f_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Vec3f > *arg1 = (std::vector< Vec3f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Vec3f >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorVec3f_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorVec3f_front" "', argument " "1"" of type '" "std::vector< Vec3f > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Vec3f > * >(argp1);
  result = (std::vector< Vec3f >::value_type *) &((std::vector< Vec3f > const *)arg1)->front();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t__value_type, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorVec3f_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Vec3f > *arg1 = (std::vector< Vec3f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Vec3f >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorVec3f_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorVec3f_back" "', argument " "1"" of type '" "std::vector< Vec3f > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Vec3f > * >(argp1);
  result = (std::vector< Vec3f >::value_type *) &((std::vector< Vec3f > const *)arg1)->back();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t__value_type, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorVec3f_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Vec3f > *arg1 = (std::vector< Vec3f > *) 0 ;
  std::vector< Vec3f >::size_type arg2 ;
  std::vector< Vec3f >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StdVectorVec3f_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorVec3f_assign" "', argument " "1"" of type '" "std::vector< Vec3f > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Vec3f > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StdVectorVec3f_assign" "', argument " "2"" of type '" "std::vector< Vec3f >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Vec3f >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "StdVectorVec3f_assign" "', argument " "3"" of type '" "std::vector< Vec3f >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StdVectorVec3f_assign" "', argument " "3"" of type '" "std::vector< Vec3f >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Vec3f >::value_type * >(argp3);
  (arg1)->assign(arg2,(std::vector< Vec3f >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorVec3f_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Vec3f > *arg1 = (std::vector< Vec3f > *) 0 ;
  std::vector< Vec3f >::size_type arg2 ;
  std::vector< Vec3f >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StdVectorVec3f_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorVec3f_resize" "', argument " "1"" of type '" "std::vector< Vec3f > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Vec3f > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StdVectorVec3f_resize" "', argument " "2"" of type '" "std::vector< Vec3f >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Vec3f >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "StdVectorVec3f_resize" "', argument " "3"" of type '" "std::vector< Vec3f >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StdVectorVec3f_resize" "', argument " "3"" of type '" "std::vector< Vec3f >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Vec3f >::value_type * >(argp3);
  (arg1)->resize(arg2,(std::vector< Vec3f >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorVec3f_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<Vec3f,std::allocator< Vec3f > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_StdVectorVec3f_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<Vec3f,std::allocator< Vec3f > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t__value_type, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_StdVectorVec3f_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'StdVectorVec3f_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    resize(std::vector< Vec3f > *,std::vector< Vec3f >::size_type)\n"
    "    resize(std::vector< Vec3f > *,std::vector< Vec3f >::size_type,std::vector< Vec3f >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorVec3f_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Vec3f > *arg1 = (std::vector< Vec3f > *) 0 ;
  std::vector< Vec3f >::iterator arg2 ;
  std::vector< Vec3f >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< Vec3f >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StdVectorVec3f_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorVec3f_insert" "', argument " "1"" of type '" "std::vector< Vec3f > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Vec3f > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StdVectorVec3f_insert" "', argument " "2"" of type '" "std::vector< Vec3f >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< Vec3f >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< Vec3f >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StdVectorVec3f_insert" "', argument " "2"" of type '" "std::vector< Vec3f >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "StdVectorVec3f_insert" "', argument " "3"" of type '" "std::vector< Vec3f >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StdVectorVec3f_insert" "', argument " "3"" of type '" "std::vector< Vec3f >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Vec3f >::value_type * >(argp3);
  result = (arg1)->insert(arg2,(std::vector< Vec3f >::value_type const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Vec3f >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorVec3f_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Vec3f > *arg1 = (std::vector< Vec3f > *) 0 ;
  std::vector< Vec3f >::iterator arg2 ;
  std::vector< Vec3f >::size_type arg3 ;
  std::vector< Vec3f >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:StdVectorVec3f_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorVec3f_insert" "', argument " "1"" of type '" "std::vector< Vec3f > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Vec3f > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StdVectorVec3f_insert" "', argument " "2"" of type '" "std::vector< Vec3f >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< Vec3f >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< Vec3f >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StdVectorVec3f_insert" "', argument " "2"" of type '" "std::vector< Vec3f >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StdVectorVec3f_insert" "', argument " "3"" of type '" "std::vector< Vec3f >::size_type""'");
  } 
  arg3 = static_cast< std::vector< Vec3f >::size_type >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "StdVectorVec3f_insert" "', argument " "4"" of type '" "std::vector< Vec3f >::value_type const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StdVectorVec3f_insert" "', argument " "4"" of type '" "std::vector< Vec3f >::value_type const &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< Vec3f >::value_type * >(argp4);
  (arg1)->insert(arg2,arg3,(std::vector< Vec3f >::value_type const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorVec3f_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<Vec3f,std::allocator< Vec3f > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< Vec3f >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t__value_type, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_StdVectorVec3f_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<Vec3f,std::allocator< Vec3f > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< Vec3f >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t__value_type, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_StdVectorVec3f_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'StdVectorVec3f_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    insert(std::vector< Vec3f > *,std::vector< Vec3f >::iterator,std::vector< Vec3f >::value_type const &)\n"
    "    insert(std::vector< Vec3f > *,std::vector< Vec3f >::iterator,std::vector< Vec3f >::size_type,std::vector< Vec3f >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorVec3f_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Vec3f > *arg1 = (std::vector< Vec3f > *) 0 ;
  std::vector< Vec3f >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StdVectorVec3f_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorVec3f_reserve" "', argument " "1"" of type '" "std::vector< Vec3f > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Vec3f > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StdVectorVec3f_reserve" "', argument " "2"" of type '" "std::vector< Vec3f >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Vec3f >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorVec3f_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Vec3f > *arg1 = (std::vector< Vec3f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Vec3f >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorVec3f_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorVec3f_capacity" "', argument " "1"" of type '" "std::vector< Vec3f > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Vec3f > * >(argp1);
  result = ((std::vector< Vec3f > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_StdVectorVec3f(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Vec3f > *arg1 = (std::vector< Vec3f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_StdVectorVec3f",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_StdVectorVec3f" "', argument " "1"" of type '" "std::vector< Vec3f > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Vec3f > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *StdVectorVec3f_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_StdVectorSmartPointerHpc_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Hpc > > *arg1 = (std::vector< std::tr1::shared_ptr< Hpc > > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorSmartPointerHpc_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Hpc_t_std__allocatorT_std__tr1__shared_ptrT_Hpc_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerHpc_iterator" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Hpc > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Hpc > > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_std_tr1_shared_ptr_Sl_Hpc_Sg__Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerHpc___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Hpc > > *arg1 = (std::vector< std::tr1::shared_ptr< Hpc > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorSmartPointerHpc___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Hpc_t_std__allocatorT_std__tr1__shared_ptrT_Hpc_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerHpc___nonzero__" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Hpc > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Hpc > > * >(argp1);
  result = (bool)std_vector_Sl_std_tr1_shared_ptr_Sl_Hpc_Sg__Sg____nonzero__((std::vector< std::tr1::shared_ptr< Hpc > > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerHpc___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Hpc > > *arg1 = (std::vector< std::tr1::shared_ptr< Hpc > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorSmartPointerHpc___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Hpc_t_std__allocatorT_std__tr1__shared_ptrT_Hpc_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerHpc___bool__" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Hpc > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Hpc > > * >(argp1);
  result = (bool)std_vector_Sl_std_tr1_shared_ptr_Sl_Hpc_Sg__Sg____bool__((std::vector< std::tr1::shared_ptr< Hpc > > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerHpc___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Hpc > > *arg1 = (std::vector< std::tr1::shared_ptr< Hpc > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::tr1::shared_ptr< Hpc > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorSmartPointerHpc___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Hpc_t_std__allocatorT_std__tr1__shared_ptrT_Hpc_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerHpc___len__" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Hpc > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Hpc > > * >(argp1);
  result = std_vector_Sl_std_tr1_shared_ptr_Sl_Hpc_Sg__Sg____len__((std::vector< std::tr1::shared_ptr< Hpc > > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerHpc_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Hpc > > *arg1 = (std::vector< std::tr1::shared_ptr< Hpc > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::tr1::shared_ptr< Hpc > >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorSmartPointerHpc_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Hpc_t_std__allocatorT_std__tr1__shared_ptrT_Hpc_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerHpc_pop" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Hpc > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Hpc > > * >(argp1);
  try {
    result = std_vector_Sl_std_tr1_shared_ptr_Sl_Hpc_Sg__Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  {
    std::tr1::shared_ptr<  Hpc > *smartresult = result ? new std::tr1::shared_ptr<  Hpc >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerHpc___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Hpc > > *arg1 = (std::vector< std::tr1::shared_ptr< Hpc > > *) 0 ;
  std::vector< std::tr1::shared_ptr< Hpc > >::difference_type arg2 ;
  std::vector< std::tr1::shared_ptr< Hpc > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< std::tr1::shared_ptr< Hpc >,std::allocator< std::tr1::shared_ptr< Hpc > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StdVectorSmartPointerHpc___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Hpc_t_std__allocatorT_std__tr1__shared_ptrT_Hpc_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerHpc___getslice__" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Hpc > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Hpc > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StdVectorSmartPointerHpc___getslice__" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< Hpc > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::tr1::shared_ptr< Hpc > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StdVectorSmartPointerHpc___getslice__" "', argument " "3"" of type '" "std::vector< std::tr1::shared_ptr< Hpc > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::tr1::shared_ptr< Hpc > >::difference_type >(val3);
  try {
    result = (std::vector< std::tr1::shared_ptr< Hpc >,std::allocator< std::tr1::shared_ptr< Hpc > > > *)std_vector_Sl_std_tr1_shared_ptr_Sl_Hpc_Sg__Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Hpc_t_std__allocatorT_std__tr1__shared_ptrT_Hpc_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerHpc___setslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Hpc > > *arg1 = (std::vector< std::tr1::shared_ptr< Hpc > > *) 0 ;
  std::vector< std::tr1::shared_ptr< Hpc > >::difference_type arg2 ;
  std::vector< std::tr1::shared_ptr< Hpc > >::difference_type arg3 ;
  std::vector< std::tr1::shared_ptr< Hpc >,std::allocator< std::tr1::shared_ptr< Hpc > > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:StdVectorSmartPointerHpc___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Hpc_t_std__allocatorT_std__tr1__shared_ptrT_Hpc_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerHpc___setslice__" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Hpc > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Hpc > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StdVectorSmartPointerHpc___setslice__" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< Hpc > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::tr1::shared_ptr< Hpc > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StdVectorSmartPointerHpc___setslice__" "', argument " "3"" of type '" "std::vector< std::tr1::shared_ptr< Hpc > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::tr1::shared_ptr< Hpc > >::difference_type >(val3);
  {
    std::vector<std::tr1::shared_ptr< Hpc >,std::allocator< std::tr1::shared_ptr< Hpc > > > *ptr = (std::vector<std::tr1::shared_ptr< Hpc >,std::allocator< std::tr1::shared_ptr< Hpc > > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "StdVectorSmartPointerHpc___setslice__" "', argument " "4"" of type '" "std::vector< std::tr1::shared_ptr< Hpc >,std::allocator< std::tr1::shared_ptr< Hpc > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StdVectorSmartPointerHpc___setslice__" "', argument " "4"" of type '" "std::vector< std::tr1::shared_ptr< Hpc >,std::allocator< std::tr1::shared_ptr< Hpc > > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_std_tr1_shared_ptr_Sl_Hpc_Sg__Sg____setslice__(arg1,arg2,arg3,(std::vector< std::tr1::shared_ptr< Hpc >,std::allocator< std::tr1::shared_ptr< Hpc > > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerHpc___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Hpc > > *arg1 = (std::vector< std::tr1::shared_ptr< Hpc > > *) 0 ;
  std::vector< std::tr1::shared_ptr< Hpc > >::difference_type arg2 ;
  std::vector< std::tr1::shared_ptr< Hpc > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StdVectorSmartPointerHpc___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Hpc_t_std__allocatorT_std__tr1__shared_ptrT_Hpc_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerHpc___delslice__" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Hpc > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Hpc > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StdVectorSmartPointerHpc___delslice__" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< Hpc > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::tr1::shared_ptr< Hpc > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StdVectorSmartPointerHpc___delslice__" "', argument " "3"" of type '" "std::vector< std::tr1::shared_ptr< Hpc > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::tr1::shared_ptr< Hpc > >::difference_type >(val3);
  try {
    std_vector_Sl_std_tr1_shared_ptr_Sl_Hpc_Sg__Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerHpc___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Hpc > > *arg1 = (std::vector< std::tr1::shared_ptr< Hpc > > *) 0 ;
  std::vector< std::tr1::shared_ptr< Hpc > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StdVectorSmartPointerHpc___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Hpc_t_std__allocatorT_std__tr1__shared_ptrT_Hpc_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerHpc___delitem__" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Hpc > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Hpc > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StdVectorSmartPointerHpc___delitem__" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< Hpc > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::tr1::shared_ptr< Hpc > >::difference_type >(val2);
  try {
    std_vector_Sl_std_tr1_shared_ptr_Sl_Hpc_Sg__Sg____delitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerHpc___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Hpc > > *arg1 = (std::vector< std::tr1::shared_ptr< Hpc > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::tr1::shared_ptr< Hpc >,std::allocator< std::tr1::shared_ptr< Hpc > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StdVectorSmartPointerHpc___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Hpc_t_std__allocatorT_std__tr1__shared_ptrT_Hpc_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerHpc___getitem__" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Hpc > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Hpc > > * >(argp1);
  {
    arg2 = (PySliceObject *) obj1;
  }
  try {
    result = (std::vector< std::tr1::shared_ptr< Hpc >,std::allocator< std::tr1::shared_ptr< Hpc > > > *)std_vector_Sl_std_tr1_shared_ptr_Sl_Hpc_Sg__Sg____getitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Hpc_t_std__allocatorT_std__tr1__shared_ptrT_Hpc_t_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerHpc___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Hpc > > *arg1 = (std::vector< std::tr1::shared_ptr< Hpc > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< std::tr1::shared_ptr< Hpc >,std::allocator< std::tr1::shared_ptr< Hpc > > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StdVectorSmartPointerHpc___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Hpc_t_std__allocatorT_std__tr1__shared_ptrT_Hpc_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerHpc___setitem__" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Hpc > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Hpc > > * >(argp1);
  {
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector<std::tr1::shared_ptr< Hpc >,std::allocator< std::tr1::shared_ptr< Hpc > > > *ptr = (std::vector<std::tr1::shared_ptr< Hpc >,std::allocator< std::tr1::shared_ptr< Hpc > > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "StdVectorSmartPointerHpc___setitem__" "', argument " "3"" of type '" "std::vector< std::tr1::shared_ptr< Hpc >,std::allocator< std::tr1::shared_ptr< Hpc > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StdVectorSmartPointerHpc___setitem__" "', argument " "3"" of type '" "std::vector< std::tr1::shared_ptr< Hpc >,std::allocator< std::tr1::shared_ptr< Hpc > > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_std_tr1_shared_ptr_Sl_Hpc_Sg__Sg____setitem____SWIG_0(arg1,arg2,(std::vector< std::tr1::shared_ptr< Hpc >,std::allocator< std::tr1::shared_ptr< Hpc > > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerHpc___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Hpc > > *arg1 = (std::vector< std::tr1::shared_ptr< Hpc > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StdVectorSmartPointerHpc___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Hpc_t_std__allocatorT_std__tr1__shared_ptrT_Hpc_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerHpc___delitem__" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Hpc > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Hpc > > * >(argp1);
  {
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_vector_Sl_std_tr1_shared_ptr_Sl_Hpc_Sg__Sg____delitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerHpc___delitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::tr1::shared_ptr< Hpc >,std::allocator< std::tr1::shared_ptr< Hpc > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_StdVectorSmartPointerHpc___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::tr1::shared_ptr< Hpc >,std::allocator< std::tr1::shared_ptr< Hpc > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_StdVectorSmartPointerHpc___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'StdVectorSmartPointerHpc___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    __delitem__(std::vector< std::tr1::shared_ptr< Hpc > > *,std::vector< std::tr1::shared_ptr< Hpc > >::difference_type)\n"
    "    __delitem__(std::vector< std::tr1::shared_ptr< Hpc > > *,PySliceObject *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerHpc___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Hpc > > *arg1 = (std::vector< std::tr1::shared_ptr< Hpc > > *) 0 ;
  std::vector< std::tr1::shared_ptr< Hpc > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::tr1::shared_ptr< Hpc > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StdVectorSmartPointerHpc___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Hpc_t_std__allocatorT_std__tr1__shared_ptrT_Hpc_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerHpc___getitem__" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Hpc > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Hpc > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StdVectorSmartPointerHpc___getitem__" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< Hpc > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::tr1::shared_ptr< Hpc > >::difference_type >(val2);
  try {
    result = (std::vector< std::tr1::shared_ptr< Hpc > >::value_type *) &std_vector_Sl_std_tr1_shared_ptr_Sl_Hpc_Sg__Sg____getitem____SWIG_1((std::vector< std::tr1::shared_ptr< Hpc > > const *)arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  {
    std::tr1::shared_ptr<  Hpc > *smartresult = *result ? new std::tr1::shared_ptr<  Hpc >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerHpc___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::tr1::shared_ptr< Hpc >,std::allocator< std::tr1::shared_ptr< Hpc > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_StdVectorSmartPointerHpc___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::tr1::shared_ptr< Hpc >,std::allocator< std::tr1::shared_ptr< Hpc > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_StdVectorSmartPointerHpc___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'StdVectorSmartPointerHpc___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    __getitem__(std::vector< std::tr1::shared_ptr< Hpc > > *,PySliceObject *)\n"
    "    __getitem__(std::vector< std::tr1::shared_ptr< Hpc > > const *,std::vector< std::tr1::shared_ptr< Hpc > >::difference_type)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerHpc___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Hpc > > *arg1 = (std::vector< std::tr1::shared_ptr< Hpc > > *) 0 ;
  std::vector< std::tr1::shared_ptr< Hpc > >::difference_type arg2 ;
  std::vector< std::tr1::shared_ptr< Hpc > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< std::tr1::shared_ptr< Hpc > >::value_type tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StdVectorSmartPointerHpc___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Hpc_t_std__allocatorT_std__tr1__shared_ptrT_Hpc_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerHpc___setitem__" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Hpc > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Hpc > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StdVectorSmartPointerHpc___setitem__" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< Hpc > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::tr1::shared_ptr< Hpc > >::difference_type >(val2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "StdVectorSmartPointerHpc___setitem__" "', argument " "3"" of type '" "std::vector< std::tr1::shared_ptr< Hpc > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< std::tr1::shared_ptr< Hpc > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< std::tr1::shared_ptr< Hpc > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< std::tr1::shared_ptr< Hpc > >::value_type * >(argp3) : &tempshared3;
    }
  }
  try {
    std_vector_Sl_std_tr1_shared_ptr_Sl_Hpc_Sg__Sg____setitem____SWIG_1(arg1,arg2,(std::tr1::shared_ptr< Hpc > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerHpc___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::tr1::shared_ptr< Hpc >,std::allocator< std::tr1::shared_ptr< Hpc > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<std::tr1::shared_ptr< Hpc >,std::allocator< std::tr1::shared_ptr< Hpc > > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_StdVectorSmartPointerHpc___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::tr1::shared_ptr< Hpc >,std::allocator< std::tr1::shared_ptr< Hpc > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_StdVectorSmartPointerHpc___setitem____SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'StdVectorSmartPointerHpc___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    __setitem__(std::vector< std::tr1::shared_ptr< Hpc > > *,PySliceObject *,std::vector< std::tr1::shared_ptr< Hpc >,std::allocator< std::tr1::shared_ptr< Hpc > > > const &)\n"
    "    __setitem__(std::vector< std::tr1::shared_ptr< Hpc > > *,std::vector< std::tr1::shared_ptr< Hpc > >::difference_type,std::vector< std::tr1::shared_ptr< Hpc > >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerHpc_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Hpc > > *arg1 = (std::vector< std::tr1::shared_ptr< Hpc > > *) 0 ;
  std::vector< std::tr1::shared_ptr< Hpc > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< std::tr1::shared_ptr< Hpc > >::value_type tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StdVectorSmartPointerHpc_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Hpc_t_std__allocatorT_std__tr1__shared_ptrT_Hpc_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerHpc_append" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Hpc > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Hpc > > * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StdVectorSmartPointerHpc_append" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< Hpc > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< std::vector< std::tr1::shared_ptr< Hpc > >::value_type * >(argp2);
      delete reinterpret_cast< std::vector< std::tr1::shared_ptr< Hpc > >::value_type * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< std::vector< std::tr1::shared_ptr< Hpc > >::value_type * >(argp2) : &tempshared2;
    }
  }
  std_vector_Sl_std_tr1_shared_ptr_Sl_Hpc_Sg__Sg__append(arg1,(std::tr1::shared_ptr< Hpc > const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StdVectorSmartPointerHpc__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Hpc > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_StdVectorSmartPointerHpc")) SWIG_fail;
  result = (std::vector< std::tr1::shared_ptr< Hpc > > *)new std::vector< std::tr1::shared_ptr< Hpc > >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Hpc_t_std__allocatorT_std__tr1__shared_ptrT_Hpc_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StdVectorSmartPointerHpc__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Hpc > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< std::tr1::shared_ptr< Hpc > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_StdVectorSmartPointerHpc",&obj0)) SWIG_fail;
  {
    std::vector<std::tr1::shared_ptr< Hpc >,std::allocator< std::tr1::shared_ptr< Hpc > > > *ptr = (std::vector<std::tr1::shared_ptr< Hpc >,std::allocator< std::tr1::shared_ptr< Hpc > > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_StdVectorSmartPointerHpc" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Hpc > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_StdVectorSmartPointerHpc" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Hpc > > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< std::tr1::shared_ptr< Hpc > > *)new std::vector< std::tr1::shared_ptr< Hpc > >((std::vector< std::tr1::shared_ptr< Hpc > > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Hpc_t_std__allocatorT_std__tr1__shared_ptrT_Hpc_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerHpc_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Hpc > > *arg1 = (std::vector< std::tr1::shared_ptr< Hpc > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorSmartPointerHpc_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Hpc_t_std__allocatorT_std__tr1__shared_ptrT_Hpc_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerHpc_empty" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Hpc > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Hpc > > * >(argp1);
  result = (bool)((std::vector< std::tr1::shared_ptr< Hpc > > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerHpc_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Hpc > > *arg1 = (std::vector< std::tr1::shared_ptr< Hpc > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::tr1::shared_ptr< Hpc > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorSmartPointerHpc_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Hpc_t_std__allocatorT_std__tr1__shared_ptrT_Hpc_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerHpc_size" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Hpc > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Hpc > > * >(argp1);
  result = ((std::vector< std::tr1::shared_ptr< Hpc > > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerHpc_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Hpc > > *arg1 = (std::vector< std::tr1::shared_ptr< Hpc > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorSmartPointerHpc_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Hpc_t_std__allocatorT_std__tr1__shared_ptrT_Hpc_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerHpc_clear" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Hpc > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Hpc > > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerHpc_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Hpc > > *arg1 = (std::vector< std::tr1::shared_ptr< Hpc > > *) 0 ;
  std::vector< std::tr1::shared_ptr< Hpc > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StdVectorSmartPointerHpc_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Hpc_t_std__allocatorT_std__tr1__shared_ptrT_Hpc_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerHpc_swap" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Hpc > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Hpc > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Hpc_t_std__allocatorT_std__tr1__shared_ptrT_Hpc_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StdVectorSmartPointerHpc_swap" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< Hpc > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StdVectorSmartPointerHpc_swap" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< Hpc > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Hpc > > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerHpc_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Hpc > > *arg1 = (std::vector< std::tr1::shared_ptr< Hpc > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< std::tr1::shared_ptr< Hpc > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorSmartPointerHpc_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Hpc_t_std__allocatorT_std__tr1__shared_ptrT_Hpc_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerHpc_get_allocator" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Hpc > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Hpc > > * >(argp1);
  result = ((std::vector< std::tr1::shared_ptr< Hpc > > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< std::tr1::shared_ptr< Hpc > >::allocator_type(static_cast< const std::vector< std::tr1::shared_ptr< Hpc > >::allocator_type& >(result))), SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Hpc_t_std__allocatorT_std__tr1__shared_ptrT_Hpc_t_t_t__allocator_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerHpc_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Hpc > > *arg1 = (std::vector< std::tr1::shared_ptr< Hpc > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::tr1::shared_ptr< Hpc > >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorSmartPointerHpc_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Hpc_t_std__allocatorT_std__tr1__shared_ptrT_Hpc_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerHpc_begin" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Hpc > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Hpc > > * >(argp1);
  result = ((std::vector< std::tr1::shared_ptr< Hpc > > const *)arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::tr1::shared_ptr< Hpc > >::const_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerHpc_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Hpc > > *arg1 = (std::vector< std::tr1::shared_ptr< Hpc > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::tr1::shared_ptr< Hpc > >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorSmartPointerHpc_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Hpc_t_std__allocatorT_std__tr1__shared_ptrT_Hpc_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerHpc_end" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Hpc > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Hpc > > * >(argp1);
  result = ((std::vector< std::tr1::shared_ptr< Hpc > > const *)arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::tr1::shared_ptr< Hpc > >::const_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerHpc_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Hpc > > *arg1 = (std::vector< std::tr1::shared_ptr< Hpc > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::tr1::shared_ptr< Hpc > >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorSmartPointerHpc_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Hpc_t_std__allocatorT_std__tr1__shared_ptrT_Hpc_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerHpc_rbegin" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Hpc > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Hpc > > * >(argp1);
  result = ((std::vector< std::tr1::shared_ptr< Hpc > > const *)arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::tr1::shared_ptr< Hpc > >::const_reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerHpc_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Hpc > > *arg1 = (std::vector< std::tr1::shared_ptr< Hpc > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::tr1::shared_ptr< Hpc > >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorSmartPointerHpc_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Hpc_t_std__allocatorT_std__tr1__shared_ptrT_Hpc_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerHpc_rend" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Hpc > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Hpc > > * >(argp1);
  result = ((std::vector< std::tr1::shared_ptr< Hpc > > const *)arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::tr1::shared_ptr< Hpc > >::const_reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StdVectorSmartPointerHpc__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Hpc > >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::tr1::shared_ptr< Hpc > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_StdVectorSmartPointerHpc",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_StdVectorSmartPointerHpc" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Hpc > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::tr1::shared_ptr< Hpc > >::size_type >(val1);
  result = (std::vector< std::tr1::shared_ptr< Hpc > > *)new std::vector< std::tr1::shared_ptr< Hpc > >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Hpc_t_std__allocatorT_std__tr1__shared_ptrT_Hpc_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerHpc_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Hpc > > *arg1 = (std::vector< std::tr1::shared_ptr< Hpc > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorSmartPointerHpc_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Hpc_t_std__allocatorT_std__tr1__shared_ptrT_Hpc_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerHpc_pop_back" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Hpc > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Hpc > > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerHpc_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Hpc > > *arg1 = (std::vector< std::tr1::shared_ptr< Hpc > > *) 0 ;
  std::vector< std::tr1::shared_ptr< Hpc > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StdVectorSmartPointerHpc_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Hpc_t_std__allocatorT_std__tr1__shared_ptrT_Hpc_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerHpc_resize" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Hpc > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Hpc > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StdVectorSmartPointerHpc_resize" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< Hpc > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::tr1::shared_ptr< Hpc > >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerHpc_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Hpc > > *arg1 = (std::vector< std::tr1::shared_ptr< Hpc > > *) 0 ;
  std::vector< std::tr1::shared_ptr< Hpc > >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::tr1::shared_ptr< Hpc > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StdVectorSmartPointerHpc_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Hpc_t_std__allocatorT_std__tr1__shared_ptrT_Hpc_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerHpc_erase" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Hpc > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Hpc > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StdVectorSmartPointerHpc_erase" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< Hpc > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::tr1::shared_ptr< Hpc > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::tr1::shared_ptr< Hpc > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StdVectorSmartPointerHpc_erase" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< Hpc > >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::tr1::shared_ptr< Hpc > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerHpc_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Hpc > > *arg1 = (std::vector< std::tr1::shared_ptr< Hpc > > *) 0 ;
  std::vector< std::tr1::shared_ptr< Hpc > >::iterator arg2 ;
  std::vector< std::tr1::shared_ptr< Hpc > >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< std::tr1::shared_ptr< Hpc > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StdVectorSmartPointerHpc_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Hpc_t_std__allocatorT_std__tr1__shared_ptrT_Hpc_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerHpc_erase" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Hpc > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Hpc > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StdVectorSmartPointerHpc_erase" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< Hpc > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::tr1::shared_ptr< Hpc > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::tr1::shared_ptr< Hpc > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StdVectorSmartPointerHpc_erase" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< Hpc > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StdVectorSmartPointerHpc_erase" "', argument " "3"" of type '" "std::vector< std::tr1::shared_ptr< Hpc > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::tr1::shared_ptr< Hpc > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::tr1::shared_ptr< Hpc > >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StdVectorSmartPointerHpc_erase" "', argument " "3"" of type '" "std::vector< std::tr1::shared_ptr< Hpc > >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::tr1::shared_ptr< Hpc > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerHpc_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::tr1::shared_ptr< Hpc >,std::allocator< std::tr1::shared_ptr< Hpc > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::tr1::shared_ptr< Hpc > >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_StdVectorSmartPointerHpc_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::tr1::shared_ptr< Hpc >,std::allocator< std::tr1::shared_ptr< Hpc > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::tr1::shared_ptr< Hpc > >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::tr1::shared_ptr< Hpc > >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_StdVectorSmartPointerHpc_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'StdVectorSmartPointerHpc_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    erase(std::vector< std::tr1::shared_ptr< Hpc > > *,std::vector< std::tr1::shared_ptr< Hpc > >::iterator)\n"
    "    erase(std::vector< std::tr1::shared_ptr< Hpc > > *,std::vector< std::tr1::shared_ptr< Hpc > >::iterator,std::vector< std::tr1::shared_ptr< Hpc > >::iterator)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StdVectorSmartPointerHpc__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Hpc > >::size_type arg1 ;
  std::vector< std::tr1::shared_ptr< Hpc > >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< std::tr1::shared_ptr< Hpc > >::value_type tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::tr1::shared_ptr< Hpc > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_StdVectorSmartPointerHpc",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_StdVectorSmartPointerHpc" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Hpc > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::tr1::shared_ptr< Hpc > >::size_type >(val1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_StdVectorSmartPointerHpc" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< Hpc > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< std::vector< std::tr1::shared_ptr< Hpc > >::value_type * >(argp2);
      delete reinterpret_cast< std::vector< std::tr1::shared_ptr< Hpc > >::value_type * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< std::vector< std::tr1::shared_ptr< Hpc > >::value_type * >(argp2) : &tempshared2;
    }
  }
  result = (std::vector< std::tr1::shared_ptr< Hpc > > *)new std::vector< std::tr1::shared_ptr< Hpc > >(arg1,(std::vector< std::tr1::shared_ptr< Hpc > >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Hpc_t_std__allocatorT_std__tr1__shared_ptrT_Hpc_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StdVectorSmartPointerHpc(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_StdVectorSmartPointerHpc__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_StdVectorSmartPointerHpc__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::tr1::shared_ptr< Hpc >,std::allocator< std::tr1::shared_ptr< Hpc > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_StdVectorSmartPointerHpc__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_StdVectorSmartPointerHpc__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_StdVectorSmartPointerHpc'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::tr1::shared_ptr< Hpc > >()\n"
    "    std::vector< std::tr1::shared_ptr< Hpc > >(std::vector< std::tr1::shared_ptr< Hpc > > const &)\n"
    "    std::vector< std::tr1::shared_ptr< Hpc > >(std::vector< std::tr1::shared_ptr< Hpc > >::size_type)\n"
    "    std::vector< std::tr1::shared_ptr< Hpc > >(std::vector< std::tr1::shared_ptr< Hpc > >::size_type,std::vector< std::tr1::shared_ptr< Hpc > >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerHpc_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Hpc > > *arg1 = (std::vector< std::tr1::shared_ptr< Hpc > > *) 0 ;
  std::vector< std::tr1::shared_ptr< Hpc > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< std::tr1::shared_ptr< Hpc > >::value_type tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StdVectorSmartPointerHpc_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Hpc_t_std__allocatorT_std__tr1__shared_ptrT_Hpc_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerHpc_push_back" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Hpc > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Hpc > > * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StdVectorSmartPointerHpc_push_back" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< Hpc > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< std::vector< std::tr1::shared_ptr< Hpc > >::value_type * >(argp2);
      delete reinterpret_cast< std::vector< std::tr1::shared_ptr< Hpc > >::value_type * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< std::vector< std::tr1::shared_ptr< Hpc > >::value_type * >(argp2) : &tempshared2;
    }
  }
  (arg1)->push_back((std::vector< std::tr1::shared_ptr< Hpc > >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerHpc_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Hpc > > *arg1 = (std::vector< std::tr1::shared_ptr< Hpc > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::tr1::shared_ptr< Hpc > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorSmartPointerHpc_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Hpc_t_std__allocatorT_std__tr1__shared_ptrT_Hpc_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerHpc_front" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Hpc > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Hpc > > * >(argp1);
  result = (std::vector< std::tr1::shared_ptr< Hpc > >::value_type *) &((std::vector< std::tr1::shared_ptr< Hpc > > const *)arg1)->front();
  {
    std::tr1::shared_ptr<  Hpc > *smartresult = *result ? new std::tr1::shared_ptr<  Hpc >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerHpc_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Hpc > > *arg1 = (std::vector< std::tr1::shared_ptr< Hpc > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::tr1::shared_ptr< Hpc > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorSmartPointerHpc_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Hpc_t_std__allocatorT_std__tr1__shared_ptrT_Hpc_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerHpc_back" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Hpc > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Hpc > > * >(argp1);
  result = (std::vector< std::tr1::shared_ptr< Hpc > >::value_type *) &((std::vector< std::tr1::shared_ptr< Hpc > > const *)arg1)->back();
  {
    std::tr1::shared_ptr<  Hpc > *smartresult = *result ? new std::tr1::shared_ptr<  Hpc >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerHpc_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Hpc > > *arg1 = (std::vector< std::tr1::shared_ptr< Hpc > > *) 0 ;
  std::vector< std::tr1::shared_ptr< Hpc > >::size_type arg2 ;
  std::vector< std::tr1::shared_ptr< Hpc > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< std::tr1::shared_ptr< Hpc > >::value_type tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StdVectorSmartPointerHpc_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Hpc_t_std__allocatorT_std__tr1__shared_ptrT_Hpc_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerHpc_assign" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Hpc > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Hpc > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StdVectorSmartPointerHpc_assign" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< Hpc > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::tr1::shared_ptr< Hpc > >::size_type >(val2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "StdVectorSmartPointerHpc_assign" "', argument " "3"" of type '" "std::vector< std::tr1::shared_ptr< Hpc > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< std::tr1::shared_ptr< Hpc > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< std::tr1::shared_ptr< Hpc > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< std::tr1::shared_ptr< Hpc > >::value_type * >(argp3) : &tempshared3;
    }
  }
  (arg1)->assign(arg2,(std::vector< std::tr1::shared_ptr< Hpc > >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerHpc_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Hpc > > *arg1 = (std::vector< std::tr1::shared_ptr< Hpc > > *) 0 ;
  std::vector< std::tr1::shared_ptr< Hpc > >::size_type arg2 ;
  std::vector< std::tr1::shared_ptr< Hpc > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< std::tr1::shared_ptr< Hpc > >::value_type tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StdVectorSmartPointerHpc_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Hpc_t_std__allocatorT_std__tr1__shared_ptrT_Hpc_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerHpc_resize" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Hpc > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Hpc > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StdVectorSmartPointerHpc_resize" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< Hpc > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::tr1::shared_ptr< Hpc > >::size_type >(val2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "StdVectorSmartPointerHpc_resize" "', argument " "3"" of type '" "std::vector< std::tr1::shared_ptr< Hpc > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< std::tr1::shared_ptr< Hpc > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< std::tr1::shared_ptr< Hpc > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< std::tr1::shared_ptr< Hpc > >::value_type * >(argp3) : &tempshared3;
    }
  }
  (arg1)->resize(arg2,(std::vector< std::tr1::shared_ptr< Hpc > >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerHpc_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::tr1::shared_ptr< Hpc >,std::allocator< std::tr1::shared_ptr< Hpc > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_StdVectorSmartPointerHpc_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::tr1::shared_ptr< Hpc >,std::allocator< std::tr1::shared_ptr< Hpc > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_StdVectorSmartPointerHpc_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'StdVectorSmartPointerHpc_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    resize(std::vector< std::tr1::shared_ptr< Hpc > > *,std::vector< std::tr1::shared_ptr< Hpc > >::size_type)\n"
    "    resize(std::vector< std::tr1::shared_ptr< Hpc > > *,std::vector< std::tr1::shared_ptr< Hpc > >::size_type,std::vector< std::tr1::shared_ptr< Hpc > >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerHpc_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Hpc > > *arg1 = (std::vector< std::tr1::shared_ptr< Hpc > > *) 0 ;
  std::vector< std::tr1::shared_ptr< Hpc > >::iterator arg2 ;
  std::vector< std::tr1::shared_ptr< Hpc > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< std::tr1::shared_ptr< Hpc > >::value_type tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< std::tr1::shared_ptr< Hpc > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StdVectorSmartPointerHpc_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Hpc_t_std__allocatorT_std__tr1__shared_ptrT_Hpc_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerHpc_insert" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Hpc > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Hpc > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StdVectorSmartPointerHpc_insert" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< Hpc > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::tr1::shared_ptr< Hpc > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::tr1::shared_ptr< Hpc > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StdVectorSmartPointerHpc_insert" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< Hpc > >::iterator""'");
    }
  }
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "StdVectorSmartPointerHpc_insert" "', argument " "3"" of type '" "std::vector< std::tr1::shared_ptr< Hpc > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< std::tr1::shared_ptr< Hpc > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< std::tr1::shared_ptr< Hpc > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< std::tr1::shared_ptr< Hpc > >::value_type * >(argp3) : &tempshared3;
    }
  }
  result = (arg1)->insert(arg2,(std::vector< std::tr1::shared_ptr< Hpc > >::value_type const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::tr1::shared_ptr< Hpc > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerHpc_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Hpc > > *arg1 = (std::vector< std::tr1::shared_ptr< Hpc > > *) 0 ;
  std::vector< std::tr1::shared_ptr< Hpc > >::iterator arg2 ;
  std::vector< std::tr1::shared_ptr< Hpc > >::size_type arg3 ;
  std::vector< std::tr1::shared_ptr< Hpc > >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  std::vector< std::tr1::shared_ptr< Hpc > >::value_type tempshared4 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:StdVectorSmartPointerHpc_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Hpc_t_std__allocatorT_std__tr1__shared_ptrT_Hpc_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerHpc_insert" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Hpc > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Hpc > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StdVectorSmartPointerHpc_insert" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< Hpc > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::tr1::shared_ptr< Hpc > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::tr1::shared_ptr< Hpc > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StdVectorSmartPointerHpc_insert" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< Hpc > >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StdVectorSmartPointerHpc_insert" "', argument " "3"" of type '" "std::vector< std::tr1::shared_ptr< Hpc > >::size_type""'");
  } 
  arg3 = static_cast< std::vector< std::tr1::shared_ptr< Hpc > >::size_type >(val3);
  {
    int newmem = 0;
    res4 = SWIG_ConvertPtrAndOwn(obj3, &argp4, SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t,  0 , &newmem);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "StdVectorSmartPointerHpc_insert" "', argument " "4"" of type '" "std::vector< std::tr1::shared_ptr< Hpc > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp4) tempshared4 = *reinterpret_cast< std::vector< std::tr1::shared_ptr< Hpc > >::value_type * >(argp4);
      delete reinterpret_cast< std::vector< std::tr1::shared_ptr< Hpc > >::value_type * >(argp4);
      arg4 = &tempshared4;
    } else {
      arg4 = (argp4) ? reinterpret_cast< std::vector< std::tr1::shared_ptr< Hpc > >::value_type * >(argp4) : &tempshared4;
    }
  }
  (arg1)->insert(arg2,arg3,(std::vector< std::tr1::shared_ptr< Hpc > >::value_type const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerHpc_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::tr1::shared_ptr< Hpc >,std::allocator< std::tr1::shared_ptr< Hpc > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::tr1::shared_ptr< Hpc > >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_StdVectorSmartPointerHpc_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::tr1::shared_ptr< Hpc >,std::allocator< std::tr1::shared_ptr< Hpc > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::tr1::shared_ptr< Hpc > >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_StdVectorSmartPointerHpc_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'StdVectorSmartPointerHpc_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    insert(std::vector< std::tr1::shared_ptr< Hpc > > *,std::vector< std::tr1::shared_ptr< Hpc > >::iterator,std::vector< std::tr1::shared_ptr< Hpc > >::value_type const &)\n"
    "    insert(std::vector< std::tr1::shared_ptr< Hpc > > *,std::vector< std::tr1::shared_ptr< Hpc > >::iterator,std::vector< std::tr1::shared_ptr< Hpc > >::size_type,std::vector< std::tr1::shared_ptr< Hpc > >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerHpc_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Hpc > > *arg1 = (std::vector< std::tr1::shared_ptr< Hpc > > *) 0 ;
  std::vector< std::tr1::shared_ptr< Hpc > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StdVectorSmartPointerHpc_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Hpc_t_std__allocatorT_std__tr1__shared_ptrT_Hpc_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerHpc_reserve" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Hpc > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Hpc > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StdVectorSmartPointerHpc_reserve" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< Hpc > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::tr1::shared_ptr< Hpc > >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerHpc_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Hpc > > *arg1 = (std::vector< std::tr1::shared_ptr< Hpc > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::tr1::shared_ptr< Hpc > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorSmartPointerHpc_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Hpc_t_std__allocatorT_std__tr1__shared_ptrT_Hpc_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerHpc_capacity" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Hpc > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Hpc > > * >(argp1);
  result = ((std::vector< std::tr1::shared_ptr< Hpc > > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_StdVectorSmartPointerHpc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Hpc > > *arg1 = (std::vector< std::tr1::shared_ptr< Hpc > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_StdVectorSmartPointerHpc",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Hpc_t_std__allocatorT_std__tr1__shared_ptrT_Hpc_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_StdVectorSmartPointerHpc" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Hpc > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Hpc > > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *StdVectorSmartPointerHpc_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Hpc_t_std__allocatorT_std__tr1__shared_ptrT_Hpc_t_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_StdVectorSmartPointerBatch_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Batch > > *arg1 = (std::vector< std::tr1::shared_ptr< Batch > > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorSmartPointerBatch_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Batch_t_std__allocatorT_std__tr1__shared_ptrT_Batch_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerBatch_iterator" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Batch > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Batch > > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_std_tr1_shared_ptr_Sl_Batch_Sg__Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerBatch___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Batch > > *arg1 = (std::vector< std::tr1::shared_ptr< Batch > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorSmartPointerBatch___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Batch_t_std__allocatorT_std__tr1__shared_ptrT_Batch_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerBatch___nonzero__" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Batch > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Batch > > * >(argp1);
  result = (bool)std_vector_Sl_std_tr1_shared_ptr_Sl_Batch_Sg__Sg____nonzero__((std::vector< std::tr1::shared_ptr< Batch > > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerBatch___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Batch > > *arg1 = (std::vector< std::tr1::shared_ptr< Batch > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorSmartPointerBatch___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Batch_t_std__allocatorT_std__tr1__shared_ptrT_Batch_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerBatch___bool__" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Batch > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Batch > > * >(argp1);
  result = (bool)std_vector_Sl_std_tr1_shared_ptr_Sl_Batch_Sg__Sg____bool__((std::vector< std::tr1::shared_ptr< Batch > > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerBatch___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Batch > > *arg1 = (std::vector< std::tr1::shared_ptr< Batch > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::tr1::shared_ptr< Batch > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorSmartPointerBatch___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Batch_t_std__allocatorT_std__tr1__shared_ptrT_Batch_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerBatch___len__" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Batch > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Batch > > * >(argp1);
  result = std_vector_Sl_std_tr1_shared_ptr_Sl_Batch_Sg__Sg____len__((std::vector< std::tr1::shared_ptr< Batch > > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerBatch_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Batch > > *arg1 = (std::vector< std::tr1::shared_ptr< Batch > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::tr1::shared_ptr< Batch > >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorSmartPointerBatch_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Batch_t_std__allocatorT_std__tr1__shared_ptrT_Batch_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerBatch_pop" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Batch > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Batch > > * >(argp1);
  try {
    result = std_vector_Sl_std_tr1_shared_ptr_Sl_Batch_Sg__Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  {
    std::tr1::shared_ptr<  Batch > *smartresult = result ? new std::tr1::shared_ptr<  Batch >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Batch_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerBatch___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Batch > > *arg1 = (std::vector< std::tr1::shared_ptr< Batch > > *) 0 ;
  std::vector< std::tr1::shared_ptr< Batch > >::difference_type arg2 ;
  std::vector< std::tr1::shared_ptr< Batch > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StdVectorSmartPointerBatch___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Batch_t_std__allocatorT_std__tr1__shared_ptrT_Batch_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerBatch___getslice__" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Batch > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Batch > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StdVectorSmartPointerBatch___getslice__" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< Batch > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::tr1::shared_ptr< Batch > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StdVectorSmartPointerBatch___getslice__" "', argument " "3"" of type '" "std::vector< std::tr1::shared_ptr< Batch > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::tr1::shared_ptr< Batch > >::difference_type >(val3);
  try {
    result = (std::vector< std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > *)std_vector_Sl_std_tr1_shared_ptr_Sl_Batch_Sg__Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Batch_t_std__allocatorT_std__tr1__shared_ptrT_Batch_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerBatch___setslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Batch > > *arg1 = (std::vector< std::tr1::shared_ptr< Batch > > *) 0 ;
  std::vector< std::tr1::shared_ptr< Batch > >::difference_type arg2 ;
  std::vector< std::tr1::shared_ptr< Batch > >::difference_type arg3 ;
  std::vector< std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:StdVectorSmartPointerBatch___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Batch_t_std__allocatorT_std__tr1__shared_ptrT_Batch_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerBatch___setslice__" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Batch > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Batch > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StdVectorSmartPointerBatch___setslice__" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< Batch > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::tr1::shared_ptr< Batch > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StdVectorSmartPointerBatch___setslice__" "', argument " "3"" of type '" "std::vector< std::tr1::shared_ptr< Batch > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::tr1::shared_ptr< Batch > >::difference_type >(val3);
  {
    std::vector<std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > *ptr = (std::vector<std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "StdVectorSmartPointerBatch___setslice__" "', argument " "4"" of type '" "std::vector< std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StdVectorSmartPointerBatch___setslice__" "', argument " "4"" of type '" "std::vector< std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_std_tr1_shared_ptr_Sl_Batch_Sg__Sg____setslice__(arg1,arg2,arg3,(std::vector< std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerBatch___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Batch > > *arg1 = (std::vector< std::tr1::shared_ptr< Batch > > *) 0 ;
  std::vector< std::tr1::shared_ptr< Batch > >::difference_type arg2 ;
  std::vector< std::tr1::shared_ptr< Batch > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StdVectorSmartPointerBatch___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Batch_t_std__allocatorT_std__tr1__shared_ptrT_Batch_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerBatch___delslice__" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Batch > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Batch > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StdVectorSmartPointerBatch___delslice__" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< Batch > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::tr1::shared_ptr< Batch > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StdVectorSmartPointerBatch___delslice__" "', argument " "3"" of type '" "std::vector< std::tr1::shared_ptr< Batch > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::tr1::shared_ptr< Batch > >::difference_type >(val3);
  try {
    std_vector_Sl_std_tr1_shared_ptr_Sl_Batch_Sg__Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerBatch___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Batch > > *arg1 = (std::vector< std::tr1::shared_ptr< Batch > > *) 0 ;
  std::vector< std::tr1::shared_ptr< Batch > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StdVectorSmartPointerBatch___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Batch_t_std__allocatorT_std__tr1__shared_ptrT_Batch_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerBatch___delitem__" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Batch > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Batch > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StdVectorSmartPointerBatch___delitem__" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< Batch > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::tr1::shared_ptr< Batch > >::difference_type >(val2);
  try {
    std_vector_Sl_std_tr1_shared_ptr_Sl_Batch_Sg__Sg____delitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerBatch___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Batch > > *arg1 = (std::vector< std::tr1::shared_ptr< Batch > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StdVectorSmartPointerBatch___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Batch_t_std__allocatorT_std__tr1__shared_ptrT_Batch_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerBatch___getitem__" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Batch > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Batch > > * >(argp1);
  {
    arg2 = (PySliceObject *) obj1;
  }
  try {
    result = (std::vector< std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > *)std_vector_Sl_std_tr1_shared_ptr_Sl_Batch_Sg__Sg____getitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Batch_t_std__allocatorT_std__tr1__shared_ptrT_Batch_t_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerBatch___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Batch > > *arg1 = (std::vector< std::tr1::shared_ptr< Batch > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StdVectorSmartPointerBatch___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Batch_t_std__allocatorT_std__tr1__shared_ptrT_Batch_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerBatch___setitem__" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Batch > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Batch > > * >(argp1);
  {
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector<std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > *ptr = (std::vector<std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "StdVectorSmartPointerBatch___setitem__" "', argument " "3"" of type '" "std::vector< std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StdVectorSmartPointerBatch___setitem__" "', argument " "3"" of type '" "std::vector< std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_std_tr1_shared_ptr_Sl_Batch_Sg__Sg____setitem____SWIG_0(arg1,arg2,(std::vector< std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerBatch___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Batch > > *arg1 = (std::vector< std::tr1::shared_ptr< Batch > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StdVectorSmartPointerBatch___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Batch_t_std__allocatorT_std__tr1__shared_ptrT_Batch_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerBatch___delitem__" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Batch > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Batch > > * >(argp1);
  {
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_vector_Sl_std_tr1_shared_ptr_Sl_Batch_Sg__Sg____delitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerBatch___delitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_StdVectorSmartPointerBatch___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_StdVectorSmartPointerBatch___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'StdVectorSmartPointerBatch___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    __delitem__(std::vector< std::tr1::shared_ptr< Batch > > *,std::vector< std::tr1::shared_ptr< Batch > >::difference_type)\n"
    "    __delitem__(std::vector< std::tr1::shared_ptr< Batch > > *,PySliceObject *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerBatch___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Batch > > *arg1 = (std::vector< std::tr1::shared_ptr< Batch > > *) 0 ;
  std::vector< std::tr1::shared_ptr< Batch > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::tr1::shared_ptr< Batch > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StdVectorSmartPointerBatch___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Batch_t_std__allocatorT_std__tr1__shared_ptrT_Batch_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerBatch___getitem__" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Batch > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Batch > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StdVectorSmartPointerBatch___getitem__" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< Batch > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::tr1::shared_ptr< Batch > >::difference_type >(val2);
  try {
    result = (std::vector< std::tr1::shared_ptr< Batch > >::value_type *) &std_vector_Sl_std_tr1_shared_ptr_Sl_Batch_Sg__Sg____getitem____SWIG_1((std::vector< std::tr1::shared_ptr< Batch > > const *)arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  {
    std::tr1::shared_ptr<  Batch > *smartresult = *result ? new std::tr1::shared_ptr<  Batch >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Batch_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerBatch___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_StdVectorSmartPointerBatch___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_StdVectorSmartPointerBatch___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'StdVectorSmartPointerBatch___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    __getitem__(std::vector< std::tr1::shared_ptr< Batch > > *,PySliceObject *)\n"
    "    __getitem__(std::vector< std::tr1::shared_ptr< Batch > > const *,std::vector< std::tr1::shared_ptr< Batch > >::difference_type)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerBatch___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Batch > > *arg1 = (std::vector< std::tr1::shared_ptr< Batch > > *) 0 ;
  std::vector< std::tr1::shared_ptr< Batch > >::difference_type arg2 ;
  std::vector< std::tr1::shared_ptr< Batch > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< std::tr1::shared_ptr< Batch > >::value_type tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StdVectorSmartPointerBatch___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Batch_t_std__allocatorT_std__tr1__shared_ptrT_Batch_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerBatch___setitem__" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Batch > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Batch > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StdVectorSmartPointerBatch___setitem__" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< Batch > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::tr1::shared_ptr< Batch > >::difference_type >(val2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_std__tr1__shared_ptrT_Batch_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "StdVectorSmartPointerBatch___setitem__" "', argument " "3"" of type '" "std::vector< std::tr1::shared_ptr< Batch > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< std::tr1::shared_ptr< Batch > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< std::tr1::shared_ptr< Batch > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< std::tr1::shared_ptr< Batch > >::value_type * >(argp3) : &tempshared3;
    }
  }
  try {
    std_vector_Sl_std_tr1_shared_ptr_Sl_Batch_Sg__Sg____setitem____SWIG_1(arg1,arg2,(std::tr1::shared_ptr< Batch > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerBatch___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_StdVectorSmartPointerBatch___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Batch_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_StdVectorSmartPointerBatch___setitem____SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'StdVectorSmartPointerBatch___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    __setitem__(std::vector< std::tr1::shared_ptr< Batch > > *,PySliceObject *,std::vector< std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > const &)\n"
    "    __setitem__(std::vector< std::tr1::shared_ptr< Batch > > *,std::vector< std::tr1::shared_ptr< Batch > >::difference_type,std::vector< std::tr1::shared_ptr< Batch > >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerBatch_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Batch > > *arg1 = (std::vector< std::tr1::shared_ptr< Batch > > *) 0 ;
  std::vector< std::tr1::shared_ptr< Batch > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< std::tr1::shared_ptr< Batch > >::value_type tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StdVectorSmartPointerBatch_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Batch_t_std__allocatorT_std__tr1__shared_ptrT_Batch_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerBatch_append" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Batch > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Batch > > * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_std__tr1__shared_ptrT_Batch_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StdVectorSmartPointerBatch_append" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< Batch > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< std::vector< std::tr1::shared_ptr< Batch > >::value_type * >(argp2);
      delete reinterpret_cast< std::vector< std::tr1::shared_ptr< Batch > >::value_type * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< std::vector< std::tr1::shared_ptr< Batch > >::value_type * >(argp2) : &tempshared2;
    }
  }
  std_vector_Sl_std_tr1_shared_ptr_Sl_Batch_Sg__Sg__append(arg1,(std::tr1::shared_ptr< Batch > const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StdVectorSmartPointerBatch__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Batch > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_StdVectorSmartPointerBatch")) SWIG_fail;
  result = (std::vector< std::tr1::shared_ptr< Batch > > *)new std::vector< std::tr1::shared_ptr< Batch > >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Batch_t_std__allocatorT_std__tr1__shared_ptrT_Batch_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StdVectorSmartPointerBatch__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Batch > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< std::tr1::shared_ptr< Batch > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_StdVectorSmartPointerBatch",&obj0)) SWIG_fail;
  {
    std::vector<std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > *ptr = (std::vector<std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_StdVectorSmartPointerBatch" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Batch > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_StdVectorSmartPointerBatch" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Batch > > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< std::tr1::shared_ptr< Batch > > *)new std::vector< std::tr1::shared_ptr< Batch > >((std::vector< std::tr1::shared_ptr< Batch > > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Batch_t_std__allocatorT_std__tr1__shared_ptrT_Batch_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerBatch_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Batch > > *arg1 = (std::vector< std::tr1::shared_ptr< Batch > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorSmartPointerBatch_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Batch_t_std__allocatorT_std__tr1__shared_ptrT_Batch_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerBatch_empty" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Batch > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Batch > > * >(argp1);
  result = (bool)((std::vector< std::tr1::shared_ptr< Batch > > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerBatch_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Batch > > *arg1 = (std::vector< std::tr1::shared_ptr< Batch > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::tr1::shared_ptr< Batch > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorSmartPointerBatch_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Batch_t_std__allocatorT_std__tr1__shared_ptrT_Batch_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerBatch_size" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Batch > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Batch > > * >(argp1);
  result = ((std::vector< std::tr1::shared_ptr< Batch > > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerBatch_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Batch > > *arg1 = (std::vector< std::tr1::shared_ptr< Batch > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorSmartPointerBatch_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Batch_t_std__allocatorT_std__tr1__shared_ptrT_Batch_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerBatch_clear" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Batch > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Batch > > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerBatch_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Batch > > *arg1 = (std::vector< std::tr1::shared_ptr< Batch > > *) 0 ;
  std::vector< std::tr1::shared_ptr< Batch > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StdVectorSmartPointerBatch_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Batch_t_std__allocatorT_std__tr1__shared_ptrT_Batch_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerBatch_swap" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Batch > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Batch > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Batch_t_std__allocatorT_std__tr1__shared_ptrT_Batch_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StdVectorSmartPointerBatch_swap" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< Batch > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StdVectorSmartPointerBatch_swap" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< Batch > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Batch > > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerBatch_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Batch > > *arg1 = (std::vector< std::tr1::shared_ptr< Batch > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< std::tr1::shared_ptr< Batch > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorSmartPointerBatch_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Batch_t_std__allocatorT_std__tr1__shared_ptrT_Batch_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerBatch_get_allocator" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Batch > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Batch > > * >(argp1);
  result = ((std::vector< std::tr1::shared_ptr< Batch > > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< std::tr1::shared_ptr< Batch > >::allocator_type(static_cast< const std::vector< std::tr1::shared_ptr< Batch > >::allocator_type& >(result))), SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Batch_t_std__allocatorT_std__tr1__shared_ptrT_Batch_t_t_t__allocator_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerBatch_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Batch > > *arg1 = (std::vector< std::tr1::shared_ptr< Batch > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::tr1::shared_ptr< Batch > >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorSmartPointerBatch_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Batch_t_std__allocatorT_std__tr1__shared_ptrT_Batch_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerBatch_begin" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Batch > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Batch > > * >(argp1);
  result = ((std::vector< std::tr1::shared_ptr< Batch > > const *)arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::tr1::shared_ptr< Batch > >::const_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerBatch_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Batch > > *arg1 = (std::vector< std::tr1::shared_ptr< Batch > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::tr1::shared_ptr< Batch > >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorSmartPointerBatch_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Batch_t_std__allocatorT_std__tr1__shared_ptrT_Batch_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerBatch_end" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Batch > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Batch > > * >(argp1);
  result = ((std::vector< std::tr1::shared_ptr< Batch > > const *)arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::tr1::shared_ptr< Batch > >::const_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerBatch_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Batch > > *arg1 = (std::vector< std::tr1::shared_ptr< Batch > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::tr1::shared_ptr< Batch > >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorSmartPointerBatch_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Batch_t_std__allocatorT_std__tr1__shared_ptrT_Batch_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerBatch_rbegin" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Batch > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Batch > > * >(argp1);
  result = ((std::vector< std::tr1::shared_ptr< Batch > > const *)arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::tr1::shared_ptr< Batch > >::const_reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerBatch_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Batch > > *arg1 = (std::vector< std::tr1::shared_ptr< Batch > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::tr1::shared_ptr< Batch > >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorSmartPointerBatch_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Batch_t_std__allocatorT_std__tr1__shared_ptrT_Batch_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerBatch_rend" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Batch > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Batch > > * >(argp1);
  result = ((std::vector< std::tr1::shared_ptr< Batch > > const *)arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::tr1::shared_ptr< Batch > >::const_reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StdVectorSmartPointerBatch__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Batch > >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::tr1::shared_ptr< Batch > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_StdVectorSmartPointerBatch",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_StdVectorSmartPointerBatch" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Batch > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::tr1::shared_ptr< Batch > >::size_type >(val1);
  result = (std::vector< std::tr1::shared_ptr< Batch > > *)new std::vector< std::tr1::shared_ptr< Batch > >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Batch_t_std__allocatorT_std__tr1__shared_ptrT_Batch_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerBatch_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Batch > > *arg1 = (std::vector< std::tr1::shared_ptr< Batch > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorSmartPointerBatch_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Batch_t_std__allocatorT_std__tr1__shared_ptrT_Batch_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerBatch_pop_back" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Batch > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Batch > > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerBatch_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Batch > > *arg1 = (std::vector< std::tr1::shared_ptr< Batch > > *) 0 ;
  std::vector< std::tr1::shared_ptr< Batch > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StdVectorSmartPointerBatch_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Batch_t_std__allocatorT_std__tr1__shared_ptrT_Batch_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerBatch_resize" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Batch > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Batch > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StdVectorSmartPointerBatch_resize" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< Batch > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::tr1::shared_ptr< Batch > >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerBatch_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Batch > > *arg1 = (std::vector< std::tr1::shared_ptr< Batch > > *) 0 ;
  std::vector< std::tr1::shared_ptr< Batch > >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::tr1::shared_ptr< Batch > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StdVectorSmartPointerBatch_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Batch_t_std__allocatorT_std__tr1__shared_ptrT_Batch_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerBatch_erase" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Batch > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Batch > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StdVectorSmartPointerBatch_erase" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< Batch > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::tr1::shared_ptr< Batch > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::tr1::shared_ptr< Batch > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StdVectorSmartPointerBatch_erase" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< Batch > >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::tr1::shared_ptr< Batch > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerBatch_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Batch > > *arg1 = (std::vector< std::tr1::shared_ptr< Batch > > *) 0 ;
  std::vector< std::tr1::shared_ptr< Batch > >::iterator arg2 ;
  std::vector< std::tr1::shared_ptr< Batch > >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< std::tr1::shared_ptr< Batch > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StdVectorSmartPointerBatch_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Batch_t_std__allocatorT_std__tr1__shared_ptrT_Batch_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerBatch_erase" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Batch > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Batch > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StdVectorSmartPointerBatch_erase" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< Batch > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::tr1::shared_ptr< Batch > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::tr1::shared_ptr< Batch > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StdVectorSmartPointerBatch_erase" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< Batch > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StdVectorSmartPointerBatch_erase" "', argument " "3"" of type '" "std::vector< std::tr1::shared_ptr< Batch > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::tr1::shared_ptr< Batch > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::tr1::shared_ptr< Batch > >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StdVectorSmartPointerBatch_erase" "', argument " "3"" of type '" "std::vector< std::tr1::shared_ptr< Batch > >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::tr1::shared_ptr< Batch > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerBatch_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::tr1::shared_ptr< Batch > >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_StdVectorSmartPointerBatch_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::tr1::shared_ptr< Batch > >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::tr1::shared_ptr< Batch > >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_StdVectorSmartPointerBatch_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'StdVectorSmartPointerBatch_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    erase(std::vector< std::tr1::shared_ptr< Batch > > *,std::vector< std::tr1::shared_ptr< Batch > >::iterator)\n"
    "    erase(std::vector< std::tr1::shared_ptr< Batch > > *,std::vector< std::tr1::shared_ptr< Batch > >::iterator,std::vector< std::tr1::shared_ptr< Batch > >::iterator)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StdVectorSmartPointerBatch__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Batch > >::size_type arg1 ;
  std::vector< std::tr1::shared_ptr< Batch > >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< std::tr1::shared_ptr< Batch > >::value_type tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::tr1::shared_ptr< Batch > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_StdVectorSmartPointerBatch",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_StdVectorSmartPointerBatch" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Batch > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::tr1::shared_ptr< Batch > >::size_type >(val1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_std__tr1__shared_ptrT_Batch_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_StdVectorSmartPointerBatch" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< Batch > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< std::vector< std::tr1::shared_ptr< Batch > >::value_type * >(argp2);
      delete reinterpret_cast< std::vector< std::tr1::shared_ptr< Batch > >::value_type * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< std::vector< std::tr1::shared_ptr< Batch > >::value_type * >(argp2) : &tempshared2;
    }
  }
  result = (std::vector< std::tr1::shared_ptr< Batch > > *)new std::vector< std::tr1::shared_ptr< Batch > >(arg1,(std::vector< std::tr1::shared_ptr< Batch > >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Batch_t_std__allocatorT_std__tr1__shared_ptrT_Batch_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StdVectorSmartPointerBatch(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_StdVectorSmartPointerBatch__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_StdVectorSmartPointerBatch__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_StdVectorSmartPointerBatch__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Batch_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_StdVectorSmartPointerBatch__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_StdVectorSmartPointerBatch'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::tr1::shared_ptr< Batch > >()\n"
    "    std::vector< std::tr1::shared_ptr< Batch > >(std::vector< std::tr1::shared_ptr< Batch > > const &)\n"
    "    std::vector< std::tr1::shared_ptr< Batch > >(std::vector< std::tr1::shared_ptr< Batch > >::size_type)\n"
    "    std::vector< std::tr1::shared_ptr< Batch > >(std::vector< std::tr1::shared_ptr< Batch > >::size_type,std::vector< std::tr1::shared_ptr< Batch > >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerBatch_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Batch > > *arg1 = (std::vector< std::tr1::shared_ptr< Batch > > *) 0 ;
  std::vector< std::tr1::shared_ptr< Batch > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< std::tr1::shared_ptr< Batch > >::value_type tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StdVectorSmartPointerBatch_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Batch_t_std__allocatorT_std__tr1__shared_ptrT_Batch_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerBatch_push_back" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Batch > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Batch > > * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_std__tr1__shared_ptrT_Batch_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StdVectorSmartPointerBatch_push_back" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< Batch > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< std::vector< std::tr1::shared_ptr< Batch > >::value_type * >(argp2);
      delete reinterpret_cast< std::vector< std::tr1::shared_ptr< Batch > >::value_type * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< std::vector< std::tr1::shared_ptr< Batch > >::value_type * >(argp2) : &tempshared2;
    }
  }
  (arg1)->push_back((std::vector< std::tr1::shared_ptr< Batch > >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerBatch_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Batch > > *arg1 = (std::vector< std::tr1::shared_ptr< Batch > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::tr1::shared_ptr< Batch > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorSmartPointerBatch_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Batch_t_std__allocatorT_std__tr1__shared_ptrT_Batch_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerBatch_front" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Batch > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Batch > > * >(argp1);
  result = (std::vector< std::tr1::shared_ptr< Batch > >::value_type *) &((std::vector< std::tr1::shared_ptr< Batch > > const *)arg1)->front();
  {
    std::tr1::shared_ptr<  Batch > *smartresult = *result ? new std::tr1::shared_ptr<  Batch >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Batch_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerBatch_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Batch > > *arg1 = (std::vector< std::tr1::shared_ptr< Batch > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::tr1::shared_ptr< Batch > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorSmartPointerBatch_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Batch_t_std__allocatorT_std__tr1__shared_ptrT_Batch_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerBatch_back" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Batch > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Batch > > * >(argp1);
  result = (std::vector< std::tr1::shared_ptr< Batch > >::value_type *) &((std::vector< std::tr1::shared_ptr< Batch > > const *)arg1)->back();
  {
    std::tr1::shared_ptr<  Batch > *smartresult = *result ? new std::tr1::shared_ptr<  Batch >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Batch_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerBatch_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Batch > > *arg1 = (std::vector< std::tr1::shared_ptr< Batch > > *) 0 ;
  std::vector< std::tr1::shared_ptr< Batch > >::size_type arg2 ;
  std::vector< std::tr1::shared_ptr< Batch > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< std::tr1::shared_ptr< Batch > >::value_type tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StdVectorSmartPointerBatch_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Batch_t_std__allocatorT_std__tr1__shared_ptrT_Batch_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerBatch_assign" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Batch > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Batch > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StdVectorSmartPointerBatch_assign" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< Batch > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::tr1::shared_ptr< Batch > >::size_type >(val2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_std__tr1__shared_ptrT_Batch_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "StdVectorSmartPointerBatch_assign" "', argument " "3"" of type '" "std::vector< std::tr1::shared_ptr< Batch > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< std::tr1::shared_ptr< Batch > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< std::tr1::shared_ptr< Batch > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< std::tr1::shared_ptr< Batch > >::value_type * >(argp3) : &tempshared3;
    }
  }
  (arg1)->assign(arg2,(std::vector< std::tr1::shared_ptr< Batch > >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerBatch_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Batch > > *arg1 = (std::vector< std::tr1::shared_ptr< Batch > > *) 0 ;
  std::vector< std::tr1::shared_ptr< Batch > >::size_type arg2 ;
  std::vector< std::tr1::shared_ptr< Batch > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< std::tr1::shared_ptr< Batch > >::value_type tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StdVectorSmartPointerBatch_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Batch_t_std__allocatorT_std__tr1__shared_ptrT_Batch_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerBatch_resize" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Batch > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Batch > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StdVectorSmartPointerBatch_resize" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< Batch > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::tr1::shared_ptr< Batch > >::size_type >(val2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_std__tr1__shared_ptrT_Batch_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "StdVectorSmartPointerBatch_resize" "', argument " "3"" of type '" "std::vector< std::tr1::shared_ptr< Batch > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< std::tr1::shared_ptr< Batch > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< std::tr1::shared_ptr< Batch > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< std::tr1::shared_ptr< Batch > >::value_type * >(argp3) : &tempshared3;
    }
  }
  (arg1)->resize(arg2,(std::vector< std::tr1::shared_ptr< Batch > >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerBatch_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_StdVectorSmartPointerBatch_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Batch_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_StdVectorSmartPointerBatch_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'StdVectorSmartPointerBatch_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    resize(std::vector< std::tr1::shared_ptr< Batch > > *,std::vector< std::tr1::shared_ptr< Batch > >::size_type)\n"
    "    resize(std::vector< std::tr1::shared_ptr< Batch > > *,std::vector< std::tr1::shared_ptr< Batch > >::size_type,std::vector< std::tr1::shared_ptr< Batch > >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerBatch_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Batch > > *arg1 = (std::vector< std::tr1::shared_ptr< Batch > > *) 0 ;
  std::vector< std::tr1::shared_ptr< Batch > >::iterator arg2 ;
  std::vector< std::tr1::shared_ptr< Batch > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< std::tr1::shared_ptr< Batch > >::value_type tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< std::tr1::shared_ptr< Batch > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StdVectorSmartPointerBatch_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Batch_t_std__allocatorT_std__tr1__shared_ptrT_Batch_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerBatch_insert" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Batch > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Batch > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StdVectorSmartPointerBatch_insert" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< Batch > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::tr1::shared_ptr< Batch > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::tr1::shared_ptr< Batch > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StdVectorSmartPointerBatch_insert" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< Batch > >::iterator""'");
    }
  }
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_std__tr1__shared_ptrT_Batch_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "StdVectorSmartPointerBatch_insert" "', argument " "3"" of type '" "std::vector< std::tr1::shared_ptr< Batch > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< std::tr1::shared_ptr< Batch > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< std::tr1::shared_ptr< Batch > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< std::tr1::shared_ptr< Batch > >::value_type * >(argp3) : &tempshared3;
    }
  }
  result = (arg1)->insert(arg2,(std::vector< std::tr1::shared_ptr< Batch > >::value_type const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::tr1::shared_ptr< Batch > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerBatch_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Batch > > *arg1 = (std::vector< std::tr1::shared_ptr< Batch > > *) 0 ;
  std::vector< std::tr1::shared_ptr< Batch > >::iterator arg2 ;
  std::vector< std::tr1::shared_ptr< Batch > >::size_type arg3 ;
  std::vector< std::tr1::shared_ptr< Batch > >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  std::vector< std::tr1::shared_ptr< Batch > >::value_type tempshared4 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:StdVectorSmartPointerBatch_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Batch_t_std__allocatorT_std__tr1__shared_ptrT_Batch_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerBatch_insert" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Batch > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Batch > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StdVectorSmartPointerBatch_insert" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< Batch > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::tr1::shared_ptr< Batch > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::tr1::shared_ptr< Batch > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StdVectorSmartPointerBatch_insert" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< Batch > >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StdVectorSmartPointerBatch_insert" "', argument " "3"" of type '" "std::vector< std::tr1::shared_ptr< Batch > >::size_type""'");
  } 
  arg3 = static_cast< std::vector< std::tr1::shared_ptr< Batch > >::size_type >(val3);
  {
    int newmem = 0;
    res4 = SWIG_ConvertPtrAndOwn(obj3, &argp4, SWIGTYPE_p_std__tr1__shared_ptrT_Batch_t,  0 , &newmem);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "StdVectorSmartPointerBatch_insert" "', argument " "4"" of type '" "std::vector< std::tr1::shared_ptr< Batch > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp4) tempshared4 = *reinterpret_cast< std::vector< std::tr1::shared_ptr< Batch > >::value_type * >(argp4);
      delete reinterpret_cast< std::vector< std::tr1::shared_ptr< Batch > >::value_type * >(argp4);
      arg4 = &tempshared4;
    } else {
      arg4 = (argp4) ? reinterpret_cast< std::vector< std::tr1::shared_ptr< Batch > >::value_type * >(argp4) : &tempshared4;
    }
  }
  (arg1)->insert(arg2,arg3,(std::vector< std::tr1::shared_ptr< Batch > >::value_type const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerBatch_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::tr1::shared_ptr< Batch > >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Batch_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_StdVectorSmartPointerBatch_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::tr1::shared_ptr< Batch > >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Batch_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_StdVectorSmartPointerBatch_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'StdVectorSmartPointerBatch_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    insert(std::vector< std::tr1::shared_ptr< Batch > > *,std::vector< std::tr1::shared_ptr< Batch > >::iterator,std::vector< std::tr1::shared_ptr< Batch > >::value_type const &)\n"
    "    insert(std::vector< std::tr1::shared_ptr< Batch > > *,std::vector< std::tr1::shared_ptr< Batch > >::iterator,std::vector< std::tr1::shared_ptr< Batch > >::size_type,std::vector< std::tr1::shared_ptr< Batch > >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerBatch_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Batch > > *arg1 = (std::vector< std::tr1::shared_ptr< Batch > > *) 0 ;
  std::vector< std::tr1::shared_ptr< Batch > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StdVectorSmartPointerBatch_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Batch_t_std__allocatorT_std__tr1__shared_ptrT_Batch_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerBatch_reserve" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Batch > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Batch > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StdVectorSmartPointerBatch_reserve" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< Batch > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::tr1::shared_ptr< Batch > >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerBatch_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Batch > > *arg1 = (std::vector< std::tr1::shared_ptr< Batch > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::tr1::shared_ptr< Batch > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorSmartPointerBatch_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Batch_t_std__allocatorT_std__tr1__shared_ptrT_Batch_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerBatch_capacity" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Batch > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Batch > > * >(argp1);
  result = ((std::vector< std::tr1::shared_ptr< Batch > > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_StdVectorSmartPointerBatch(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Batch > > *arg1 = (std::vector< std::tr1::shared_ptr< Batch > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_StdVectorSmartPointerBatch",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Batch_t_std__allocatorT_std__tr1__shared_ptrT_Batch_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_StdVectorSmartPointerBatch" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Batch > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Batch > > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *StdVectorSmartPointerBatch_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Batch_t_std__allocatorT_std__tr1__shared_ptrT_Batch_t_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_StdVectorSmartPointerTexture_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Texture > > *arg1 = (std::vector< std::tr1::shared_ptr< Texture > > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorSmartPointerTexture_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Texture_t_std__allocatorT_std__tr1__shared_ptrT_Texture_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerTexture_iterator" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Texture > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Texture > > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_std_tr1_shared_ptr_Sl_Texture_Sg__Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerTexture___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Texture > > *arg1 = (std::vector< std::tr1::shared_ptr< Texture > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorSmartPointerTexture___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Texture_t_std__allocatorT_std__tr1__shared_ptrT_Texture_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerTexture___nonzero__" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Texture > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Texture > > * >(argp1);
  result = (bool)std_vector_Sl_std_tr1_shared_ptr_Sl_Texture_Sg__Sg____nonzero__((std::vector< std::tr1::shared_ptr< Texture > > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerTexture___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Texture > > *arg1 = (std::vector< std::tr1::shared_ptr< Texture > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorSmartPointerTexture___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Texture_t_std__allocatorT_std__tr1__shared_ptrT_Texture_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerTexture___bool__" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Texture > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Texture > > * >(argp1);
  result = (bool)std_vector_Sl_std_tr1_shared_ptr_Sl_Texture_Sg__Sg____bool__((std::vector< std::tr1::shared_ptr< Texture > > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerTexture___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Texture > > *arg1 = (std::vector< std::tr1::shared_ptr< Texture > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::tr1::shared_ptr< Texture > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorSmartPointerTexture___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Texture_t_std__allocatorT_std__tr1__shared_ptrT_Texture_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerTexture___len__" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Texture > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Texture > > * >(argp1);
  result = std_vector_Sl_std_tr1_shared_ptr_Sl_Texture_Sg__Sg____len__((std::vector< std::tr1::shared_ptr< Texture > > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerTexture_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Texture > > *arg1 = (std::vector< std::tr1::shared_ptr< Texture > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::tr1::shared_ptr< Texture > >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorSmartPointerTexture_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Texture_t_std__allocatorT_std__tr1__shared_ptrT_Texture_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerTexture_pop" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Texture > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Texture > > * >(argp1);
  try {
    result = std_vector_Sl_std_tr1_shared_ptr_Sl_Texture_Sg__Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  {
    std::tr1::shared_ptr<  Texture > *smartresult = result ? new std::tr1::shared_ptr<  Texture >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Texture_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerTexture___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Texture > > *arg1 = (std::vector< std::tr1::shared_ptr< Texture > > *) 0 ;
  std::vector< std::tr1::shared_ptr< Texture > >::difference_type arg2 ;
  std::vector< std::tr1::shared_ptr< Texture > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< std::tr1::shared_ptr< Texture >,std::allocator< std::tr1::shared_ptr< Texture > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StdVectorSmartPointerTexture___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Texture_t_std__allocatorT_std__tr1__shared_ptrT_Texture_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerTexture___getslice__" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Texture > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Texture > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StdVectorSmartPointerTexture___getslice__" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< Texture > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::tr1::shared_ptr< Texture > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StdVectorSmartPointerTexture___getslice__" "', argument " "3"" of type '" "std::vector< std::tr1::shared_ptr< Texture > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::tr1::shared_ptr< Texture > >::difference_type >(val3);
  try {
    result = (std::vector< std::tr1::shared_ptr< Texture >,std::allocator< std::tr1::shared_ptr< Texture > > > *)std_vector_Sl_std_tr1_shared_ptr_Sl_Texture_Sg__Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Texture_t_std__allocatorT_std__tr1__shared_ptrT_Texture_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerTexture___setslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Texture > > *arg1 = (std::vector< std::tr1::shared_ptr< Texture > > *) 0 ;
  std::vector< std::tr1::shared_ptr< Texture > >::difference_type arg2 ;
  std::vector< std::tr1::shared_ptr< Texture > >::difference_type arg3 ;
  std::vector< std::tr1::shared_ptr< Texture >,std::allocator< std::tr1::shared_ptr< Texture > > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:StdVectorSmartPointerTexture___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Texture_t_std__allocatorT_std__tr1__shared_ptrT_Texture_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerTexture___setslice__" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Texture > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Texture > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StdVectorSmartPointerTexture___setslice__" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< Texture > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::tr1::shared_ptr< Texture > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StdVectorSmartPointerTexture___setslice__" "', argument " "3"" of type '" "std::vector< std::tr1::shared_ptr< Texture > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::tr1::shared_ptr< Texture > >::difference_type >(val3);
  {
    std::vector<std::tr1::shared_ptr< Texture >,std::allocator< std::tr1::shared_ptr< Texture > > > *ptr = (std::vector<std::tr1::shared_ptr< Texture >,std::allocator< std::tr1::shared_ptr< Texture > > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "StdVectorSmartPointerTexture___setslice__" "', argument " "4"" of type '" "std::vector< std::tr1::shared_ptr< Texture >,std::allocator< std::tr1::shared_ptr< Texture > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StdVectorSmartPointerTexture___setslice__" "', argument " "4"" of type '" "std::vector< std::tr1::shared_ptr< Texture >,std::allocator< std::tr1::shared_ptr< Texture > > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_std_tr1_shared_ptr_Sl_Texture_Sg__Sg____setslice__(arg1,arg2,arg3,(std::vector< std::tr1::shared_ptr< Texture >,std::allocator< std::tr1::shared_ptr< Texture > > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerTexture___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Texture > > *arg1 = (std::vector< std::tr1::shared_ptr< Texture > > *) 0 ;
  std::vector< std::tr1::shared_ptr< Texture > >::difference_type arg2 ;
  std::vector< std::tr1::shared_ptr< Texture > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StdVectorSmartPointerTexture___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Texture_t_std__allocatorT_std__tr1__shared_ptrT_Texture_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerTexture___delslice__" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Texture > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Texture > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StdVectorSmartPointerTexture___delslice__" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< Texture > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::tr1::shared_ptr< Texture > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StdVectorSmartPointerTexture___delslice__" "', argument " "3"" of type '" "std::vector< std::tr1::shared_ptr< Texture > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::tr1::shared_ptr< Texture > >::difference_type >(val3);
  try {
    std_vector_Sl_std_tr1_shared_ptr_Sl_Texture_Sg__Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerTexture___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Texture > > *arg1 = (std::vector< std::tr1::shared_ptr< Texture > > *) 0 ;
  std::vector< std::tr1::shared_ptr< Texture > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StdVectorSmartPointerTexture___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Texture_t_std__allocatorT_std__tr1__shared_ptrT_Texture_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerTexture___delitem__" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Texture > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Texture > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StdVectorSmartPointerTexture___delitem__" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< Texture > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::tr1::shared_ptr< Texture > >::difference_type >(val2);
  try {
    std_vector_Sl_std_tr1_shared_ptr_Sl_Texture_Sg__Sg____delitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerTexture___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Texture > > *arg1 = (std::vector< std::tr1::shared_ptr< Texture > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::tr1::shared_ptr< Texture >,std::allocator< std::tr1::shared_ptr< Texture > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StdVectorSmartPointerTexture___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Texture_t_std__allocatorT_std__tr1__shared_ptrT_Texture_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerTexture___getitem__" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Texture > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Texture > > * >(argp1);
  {
    arg2 = (PySliceObject *) obj1;
  }
  try {
    result = (std::vector< std::tr1::shared_ptr< Texture >,std::allocator< std::tr1::shared_ptr< Texture > > > *)std_vector_Sl_std_tr1_shared_ptr_Sl_Texture_Sg__Sg____getitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Texture_t_std__allocatorT_std__tr1__shared_ptrT_Texture_t_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerTexture___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Texture > > *arg1 = (std::vector< std::tr1::shared_ptr< Texture > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< std::tr1::shared_ptr< Texture >,std::allocator< std::tr1::shared_ptr< Texture > > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StdVectorSmartPointerTexture___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Texture_t_std__allocatorT_std__tr1__shared_ptrT_Texture_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerTexture___setitem__" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Texture > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Texture > > * >(argp1);
  {
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector<std::tr1::shared_ptr< Texture >,std::allocator< std::tr1::shared_ptr< Texture > > > *ptr = (std::vector<std::tr1::shared_ptr< Texture >,std::allocator< std::tr1::shared_ptr< Texture > > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "StdVectorSmartPointerTexture___setitem__" "', argument " "3"" of type '" "std::vector< std::tr1::shared_ptr< Texture >,std::allocator< std::tr1::shared_ptr< Texture > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StdVectorSmartPointerTexture___setitem__" "', argument " "3"" of type '" "std::vector< std::tr1::shared_ptr< Texture >,std::allocator< std::tr1::shared_ptr< Texture > > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_std_tr1_shared_ptr_Sl_Texture_Sg__Sg____setitem____SWIG_0(arg1,arg2,(std::vector< std::tr1::shared_ptr< Texture >,std::allocator< std::tr1::shared_ptr< Texture > > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerTexture___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Texture > > *arg1 = (std::vector< std::tr1::shared_ptr< Texture > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StdVectorSmartPointerTexture___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Texture_t_std__allocatorT_std__tr1__shared_ptrT_Texture_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerTexture___delitem__" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Texture > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Texture > > * >(argp1);
  {
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_vector_Sl_std_tr1_shared_ptr_Sl_Texture_Sg__Sg____delitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerTexture___delitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::tr1::shared_ptr< Texture >,std::allocator< std::tr1::shared_ptr< Texture > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_StdVectorSmartPointerTexture___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::tr1::shared_ptr< Texture >,std::allocator< std::tr1::shared_ptr< Texture > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_StdVectorSmartPointerTexture___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'StdVectorSmartPointerTexture___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    __delitem__(std::vector< std::tr1::shared_ptr< Texture > > *,std::vector< std::tr1::shared_ptr< Texture > >::difference_type)\n"
    "    __delitem__(std::vector< std::tr1::shared_ptr< Texture > > *,PySliceObject *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerTexture___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Texture > > *arg1 = (std::vector< std::tr1::shared_ptr< Texture > > *) 0 ;
  std::vector< std::tr1::shared_ptr< Texture > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::tr1::shared_ptr< Texture > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StdVectorSmartPointerTexture___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Texture_t_std__allocatorT_std__tr1__shared_ptrT_Texture_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerTexture___getitem__" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Texture > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Texture > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StdVectorSmartPointerTexture___getitem__" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< Texture > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::tr1::shared_ptr< Texture > >::difference_type >(val2);
  try {
    result = (std::vector< std::tr1::shared_ptr< Texture > >::value_type *) &std_vector_Sl_std_tr1_shared_ptr_Sl_Texture_Sg__Sg____getitem____SWIG_1((std::vector< std::tr1::shared_ptr< Texture > > const *)arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  {
    std::tr1::shared_ptr<  Texture > *smartresult = *result ? new std::tr1::shared_ptr<  Texture >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Texture_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerTexture___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::tr1::shared_ptr< Texture >,std::allocator< std::tr1::shared_ptr< Texture > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_StdVectorSmartPointerTexture___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::tr1::shared_ptr< Texture >,std::allocator< std::tr1::shared_ptr< Texture > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_StdVectorSmartPointerTexture___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'StdVectorSmartPointerTexture___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    __getitem__(std::vector< std::tr1::shared_ptr< Texture > > *,PySliceObject *)\n"
    "    __getitem__(std::vector< std::tr1::shared_ptr< Texture > > const *,std::vector< std::tr1::shared_ptr< Texture > >::difference_type)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerTexture___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Texture > > *arg1 = (std::vector< std::tr1::shared_ptr< Texture > > *) 0 ;
  std::vector< std::tr1::shared_ptr< Texture > >::difference_type arg2 ;
  std::vector< std::tr1::shared_ptr< Texture > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< std::tr1::shared_ptr< Texture > >::value_type tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StdVectorSmartPointerTexture___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Texture_t_std__allocatorT_std__tr1__shared_ptrT_Texture_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerTexture___setitem__" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Texture > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Texture > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StdVectorSmartPointerTexture___setitem__" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< Texture > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::tr1::shared_ptr< Texture > >::difference_type >(val2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_std__tr1__shared_ptrT_Texture_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "StdVectorSmartPointerTexture___setitem__" "', argument " "3"" of type '" "std::vector< std::tr1::shared_ptr< Texture > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< std::tr1::shared_ptr< Texture > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< std::tr1::shared_ptr< Texture > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< std::tr1::shared_ptr< Texture > >::value_type * >(argp3) : &tempshared3;
    }
  }
  try {
    std_vector_Sl_std_tr1_shared_ptr_Sl_Texture_Sg__Sg____setitem____SWIG_1(arg1,arg2,(std::tr1::shared_ptr< Texture > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerTexture___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::tr1::shared_ptr< Texture >,std::allocator< std::tr1::shared_ptr< Texture > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<std::tr1::shared_ptr< Texture >,std::allocator< std::tr1::shared_ptr< Texture > > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_StdVectorSmartPointerTexture___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::tr1::shared_ptr< Texture >,std::allocator< std::tr1::shared_ptr< Texture > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Texture_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_StdVectorSmartPointerTexture___setitem____SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'StdVectorSmartPointerTexture___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    __setitem__(std::vector< std::tr1::shared_ptr< Texture > > *,PySliceObject *,std::vector< std::tr1::shared_ptr< Texture >,std::allocator< std::tr1::shared_ptr< Texture > > > const &)\n"
    "    __setitem__(std::vector< std::tr1::shared_ptr< Texture > > *,std::vector< std::tr1::shared_ptr< Texture > >::difference_type,std::vector< std::tr1::shared_ptr< Texture > >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerTexture_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Texture > > *arg1 = (std::vector< std::tr1::shared_ptr< Texture > > *) 0 ;
  std::vector< std::tr1::shared_ptr< Texture > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< std::tr1::shared_ptr< Texture > >::value_type tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StdVectorSmartPointerTexture_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Texture_t_std__allocatorT_std__tr1__shared_ptrT_Texture_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerTexture_append" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Texture > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Texture > > * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_std__tr1__shared_ptrT_Texture_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StdVectorSmartPointerTexture_append" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< Texture > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< std::vector< std::tr1::shared_ptr< Texture > >::value_type * >(argp2);
      delete reinterpret_cast< std::vector< std::tr1::shared_ptr< Texture > >::value_type * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< std::vector< std::tr1::shared_ptr< Texture > >::value_type * >(argp2) : &tempshared2;
    }
  }
  std_vector_Sl_std_tr1_shared_ptr_Sl_Texture_Sg__Sg__append(arg1,(std::tr1::shared_ptr< Texture > const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StdVectorSmartPointerTexture__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Texture > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_StdVectorSmartPointerTexture")) SWIG_fail;
  result = (std::vector< std::tr1::shared_ptr< Texture > > *)new std::vector< std::tr1::shared_ptr< Texture > >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Texture_t_std__allocatorT_std__tr1__shared_ptrT_Texture_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StdVectorSmartPointerTexture__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Texture > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< std::tr1::shared_ptr< Texture > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_StdVectorSmartPointerTexture",&obj0)) SWIG_fail;
  {
    std::vector<std::tr1::shared_ptr< Texture >,std::allocator< std::tr1::shared_ptr< Texture > > > *ptr = (std::vector<std::tr1::shared_ptr< Texture >,std::allocator< std::tr1::shared_ptr< Texture > > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_StdVectorSmartPointerTexture" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Texture > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_StdVectorSmartPointerTexture" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Texture > > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< std::tr1::shared_ptr< Texture > > *)new std::vector< std::tr1::shared_ptr< Texture > >((std::vector< std::tr1::shared_ptr< Texture > > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Texture_t_std__allocatorT_std__tr1__shared_ptrT_Texture_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerTexture_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Texture > > *arg1 = (std::vector< std::tr1::shared_ptr< Texture > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorSmartPointerTexture_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Texture_t_std__allocatorT_std__tr1__shared_ptrT_Texture_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerTexture_empty" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Texture > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Texture > > * >(argp1);
  result = (bool)((std::vector< std::tr1::shared_ptr< Texture > > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerTexture_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Texture > > *arg1 = (std::vector< std::tr1::shared_ptr< Texture > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::tr1::shared_ptr< Texture > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorSmartPointerTexture_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Texture_t_std__allocatorT_std__tr1__shared_ptrT_Texture_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerTexture_size" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Texture > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Texture > > * >(argp1);
  result = ((std::vector< std::tr1::shared_ptr< Texture > > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerTexture_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Texture > > *arg1 = (std::vector< std::tr1::shared_ptr< Texture > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorSmartPointerTexture_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Texture_t_std__allocatorT_std__tr1__shared_ptrT_Texture_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerTexture_clear" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Texture > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Texture > > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerTexture_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Texture > > *arg1 = (std::vector< std::tr1::shared_ptr< Texture > > *) 0 ;
  std::vector< std::tr1::shared_ptr< Texture > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StdVectorSmartPointerTexture_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Texture_t_std__allocatorT_std__tr1__shared_ptrT_Texture_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerTexture_swap" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Texture > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Texture > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Texture_t_std__allocatorT_std__tr1__shared_ptrT_Texture_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StdVectorSmartPointerTexture_swap" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< Texture > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StdVectorSmartPointerTexture_swap" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< Texture > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Texture > > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerTexture_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Texture > > *arg1 = (std::vector< std::tr1::shared_ptr< Texture > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< std::tr1::shared_ptr< Texture > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorSmartPointerTexture_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Texture_t_std__allocatorT_std__tr1__shared_ptrT_Texture_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerTexture_get_allocator" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Texture > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Texture > > * >(argp1);
  result = ((std::vector< std::tr1::shared_ptr< Texture > > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< std::tr1::shared_ptr< Texture > >::allocator_type(static_cast< const std::vector< std::tr1::shared_ptr< Texture > >::allocator_type& >(result))), SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Texture_t_std__allocatorT_std__tr1__shared_ptrT_Texture_t_t_t__allocator_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerTexture_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Texture > > *arg1 = (std::vector< std::tr1::shared_ptr< Texture > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::tr1::shared_ptr< Texture > >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorSmartPointerTexture_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Texture_t_std__allocatorT_std__tr1__shared_ptrT_Texture_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerTexture_begin" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Texture > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Texture > > * >(argp1);
  result = ((std::vector< std::tr1::shared_ptr< Texture > > const *)arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::tr1::shared_ptr< Texture > >::const_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerTexture_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Texture > > *arg1 = (std::vector< std::tr1::shared_ptr< Texture > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::tr1::shared_ptr< Texture > >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorSmartPointerTexture_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Texture_t_std__allocatorT_std__tr1__shared_ptrT_Texture_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerTexture_end" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Texture > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Texture > > * >(argp1);
  result = ((std::vector< std::tr1::shared_ptr< Texture > > const *)arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::tr1::shared_ptr< Texture > >::const_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerTexture_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Texture > > *arg1 = (std::vector< std::tr1::shared_ptr< Texture > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::tr1::shared_ptr< Texture > >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorSmartPointerTexture_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Texture_t_std__allocatorT_std__tr1__shared_ptrT_Texture_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerTexture_rbegin" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Texture > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Texture > > * >(argp1);
  result = ((std::vector< std::tr1::shared_ptr< Texture > > const *)arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::tr1::shared_ptr< Texture > >::const_reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerTexture_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Texture > > *arg1 = (std::vector< std::tr1::shared_ptr< Texture > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::tr1::shared_ptr< Texture > >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorSmartPointerTexture_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Texture_t_std__allocatorT_std__tr1__shared_ptrT_Texture_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerTexture_rend" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Texture > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Texture > > * >(argp1);
  result = ((std::vector< std::tr1::shared_ptr< Texture > > const *)arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::tr1::shared_ptr< Texture > >::const_reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StdVectorSmartPointerTexture__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Texture > >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::tr1::shared_ptr< Texture > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_StdVectorSmartPointerTexture",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_StdVectorSmartPointerTexture" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Texture > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::tr1::shared_ptr< Texture > >::size_type >(val1);
  result = (std::vector< std::tr1::shared_ptr< Texture > > *)new std::vector< std::tr1::shared_ptr< Texture > >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Texture_t_std__allocatorT_std__tr1__shared_ptrT_Texture_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerTexture_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Texture > > *arg1 = (std::vector< std::tr1::shared_ptr< Texture > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorSmartPointerTexture_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Texture_t_std__allocatorT_std__tr1__shared_ptrT_Texture_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerTexture_pop_back" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Texture > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Texture > > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerTexture_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Texture > > *arg1 = (std::vector< std::tr1::shared_ptr< Texture > > *) 0 ;
  std::vector< std::tr1::shared_ptr< Texture > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StdVectorSmartPointerTexture_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Texture_t_std__allocatorT_std__tr1__shared_ptrT_Texture_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerTexture_resize" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Texture > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Texture > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StdVectorSmartPointerTexture_resize" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< Texture > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::tr1::shared_ptr< Texture > >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerTexture_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Texture > > *arg1 = (std::vector< std::tr1::shared_ptr< Texture > > *) 0 ;
  std::vector< std::tr1::shared_ptr< Texture > >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::tr1::shared_ptr< Texture > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StdVectorSmartPointerTexture_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Texture_t_std__allocatorT_std__tr1__shared_ptrT_Texture_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerTexture_erase" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Texture > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Texture > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StdVectorSmartPointerTexture_erase" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< Texture > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::tr1::shared_ptr< Texture > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::tr1::shared_ptr< Texture > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StdVectorSmartPointerTexture_erase" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< Texture > >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::tr1::shared_ptr< Texture > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerTexture_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Texture > > *arg1 = (std::vector< std::tr1::shared_ptr< Texture > > *) 0 ;
  std::vector< std::tr1::shared_ptr< Texture > >::iterator arg2 ;
  std::vector< std::tr1::shared_ptr< Texture > >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< std::tr1::shared_ptr< Texture > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StdVectorSmartPointerTexture_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Texture_t_std__allocatorT_std__tr1__shared_ptrT_Texture_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerTexture_erase" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Texture > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Texture > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StdVectorSmartPointerTexture_erase" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< Texture > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::tr1::shared_ptr< Texture > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::tr1::shared_ptr< Texture > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StdVectorSmartPointerTexture_erase" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< Texture > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StdVectorSmartPointerTexture_erase" "', argument " "3"" of type '" "std::vector< std::tr1::shared_ptr< Texture > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::tr1::shared_ptr< Texture > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::tr1::shared_ptr< Texture > >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StdVectorSmartPointerTexture_erase" "', argument " "3"" of type '" "std::vector< std::tr1::shared_ptr< Texture > >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::tr1::shared_ptr< Texture > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerTexture_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::tr1::shared_ptr< Texture >,std::allocator< std::tr1::shared_ptr< Texture > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::tr1::shared_ptr< Texture > >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_StdVectorSmartPointerTexture_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::tr1::shared_ptr< Texture >,std::allocator< std::tr1::shared_ptr< Texture > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::tr1::shared_ptr< Texture > >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::tr1::shared_ptr< Texture > >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_StdVectorSmartPointerTexture_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'StdVectorSmartPointerTexture_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    erase(std::vector< std::tr1::shared_ptr< Texture > > *,std::vector< std::tr1::shared_ptr< Texture > >::iterator)\n"
    "    erase(std::vector< std::tr1::shared_ptr< Texture > > *,std::vector< std::tr1::shared_ptr< Texture > >::iterator,std::vector< std::tr1::shared_ptr< Texture > >::iterator)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StdVectorSmartPointerTexture__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Texture > >::size_type arg1 ;
  std::vector< std::tr1::shared_ptr< Texture > >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< std::tr1::shared_ptr< Texture > >::value_type tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::tr1::shared_ptr< Texture > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_StdVectorSmartPointerTexture",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_StdVectorSmartPointerTexture" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Texture > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::tr1::shared_ptr< Texture > >::size_type >(val1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_std__tr1__shared_ptrT_Texture_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_StdVectorSmartPointerTexture" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< Texture > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< std::vector< std::tr1::shared_ptr< Texture > >::value_type * >(argp2);
      delete reinterpret_cast< std::vector< std::tr1::shared_ptr< Texture > >::value_type * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< std::vector< std::tr1::shared_ptr< Texture > >::value_type * >(argp2) : &tempshared2;
    }
  }
  result = (std::vector< std::tr1::shared_ptr< Texture > > *)new std::vector< std::tr1::shared_ptr< Texture > >(arg1,(std::vector< std::tr1::shared_ptr< Texture > >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Texture_t_std__allocatorT_std__tr1__shared_ptrT_Texture_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StdVectorSmartPointerTexture(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_StdVectorSmartPointerTexture__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_StdVectorSmartPointerTexture__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::tr1::shared_ptr< Texture >,std::allocator< std::tr1::shared_ptr< Texture > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_StdVectorSmartPointerTexture__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Texture_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_StdVectorSmartPointerTexture__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_StdVectorSmartPointerTexture'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::tr1::shared_ptr< Texture > >()\n"
    "    std::vector< std::tr1::shared_ptr< Texture > >(std::vector< std::tr1::shared_ptr< Texture > > const &)\n"
    "    std::vector< std::tr1::shared_ptr< Texture > >(std::vector< std::tr1::shared_ptr< Texture > >::size_type)\n"
    "    std::vector< std::tr1::shared_ptr< Texture > >(std::vector< std::tr1::shared_ptr< Texture > >::size_type,std::vector< std::tr1::shared_ptr< Texture > >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerTexture_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Texture > > *arg1 = (std::vector< std::tr1::shared_ptr< Texture > > *) 0 ;
  std::vector< std::tr1::shared_ptr< Texture > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< std::tr1::shared_ptr< Texture > >::value_type tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StdVectorSmartPointerTexture_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Texture_t_std__allocatorT_std__tr1__shared_ptrT_Texture_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerTexture_push_back" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Texture > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Texture > > * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_std__tr1__shared_ptrT_Texture_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StdVectorSmartPointerTexture_push_back" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< Texture > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< std::vector< std::tr1::shared_ptr< Texture > >::value_type * >(argp2);
      delete reinterpret_cast< std::vector< std::tr1::shared_ptr< Texture > >::value_type * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< std::vector< std::tr1::shared_ptr< Texture > >::value_type * >(argp2) : &tempshared2;
    }
  }
  (arg1)->push_back((std::vector< std::tr1::shared_ptr< Texture > >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerTexture_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Texture > > *arg1 = (std::vector< std::tr1::shared_ptr< Texture > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::tr1::shared_ptr< Texture > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorSmartPointerTexture_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Texture_t_std__allocatorT_std__tr1__shared_ptrT_Texture_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerTexture_front" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Texture > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Texture > > * >(argp1);
  result = (std::vector< std::tr1::shared_ptr< Texture > >::value_type *) &((std::vector< std::tr1::shared_ptr< Texture > > const *)arg1)->front();
  {
    std::tr1::shared_ptr<  Texture > *smartresult = *result ? new std::tr1::shared_ptr<  Texture >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Texture_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerTexture_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Texture > > *arg1 = (std::vector< std::tr1::shared_ptr< Texture > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::tr1::shared_ptr< Texture > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorSmartPointerTexture_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Texture_t_std__allocatorT_std__tr1__shared_ptrT_Texture_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerTexture_back" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Texture > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Texture > > * >(argp1);
  result = (std::vector< std::tr1::shared_ptr< Texture > >::value_type *) &((std::vector< std::tr1::shared_ptr< Texture > > const *)arg1)->back();
  {
    std::tr1::shared_ptr<  Texture > *smartresult = *result ? new std::tr1::shared_ptr<  Texture >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Texture_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerTexture_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Texture > > *arg1 = (std::vector< std::tr1::shared_ptr< Texture > > *) 0 ;
  std::vector< std::tr1::shared_ptr< Texture > >::size_type arg2 ;
  std::vector< std::tr1::shared_ptr< Texture > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< std::tr1::shared_ptr< Texture > >::value_type tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StdVectorSmartPointerTexture_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Texture_t_std__allocatorT_std__tr1__shared_ptrT_Texture_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerTexture_assign" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Texture > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Texture > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StdVectorSmartPointerTexture_assign" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< Texture > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::tr1::shared_ptr< Texture > >::size_type >(val2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_std__tr1__shared_ptrT_Texture_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "StdVectorSmartPointerTexture_assign" "', argument " "3"" of type '" "std::vector< std::tr1::shared_ptr< Texture > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< std::tr1::shared_ptr< Texture > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< std::tr1::shared_ptr< Texture > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< std::tr1::shared_ptr< Texture > >::value_type * >(argp3) : &tempshared3;
    }
  }
  (arg1)->assign(arg2,(std::vector< std::tr1::shared_ptr< Texture > >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerTexture_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Texture > > *arg1 = (std::vector< std::tr1::shared_ptr< Texture > > *) 0 ;
  std::vector< std::tr1::shared_ptr< Texture > >::size_type arg2 ;
  std::vector< std::tr1::shared_ptr< Texture > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< std::tr1::shared_ptr< Texture > >::value_type tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StdVectorSmartPointerTexture_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Texture_t_std__allocatorT_std__tr1__shared_ptrT_Texture_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerTexture_resize" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Texture > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Texture > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StdVectorSmartPointerTexture_resize" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< Texture > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::tr1::shared_ptr< Texture > >::size_type >(val2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_std__tr1__shared_ptrT_Texture_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "StdVectorSmartPointerTexture_resize" "', argument " "3"" of type '" "std::vector< std::tr1::shared_ptr< Texture > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< std::tr1::shared_ptr< Texture > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< std::tr1::shared_ptr< Texture > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< std::tr1::shared_ptr< Texture > >::value_type * >(argp3) : &tempshared3;
    }
  }
  (arg1)->resize(arg2,(std::vector< std::tr1::shared_ptr< Texture > >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerTexture_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::tr1::shared_ptr< Texture >,std::allocator< std::tr1::shared_ptr< Texture > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_StdVectorSmartPointerTexture_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::tr1::shared_ptr< Texture >,std::allocator< std::tr1::shared_ptr< Texture > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Texture_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_StdVectorSmartPointerTexture_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'StdVectorSmartPointerTexture_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    resize(std::vector< std::tr1::shared_ptr< Texture > > *,std::vector< std::tr1::shared_ptr< Texture > >::size_type)\n"
    "    resize(std::vector< std::tr1::shared_ptr< Texture > > *,std::vector< std::tr1::shared_ptr< Texture > >::size_type,std::vector< std::tr1::shared_ptr< Texture > >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerTexture_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Texture > > *arg1 = (std::vector< std::tr1::shared_ptr< Texture > > *) 0 ;
  std::vector< std::tr1::shared_ptr< Texture > >::iterator arg2 ;
  std::vector< std::tr1::shared_ptr< Texture > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< std::tr1::shared_ptr< Texture > >::value_type tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< std::tr1::shared_ptr< Texture > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StdVectorSmartPointerTexture_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Texture_t_std__allocatorT_std__tr1__shared_ptrT_Texture_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerTexture_insert" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Texture > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Texture > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StdVectorSmartPointerTexture_insert" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< Texture > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::tr1::shared_ptr< Texture > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::tr1::shared_ptr< Texture > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StdVectorSmartPointerTexture_insert" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< Texture > >::iterator""'");
    }
  }
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_std__tr1__shared_ptrT_Texture_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "StdVectorSmartPointerTexture_insert" "', argument " "3"" of type '" "std::vector< std::tr1::shared_ptr< Texture > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< std::tr1::shared_ptr< Texture > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< std::tr1::shared_ptr< Texture > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< std::tr1::shared_ptr< Texture > >::value_type * >(argp3) : &tempshared3;
    }
  }
  result = (arg1)->insert(arg2,(std::vector< std::tr1::shared_ptr< Texture > >::value_type const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::tr1::shared_ptr< Texture > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerTexture_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Texture > > *arg1 = (std::vector< std::tr1::shared_ptr< Texture > > *) 0 ;
  std::vector< std::tr1::shared_ptr< Texture > >::iterator arg2 ;
  std::vector< std::tr1::shared_ptr< Texture > >::size_type arg3 ;
  std::vector< std::tr1::shared_ptr< Texture > >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  std::vector< std::tr1::shared_ptr< Texture > >::value_type tempshared4 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:StdVectorSmartPointerTexture_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Texture_t_std__allocatorT_std__tr1__shared_ptrT_Texture_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerTexture_insert" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Texture > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Texture > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StdVectorSmartPointerTexture_insert" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< Texture > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::tr1::shared_ptr< Texture > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::tr1::shared_ptr< Texture > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StdVectorSmartPointerTexture_insert" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< Texture > >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StdVectorSmartPointerTexture_insert" "', argument " "3"" of type '" "std::vector< std::tr1::shared_ptr< Texture > >::size_type""'");
  } 
  arg3 = static_cast< std::vector< std::tr1::shared_ptr< Texture > >::size_type >(val3);
  {
    int newmem = 0;
    res4 = SWIG_ConvertPtrAndOwn(obj3, &argp4, SWIGTYPE_p_std__tr1__shared_ptrT_Texture_t,  0 , &newmem);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "StdVectorSmartPointerTexture_insert" "', argument " "4"" of type '" "std::vector< std::tr1::shared_ptr< Texture > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp4) tempshared4 = *reinterpret_cast< std::vector< std::tr1::shared_ptr< Texture > >::value_type * >(argp4);
      delete reinterpret_cast< std::vector< std::tr1::shared_ptr< Texture > >::value_type * >(argp4);
      arg4 = &tempshared4;
    } else {
      arg4 = (argp4) ? reinterpret_cast< std::vector< std::tr1::shared_ptr< Texture > >::value_type * >(argp4) : &tempshared4;
    }
  }
  (arg1)->insert(arg2,arg3,(std::vector< std::tr1::shared_ptr< Texture > >::value_type const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerTexture_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::tr1::shared_ptr< Texture >,std::allocator< std::tr1::shared_ptr< Texture > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::tr1::shared_ptr< Texture > >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Texture_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_StdVectorSmartPointerTexture_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::tr1::shared_ptr< Texture >,std::allocator< std::tr1::shared_ptr< Texture > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::tr1::shared_ptr< Texture > >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Texture_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_StdVectorSmartPointerTexture_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'StdVectorSmartPointerTexture_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    insert(std::vector< std::tr1::shared_ptr< Texture > > *,std::vector< std::tr1::shared_ptr< Texture > >::iterator,std::vector< std::tr1::shared_ptr< Texture > >::value_type const &)\n"
    "    insert(std::vector< std::tr1::shared_ptr< Texture > > *,std::vector< std::tr1::shared_ptr< Texture > >::iterator,std::vector< std::tr1::shared_ptr< Texture > >::size_type,std::vector< std::tr1::shared_ptr< Texture > >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerTexture_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Texture > > *arg1 = (std::vector< std::tr1::shared_ptr< Texture > > *) 0 ;
  std::vector< std::tr1::shared_ptr< Texture > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StdVectorSmartPointerTexture_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Texture_t_std__allocatorT_std__tr1__shared_ptrT_Texture_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerTexture_reserve" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Texture > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Texture > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StdVectorSmartPointerTexture_reserve" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< Texture > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::tr1::shared_ptr< Texture > >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerTexture_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Texture > > *arg1 = (std::vector< std::tr1::shared_ptr< Texture > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::tr1::shared_ptr< Texture > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorSmartPointerTexture_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Texture_t_std__allocatorT_std__tr1__shared_ptrT_Texture_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerTexture_capacity" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Texture > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Texture > > * >(argp1);
  result = ((std::vector< std::tr1::shared_ptr< Texture > > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_StdVectorSmartPointerTexture(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Texture > > *arg1 = (std::vector< std::tr1::shared_ptr< Texture > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_StdVectorSmartPointerTexture",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Texture_t_std__allocatorT_std__tr1__shared_ptrT_Texture_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_StdVectorSmartPointerTexture" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Texture > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Texture > > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *StdVectorSmartPointerTexture_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Texture_t_std__allocatorT_std__tr1__shared_ptrT_Texture_t_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_StdVectorSmartPointerEngineResource_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< EngineResource > > *arg1 = (std::vector< std::tr1::shared_ptr< EngineResource > > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorSmartPointerEngineResource_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_EngineResource_t_std__allocatorT_std__tr1__shared_ptrT_EngineResource_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerEngineResource_iterator" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< EngineResource > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< EngineResource > > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_std_tr1_shared_ptr_Sl_EngineResource_Sg__Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerEngineResource___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< EngineResource > > *arg1 = (std::vector< std::tr1::shared_ptr< EngineResource > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorSmartPointerEngineResource___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_EngineResource_t_std__allocatorT_std__tr1__shared_ptrT_EngineResource_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerEngineResource___nonzero__" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< EngineResource > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< EngineResource > > * >(argp1);
  result = (bool)std_vector_Sl_std_tr1_shared_ptr_Sl_EngineResource_Sg__Sg____nonzero__((std::vector< std::tr1::shared_ptr< EngineResource > > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerEngineResource___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< EngineResource > > *arg1 = (std::vector< std::tr1::shared_ptr< EngineResource > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorSmartPointerEngineResource___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_EngineResource_t_std__allocatorT_std__tr1__shared_ptrT_EngineResource_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerEngineResource___bool__" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< EngineResource > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< EngineResource > > * >(argp1);
  result = (bool)std_vector_Sl_std_tr1_shared_ptr_Sl_EngineResource_Sg__Sg____bool__((std::vector< std::tr1::shared_ptr< EngineResource > > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerEngineResource___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< EngineResource > > *arg1 = (std::vector< std::tr1::shared_ptr< EngineResource > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::tr1::shared_ptr< EngineResource > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorSmartPointerEngineResource___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_EngineResource_t_std__allocatorT_std__tr1__shared_ptrT_EngineResource_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerEngineResource___len__" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< EngineResource > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< EngineResource > > * >(argp1);
  result = std_vector_Sl_std_tr1_shared_ptr_Sl_EngineResource_Sg__Sg____len__((std::vector< std::tr1::shared_ptr< EngineResource > > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerEngineResource_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< EngineResource > > *arg1 = (std::vector< std::tr1::shared_ptr< EngineResource > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::tr1::shared_ptr< EngineResource > >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorSmartPointerEngineResource_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_EngineResource_t_std__allocatorT_std__tr1__shared_ptrT_EngineResource_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerEngineResource_pop" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< EngineResource > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< EngineResource > > * >(argp1);
  try {
    result = std_vector_Sl_std_tr1_shared_ptr_Sl_EngineResource_Sg__Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  {
    std::tr1::shared_ptr<  EngineResource > *smartresult = result ? new std::tr1::shared_ptr<  EngineResource >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_EngineResource_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerEngineResource___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< EngineResource > > *arg1 = (std::vector< std::tr1::shared_ptr< EngineResource > > *) 0 ;
  std::vector< std::tr1::shared_ptr< EngineResource > >::difference_type arg2 ;
  std::vector< std::tr1::shared_ptr< EngineResource > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< std::tr1::shared_ptr< EngineResource >,std::allocator< std::tr1::shared_ptr< EngineResource > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StdVectorSmartPointerEngineResource___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_EngineResource_t_std__allocatorT_std__tr1__shared_ptrT_EngineResource_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerEngineResource___getslice__" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< EngineResource > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< EngineResource > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StdVectorSmartPointerEngineResource___getslice__" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< EngineResource > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::tr1::shared_ptr< EngineResource > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StdVectorSmartPointerEngineResource___getslice__" "', argument " "3"" of type '" "std::vector< std::tr1::shared_ptr< EngineResource > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::tr1::shared_ptr< EngineResource > >::difference_type >(val3);
  try {
    result = (std::vector< std::tr1::shared_ptr< EngineResource >,std::allocator< std::tr1::shared_ptr< EngineResource > > > *)std_vector_Sl_std_tr1_shared_ptr_Sl_EngineResource_Sg__Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_EngineResource_t_std__allocatorT_std__tr1__shared_ptrT_EngineResource_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerEngineResource___setslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< EngineResource > > *arg1 = (std::vector< std::tr1::shared_ptr< EngineResource > > *) 0 ;
  std::vector< std::tr1::shared_ptr< EngineResource > >::difference_type arg2 ;
  std::vector< std::tr1::shared_ptr< EngineResource > >::difference_type arg3 ;
  std::vector< std::tr1::shared_ptr< EngineResource >,std::allocator< std::tr1::shared_ptr< EngineResource > > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:StdVectorSmartPointerEngineResource___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_EngineResource_t_std__allocatorT_std__tr1__shared_ptrT_EngineResource_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerEngineResource___setslice__" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< EngineResource > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< EngineResource > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StdVectorSmartPointerEngineResource___setslice__" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< EngineResource > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::tr1::shared_ptr< EngineResource > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StdVectorSmartPointerEngineResource___setslice__" "', argument " "3"" of type '" "std::vector< std::tr1::shared_ptr< EngineResource > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::tr1::shared_ptr< EngineResource > >::difference_type >(val3);
  {
    std::vector<std::tr1::shared_ptr< EngineResource >,std::allocator< std::tr1::shared_ptr< EngineResource > > > *ptr = (std::vector<std::tr1::shared_ptr< EngineResource >,std::allocator< std::tr1::shared_ptr< EngineResource > > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "StdVectorSmartPointerEngineResource___setslice__" "', argument " "4"" of type '" "std::vector< std::tr1::shared_ptr< EngineResource >,std::allocator< std::tr1::shared_ptr< EngineResource > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StdVectorSmartPointerEngineResource___setslice__" "', argument " "4"" of type '" "std::vector< std::tr1::shared_ptr< EngineResource >,std::allocator< std::tr1::shared_ptr< EngineResource > > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_std_tr1_shared_ptr_Sl_EngineResource_Sg__Sg____setslice__(arg1,arg2,arg3,(std::vector< std::tr1::shared_ptr< EngineResource >,std::allocator< std::tr1::shared_ptr< EngineResource > > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerEngineResource___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< EngineResource > > *arg1 = (std::vector< std::tr1::shared_ptr< EngineResource > > *) 0 ;
  std::vector< std::tr1::shared_ptr< EngineResource > >::difference_type arg2 ;
  std::vector< std::tr1::shared_ptr< EngineResource > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StdVectorSmartPointerEngineResource___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_EngineResource_t_std__allocatorT_std__tr1__shared_ptrT_EngineResource_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerEngineResource___delslice__" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< EngineResource > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< EngineResource > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StdVectorSmartPointerEngineResource___delslice__" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< EngineResource > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::tr1::shared_ptr< EngineResource > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StdVectorSmartPointerEngineResource___delslice__" "', argument " "3"" of type '" "std::vector< std::tr1::shared_ptr< EngineResource > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::tr1::shared_ptr< EngineResource > >::difference_type >(val3);
  try {
    std_vector_Sl_std_tr1_shared_ptr_Sl_EngineResource_Sg__Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerEngineResource___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< EngineResource > > *arg1 = (std::vector< std::tr1::shared_ptr< EngineResource > > *) 0 ;
  std::vector< std::tr1::shared_ptr< EngineResource > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StdVectorSmartPointerEngineResource___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_EngineResource_t_std__allocatorT_std__tr1__shared_ptrT_EngineResource_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerEngineResource___delitem__" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< EngineResource > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< EngineResource > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StdVectorSmartPointerEngineResource___delitem__" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< EngineResource > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::tr1::shared_ptr< EngineResource > >::difference_type >(val2);
  try {
    std_vector_Sl_std_tr1_shared_ptr_Sl_EngineResource_Sg__Sg____delitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerEngineResource___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< EngineResource > > *arg1 = (std::vector< std::tr1::shared_ptr< EngineResource > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::tr1::shared_ptr< EngineResource >,std::allocator< std::tr1::shared_ptr< EngineResource > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StdVectorSmartPointerEngineResource___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_EngineResource_t_std__allocatorT_std__tr1__shared_ptrT_EngineResource_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerEngineResource___getitem__" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< EngineResource > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< EngineResource > > * >(argp1);
  {
    arg2 = (PySliceObject *) obj1;
  }
  try {
    result = (std::vector< std::tr1::shared_ptr< EngineResource >,std::allocator< std::tr1::shared_ptr< EngineResource > > > *)std_vector_Sl_std_tr1_shared_ptr_Sl_EngineResource_Sg__Sg____getitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_EngineResource_t_std__allocatorT_std__tr1__shared_ptrT_EngineResource_t_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerEngineResource___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< EngineResource > > *arg1 = (std::vector< std::tr1::shared_ptr< EngineResource > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< std::tr1::shared_ptr< EngineResource >,std::allocator< std::tr1::shared_ptr< EngineResource > > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StdVectorSmartPointerEngineResource___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_EngineResource_t_std__allocatorT_std__tr1__shared_ptrT_EngineResource_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerEngineResource___setitem__" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< EngineResource > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< EngineResource > > * >(argp1);
  {
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector<std::tr1::shared_ptr< EngineResource >,std::allocator< std::tr1::shared_ptr< EngineResource > > > *ptr = (std::vector<std::tr1::shared_ptr< EngineResource >,std::allocator< std::tr1::shared_ptr< EngineResource > > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "StdVectorSmartPointerEngineResource___setitem__" "', argument " "3"" of type '" "std::vector< std::tr1::shared_ptr< EngineResource >,std::allocator< std::tr1::shared_ptr< EngineResource > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StdVectorSmartPointerEngineResource___setitem__" "', argument " "3"" of type '" "std::vector< std::tr1::shared_ptr< EngineResource >,std::allocator< std::tr1::shared_ptr< EngineResource > > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_std_tr1_shared_ptr_Sl_EngineResource_Sg__Sg____setitem____SWIG_0(arg1,arg2,(std::vector< std::tr1::shared_ptr< EngineResource >,std::allocator< std::tr1::shared_ptr< EngineResource > > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerEngineResource___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< EngineResource > > *arg1 = (std::vector< std::tr1::shared_ptr< EngineResource > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StdVectorSmartPointerEngineResource___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_EngineResource_t_std__allocatorT_std__tr1__shared_ptrT_EngineResource_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerEngineResource___delitem__" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< EngineResource > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< EngineResource > > * >(argp1);
  {
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_vector_Sl_std_tr1_shared_ptr_Sl_EngineResource_Sg__Sg____delitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerEngineResource___delitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::tr1::shared_ptr< EngineResource >,std::allocator< std::tr1::shared_ptr< EngineResource > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_StdVectorSmartPointerEngineResource___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::tr1::shared_ptr< EngineResource >,std::allocator< std::tr1::shared_ptr< EngineResource > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_StdVectorSmartPointerEngineResource___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'StdVectorSmartPointerEngineResource___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    __delitem__(std::vector< std::tr1::shared_ptr< EngineResource > > *,std::vector< std::tr1::shared_ptr< EngineResource > >::difference_type)\n"
    "    __delitem__(std::vector< std::tr1::shared_ptr< EngineResource > > *,PySliceObject *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerEngineResource___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< EngineResource > > *arg1 = (std::vector< std::tr1::shared_ptr< EngineResource > > *) 0 ;
  std::vector< std::tr1::shared_ptr< EngineResource > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::tr1::shared_ptr< EngineResource > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StdVectorSmartPointerEngineResource___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_EngineResource_t_std__allocatorT_std__tr1__shared_ptrT_EngineResource_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerEngineResource___getitem__" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< EngineResource > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< EngineResource > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StdVectorSmartPointerEngineResource___getitem__" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< EngineResource > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::tr1::shared_ptr< EngineResource > >::difference_type >(val2);
  try {
    result = (std::vector< std::tr1::shared_ptr< EngineResource > >::value_type *) &std_vector_Sl_std_tr1_shared_ptr_Sl_EngineResource_Sg__Sg____getitem____SWIG_1((std::vector< std::tr1::shared_ptr< EngineResource > > const *)arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  {
    std::tr1::shared_ptr<  EngineResource > *smartresult = *result ? new std::tr1::shared_ptr<  EngineResource >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_EngineResource_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerEngineResource___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::tr1::shared_ptr< EngineResource >,std::allocator< std::tr1::shared_ptr< EngineResource > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_StdVectorSmartPointerEngineResource___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::tr1::shared_ptr< EngineResource >,std::allocator< std::tr1::shared_ptr< EngineResource > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_StdVectorSmartPointerEngineResource___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'StdVectorSmartPointerEngineResource___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    __getitem__(std::vector< std::tr1::shared_ptr< EngineResource > > *,PySliceObject *)\n"
    "    __getitem__(std::vector< std::tr1::shared_ptr< EngineResource > > const *,std::vector< std::tr1::shared_ptr< EngineResource > >::difference_type)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerEngineResource___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< EngineResource > > *arg1 = (std::vector< std::tr1::shared_ptr< EngineResource > > *) 0 ;
  std::vector< std::tr1::shared_ptr< EngineResource > >::difference_type arg2 ;
  std::vector< std::tr1::shared_ptr< EngineResource > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< std::tr1::shared_ptr< EngineResource > >::value_type tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StdVectorSmartPointerEngineResource___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_EngineResource_t_std__allocatorT_std__tr1__shared_ptrT_EngineResource_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerEngineResource___setitem__" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< EngineResource > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< EngineResource > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StdVectorSmartPointerEngineResource___setitem__" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< EngineResource > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::tr1::shared_ptr< EngineResource > >::difference_type >(val2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_std__tr1__shared_ptrT_EngineResource_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "StdVectorSmartPointerEngineResource___setitem__" "', argument " "3"" of type '" "std::vector< std::tr1::shared_ptr< EngineResource > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< std::tr1::shared_ptr< EngineResource > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< std::tr1::shared_ptr< EngineResource > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< std::tr1::shared_ptr< EngineResource > >::value_type * >(argp3) : &tempshared3;
    }
  }
  try {
    std_vector_Sl_std_tr1_shared_ptr_Sl_EngineResource_Sg__Sg____setitem____SWIG_1(arg1,arg2,(std::tr1::shared_ptr< EngineResource > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerEngineResource___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::tr1::shared_ptr< EngineResource >,std::allocator< std::tr1::shared_ptr< EngineResource > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<std::tr1::shared_ptr< EngineResource >,std::allocator< std::tr1::shared_ptr< EngineResource > > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_StdVectorSmartPointerEngineResource___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::tr1::shared_ptr< EngineResource >,std::allocator< std::tr1::shared_ptr< EngineResource > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__tr1__shared_ptrT_EngineResource_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_StdVectorSmartPointerEngineResource___setitem____SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'StdVectorSmartPointerEngineResource___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    __setitem__(std::vector< std::tr1::shared_ptr< EngineResource > > *,PySliceObject *,std::vector< std::tr1::shared_ptr< EngineResource >,std::allocator< std::tr1::shared_ptr< EngineResource > > > const &)\n"
    "    __setitem__(std::vector< std::tr1::shared_ptr< EngineResource > > *,std::vector< std::tr1::shared_ptr< EngineResource > >::difference_type,std::vector< std::tr1::shared_ptr< EngineResource > >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerEngineResource_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< EngineResource > > *arg1 = (std::vector< std::tr1::shared_ptr< EngineResource > > *) 0 ;
  std::vector< std::tr1::shared_ptr< EngineResource > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< std::tr1::shared_ptr< EngineResource > >::value_type tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StdVectorSmartPointerEngineResource_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_EngineResource_t_std__allocatorT_std__tr1__shared_ptrT_EngineResource_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerEngineResource_append" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< EngineResource > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< EngineResource > > * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_std__tr1__shared_ptrT_EngineResource_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StdVectorSmartPointerEngineResource_append" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< EngineResource > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< std::vector< std::tr1::shared_ptr< EngineResource > >::value_type * >(argp2);
      delete reinterpret_cast< std::vector< std::tr1::shared_ptr< EngineResource > >::value_type * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< std::vector< std::tr1::shared_ptr< EngineResource > >::value_type * >(argp2) : &tempshared2;
    }
  }
  std_vector_Sl_std_tr1_shared_ptr_Sl_EngineResource_Sg__Sg__append(arg1,(std::tr1::shared_ptr< EngineResource > const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StdVectorSmartPointerEngineResource__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< EngineResource > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_StdVectorSmartPointerEngineResource")) SWIG_fail;
  result = (std::vector< std::tr1::shared_ptr< EngineResource > > *)new std::vector< std::tr1::shared_ptr< EngineResource > >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_EngineResource_t_std__allocatorT_std__tr1__shared_ptrT_EngineResource_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StdVectorSmartPointerEngineResource__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< EngineResource > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< std::tr1::shared_ptr< EngineResource > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_StdVectorSmartPointerEngineResource",&obj0)) SWIG_fail;
  {
    std::vector<std::tr1::shared_ptr< EngineResource >,std::allocator< std::tr1::shared_ptr< EngineResource > > > *ptr = (std::vector<std::tr1::shared_ptr< EngineResource >,std::allocator< std::tr1::shared_ptr< EngineResource > > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_StdVectorSmartPointerEngineResource" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< EngineResource > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_StdVectorSmartPointerEngineResource" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< EngineResource > > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< std::tr1::shared_ptr< EngineResource > > *)new std::vector< std::tr1::shared_ptr< EngineResource > >((std::vector< std::tr1::shared_ptr< EngineResource > > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_EngineResource_t_std__allocatorT_std__tr1__shared_ptrT_EngineResource_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerEngineResource_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< EngineResource > > *arg1 = (std::vector< std::tr1::shared_ptr< EngineResource > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorSmartPointerEngineResource_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_EngineResource_t_std__allocatorT_std__tr1__shared_ptrT_EngineResource_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerEngineResource_empty" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< EngineResource > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< EngineResource > > * >(argp1);
  result = (bool)((std::vector< std::tr1::shared_ptr< EngineResource > > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerEngineResource_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< EngineResource > > *arg1 = (std::vector< std::tr1::shared_ptr< EngineResource > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::tr1::shared_ptr< EngineResource > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorSmartPointerEngineResource_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_EngineResource_t_std__allocatorT_std__tr1__shared_ptrT_EngineResource_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerEngineResource_size" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< EngineResource > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< EngineResource > > * >(argp1);
  result = ((std::vector< std::tr1::shared_ptr< EngineResource > > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerEngineResource_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< EngineResource > > *arg1 = (std::vector< std::tr1::shared_ptr< EngineResource > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorSmartPointerEngineResource_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_EngineResource_t_std__allocatorT_std__tr1__shared_ptrT_EngineResource_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerEngineResource_clear" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< EngineResource > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< EngineResource > > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerEngineResource_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< EngineResource > > *arg1 = (std::vector< std::tr1::shared_ptr< EngineResource > > *) 0 ;
  std::vector< std::tr1::shared_ptr< EngineResource > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StdVectorSmartPointerEngineResource_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_EngineResource_t_std__allocatorT_std__tr1__shared_ptrT_EngineResource_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerEngineResource_swap" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< EngineResource > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< EngineResource > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_EngineResource_t_std__allocatorT_std__tr1__shared_ptrT_EngineResource_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StdVectorSmartPointerEngineResource_swap" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< EngineResource > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StdVectorSmartPointerEngineResource_swap" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< EngineResource > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::tr1::shared_ptr< EngineResource > > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerEngineResource_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< EngineResource > > *arg1 = (std::vector< std::tr1::shared_ptr< EngineResource > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< std::tr1::shared_ptr< EngineResource > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorSmartPointerEngineResource_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_EngineResource_t_std__allocatorT_std__tr1__shared_ptrT_EngineResource_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerEngineResource_get_allocator" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< EngineResource > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< EngineResource > > * >(argp1);
  result = ((std::vector< std::tr1::shared_ptr< EngineResource > > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< std::tr1::shared_ptr< EngineResource > >::allocator_type(static_cast< const std::vector< std::tr1::shared_ptr< EngineResource > >::allocator_type& >(result))), SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_EngineResource_t_std__allocatorT_std__tr1__shared_ptrT_EngineResource_t_t_t__allocator_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerEngineResource_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< EngineResource > > *arg1 = (std::vector< std::tr1::shared_ptr< EngineResource > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::tr1::shared_ptr< EngineResource > >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorSmartPointerEngineResource_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_EngineResource_t_std__allocatorT_std__tr1__shared_ptrT_EngineResource_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerEngineResource_begin" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< EngineResource > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< EngineResource > > * >(argp1);
  result = ((std::vector< std::tr1::shared_ptr< EngineResource > > const *)arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::tr1::shared_ptr< EngineResource > >::const_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerEngineResource_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< EngineResource > > *arg1 = (std::vector< std::tr1::shared_ptr< EngineResource > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::tr1::shared_ptr< EngineResource > >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorSmartPointerEngineResource_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_EngineResource_t_std__allocatorT_std__tr1__shared_ptrT_EngineResource_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerEngineResource_end" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< EngineResource > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< EngineResource > > * >(argp1);
  result = ((std::vector< std::tr1::shared_ptr< EngineResource > > const *)arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::tr1::shared_ptr< EngineResource > >::const_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerEngineResource_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< EngineResource > > *arg1 = (std::vector< std::tr1::shared_ptr< EngineResource > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::tr1::shared_ptr< EngineResource > >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorSmartPointerEngineResource_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_EngineResource_t_std__allocatorT_std__tr1__shared_ptrT_EngineResource_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerEngineResource_rbegin" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< EngineResource > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< EngineResource > > * >(argp1);
  result = ((std::vector< std::tr1::shared_ptr< EngineResource > > const *)arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::tr1::shared_ptr< EngineResource > >::const_reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerEngineResource_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< EngineResource > > *arg1 = (std::vector< std::tr1::shared_ptr< EngineResource > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::tr1::shared_ptr< EngineResource > >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorSmartPointerEngineResource_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_EngineResource_t_std__allocatorT_std__tr1__shared_ptrT_EngineResource_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerEngineResource_rend" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< EngineResource > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< EngineResource > > * >(argp1);
  result = ((std::vector< std::tr1::shared_ptr< EngineResource > > const *)arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::tr1::shared_ptr< EngineResource > >::const_reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StdVectorSmartPointerEngineResource__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< EngineResource > >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::tr1::shared_ptr< EngineResource > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_StdVectorSmartPointerEngineResource",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_StdVectorSmartPointerEngineResource" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< EngineResource > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::tr1::shared_ptr< EngineResource > >::size_type >(val1);
  result = (std::vector< std::tr1::shared_ptr< EngineResource > > *)new std::vector< std::tr1::shared_ptr< EngineResource > >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_EngineResource_t_std__allocatorT_std__tr1__shared_ptrT_EngineResource_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerEngineResource_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< EngineResource > > *arg1 = (std::vector< std::tr1::shared_ptr< EngineResource > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorSmartPointerEngineResource_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_EngineResource_t_std__allocatorT_std__tr1__shared_ptrT_EngineResource_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerEngineResource_pop_back" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< EngineResource > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< EngineResource > > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerEngineResource_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< EngineResource > > *arg1 = (std::vector< std::tr1::shared_ptr< EngineResource > > *) 0 ;
  std::vector< std::tr1::shared_ptr< EngineResource > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StdVectorSmartPointerEngineResource_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_EngineResource_t_std__allocatorT_std__tr1__shared_ptrT_EngineResource_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerEngineResource_resize" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< EngineResource > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< EngineResource > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StdVectorSmartPointerEngineResource_resize" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< EngineResource > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::tr1::shared_ptr< EngineResource > >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerEngineResource_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< EngineResource > > *arg1 = (std::vector< std::tr1::shared_ptr< EngineResource > > *) 0 ;
  std::vector< std::tr1::shared_ptr< EngineResource > >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::tr1::shared_ptr< EngineResource > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StdVectorSmartPointerEngineResource_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_EngineResource_t_std__allocatorT_std__tr1__shared_ptrT_EngineResource_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerEngineResource_erase" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< EngineResource > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< EngineResource > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StdVectorSmartPointerEngineResource_erase" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< EngineResource > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::tr1::shared_ptr< EngineResource > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::tr1::shared_ptr< EngineResource > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StdVectorSmartPointerEngineResource_erase" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< EngineResource > >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::tr1::shared_ptr< EngineResource > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerEngineResource_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< EngineResource > > *arg1 = (std::vector< std::tr1::shared_ptr< EngineResource > > *) 0 ;
  std::vector< std::tr1::shared_ptr< EngineResource > >::iterator arg2 ;
  std::vector< std::tr1::shared_ptr< EngineResource > >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< std::tr1::shared_ptr< EngineResource > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StdVectorSmartPointerEngineResource_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_EngineResource_t_std__allocatorT_std__tr1__shared_ptrT_EngineResource_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerEngineResource_erase" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< EngineResource > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< EngineResource > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StdVectorSmartPointerEngineResource_erase" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< EngineResource > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::tr1::shared_ptr< EngineResource > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::tr1::shared_ptr< EngineResource > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StdVectorSmartPointerEngineResource_erase" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< EngineResource > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StdVectorSmartPointerEngineResource_erase" "', argument " "3"" of type '" "std::vector< std::tr1::shared_ptr< EngineResource > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::tr1::shared_ptr< EngineResource > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::tr1::shared_ptr< EngineResource > >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StdVectorSmartPointerEngineResource_erase" "', argument " "3"" of type '" "std::vector< std::tr1::shared_ptr< EngineResource > >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::tr1::shared_ptr< EngineResource > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerEngineResource_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::tr1::shared_ptr< EngineResource >,std::allocator< std::tr1::shared_ptr< EngineResource > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::tr1::shared_ptr< EngineResource > >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_StdVectorSmartPointerEngineResource_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::tr1::shared_ptr< EngineResource >,std::allocator< std::tr1::shared_ptr< EngineResource > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::tr1::shared_ptr< EngineResource > >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::tr1::shared_ptr< EngineResource > >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_StdVectorSmartPointerEngineResource_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'StdVectorSmartPointerEngineResource_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    erase(std::vector< std::tr1::shared_ptr< EngineResource > > *,std::vector< std::tr1::shared_ptr< EngineResource > >::iterator)\n"
    "    erase(std::vector< std::tr1::shared_ptr< EngineResource > > *,std::vector< std::tr1::shared_ptr< EngineResource > >::iterator,std::vector< std::tr1::shared_ptr< EngineResource > >::iterator)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StdVectorSmartPointerEngineResource__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< EngineResource > >::size_type arg1 ;
  std::vector< std::tr1::shared_ptr< EngineResource > >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< std::tr1::shared_ptr< EngineResource > >::value_type tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::tr1::shared_ptr< EngineResource > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_StdVectorSmartPointerEngineResource",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_StdVectorSmartPointerEngineResource" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< EngineResource > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::tr1::shared_ptr< EngineResource > >::size_type >(val1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_std__tr1__shared_ptrT_EngineResource_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_StdVectorSmartPointerEngineResource" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< EngineResource > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< std::vector< std::tr1::shared_ptr< EngineResource > >::value_type * >(argp2);
      delete reinterpret_cast< std::vector< std::tr1::shared_ptr< EngineResource > >::value_type * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< std::vector< std::tr1::shared_ptr< EngineResource > >::value_type * >(argp2) : &tempshared2;
    }
  }
  result = (std::vector< std::tr1::shared_ptr< EngineResource > > *)new std::vector< std::tr1::shared_ptr< EngineResource > >(arg1,(std::vector< std::tr1::shared_ptr< EngineResource > >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_EngineResource_t_std__allocatorT_std__tr1__shared_ptrT_EngineResource_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StdVectorSmartPointerEngineResource(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_StdVectorSmartPointerEngineResource__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_StdVectorSmartPointerEngineResource__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::tr1::shared_ptr< EngineResource >,std::allocator< std::tr1::shared_ptr< EngineResource > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_StdVectorSmartPointerEngineResource__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__tr1__shared_ptrT_EngineResource_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_StdVectorSmartPointerEngineResource__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_StdVectorSmartPointerEngineResource'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::tr1::shared_ptr< EngineResource > >()\n"
    "    std::vector< std::tr1::shared_ptr< EngineResource > >(std::vector< std::tr1::shared_ptr< EngineResource > > const &)\n"
    "    std::vector< std::tr1::shared_ptr< EngineResource > >(std::vector< std::tr1::shared_ptr< EngineResource > >::size_type)\n"
    "    std::vector< std::tr1::shared_ptr< EngineResource > >(std::vector< std::tr1::shared_ptr< EngineResource > >::size_type,std::vector< std::tr1::shared_ptr< EngineResource > >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerEngineResource_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< EngineResource > > *arg1 = (std::vector< std::tr1::shared_ptr< EngineResource > > *) 0 ;
  std::vector< std::tr1::shared_ptr< EngineResource > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< std::tr1::shared_ptr< EngineResource > >::value_type tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StdVectorSmartPointerEngineResource_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_EngineResource_t_std__allocatorT_std__tr1__shared_ptrT_EngineResource_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerEngineResource_push_back" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< EngineResource > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< EngineResource > > * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_std__tr1__shared_ptrT_EngineResource_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StdVectorSmartPointerEngineResource_push_back" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< EngineResource > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< std::vector< std::tr1::shared_ptr< EngineResource > >::value_type * >(argp2);
      delete reinterpret_cast< std::vector< std::tr1::shared_ptr< EngineResource > >::value_type * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< std::vector< std::tr1::shared_ptr< EngineResource > >::value_type * >(argp2) : &tempshared2;
    }
  }
  (arg1)->push_back((std::vector< std::tr1::shared_ptr< EngineResource > >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerEngineResource_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< EngineResource > > *arg1 = (std::vector< std::tr1::shared_ptr< EngineResource > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::tr1::shared_ptr< EngineResource > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorSmartPointerEngineResource_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_EngineResource_t_std__allocatorT_std__tr1__shared_ptrT_EngineResource_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerEngineResource_front" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< EngineResource > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< EngineResource > > * >(argp1);
  result = (std::vector< std::tr1::shared_ptr< EngineResource > >::value_type *) &((std::vector< std::tr1::shared_ptr< EngineResource > > const *)arg1)->front();
  {
    std::tr1::shared_ptr<  EngineResource > *smartresult = *result ? new std::tr1::shared_ptr<  EngineResource >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_EngineResource_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerEngineResource_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< EngineResource > > *arg1 = (std::vector< std::tr1::shared_ptr< EngineResource > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::tr1::shared_ptr< EngineResource > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorSmartPointerEngineResource_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_EngineResource_t_std__allocatorT_std__tr1__shared_ptrT_EngineResource_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerEngineResource_back" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< EngineResource > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< EngineResource > > * >(argp1);
  result = (std::vector< std::tr1::shared_ptr< EngineResource > >::value_type *) &((std::vector< std::tr1::shared_ptr< EngineResource > > const *)arg1)->back();
  {
    std::tr1::shared_ptr<  EngineResource > *smartresult = *result ? new std::tr1::shared_ptr<  EngineResource >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_EngineResource_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerEngineResource_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< EngineResource > > *arg1 = (std::vector< std::tr1::shared_ptr< EngineResource > > *) 0 ;
  std::vector< std::tr1::shared_ptr< EngineResource > >::size_type arg2 ;
  std::vector< std::tr1::shared_ptr< EngineResource > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< std::tr1::shared_ptr< EngineResource > >::value_type tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StdVectorSmartPointerEngineResource_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_EngineResource_t_std__allocatorT_std__tr1__shared_ptrT_EngineResource_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerEngineResource_assign" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< EngineResource > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< EngineResource > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StdVectorSmartPointerEngineResource_assign" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< EngineResource > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::tr1::shared_ptr< EngineResource > >::size_type >(val2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_std__tr1__shared_ptrT_EngineResource_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "StdVectorSmartPointerEngineResource_assign" "', argument " "3"" of type '" "std::vector< std::tr1::shared_ptr< EngineResource > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< std::tr1::shared_ptr< EngineResource > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< std::tr1::shared_ptr< EngineResource > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< std::tr1::shared_ptr< EngineResource > >::value_type * >(argp3) : &tempshared3;
    }
  }
  (arg1)->assign(arg2,(std::vector< std::tr1::shared_ptr< EngineResource > >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerEngineResource_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< EngineResource > > *arg1 = (std::vector< std::tr1::shared_ptr< EngineResource > > *) 0 ;
  std::vector< std::tr1::shared_ptr< EngineResource > >::size_type arg2 ;
  std::vector< std::tr1::shared_ptr< EngineResource > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< std::tr1::shared_ptr< EngineResource > >::value_type tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StdVectorSmartPointerEngineResource_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_EngineResource_t_std__allocatorT_std__tr1__shared_ptrT_EngineResource_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerEngineResource_resize" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< EngineResource > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< EngineResource > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StdVectorSmartPointerEngineResource_resize" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< EngineResource > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::tr1::shared_ptr< EngineResource > >::size_type >(val2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_std__tr1__shared_ptrT_EngineResource_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "StdVectorSmartPointerEngineResource_resize" "', argument " "3"" of type '" "std::vector< std::tr1::shared_ptr< EngineResource > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< std::tr1::shared_ptr< EngineResource > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< std::tr1::shared_ptr< EngineResource > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< std::tr1::shared_ptr< EngineResource > >::value_type * >(argp3) : &tempshared3;
    }
  }
  (arg1)->resize(arg2,(std::vector< std::tr1::shared_ptr< EngineResource > >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerEngineResource_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::tr1::shared_ptr< EngineResource >,std::allocator< std::tr1::shared_ptr< EngineResource > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_StdVectorSmartPointerEngineResource_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::tr1::shared_ptr< EngineResource >,std::allocator< std::tr1::shared_ptr< EngineResource > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__tr1__shared_ptrT_EngineResource_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_StdVectorSmartPointerEngineResource_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'StdVectorSmartPointerEngineResource_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    resize(std::vector< std::tr1::shared_ptr< EngineResource > > *,std::vector< std::tr1::shared_ptr< EngineResource > >::size_type)\n"
    "    resize(std::vector< std::tr1::shared_ptr< EngineResource > > *,std::vector< std::tr1::shared_ptr< EngineResource > >::size_type,std::vector< std::tr1::shared_ptr< EngineResource > >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerEngineResource_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< EngineResource > > *arg1 = (std::vector< std::tr1::shared_ptr< EngineResource > > *) 0 ;
  std::vector< std::tr1::shared_ptr< EngineResource > >::iterator arg2 ;
  std::vector< std::tr1::shared_ptr< EngineResource > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< std::tr1::shared_ptr< EngineResource > >::value_type tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< std::tr1::shared_ptr< EngineResource > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StdVectorSmartPointerEngineResource_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_EngineResource_t_std__allocatorT_std__tr1__shared_ptrT_EngineResource_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerEngineResource_insert" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< EngineResource > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< EngineResource > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StdVectorSmartPointerEngineResource_insert" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< EngineResource > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::tr1::shared_ptr< EngineResource > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::tr1::shared_ptr< EngineResource > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StdVectorSmartPointerEngineResource_insert" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< EngineResource > >::iterator""'");
    }
  }
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_std__tr1__shared_ptrT_EngineResource_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "StdVectorSmartPointerEngineResource_insert" "', argument " "3"" of type '" "std::vector< std::tr1::shared_ptr< EngineResource > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< std::tr1::shared_ptr< EngineResource > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< std::tr1::shared_ptr< EngineResource > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< std::tr1::shared_ptr< EngineResource > >::value_type * >(argp3) : &tempshared3;
    }
  }
  result = (arg1)->insert(arg2,(std::vector< std::tr1::shared_ptr< EngineResource > >::value_type const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::tr1::shared_ptr< EngineResource > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerEngineResource_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< EngineResource > > *arg1 = (std::vector< std::tr1::shared_ptr< EngineResource > > *) 0 ;
  std::vector< std::tr1::shared_ptr< EngineResource > >::iterator arg2 ;
  std::vector< std::tr1::shared_ptr< EngineResource > >::size_type arg3 ;
  std::vector< std::tr1::shared_ptr< EngineResource > >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  std::vector< std::tr1::shared_ptr< EngineResource > >::value_type tempshared4 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:StdVectorSmartPointerEngineResource_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_EngineResource_t_std__allocatorT_std__tr1__shared_ptrT_EngineResource_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerEngineResource_insert" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< EngineResource > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< EngineResource > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StdVectorSmartPointerEngineResource_insert" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< EngineResource > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::tr1::shared_ptr< EngineResource > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::tr1::shared_ptr< EngineResource > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StdVectorSmartPointerEngineResource_insert" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< EngineResource > >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StdVectorSmartPointerEngineResource_insert" "', argument " "3"" of type '" "std::vector< std::tr1::shared_ptr< EngineResource > >::size_type""'");
  } 
  arg3 = static_cast< std::vector< std::tr1::shared_ptr< EngineResource > >::size_type >(val3);
  {
    int newmem = 0;
    res4 = SWIG_ConvertPtrAndOwn(obj3, &argp4, SWIGTYPE_p_std__tr1__shared_ptrT_EngineResource_t,  0 , &newmem);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "StdVectorSmartPointerEngineResource_insert" "', argument " "4"" of type '" "std::vector< std::tr1::shared_ptr< EngineResource > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp4) tempshared4 = *reinterpret_cast< std::vector< std::tr1::shared_ptr< EngineResource > >::value_type * >(argp4);
      delete reinterpret_cast< std::vector< std::tr1::shared_ptr< EngineResource > >::value_type * >(argp4);
      arg4 = &tempshared4;
    } else {
      arg4 = (argp4) ? reinterpret_cast< std::vector< std::tr1::shared_ptr< EngineResource > >::value_type * >(argp4) : &tempshared4;
    }
  }
  (arg1)->insert(arg2,arg3,(std::vector< std::tr1::shared_ptr< EngineResource > >::value_type const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerEngineResource_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::tr1::shared_ptr< EngineResource >,std::allocator< std::tr1::shared_ptr< EngineResource > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::tr1::shared_ptr< EngineResource > >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__tr1__shared_ptrT_EngineResource_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_StdVectorSmartPointerEngineResource_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::tr1::shared_ptr< EngineResource >,std::allocator< std::tr1::shared_ptr< EngineResource > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::tr1::shared_ptr< EngineResource > >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_std__tr1__shared_ptrT_EngineResource_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_StdVectorSmartPointerEngineResource_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'StdVectorSmartPointerEngineResource_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    insert(std::vector< std::tr1::shared_ptr< EngineResource > > *,std::vector< std::tr1::shared_ptr< EngineResource > >::iterator,std::vector< std::tr1::shared_ptr< EngineResource > >::value_type const &)\n"
    "    insert(std::vector< std::tr1::shared_ptr< EngineResource > > *,std::vector< std::tr1::shared_ptr< EngineResource > >::iterator,std::vector< std::tr1::shared_ptr< EngineResource > >::size_type,std::vector< std::tr1::shared_ptr< EngineResource > >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerEngineResource_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< EngineResource > > *arg1 = (std::vector< std::tr1::shared_ptr< EngineResource > > *) 0 ;
  std::vector< std::tr1::shared_ptr< EngineResource > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StdVectorSmartPointerEngineResource_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_EngineResource_t_std__allocatorT_std__tr1__shared_ptrT_EngineResource_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerEngineResource_reserve" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< EngineResource > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< EngineResource > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StdVectorSmartPointerEngineResource_reserve" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< EngineResource > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::tr1::shared_ptr< EngineResource > >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdVectorSmartPointerEngineResource_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< EngineResource > > *arg1 = (std::vector< std::tr1::shared_ptr< EngineResource > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::tr1::shared_ptr< EngineResource > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StdVectorSmartPointerEngineResource_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_EngineResource_t_std__allocatorT_std__tr1__shared_ptrT_EngineResource_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdVectorSmartPointerEngineResource_capacity" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< EngineResource > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< EngineResource > > * >(argp1);
  result = ((std::vector< std::tr1::shared_ptr< EngineResource > > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_StdVectorSmartPointerEngineResource(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< EngineResource > > *arg1 = (std::vector< std::tr1::shared_ptr< EngineResource > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_StdVectorSmartPointerEngineResource",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_EngineResource_t_std__allocatorT_std__tr1__shared_ptrT_EngineResource_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_StdVectorSmartPointerEngineResource" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< EngineResource > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::tr1::shared_ptr< EngineResource > > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *StdVectorSmartPointerEngineResource_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_EngineResource_t_std__allocatorT_std__tr1__shared_ptrT_EngineResource_t_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_Utils_IsPower2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Utils_IsPower2",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Utils_IsPower2" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = (bool)Utils::IsPower2(arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Utils_Degree2Rad(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  float arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Utils_Degree2Rad",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Utils_Degree2Rad" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  result = (float)Utils::Degree2Rad(arg1);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Utils_Rad2Degree(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  float arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Utils_Rad2Degree",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Utils_Rad2Degree" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  result = (float)Utils::Rad2Degree(arg1);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Utils_Clampf(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Utils_Clampf",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Utils_Clampf" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Utils_Clampf" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Utils_Clampf" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  result = (float)Utils::Clampf(arg1,arg2,arg3);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Utils_Clampi(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Utils_Clampi",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Utils_Clampi" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Utils_Clampi" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Utils_Clampi" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (int)Utils::Clampi(arg1,arg2,arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Utils_Overlap1d(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Utils_Overlap1d",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Utils_Overlap1d" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Utils_Overlap1d" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Utils_Overlap1d" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Utils_Overlap1d" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  result = (bool)Utils::Overlap1d(arg1,arg2,arg3,arg4);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Utils_Mapf2i(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int *arg1 = 0 ;
  int arg2 ;
  int arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:Utils_Mapf2i",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_int,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Utils_Mapf2i" "', argument " "1"" of type '" "int &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Utils_Mapf2i" "', argument " "1"" of type '" "int &""'"); 
  }
  arg1 = reinterpret_cast< int * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Utils_Mapf2i" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Utils_Mapf2i" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Utils_Mapf2i" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  ecode5 = SWIG_AsVal_float(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Utils_Mapf2i" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = static_cast< float >(val5);
  ecode6 = SWIG_AsVal_float(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Utils_Mapf2i" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = static_cast< float >(val6);
  Utils::Mapf2i(*arg1,arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Utils_Mapi2f(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  float *arg1 = 0 ;
  float arg2 ;
  float arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:Utils_Mapi2f",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_float,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Utils_Mapi2f" "', argument " "1"" of type '" "float &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Utils_Mapi2f" "', argument " "1"" of type '" "float &""'"); 
  }
  arg1 = reinterpret_cast< float * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Utils_Mapi2f" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Utils_Mapi2f" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Utils_Mapi2f" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Utils_Mapi2f" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Utils_Mapi2f" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  Utils::Mapi2f(*arg1,arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Utils_Error__varargs__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *varargs) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Utils_Error",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Utils_Error" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Utils_Error" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  Utils::Error(arg1,(char const *)arg2,arg3);
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Utils_Error(PyObject *self, PyObject *args) {
  PyObject *resultobj;
  PyObject *varargs;
  PyObject *newargs;
  
  newargs = PyTuple_GetSlice(args,0,2);
  varargs = PyTuple_GetSlice(args,2,PyTuple_Size(args)+1);
  resultobj = _wrap_Utils_Error__varargs__(self,newargs,varargs);
  Py_XDECREF(newargs);
  Py_XDECREF(varargs);
  return resultobj;
}


SWIGINTERN PyObject *_wrap_Utils_Format__varargs__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *varargs) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  void *arg2 = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Utils_Format",&obj0)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Utils_Format" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  result = Utils::Format((char const *)arg1,arg2);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Utils_Format(PyObject *self, PyObject *args) {
  PyObject *resultobj;
  PyObject *varargs;
  PyObject *newargs;
  
  newargs = PyTuple_GetSlice(args,0,1);
  varargs = PyTuple_GetSlice(args,1,PyTuple_Size(args)+1);
  resultobj = _wrap_Utils_Format__varargs__(self,newargs,varargs);
  Py_XDECREF(newargs);
  Py_XDECREF(varargs);
  return resultobj;
}


SWIGINTERN PyObject *_wrap_Utils_ParseInts(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int *arg2 = (int *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Utils_ParseInts",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Utils_ParseInts" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Utils_ParseInts" "', argument " "2"" of type '" "int *""'"); 
  }
  arg2 = reinterpret_cast< int * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Utils_ParseInts" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(obj3, &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Utils_ParseInts" "', argument " "4"" of type '" "char *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  Utils::ParseInts(arg1,arg2,(char const *)arg3,arg4);
  resultobj = SWIG_Py_Void();
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Utils_ParseFloats(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  float *arg2 = (float *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Utils_ParseFloats",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Utils_ParseFloats" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Utils_ParseFloats" "', argument " "2"" of type '" "float *""'"); 
  }
  arg2 = reinterpret_cast< float * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Utils_ParseFloats" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(obj3, &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Utils_ParseFloats" "', argument " "4"" of type '" "char *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  Utils::ParseFloats(arg1,arg2,(char const *)arg3,arg4);
  resultobj = SWIG_Py_Void();
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Utils_FloatRand(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  float arg1 ;
  float arg2 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Utils_FloatRand",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Utils_FloatRand" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Utils_FloatRand" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  result = (float)Utils::FloatRand(arg1,arg2);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Utils_IntRand(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Utils_IntRand",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Utils_IntRand" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Utils_IntRand" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (int)Utils::IntRand(arg1,arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Utils_FuzzyEqual__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Utils_FuzzyEqual",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Utils_FuzzyEqual" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Utils_FuzzyEqual" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Utils_FuzzyEqual" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  result = (bool)Utils::FuzzyEqual(arg1,arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Utils_FuzzyEqual__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  float arg1 ;
  float arg2 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Utils_FuzzyEqual",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Utils_FuzzyEqual" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Utils_FuzzyEqual" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  result = (bool)Utils::FuzzyEqual(arg1,arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Utils_FuzzyEqual(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Utils_FuzzyEqual__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Utils_FuzzyEqual__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Utils_FuzzyEqual'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FuzzyEqual(float,float,float)\n"
    "    Utils::FuzzyEqual(float,float)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Utils_Log2i(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Utils_Log2i",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Utils_Log2i" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = (int)Utils::Log2i(arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Utils_Pow2i(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Utils_Pow2i",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Utils_Pow2i" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = (int)Utils::Pow2i(arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Utils_Replace__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  bool arg4 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Utils_Replace",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Utils_Replace" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Utils_Replace" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Utils_Replace" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Utils_Replace" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  result = Utils::Replace(arg1,arg2,arg3,arg4);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Utils_Replace__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Utils_Replace",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Utils_Replace" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Utils_Replace" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Utils_Replace" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = Utils::Replace(arg1,arg2,arg3);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Utils_Replace(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Utils_Replace__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Utils_Replace__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Utils_Replace'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Replace(std::string,std::string,std::string,bool)\n"
    "    Utils::Replace(std::string,std::string,std::string)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Utils_StartsWith__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::string arg2 ;
  bool arg3 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Utils_StartsWith",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Utils_StartsWith" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Utils_StartsWith" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Utils_StartsWith" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (bool)Utils::StartsWith(arg1,arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Utils_StartsWith__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::string arg2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Utils_StartsWith",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Utils_StartsWith" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Utils_StartsWith" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (bool)Utils::StartsWith(arg1,arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Utils_StartsWith(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Utils_StartsWith__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Utils_StartsWith__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Utils_StartsWith'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    StartsWith(std::string,std::string,bool)\n"
    "    Utils::StartsWith(std::string,std::string)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Utils_ToLower(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Utils_ToLower",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Utils_ToLower" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = Utils::ToLower(arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Utils_RTrim__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::string arg2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Utils_RTrim",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Utils_RTrim" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Utils_RTrim" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = Utils::RTrim(arg1,arg2);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Utils_RTrim__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Utils_RTrim",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Utils_RTrim" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = Utils::RTrim(arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Utils_RTrim(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Utils_RTrim__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Utils_RTrim__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Utils_RTrim'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    RTrim(std::string,std::string)\n"
    "    Utils::RTrim(std::string)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Utils_LTrim__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::string arg2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Utils_LTrim",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Utils_LTrim" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Utils_LTrim" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = Utils::LTrim(arg1,arg2);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Utils_LTrim__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Utils_LTrim",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Utils_LTrim" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = Utils::LTrim(arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Utils_LTrim(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Utils_LTrim__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Utils_LTrim__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Utils_LTrim'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    LTrim(std::string,std::string)\n"
    "    Utils::LTrim(std::string)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Utils_Trim__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::string arg2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Utils_Trim",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Utils_Trim" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Utils_Trim" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = Utils::Trim(arg1,arg2);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Utils_Trim__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Utils_Trim",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Utils_Trim" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = Utils::Trim(arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Utils_Trim(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Utils_Trim__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Utils_Trim__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Utils_Trim'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Trim(std::string,std::string)\n"
    "    Utils::Trim(std::string)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Utils_SelfTest(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":Utils_SelfTest")) SWIG_fail;
  result = (int)Utils::SelfTest();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Utils(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Utils *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Utils")) SWIG_fail;
  result = (Utils *)new Utils();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Utils, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Utils(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Utils *arg1 = (Utils *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Utils",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Utils, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Utils" "', argument " "1"" of type '" "Utils *""'"); 
  }
  arg1 = reinterpret_cast< Utils * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Utils_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Utils, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_Log_redirect(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  uint64 arg1 ;
  unsigned long long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Log_redirect",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_long_SS_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Log_redirect" "', argument " "1"" of type '" "uint64""'");
  } 
  arg1 = static_cast< uint64 >(val1);
  result = (bool)Log::redirect(arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Log_printf__varargs__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *varargs) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  void *arg2 = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Log_printf",&obj0)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Log_printf" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  Log::printf((char const *)arg1,arg2);
  resultobj = SWIG_Py_Void();
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Log_printf(PyObject *self, PyObject *args) {
  PyObject *resultobj;
  PyObject *varargs;
  PyObject *newargs;
  
  newargs = PyTuple_GetSlice(args,0,1);
  varargs = PyTuple_GetSlice(args,1,PyTuple_Size(args)+1);
  resultobj = _wrap_Log_printf__varargs__(self,newargs,varargs);
  Py_XDECREF(newargs);
  Py_XDECREF(varargs);
  return resultobj;
}


SWIGINTERN PyObject *_wrap_new_Log(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Log *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Log")) SWIG_fail;
  result = (Log *)new Log();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Log, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Log(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Log *arg1 = (Log *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Log",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Log, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Log" "', argument " "1"" of type '" "Log *""'"); 
  }
  arg1 = reinterpret_cast< Log * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Log_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Log, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Clock(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Clock *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Clock")) SWIG_fail;
  result = (Clock *)new Clock();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Clock, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Clock___sub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Clock *arg1 = (Clock *) 0 ;
  Clock *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Clock___sub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Clock, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Clock___sub__" "', argument " "1"" of type '" "Clock const *""'"); 
  }
  arg1 = reinterpret_cast< Clock * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Clock,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Clock___sub__" "', argument " "2"" of type '" "Clock const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Clock___sub__" "', argument " "2"" of type '" "Clock const &""'"); 
  }
  arg2 = reinterpret_cast< Clock * >(argp2);
  result = (int)((Clock const *)arg1)->operator -((Clock const &)*arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Clock_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Clock *arg1 = (Clock *) 0 ;
  Clock *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Clock *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Clock_assign",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Clock, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Clock_assign" "', argument " "1"" of type '" "Clock *""'"); 
  }
  arg1 = reinterpret_cast< Clock * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Clock,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Clock_assign" "', argument " "2"" of type '" "Clock const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Clock_assign" "', argument " "2"" of type '" "Clock const &""'"); 
  }
  arg2 = reinterpret_cast< Clock * >(argp2);
  result = (Clock *) &(arg1)->operator =((Clock const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Clock, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Clock_reset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Clock *arg1 = (Clock *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Clock_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Clock, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Clock_reset" "', argument " "1"" of type '" "Clock *""'"); 
  }
  arg1 = reinterpret_cast< Clock * >(argp1);
  (arg1)->reset();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Clock_sec(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Clock *arg1 = (Clock *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Clock_sec",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Clock, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Clock_sec" "', argument " "1"" of type '" "Clock const *""'"); 
  }
  arg1 = reinterpret_cast< Clock * >(argp1);
  result = (float)((Clock const *)arg1)->sec();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Clock_msec(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Clock *arg1 = (Clock *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Clock_msec",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Clock, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Clock_msec" "', argument " "1"" of type '" "Clock const *""'"); 
  }
  arg1 = reinterpret_cast< Clock * >(argp1);
  result = (int)((Clock const *)arg1)->msec();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Clock(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Clock *arg1 = (Clock *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Clock",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Clock, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Clock" "', argument " "1"" of type '" "Clock *""'"); 
  }
  arg1 = reinterpret_cast< Clock * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Clock_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Clock, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_Keyboard_isShiftPressed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)":Keyboard_isShiftPressed")) SWIG_fail;
  result = (bool)Keyboard::isShiftPressed();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Keyboard_isAltPressed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)":Keyboard_isAltPressed")) SWIG_fail;
  result = (bool)Keyboard::isAltPressed();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Keyboard_isControlPressed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)":Keyboard_isControlPressed")) SWIG_fail;
  result = (bool)Keyboard::isControlPressed();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Keyboard(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Keyboard *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Keyboard")) SWIG_fail;
  result = (Keyboard *)new Keyboard();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Keyboard, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Keyboard(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Keyboard *arg1 = (Keyboard *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Keyboard",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Keyboard, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Keyboard" "', argument " "1"" of type '" "Keyboard *""'"); 
  }
  arg1 = reinterpret_cast< Keyboard * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Keyboard_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Keyboard, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_SpinLock__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  SpinLock *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SpinLock",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SpinLock" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = (SpinLock *)new SpinLock(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SpinLock, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SpinLock__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SpinLock *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_SpinLock")) SWIG_fail;
  result = (SpinLock *)new SpinLock();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SpinLock, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SpinLock(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_SpinLock__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_SpinLock__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_SpinLock'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    SpinLock(int)\n"
    "    SpinLock()\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpinLock_Lock(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SpinLock *arg1 = (SpinLock *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SpinLock_Lock",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SpinLock, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpinLock_Lock" "', argument " "1"" of type '" "SpinLock *""'"); 
  }
  arg1 = reinterpret_cast< SpinLock * >(argp1);
  (arg1)->Lock();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpinLock_Unlock(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SpinLock *arg1 = (SpinLock *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SpinLock_Unlock",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SpinLock, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpinLock_Unlock" "', argument " "1"" of type '" "SpinLock *""'"); 
  }
  arg1 = reinterpret_cast< SpinLock * >(argp1);
  (arg1)->Unlock();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SpinLock(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SpinLock *arg1 = (SpinLock *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SpinLock",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SpinLock, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SpinLock" "', argument " "1"" of type '" "SpinLock *""'"); 
  }
  arg1 = reinterpret_cast< SpinLock * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SpinLock_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_SpinLock, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_xge_total_memory_set(PyObject *_val) {
  {
    unsigned long val;
    int res = SWIG_AsVal_unsigned_SS_long(_val, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""xge_total_memory""' of type '""unsigned long""'");
    }
    xge_total_memory = static_cast< unsigned long >(val);
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_xge_total_memory_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(xge_total_memory));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_Archive(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Archive *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Archive")) SWIG_fail;
  result = (Archive *)new Archive();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Archive, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Archive(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Archive *arg1 = (Archive *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Archive",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Archive, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Archive" "', argument " "1"" of type '" "Archive *""'"); 
  }
  arg1 = reinterpret_cast< Archive * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Archive_Open(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Archive *arg1 = (Archive *) 0 ;
  std::string arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Archive_Open",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Archive, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Archive_Open" "', argument " "1"" of type '" "Archive *""'"); 
  }
  arg1 = reinterpret_cast< Archive * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Archive_Open" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Archive_Open" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (bool)(arg1)->Open(arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Archive_Close(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Archive *arg1 = (Archive *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Archive_Close",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Archive, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Archive_Close" "', argument " "1"" of type '" "Archive *""'"); 
  }
  arg1 = reinterpret_cast< Archive * >(argp1);
  (arg1)->Close();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Archive_Saving(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Archive *arg1 = (Archive *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Archive_Saving",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Archive, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Archive_Saving" "', argument " "1"" of type '" "Archive *""'"); 
  }
  arg1 = reinterpret_cast< Archive * >(argp1);
  result = (bool)(arg1)->Saving();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Archive_Loading(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Archive *arg1 = (Archive *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Archive_Loading",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Archive, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Archive_Loading" "', argument " "1"" of type '" "Archive *""'"); 
  }
  arg1 = reinterpret_cast< Archive * >(argp1);
  result = (bool)(arg1)->Loading();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Archive_TextMode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Archive *arg1 = (Archive *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Archive_TextMode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Archive, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Archive_TextMode" "', argument " "1"" of type '" "Archive *""'"); 
  }
  arg1 = reinterpret_cast< Archive * >(argp1);
  result = (bool)(arg1)->TextMode();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Archive_BinaryMode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Archive *arg1 = (Archive *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Archive_BinaryMode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Archive, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Archive_BinaryMode" "', argument " "1"" of type '" "Archive *""'"); 
  }
  arg1 = reinterpret_cast< Archive * >(argp1);
  result = (bool)(arg1)->BinaryMode();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Archive_Push(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Archive *arg1 = (Archive *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Archive_Push",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Archive, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Archive_Push" "', argument " "1"" of type '" "Archive *""'"); 
  }
  arg1 = reinterpret_cast< Archive * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Archive_Push" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  (arg1)->Push(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Archive_Pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Archive *arg1 = (Archive *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Archive_Pop",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Archive, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Archive_Pop" "', argument " "1"" of type '" "Archive *""'"); 
  }
  arg1 = reinterpret_cast< Archive * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Archive_Pop" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  (arg1)->Pop(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Archive_WriteString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Archive *arg1 = (Archive *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Archive_WriteString",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Archive, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Archive_WriteString" "', argument " "1"" of type '" "Archive *""'"); 
  }
  arg1 = reinterpret_cast< Archive * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Archive_WriteString" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Archive_WriteString" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  (arg1)->WriteString(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Archive_WriteInt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Archive *arg1 = (Archive *) 0 ;
  std::string arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Archive_WriteInt",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Archive, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Archive_WriteInt" "', argument " "1"" of type '" "Archive *""'"); 
  }
  arg1 = reinterpret_cast< Archive * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Archive_WriteInt" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Archive_WriteInt" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  (arg1)->WriteInt(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Archive_WriteUint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Archive *arg1 = (Archive *) 0 ;
  std::string arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Archive_WriteUint",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Archive, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Archive_WriteUint" "', argument " "1"" of type '" "Archive *""'"); 
  }
  arg1 = reinterpret_cast< Archive * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Archive_WriteUint" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Archive_WriteUint" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  (arg1)->WriteUint(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Archive_WriteUint64(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Archive *arg1 = (Archive *) 0 ;
  std::string arg2 ;
  uint64 arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Archive_WriteUint64",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Archive, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Archive_WriteUint64" "', argument " "1"" of type '" "Archive *""'"); 
  }
  arg1 = reinterpret_cast< Archive * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Archive_WriteUint64" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_long_SS_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Archive_WriteUint64" "', argument " "3"" of type '" "uint64""'");
  } 
  arg3 = static_cast< uint64 >(val3);
  (arg1)->WriteUint64(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Archive_WriteFloat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Archive *arg1 = (Archive *) 0 ;
  std::string arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Archive_WriteFloat",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Archive, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Archive_WriteFloat" "', argument " "1"" of type '" "Archive *""'"); 
  }
  arg1 = reinterpret_cast< Archive * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Archive_WriteFloat" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Archive_WriteFloat" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  (arg1)->WriteFloat(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Archive_WriteVectorInt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Archive *arg1 = (Archive *) 0 ;
  std::string arg2 ;
  std::vector< int,std::allocator< int > > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Archive_WriteVectorInt",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Archive, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Archive_WriteVectorInt" "', argument " "1"" of type '" "Archive *""'"); 
  }
  arg1 = reinterpret_cast< Archive * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Archive_WriteVectorInt" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    int res = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Archive_WriteVectorInt" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > >""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  (arg1)->WriteVectorInt(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Archive_WriteVectorFloat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Archive *arg1 = (Archive *) 0 ;
  std::string arg2 ;
  std::vector< float,std::allocator< float > > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Archive_WriteVectorFloat",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Archive, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Archive_WriteVectorFloat" "', argument " "1"" of type '" "Archive *""'"); 
  }
  arg1 = reinterpret_cast< Archive * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Archive_WriteVectorFloat" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<float,std::allocator< float > > *ptr = (std::vector<float,std::allocator< float > > *)0;
    int res = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Archive_WriteVectorFloat" "', argument " "3"" of type '" "std::vector< float,std::allocator< float > >""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  (arg1)->WriteVectorFloat(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Archive_ReadString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Archive *arg1 = (Archive *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Archive_ReadString",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Archive, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Archive_ReadString" "', argument " "1"" of type '" "Archive *""'"); 
  }
  arg1 = reinterpret_cast< Archive * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Archive_ReadString" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (arg1)->ReadString(arg2);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Archive_ReadInt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Archive *arg1 = (Archive *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Archive_ReadInt",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Archive, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Archive_ReadInt" "', argument " "1"" of type '" "Archive *""'"); 
  }
  arg1 = reinterpret_cast< Archive * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Archive_ReadInt" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (int)(arg1)->ReadInt(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Archive_ReadUint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Archive *arg1 = (Archive *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Archive_ReadUint",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Archive, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Archive_ReadUint" "', argument " "1"" of type '" "Archive *""'"); 
  }
  arg1 = reinterpret_cast< Archive * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Archive_ReadUint" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (unsigned int)(arg1)->ReadUint(arg2);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Archive_ReadUint64(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Archive *arg1 = (Archive *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  uint64 result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Archive_ReadUint64",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Archive, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Archive_ReadUint64" "', argument " "1"" of type '" "Archive *""'"); 
  }
  arg1 = reinterpret_cast< Archive * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Archive_ReadUint64" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (uint64)(arg1)->ReadUint64(arg2);
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Archive_ReadFloat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Archive *arg1 = (Archive *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Archive_ReadFloat",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Archive, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Archive_ReadFloat" "', argument " "1"" of type '" "Archive *""'"); 
  }
  arg1 = reinterpret_cast< Archive * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Archive_ReadFloat" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (float)(arg1)->ReadFloat(arg2);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Archive_ReadVectorInt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Archive *arg1 = (Archive *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< int,std::allocator< int > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Archive_ReadVectorInt",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Archive, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Archive_ReadVectorInt" "', argument " "1"" of type '" "Archive *""'"); 
  }
  arg1 = reinterpret_cast< Archive * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Archive_ReadVectorInt" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (arg1)->ReadVectorInt(arg2);
  resultobj = swig::from(static_cast< std::vector<int,std::allocator< int > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Archive_ReadVectorFloat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Archive *arg1 = (Archive *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Archive_ReadVectorFloat",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Archive, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Archive_ReadVectorFloat" "', argument " "1"" of type '" "Archive *""'"); 
  }
  arg1 = reinterpret_cast< Archive * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Archive_ReadVectorFloat" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (arg1)->ReadVectorFloat(arg2);
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Archive_WriteRaw(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Archive *arg1 = (Archive *) 0 ;
  std::string arg2 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Archive_WriteRaw",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Archive, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Archive_WriteRaw" "', argument " "1"" of type '" "Archive *""'"); 
  }
  arg1 = reinterpret_cast< Archive * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Archive_WriteRaw" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Archive_WriteRaw" "', argument " "3"" of type '" "char *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Archive_WriteRaw" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  (arg1)->WriteRaw(arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Archive_ReadRaw(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Archive *arg1 = (Archive *) 0 ;
  std::string arg2 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Archive_ReadRaw",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Archive, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Archive_ReadRaw" "', argument " "1"" of type '" "Archive *""'"); 
  }
  arg1 = reinterpret_cast< Archive * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Archive_ReadRaw" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Archive_ReadRaw" "', argument " "3"" of type '" "char *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Archive_ReadRaw" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  (arg1)->ReadRaw(arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Archive_ExistsNode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Archive *arg1 = (Archive *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Archive_ExistsNode",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Archive, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Archive_ExistsNode" "', argument " "1"" of type '" "Archive *""'"); 
  }
  arg1 = reinterpret_cast< Archive * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Archive_ExistsNode" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (bool)(arg1)->ExistsNode(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Archive_SelfTest(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":Archive_SelfTest")) SWIG_fail;
  result = (int)Archive::SelfTest();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Archive_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Archive, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Encoder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Encoder *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Encoder")) SWIG_fail;
  result = (Encoder *)new Encoder();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Encoder, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Encoder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Encoder *arg1 = (Encoder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Encoder",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Encoder, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Encoder" "', argument " "1"" of type '" "Encoder *""'"); 
  }
  arg1 = reinterpret_cast< Encoder * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Encoder_WriteRaw(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Encoder *arg1 = (Encoder *) 0 ;
  int arg2 ;
  unsigned char *arg3 = (unsigned char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Encoder_WriteRaw",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Encoder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Encoder_WriteRaw" "', argument " "1"" of type '" "Encoder *""'"); 
  }
  arg1 = reinterpret_cast< Encoder * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Encoder_WriteRaw" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Encoder_WriteRaw" "', argument " "3"" of type '" "unsigned char *""'"); 
  }
  arg3 = reinterpret_cast< unsigned char * >(argp3);
  (arg1)->WriteRaw(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Encoder_WriteChar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Encoder *arg1 = (Encoder *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Encoder_WriteChar",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Encoder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Encoder_WriteChar" "', argument " "1"" of type '" "Encoder *""'"); 
  }
  arg1 = reinterpret_cast< Encoder * >(argp1);
  ecode2 = SWIG_AsVal_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Encoder_WriteChar" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  (arg1)->WriteChar(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Encoder_WriteUchar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Encoder *arg1 = (Encoder *) 0 ;
  unsigned char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Encoder_WriteUchar",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Encoder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Encoder_WriteUchar" "', argument " "1"" of type '" "Encoder *""'"); 
  }
  arg1 = reinterpret_cast< Encoder * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Encoder_WriteUchar" "', argument " "2"" of type '" "unsigned char""'");
  } 
  arg2 = static_cast< unsigned char >(val2);
  (arg1)->WriteUchar(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Encoder_WriteShort(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Encoder *arg1 = (Encoder *) 0 ;
  short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Encoder_WriteShort",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Encoder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Encoder_WriteShort" "', argument " "1"" of type '" "Encoder *""'"); 
  }
  arg1 = reinterpret_cast< Encoder * >(argp1);
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Encoder_WriteShort" "', argument " "2"" of type '" "short""'");
  } 
  arg2 = static_cast< short >(val2);
  (arg1)->WriteShort(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Encoder_WriteUshort(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Encoder *arg1 = (Encoder *) 0 ;
  unsigned short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Encoder_WriteUshort",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Encoder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Encoder_WriteUshort" "', argument " "1"" of type '" "Encoder *""'"); 
  }
  arg1 = reinterpret_cast< Encoder * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Encoder_WriteUshort" "', argument " "2"" of type '" "unsigned short""'");
  } 
  arg2 = static_cast< unsigned short >(val2);
  (arg1)->WriteUshort(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Encoder_WriteInt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Encoder *arg1 = (Encoder *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Encoder_WriteInt",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Encoder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Encoder_WriteInt" "', argument " "1"" of type '" "Encoder *""'"); 
  }
  arg1 = reinterpret_cast< Encoder * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Encoder_WriteInt" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->WriteInt(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Encoder_WriteUint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Encoder *arg1 = (Encoder *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Encoder_WriteUint",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Encoder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Encoder_WriteUint" "', argument " "1"" of type '" "Encoder *""'"); 
  }
  arg1 = reinterpret_cast< Encoder * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Encoder_WriteUint" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  (arg1)->WriteUint(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Encoder_WriteInt64(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Encoder *arg1 = (Encoder *) 0 ;
  int64 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Encoder_WriteInt64",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Encoder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Encoder_WriteInt64" "', argument " "1"" of type '" "Encoder *""'"); 
  }
  arg1 = reinterpret_cast< Encoder * >(argp1);
  ecode2 = SWIG_AsVal_long_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Encoder_WriteInt64" "', argument " "2"" of type '" "int64""'");
  } 
  arg2 = static_cast< int64 >(val2);
  (arg1)->WriteInt64(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Encoder_WriteUint64(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Encoder *arg1 = (Encoder *) 0 ;
  uint64 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Encoder_WriteUint64",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Encoder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Encoder_WriteUint64" "', argument " "1"" of type '" "Encoder *""'"); 
  }
  arg1 = reinterpret_cast< Encoder * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Encoder_WriteUint64" "', argument " "2"" of type '" "uint64""'");
  } 
  arg2 = static_cast< uint64 >(val2);
  (arg1)->WriteUint64(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Encoder_WriteFloat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Encoder *arg1 = (Encoder *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Encoder_WriteFloat",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Encoder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Encoder_WriteFloat" "', argument " "1"" of type '" "Encoder *""'"); 
  }
  arg1 = reinterpret_cast< Encoder * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Encoder_WriteFloat" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  (arg1)->WriteFloat(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Encoder_WriteDouble(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Encoder *arg1 = (Encoder *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Encoder_WriteDouble",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Encoder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Encoder_WriteDouble" "', argument " "1"" of type '" "Encoder *""'"); 
  }
  arg1 = reinterpret_cast< Encoder * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Encoder_WriteDouble" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->WriteDouble(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Encoder_WriteString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Encoder *arg1 = (Encoder *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Encoder_WriteString",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Encoder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Encoder_WriteString" "', argument " "1"" of type '" "Encoder *""'"); 
  }
  arg1 = reinterpret_cast< Encoder * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Encoder_WriteString" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  (arg1)->WriteString(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Encoder_c_str(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Encoder *arg1 = (Encoder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Encoder_c_str",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Encoder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Encoder_c_str" "', argument " "1"" of type '" "Encoder *""'"); 
  }
  arg1 = reinterpret_cast< Encoder * >(argp1);
  result = (char *)(arg1)->c_str();
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Encoder___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Encoder *arg1 = (Encoder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Encoder___str__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Encoder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Encoder___str__" "', argument " "1"" of type '" "Encoder *""'"); 
  }
  arg1 = reinterpret_cast< Encoder * >(argp1);
  result = (arg1)->str();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Encoder_SelfTest(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":Encoder_SelfTest")) SWIG_fail;
  result = (int)Encoder::SelfTest();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Encoder_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Encoder, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Decoder__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject * obj0 = 0 ;
  Decoder *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Decoder",&obj0)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Decoder" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  result = (Decoder *)new Decoder((char const *)arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Decoder, SWIG_POINTER_NEW |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Decoder__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  Decoder *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Decoder",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Decoder" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Decoder" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  result = (Decoder *)new Decoder((std::string const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Decoder, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Decoder(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Decoder__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Decoder__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Decoder'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Decoder(char const *)\n"
    "    Decoder(std::string const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Decoder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Decoder *arg1 = (Decoder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Decoder",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Decoder, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Decoder" "', argument " "1"" of type '" "Decoder *""'"); 
  }
  arg1 = reinterpret_cast< Decoder * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Decoder_ReadRaw(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Decoder *arg1 = (Decoder *) 0 ;
  int arg2 ;
  unsigned char *arg3 = (unsigned char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Decoder_ReadRaw",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Decoder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Decoder_ReadRaw" "', argument " "1"" of type '" "Decoder *""'"); 
  }
  arg1 = reinterpret_cast< Decoder * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Decoder_ReadRaw" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Decoder_ReadRaw" "', argument " "3"" of type '" "unsigned char *""'"); 
  }
  arg3 = reinterpret_cast< unsigned char * >(argp3);
  (arg1)->ReadRaw(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Decoder_ReadChar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Decoder *arg1 = (Decoder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Decoder_ReadChar",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Decoder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Decoder_ReadChar" "', argument " "1"" of type '" "Decoder *""'"); 
  }
  arg1 = reinterpret_cast< Decoder * >(argp1);
  result = (char)(arg1)->ReadChar();
  resultobj = SWIG_From_char(static_cast< char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Decoder_ReadUchar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Decoder *arg1 = (Decoder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned char result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Decoder_ReadUchar",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Decoder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Decoder_ReadUchar" "', argument " "1"" of type '" "Decoder *""'"); 
  }
  arg1 = reinterpret_cast< Decoder * >(argp1);
  result = (unsigned char)(arg1)->ReadUchar();
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Decoder_ReadShort(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Decoder *arg1 = (Decoder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  short result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Decoder_ReadShort",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Decoder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Decoder_ReadShort" "', argument " "1"" of type '" "Decoder *""'"); 
  }
  arg1 = reinterpret_cast< Decoder * >(argp1);
  result = (short)(arg1)->ReadShort();
  resultobj = SWIG_From_short(static_cast< short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Decoder_ReadUshort(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Decoder *arg1 = (Decoder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned short result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Decoder_ReadUshort",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Decoder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Decoder_ReadUshort" "', argument " "1"" of type '" "Decoder *""'"); 
  }
  arg1 = reinterpret_cast< Decoder * >(argp1);
  result = (unsigned short)(arg1)->ReadUshort();
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Decoder_ReadInt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Decoder *arg1 = (Decoder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Decoder_ReadInt",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Decoder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Decoder_ReadInt" "', argument " "1"" of type '" "Decoder *""'"); 
  }
  arg1 = reinterpret_cast< Decoder * >(argp1);
  result = (int)(arg1)->ReadInt();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Decoder_ReadUint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Decoder *arg1 = (Decoder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Decoder_ReadUint",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Decoder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Decoder_ReadUint" "', argument " "1"" of type '" "Decoder *""'"); 
  }
  arg1 = reinterpret_cast< Decoder * >(argp1);
  result = (unsigned int)(arg1)->ReadUint();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Decoder_ReadInt64(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Decoder *arg1 = (Decoder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int64 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Decoder_ReadInt64",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Decoder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Decoder_ReadInt64" "', argument " "1"" of type '" "Decoder *""'"); 
  }
  arg1 = reinterpret_cast< Decoder * >(argp1);
  result = (int64)(arg1)->ReadInt64();
  resultobj = SWIG_From_long_SS_long(static_cast< long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Decoder_ReadUint64(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Decoder *arg1 = (Decoder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint64 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Decoder_ReadUint64",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Decoder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Decoder_ReadUint64" "', argument " "1"" of type '" "Decoder *""'"); 
  }
  arg1 = reinterpret_cast< Decoder * >(argp1);
  result = (uint64)(arg1)->ReadUint64();
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Decoder_ReadFloat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Decoder *arg1 = (Decoder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Decoder_ReadFloat",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Decoder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Decoder_ReadFloat" "', argument " "1"" of type '" "Decoder *""'"); 
  }
  arg1 = reinterpret_cast< Decoder * >(argp1);
  result = (float)(arg1)->ReadFloat();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Decoder_ReadDouble(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Decoder *arg1 = (Decoder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Decoder_ReadDouble",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Decoder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Decoder_ReadDouble" "', argument " "1"" of type '" "Decoder *""'"); 
  }
  arg1 = reinterpret_cast< Decoder * >(argp1);
  result = (double)(arg1)->ReadDouble();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Decoder_ReadString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Decoder *arg1 = (Decoder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Decoder_ReadString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Decoder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Decoder_ReadString" "', argument " "1"" of type '" "Decoder *""'"); 
  }
  arg1 = reinterpret_cast< Decoder * >(argp1);
  result = (arg1)->ReadString();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Decoder_SelfTest(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":Decoder_SelfTest")) SWIG_fail;
  result = (int)Decoder::SelfTest();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Decoder_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Decoder, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_FileSystem_ResourcesDir_set(PyObject *_val) {
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(_val, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in variable '""FileSystem::ResourcesDir""' of type '""std::string""'"); 
    }
    FileSystem::ResourcesDir = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_FileSystem_ResourcesDir_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(FileSystem::ResourcesDir));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_FileSystem_ResourcesDir_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_FileSystem_ResourcesDir_get();
}


SWIGINTERN PyObject *_wrap_FileSystem_ResourcesDir_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *value;
  int res;
  
  if (!PyArg_ParseTuple(args,(char *)"O:set",&value)) return NULL;
  res = Swig_var_FileSystem_ResourcesDir_set(value);
  return !res ? SWIG_Py_Void() : NULL;
}


SWIGINTERN PyObject *_wrap_FileSystem_FullPath(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FileSystem_FullPath",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "FileSystem_FullPath" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = FileSystem::FullPath(arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FileSystem_ShortPath(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FileSystem_ShortPath",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "FileSystem_ShortPath" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = FileSystem::ShortPath(arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FileSystem_Extension(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FileSystem_Extension",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "FileSystem_Extension" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = FileSystem::Extension(arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FileSystem_ReadFile__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  unsigned long *arg2 = 0 ;
  bool arg3 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  unsigned char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FileSystem_ReadFile",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "FileSystem_ReadFile" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_unsigned_long,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FileSystem_ReadFile" "', argument " "2"" of type '" "unsigned long &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FileSystem_ReadFile" "', argument " "2"" of type '" "unsigned long &""'"); 
  }
  arg2 = reinterpret_cast< unsigned long * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FileSystem_ReadFile" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (unsigned char *)FileSystem::ReadFile(arg1,*arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FileSystem_ReadFile__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  unsigned long *arg2 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  unsigned char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FileSystem_ReadFile",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "FileSystem_ReadFile" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_unsigned_long,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FileSystem_ReadFile" "', argument " "2"" of type '" "unsigned long &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FileSystem_ReadFile" "', argument " "2"" of type '" "unsigned long &""'"); 
  }
  arg2 = reinterpret_cast< unsigned long * >(argp2);
  result = (unsigned char *)FileSystem::ReadFile(arg1,*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FileSystem_ReadFile(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_unsigned_long, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_FileSystem_ReadFile__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_unsigned_long, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_FileSystem_ReadFile__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'FileSystem_ReadFile'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ReadFile(std::string,unsigned long &,bool)\n"
    "    FileSystem::ReadFile(std::string,unsigned long &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_FileSystem_FileSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  uint64 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FileSystem_FileSize",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "FileSystem_FileSize" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (uint64)FileSystem::FileSize(arg1);
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FileSystem_FileExists(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FileSystem_FileExists",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "FileSystem_FileExists" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (bool)FileSystem::FileExists(arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FileSystem(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FileSystem *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_FileSystem")) SWIG_fail;
  result = (FileSystem *)new FileSystem();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FileSystem, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_FileSystem(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FileSystem *arg1 = (FileSystem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_FileSystem",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FileSystem, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FileSystem" "', argument " "1"" of type '" "FileSystem *""'"); 
  }
  arg1 = reinterpret_cast< FileSystem * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *FileSystem_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FileSystem, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_MouseEvent_type_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MouseEvent *arg1 = (MouseEvent *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MouseEvent_type_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MouseEvent, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MouseEvent_type_set" "', argument " "1"" of type '" "MouseEvent *""'"); 
  }
  arg1 = reinterpret_cast< MouseEvent * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MouseEvent_type_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->type = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MouseEvent_type_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MouseEvent *arg1 = (MouseEvent *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MouseEvent_type_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MouseEvent, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MouseEvent_type_get" "', argument " "1"" of type '" "MouseEvent *""'"); 
  }
  arg1 = reinterpret_cast< MouseEvent * >(argp1);
  result = (int) ((arg1)->type);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MouseEvent_button_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MouseEvent *arg1 = (MouseEvent *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MouseEvent_button_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MouseEvent, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MouseEvent_button_set" "', argument " "1"" of type '" "MouseEvent *""'"); 
  }
  arg1 = reinterpret_cast< MouseEvent * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MouseEvent_button_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->button = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MouseEvent_button_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MouseEvent *arg1 = (MouseEvent *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MouseEvent_button_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MouseEvent, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MouseEvent_button_get" "', argument " "1"" of type '" "MouseEvent *""'"); 
  }
  arg1 = reinterpret_cast< MouseEvent * >(argp1);
  result = (int) ((arg1)->button);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MouseEvent_x_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MouseEvent *arg1 = (MouseEvent *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MouseEvent_x_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MouseEvent, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MouseEvent_x_set" "', argument " "1"" of type '" "MouseEvent *""'"); 
  }
  arg1 = reinterpret_cast< MouseEvent * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MouseEvent_x_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->x = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MouseEvent_x_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MouseEvent *arg1 = (MouseEvent *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MouseEvent_x_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MouseEvent, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MouseEvent_x_get" "', argument " "1"" of type '" "MouseEvent *""'"); 
  }
  arg1 = reinterpret_cast< MouseEvent * >(argp1);
  result = (int) ((arg1)->x);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MouseEvent_y_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MouseEvent *arg1 = (MouseEvent *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MouseEvent_y_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MouseEvent, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MouseEvent_y_set" "', argument " "1"" of type '" "MouseEvent *""'"); 
  }
  arg1 = reinterpret_cast< MouseEvent * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MouseEvent_y_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->y = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MouseEvent_y_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MouseEvent *arg1 = (MouseEvent *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MouseEvent_y_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MouseEvent, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MouseEvent_y_get" "', argument " "1"" of type '" "MouseEvent *""'"); 
  }
  arg1 = reinterpret_cast< MouseEvent * >(argp1);
  result = (int) ((arg1)->y);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MouseEvent_delta_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MouseEvent *arg1 = (MouseEvent *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MouseEvent_delta_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MouseEvent, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MouseEvent_delta_set" "', argument " "1"" of type '" "MouseEvent *""'"); 
  }
  arg1 = reinterpret_cast< MouseEvent * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MouseEvent_delta_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->delta = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MouseEvent_delta_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MouseEvent *arg1 = (MouseEvent *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MouseEvent_delta_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MouseEvent, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MouseEvent_delta_get" "', argument " "1"" of type '" "MouseEvent *""'"); 
  }
  arg1 = reinterpret_cast< MouseEvent * >(argp1);
  result = (int) ((arg1)->delta);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MouseEvent__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MouseEvent *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_MouseEvent")) SWIG_fail;
  result = (MouseEvent *)new MouseEvent();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MouseEvent, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MouseEvent__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  MouseEvent *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_MouseEvent",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_MouseEvent" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_MouseEvent" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_MouseEvent" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_MouseEvent" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_MouseEvent" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  result = (MouseEvent *)new MouseEvent(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MouseEvent, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MouseEvent__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  MouseEvent *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_MouseEvent",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_MouseEvent" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_MouseEvent" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_MouseEvent" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_MouseEvent" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  result = (MouseEvent *)new MouseEvent(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MouseEvent, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MouseEvent(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 5); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_MouseEvent__SWIG_0(self, args);
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_MouseEvent__SWIG_2(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_MouseEvent__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_MouseEvent'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    MouseEvent()\n"
    "    MouseEvent(int,int,int,int,int)\n"
    "    MouseEvent(int,int,int,int)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_MouseEvent(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MouseEvent *arg1 = (MouseEvent *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_MouseEvent",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MouseEvent, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MouseEvent" "', argument " "1"" of type '" "MouseEvent *""'"); 
  }
  arg1 = reinterpret_cast< MouseEvent * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MouseEvent_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_MouseEvent, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_Vec2i_x_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec2i *arg1 = (Vec2i *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vec2i_x_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vec2i, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec2i_x_set" "', argument " "1"" of type '" "Vec2i *""'"); 
  }
  arg1 = reinterpret_cast< Vec2i * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vec2i_x_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->x = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec2i_x_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec2i *arg1 = (Vec2i *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vec2i_x_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vec2i, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec2i_x_get" "', argument " "1"" of type '" "Vec2i *""'"); 
  }
  arg1 = reinterpret_cast< Vec2i * >(argp1);
  result = (int) ((arg1)->x);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec2i_y_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec2i *arg1 = (Vec2i *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vec2i_y_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vec2i, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec2i_y_set" "', argument " "1"" of type '" "Vec2i *""'"); 
  }
  arg1 = reinterpret_cast< Vec2i * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vec2i_y_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->y = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec2i_y_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec2i *arg1 = (Vec2i *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vec2i_y_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vec2i, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec2i_y_get" "', argument " "1"" of type '" "Vec2i *""'"); 
  }
  arg1 = reinterpret_cast< Vec2i * >(argp1);
  result = (int) ((arg1)->y);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Vec2i__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec2i *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Vec2i")) SWIG_fail;
  result = (Vec2i *)new Vec2i();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vec2i, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Vec2i__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec2i *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Vec2i *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Vec2i",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Vec2i,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Vec2i" "', argument " "1"" of type '" "Vec2i const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Vec2i" "', argument " "1"" of type '" "Vec2i const &""'"); 
  }
  arg1 = reinterpret_cast< Vec2i * >(argp1);
  result = (Vec2i *)new Vec2i((Vec2i const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vec2i, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Vec2i__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Vec2i *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Vec2i",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Vec2i" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Vec2i" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (Vec2i *)new Vec2i(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vec2i, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Vec2i__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int,std::allocator< int > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  Vec2i *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Vec2i",&obj0)) SWIG_fail;
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Vec2i" "', argument " "1"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Vec2i" "', argument " "1"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (Vec2i *)new Vec2i((std::vector< int,std::allocator< int > > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vec2i, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Vec2i(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Vec2i__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Vec2i, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Vec2i__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Vec2i__SWIG_3(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Vec2i__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Vec2i'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Vec2i()\n"
    "    Vec2i(Vec2i const &)\n"
    "    Vec2i(int,int)\n"
    "    Vec2i(std::vector< int,std::allocator< int > > const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec2i_assign__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec2i *arg1 = (Vec2i *) 0 ;
  Vec2i *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Vec2i *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vec2i_assign",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vec2i, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec2i_assign" "', argument " "1"" of type '" "Vec2i *""'"); 
  }
  arg1 = reinterpret_cast< Vec2i * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vec2i,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vec2i_assign" "', argument " "2"" of type '" "Vec2i const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vec2i_assign" "', argument " "2"" of type '" "Vec2i const &""'"); 
  }
  arg2 = reinterpret_cast< Vec2i * >(argp2);
  result = (Vec2i *) &(arg1)->operator =((Vec2i const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vec2i, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec2i_assign__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec2i *arg1 = (Vec2i *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Vec2i *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vec2i_assign",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vec2i, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec2i_assign" "', argument " "1"" of type '" "Vec2i *""'"); 
  }
  arg1 = reinterpret_cast< Vec2i * >(argp1);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vec2i_assign" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vec2i_assign" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg2 = ptr;
  }
  result = (Vec2i *) &(arg1)->operator =((std::vector< int,std::allocator< int > > const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vec2i, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec2i_assign(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Vec2i, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Vec2i, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Vec2i_assign__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Vec2i, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector<int,std::allocator< int > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Vec2i_assign__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Vec2i_assign'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operator =(Vec2i *,Vec2i const &)\n"
    "    operator =(Vec2i *,std::vector< int,std::allocator< int > > const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec2i_scale(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec2i *arg1 = (Vec2i *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Vec2i result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Vec2i_scale",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vec2i, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec2i_scale" "', argument " "1"" of type '" "Vec2i const *""'"); 
  }
  arg1 = reinterpret_cast< Vec2i * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vec2i_scale" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Vec2i_scale" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = ((Vec2i const *)arg1)->scale(arg2,arg3);
  resultobj = SWIG_NewPointerObj((new Vec2i(static_cast< const Vec2i& >(result))), SWIGTYPE_p_Vec2i, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec2i_translate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec2i *arg1 = (Vec2i *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Vec2i result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Vec2i_translate",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vec2i, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec2i_translate" "', argument " "1"" of type '" "Vec2i const *""'"); 
  }
  arg1 = reinterpret_cast< Vec2i * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vec2i_translate" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Vec2i_translate" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = ((Vec2i const *)arg1)->translate(arg2,arg3);
  resultobj = SWIG_NewPointerObj((new Vec2i(static_cast< const Vec2i& >(result))), SWIGTYPE_p_Vec2i, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec2i___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec2i *arg1 = (Vec2i *) 0 ;
  Vec2i *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vec2i___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vec2i, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec2i___eq__" "', argument " "1"" of type '" "Vec2i const *""'"); 
  }
  arg1 = reinterpret_cast< Vec2i * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vec2i,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vec2i___eq__" "', argument " "2"" of type '" "Vec2i const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vec2i___eq__" "', argument " "2"" of type '" "Vec2i const &""'"); 
  }
  arg2 = reinterpret_cast< Vec2i * >(argp2);
  result = (bool)((Vec2i const *)arg1)->operator ==((Vec2i const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec2i_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec2i *arg1 = (Vec2i *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vec2i_get",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vec2i, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec2i_get" "', argument " "1"" of type '" "Vec2i *""'"); 
  }
  arg1 = reinterpret_cast< Vec2i * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vec2i_get" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (int)(arg1)->get(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec2i_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec2i *arg1 = (Vec2i *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Vec2i_set",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vec2i, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec2i_set" "', argument " "1"" of type '" "Vec2i *""'"); 
  }
  arg1 = reinterpret_cast< Vec2i * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vec2i_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Vec2i_set" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  (arg1)->set(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec2i___getitem_ref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec2i *arg1 = (Vec2i *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vec2i___getitem_ref__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vec2i, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec2i___getitem_ref__" "', argument " "1"" of type '" "Vec2i *""'"); 
  }
  arg1 = reinterpret_cast< Vec2i * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vec2i___getitem_ref__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (int *) &(arg1)->operator [](arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_int, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec2i___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec2i *arg1 = (Vec2i *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vec2i___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vec2i, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec2i___getitem__" "', argument " "1"" of type '" "Vec2i const *""'"); 
  }
  arg1 = reinterpret_cast< Vec2i * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vec2i___getitem__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (int *) &((Vec2i const *)arg1)->operator [](arg2);
  resultobj = SWIG_From_int(static_cast< int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Vec2i(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec2i *arg1 = (Vec2i *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Vec2i",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vec2i, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Vec2i" "', argument " "1"" of type '" "Vec2i *""'"); 
  }
  arg1 = reinterpret_cast< Vec2i * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Vec2i_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Vec2i, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_Vec2f_x_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec2f *arg1 = (Vec2f *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vec2f_x_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vec2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec2f_x_set" "', argument " "1"" of type '" "Vec2f *""'"); 
  }
  arg1 = reinterpret_cast< Vec2f * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vec2f_x_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->x = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec2f_x_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec2f *arg1 = (Vec2f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vec2f_x_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vec2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec2f_x_get" "', argument " "1"" of type '" "Vec2f *""'"); 
  }
  arg1 = reinterpret_cast< Vec2f * >(argp1);
  result = (float) ((arg1)->x);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec2f_y_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec2f *arg1 = (Vec2f *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vec2f_y_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vec2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec2f_y_set" "', argument " "1"" of type '" "Vec2f *""'"); 
  }
  arg1 = reinterpret_cast< Vec2f * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vec2f_y_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->y = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec2f_y_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec2f *arg1 = (Vec2f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vec2f_y_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vec2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec2f_y_get" "', argument " "1"" of type '" "Vec2f *""'"); 
  }
  arg1 = reinterpret_cast< Vec2f * >(argp1);
  result = (float) ((arg1)->y);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Vec2f__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec2f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Vec2f")) SWIG_fail;
  result = (Vec2f *)new Vec2f();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vec2f, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Vec2f__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec2f *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Vec2f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Vec2f",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Vec2f,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Vec2f" "', argument " "1"" of type '" "Vec2f const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Vec2f" "', argument " "1"" of type '" "Vec2f const &""'"); 
  }
  arg1 = reinterpret_cast< Vec2f * >(argp1);
  result = (Vec2f *)new Vec2f((Vec2f const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vec2f, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Vec2f__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  float arg1 ;
  float arg2 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Vec2f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Vec2f",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Vec2f" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Vec2f" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  result = (Vec2f *)new Vec2f(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vec2f, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Vec2f__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float,std::allocator< float > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  Vec2f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Vec2f",&obj0)) SWIG_fail;
  {
    std::vector<float,std::allocator< float > > *ptr = (std::vector<float,std::allocator< float > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Vec2f" "', argument " "1"" of type '" "std::vector< float,std::allocator< float > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Vec2f" "', argument " "1"" of type '" "std::vector< float,std::allocator< float > > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (Vec2f *)new Vec2f((std::vector< float,std::allocator< float > > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vec2f, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Vec2f(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Vec2f__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Vec2f, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Vec2f__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<float,std::allocator< float > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Vec2f__SWIG_3(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Vec2f__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Vec2f'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Vec2f()\n"
    "    Vec2f(Vec2f const &)\n"
    "    Vec2f(float,float)\n"
    "    Vec2f(std::vector< float,std::allocator< float > > const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec2f_assign__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec2f *arg1 = (Vec2f *) 0 ;
  Vec2f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Vec2f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vec2f_assign",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vec2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec2f_assign" "', argument " "1"" of type '" "Vec2f *""'"); 
  }
  arg1 = reinterpret_cast< Vec2f * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vec2f,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vec2f_assign" "', argument " "2"" of type '" "Vec2f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vec2f_assign" "', argument " "2"" of type '" "Vec2f const &""'"); 
  }
  arg2 = reinterpret_cast< Vec2f * >(argp2);
  result = (Vec2f *) &(arg1)->operator =((Vec2f const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vec2f, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec2f_assign__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec2f *arg1 = (Vec2f *) 0 ;
  std::vector< float,std::allocator< float > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Vec2f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vec2f_assign",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vec2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec2f_assign" "', argument " "1"" of type '" "Vec2f *""'"); 
  }
  arg1 = reinterpret_cast< Vec2f * >(argp1);
  {
    std::vector<float,std::allocator< float > > *ptr = (std::vector<float,std::allocator< float > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vec2f_assign" "', argument " "2"" of type '" "std::vector< float,std::allocator< float > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vec2f_assign" "', argument " "2"" of type '" "std::vector< float,std::allocator< float > > const &""'"); 
    }
    arg2 = ptr;
  }
  result = (Vec2f *) &(arg1)->operator =((std::vector< float,std::allocator< float > > const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vec2f, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec2f_assign(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Vec2f, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Vec2f, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Vec2f_assign__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Vec2f, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector<float,std::allocator< float > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Vec2f_assign__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Vec2f_assign'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operator =(Vec2f *,Vec2f const &)\n"
    "    operator =(Vec2f *,std::vector< float,std::allocator< float > > const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec2f___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec2f *arg1 = (Vec2f *) 0 ;
  Vec2f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vec2f___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vec2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec2f___eq__" "', argument " "1"" of type '" "Vec2f const *""'"); 
  }
  arg1 = reinterpret_cast< Vec2f * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vec2f,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vec2f___eq__" "', argument " "2"" of type '" "Vec2f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vec2f___eq__" "', argument " "2"" of type '" "Vec2f const &""'"); 
  }
  arg2 = reinterpret_cast< Vec2f * >(argp2);
  result = (bool)((Vec2f const *)arg1)->operator ==((Vec2f const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec2f_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec2f *arg1 = (Vec2f *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vec2f_get",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vec2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec2f_get" "', argument " "1"" of type '" "Vec2f *""'"); 
  }
  arg1 = reinterpret_cast< Vec2f * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vec2f_get" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (float)(arg1)->get(arg2);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec2f_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec2f *arg1 = (Vec2f *) 0 ;
  int arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Vec2f_set",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vec2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec2f_set" "', argument " "1"" of type '" "Vec2f *""'"); 
  }
  arg1 = reinterpret_cast< Vec2f * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vec2f_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Vec2f_set" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  (arg1)->set(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec2f___getitem_ref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec2f *arg1 = (Vec2f *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vec2f___getitem_ref__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vec2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec2f___getitem_ref__" "', argument " "1"" of type '" "Vec2f *""'"); 
  }
  arg1 = reinterpret_cast< Vec2f * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vec2f___getitem_ref__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (float *) &(arg1)->operator [](arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_float, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec2f___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec2f *arg1 = (Vec2f *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vec2f___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vec2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec2f___getitem__" "', argument " "1"" of type '" "Vec2f const *""'"); 
  }
  arg1 = reinterpret_cast< Vec2f * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vec2f___getitem__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (float *) &((Vec2f const *)arg1)->operator [](arg2);
  resultobj = SWIG_From_float(static_cast< float >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec2f___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec2f *arg1 = (Vec2f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vec2f___str__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vec2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec2f___str__" "', argument " "1"" of type '" "Vec2f const *""'"); 
  }
  arg1 = reinterpret_cast< Vec2f * >(argp1);
  result = ((Vec2f const *)arg1)->str();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec2f___repr__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec2f *arg1 = (Vec2f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vec2f___repr__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vec2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec2f___repr__" "', argument " "1"" of type '" "Vec2f const *""'"); 
  }
  arg1 = reinterpret_cast< Vec2f * >(argp1);
  result = ((Vec2f const *)arg1)->repr();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Vec2f(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec2f *arg1 = (Vec2f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Vec2f",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vec2f, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Vec2f" "', argument " "1"" of type '" "Vec2f *""'"); 
  }
  arg1 = reinterpret_cast< Vec2f * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Vec2f_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Vec2f, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_Vec3f_Write(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec3f *arg1 = (Vec3f *) 0 ;
  Archive *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vec3f_Write",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec3f_Write" "', argument " "1"" of type '" "Vec3f *""'"); 
  }
  arg1 = reinterpret_cast< Vec3f * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Archive,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vec3f_Write" "', argument " "2"" of type '" "Archive &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vec3f_Write" "', argument " "2"" of type '" "Archive &""'"); 
  }
  arg2 = reinterpret_cast< Archive * >(argp2);
  (arg1)->Write(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec3f_Read(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec3f *arg1 = (Vec3f *) 0 ;
  Archive *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vec3f_Read",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec3f_Read" "', argument " "1"" of type '" "Vec3f *""'"); 
  }
  arg1 = reinterpret_cast< Vec3f * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Archive,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vec3f_Read" "', argument " "2"" of type '" "Archive &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vec3f_Read" "', argument " "2"" of type '" "Archive &""'"); 
  }
  arg2 = reinterpret_cast< Archive * >(argp2);
  (arg1)->Read(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec3f_x_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec3f *arg1 = (Vec3f *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vec3f_x_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec3f_x_set" "', argument " "1"" of type '" "Vec3f *""'"); 
  }
  arg1 = reinterpret_cast< Vec3f * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vec3f_x_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->x = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec3f_x_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec3f *arg1 = (Vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vec3f_x_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec3f_x_get" "', argument " "1"" of type '" "Vec3f *""'"); 
  }
  arg1 = reinterpret_cast< Vec3f * >(argp1);
  result = (float) ((arg1)->x);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec3f_y_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec3f *arg1 = (Vec3f *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vec3f_y_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec3f_y_set" "', argument " "1"" of type '" "Vec3f *""'"); 
  }
  arg1 = reinterpret_cast< Vec3f * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vec3f_y_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->y = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec3f_y_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec3f *arg1 = (Vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vec3f_y_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec3f_y_get" "', argument " "1"" of type '" "Vec3f *""'"); 
  }
  arg1 = reinterpret_cast< Vec3f * >(argp1);
  result = (float) ((arg1)->y);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec3f_z_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec3f *arg1 = (Vec3f *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vec3f_z_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec3f_z_set" "', argument " "1"" of type '" "Vec3f *""'"); 
  }
  arg1 = reinterpret_cast< Vec3f * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vec3f_z_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->z = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec3f_z_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec3f *arg1 = (Vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vec3f_z_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec3f_z_get" "', argument " "1"" of type '" "Vec3f *""'"); 
  }
  arg1 = reinterpret_cast< Vec3f * >(argp1);
  result = (float) ((arg1)->z);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Vec3f__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Vec3f")) SWIG_fail;
  result = (Vec3f *)new Vec3f();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vec3f, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Vec3f__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec3f *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Vec3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Vec3f",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Vec3f,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Vec3f" "', argument " "1"" of type '" "Vec3f const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Vec3f" "', argument " "1"" of type '" "Vec3f const &""'"); 
  }
  arg1 = reinterpret_cast< Vec3f * >(argp1);
  result = (Vec3f *)new Vec3f((Vec3f const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vec3f, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Vec3f__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Vec3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_Vec3f",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Vec3f" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Vec3f" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Vec3f" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  result = (Vec3f *)new Vec3f(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vec3f, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Vec3f__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  float arg1 ;
  float arg2 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Vec3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Vec3f",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Vec3f" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Vec3f" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  result = (Vec3f *)new Vec3f(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vec3f, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Vec3f__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  float *arg1 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Vec3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Vec3f",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Vec3f" "', argument " "1"" of type '" "float const [3]""'"); 
  } 
  arg1 = reinterpret_cast< float * >(argp1);
  result = (Vec3f *)new Vec3f((float const (*))arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vec3f, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Vec3f__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float,std::allocator< float > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  Vec3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Vec3f",&obj0)) SWIG_fail;
  {
    std::vector<float,std::allocator< float > > *ptr = (std::vector<float,std::allocator< float > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Vec3f" "', argument " "1"" of type '" "std::vector< float,std::allocator< float > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Vec3f" "', argument " "1"" of type '" "std::vector< float,std::allocator< float > > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (Vec3f *)new Vec3f((std::vector< float,std::allocator< float > > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vec3f, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Vec3f__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double *arg1 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Vec3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Vec3f",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Vec3f" "', argument " "1"" of type '" "double const [3]""'"); 
  } 
  arg1 = reinterpret_cast< double * >(argp1);
  result = (Vec3f *)new Vec3f((double const (*))arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vec3f, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Vec3f(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Vec3f__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Vec3f, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Vec3f__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_float, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Vec3f__SWIG_4(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_double, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Vec3f__SWIG_6(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<float,std::allocator< float > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Vec3f__SWIG_5(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Vec3f__SWIG_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_Vec3f__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Vec3f'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Vec3f()\n"
    "    Vec3f(Vec3f const &)\n"
    "    Vec3f(float,float,float)\n"
    "    Vec3f(float,float)\n"
    "    Vec3f(float const [3])\n"
    "    Vec3f(std::vector< float,std::allocator< float > > const &)\n"
    "    Vec3f(double const [3])\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec3f_assign__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec3f *arg1 = (Vec3f *) 0 ;
  Vec3f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Vec3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vec3f_assign",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec3f_assign" "', argument " "1"" of type '" "Vec3f *""'"); 
  }
  arg1 = reinterpret_cast< Vec3f * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vec3f,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vec3f_assign" "', argument " "2"" of type '" "Vec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vec3f_assign" "', argument " "2"" of type '" "Vec3f const &""'"); 
  }
  arg2 = reinterpret_cast< Vec3f * >(argp2);
  result = (Vec3f *) &(arg1)->operator =((Vec3f const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vec3f, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec3f_assign__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec3f *arg1 = (Vec3f *) 0 ;
  std::vector< float,std::allocator< float > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Vec3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vec3f_assign",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec3f_assign" "', argument " "1"" of type '" "Vec3f *""'"); 
  }
  arg1 = reinterpret_cast< Vec3f * >(argp1);
  {
    std::vector<float,std::allocator< float > > *ptr = (std::vector<float,std::allocator< float > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vec3f_assign" "', argument " "2"" of type '" "std::vector< float,std::allocator< float > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vec3f_assign" "', argument " "2"" of type '" "std::vector< float,std::allocator< float > > const &""'"); 
    }
    arg2 = ptr;
  }
  result = (Vec3f *) &(arg1)->operator =((std::vector< float,std::allocator< float > > const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vec3f, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec3f_assign(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Vec3f, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Vec3f, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Vec3f_assign__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Vec3f, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector<float,std::allocator< float > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Vec3f_assign__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Vec3f_assign'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operator =(Vec3f *,Vec3f const &)\n"
    "    operator =(Vec3f *,std::vector< float,std::allocator< float > > const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec3f_store(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec3f *arg1 = (Vec3f *) 0 ;
  float *arg2 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vec3f_store",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec3f_store" "', argument " "1"" of type '" "Vec3f *""'"); 
  }
  arg1 = reinterpret_cast< Vec3f * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vec3f_store" "', argument " "2"" of type '" "float *""'"); 
  }
  arg2 = reinterpret_cast< float * >(argp2);
  (arg1)->store(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec3f_module2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec3f *arg1 = (Vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vec3f_module2",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec3f_module2" "', argument " "1"" of type '" "Vec3f const *""'"); 
  }
  arg1 = reinterpret_cast< Vec3f * >(argp1);
  result = (float)((Vec3f const *)arg1)->module2();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec3f_module(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec3f *arg1 = (Vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vec3f_module",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec3f_module" "', argument " "1"" of type '" "Vec3f const *""'"); 
  }
  arg1 = reinterpret_cast< Vec3f * >(argp1);
  result = (float)((Vec3f const *)arg1)->module();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec3f_distance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec3f *arg1 = (Vec3f *) 0 ;
  Vec3f arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vec3f_distance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec3f_distance" "', argument " "1"" of type '" "Vec3f const *""'"); 
  }
  arg1 = reinterpret_cast< Vec3f * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vec3f,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vec3f_distance" "', argument " "2"" of type '" "Vec3f const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vec3f_distance" "', argument " "2"" of type '" "Vec3f const""'");
    } else {
      Vec3f * temp = reinterpret_cast< Vec3f * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (float)((Vec3f const *)arg1)->distance(arg2);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec3f_normalize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec3f *arg1 = (Vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Vec3f result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vec3f_normalize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec3f_normalize" "', argument " "1"" of type '" "Vec3f const *""'"); 
  }
  arg1 = reinterpret_cast< Vec3f * >(argp1);
  result = ((Vec3f const *)arg1)->normalize();
  resultobj = SWIG_NewPointerObj((new Vec3f(static_cast< const Vec3f& >(result))), SWIGTYPE_p_Vec3f, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec3f___imul__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec3f *arg1 = (Vec3f *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Vec3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vec3f___imul__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vec3f, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec3f___imul__" "', argument " "1"" of type '" "Vec3f *""'"); 
  }
  arg1 = reinterpret_cast< Vec3f * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vec3f___imul__" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  result = (Vec3f *) &(arg1)->operator *=(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vec3f, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec3f___idiv__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec3f *arg1 = (Vec3f *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Vec3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vec3f___idiv__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vec3f, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec3f___idiv__" "', argument " "1"" of type '" "Vec3f *""'"); 
  }
  arg1 = reinterpret_cast< Vec3f * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vec3f___idiv__" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  result = (Vec3f *) &(arg1)->operator /=(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vec3f, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec3f___iadd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec3f *arg1 = (Vec3f *) 0 ;
  Vec3f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Vec3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vec3f___iadd__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vec3f, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec3f___iadd__" "', argument " "1"" of type '" "Vec3f *""'"); 
  }
  arg1 = reinterpret_cast< Vec3f * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vec3f,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vec3f___iadd__" "', argument " "2"" of type '" "Vec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vec3f___iadd__" "', argument " "2"" of type '" "Vec3f const &""'"); 
  }
  arg2 = reinterpret_cast< Vec3f * >(argp2);
  result = (Vec3f *) &(arg1)->operator +=((Vec3f const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vec3f, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec3f___isub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec3f *arg1 = (Vec3f *) 0 ;
  Vec3f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Vec3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vec3f___isub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vec3f, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec3f___isub__" "', argument " "1"" of type '" "Vec3f *""'"); 
  }
  arg1 = reinterpret_cast< Vec3f * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vec3f,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vec3f___isub__" "', argument " "2"" of type '" "Vec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vec3f___isub__" "', argument " "2"" of type '" "Vec3f const &""'"); 
  }
  arg2 = reinterpret_cast< Vec3f * >(argp2);
  result = (Vec3f *) &(arg1)->operator -=((Vec3f const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vec3f, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec3f_cross(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec3f *arg1 = (Vec3f *) 0 ;
  Vec3f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Vec3f result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vec3f_cross",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec3f_cross" "', argument " "1"" of type '" "Vec3f const *""'"); 
  }
  arg1 = reinterpret_cast< Vec3f * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vec3f,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vec3f_cross" "', argument " "2"" of type '" "Vec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vec3f_cross" "', argument " "2"" of type '" "Vec3f const &""'"); 
  }
  arg2 = reinterpret_cast< Vec3f * >(argp2);
  result = ((Vec3f const *)arg1)->cross((Vec3f const &)*arg2);
  resultobj = SWIG_NewPointerObj((new Vec3f(static_cast< const Vec3f& >(result))), SWIGTYPE_p_Vec3f, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec3f_isValid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec3f *arg1 = (Vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vec3f_isValid",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec3f_isValid" "', argument " "1"" of type '" "Vec3f const *""'"); 
  }
  arg1 = reinterpret_cast< Vec3f * >(argp1);
  result = (bool)((Vec3f const *)arg1)->isValid();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec3f_fuzzyEqual__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec3f *arg1 = (Vec3f *) 0 ;
  Vec3f *arg2 = 0 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Vec3f_fuzzyEqual",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec3f_fuzzyEqual" "', argument " "1"" of type '" "Vec3f const *""'"); 
  }
  arg1 = reinterpret_cast< Vec3f * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vec3f,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vec3f_fuzzyEqual" "', argument " "2"" of type '" "Vec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vec3f_fuzzyEqual" "', argument " "2"" of type '" "Vec3f const &""'"); 
  }
  arg2 = reinterpret_cast< Vec3f * >(argp2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Vec3f_fuzzyEqual" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  result = (bool)((Vec3f const *)arg1)->fuzzyEqual((Vec3f const &)*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec3f_fuzzyEqual__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec3f *arg1 = (Vec3f *) 0 ;
  Vec3f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vec3f_fuzzyEqual",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec3f_fuzzyEqual" "', argument " "1"" of type '" "Vec3f const *""'"); 
  }
  arg1 = reinterpret_cast< Vec3f * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vec3f,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vec3f_fuzzyEqual" "', argument " "2"" of type '" "Vec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vec3f_fuzzyEqual" "', argument " "2"" of type '" "Vec3f const &""'"); 
  }
  arg2 = reinterpret_cast< Vec3f * >(argp2);
  result = (bool)((Vec3f const *)arg1)->fuzzyEqual((Vec3f const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec3f_fuzzyEqual(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Vec3f, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Vec3f, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Vec3f_fuzzyEqual__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Vec3f, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Vec3f, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Vec3f_fuzzyEqual__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Vec3f_fuzzyEqual'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fuzzyEqual(Vec3f const *,Vec3f const &,float)\n"
    "    fuzzyEqual(Vec3f const *,Vec3f const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec3f___add__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec3f *arg1 = (Vec3f *) 0 ;
  Vec3f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Vec3f result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vec3f___add__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec3f___add__" "', argument " "1"" of type '" "Vec3f const *""'"); 
  }
  arg1 = reinterpret_cast< Vec3f * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vec3f,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vec3f___add__" "', argument " "2"" of type '" "Vec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vec3f___add__" "', argument " "2"" of type '" "Vec3f const &""'"); 
  }
  arg2 = reinterpret_cast< Vec3f * >(argp2);
  result = ((Vec3f const *)arg1)->operator +((Vec3f const &)*arg2);
  resultobj = SWIG_NewPointerObj((new Vec3f(static_cast< const Vec3f& >(result))), SWIGTYPE_p_Vec3f, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec3f___sub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec3f *arg1 = (Vec3f *) 0 ;
  Vec3f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Vec3f result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vec3f___sub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec3f___sub__" "', argument " "1"" of type '" "Vec3f const *""'"); 
  }
  arg1 = reinterpret_cast< Vec3f * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vec3f,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vec3f___sub__" "', argument " "2"" of type '" "Vec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vec3f___sub__" "', argument " "2"" of type '" "Vec3f const &""'"); 
  }
  arg2 = reinterpret_cast< Vec3f * >(argp2);
  result = ((Vec3f const *)arg1)->operator -((Vec3f const &)*arg2);
  resultobj = SWIG_NewPointerObj((new Vec3f(static_cast< const Vec3f& >(result))), SWIGTYPE_p_Vec3f, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec3f___mul____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec3f *arg1 = (Vec3f *) 0 ;
  Vec3f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vec3f___mul__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec3f___mul__" "', argument " "1"" of type '" "Vec3f const *""'"); 
  }
  arg1 = reinterpret_cast< Vec3f * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vec3f,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vec3f___mul__" "', argument " "2"" of type '" "Vec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vec3f___mul__" "', argument " "2"" of type '" "Vec3f const &""'"); 
  }
  arg2 = reinterpret_cast< Vec3f * >(argp2);
  result = (float)((Vec3f const *)arg1)->operator *((Vec3f const &)*arg2);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec3f___mul____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec3f *arg1 = (Vec3f *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Vec3f result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vec3f___mul__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec3f___mul__" "', argument " "1"" of type '" "Vec3f const *""'"); 
  }
  arg1 = reinterpret_cast< Vec3f * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vec3f___mul__" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  result = ((Vec3f const *)arg1)->operator *(arg2);
  resultobj = SWIG_NewPointerObj((new Vec3f(static_cast< const Vec3f& >(result))), SWIGTYPE_p_Vec3f, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec3f___mul__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Vec3f, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Vec3f, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Vec3f___mul____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Vec3f, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Vec3f___mul____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Vec3f___div__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec3f *arg1 = (Vec3f *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Vec3f result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vec3f___div__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec3f___div__" "', argument " "1"" of type '" "Vec3f const *""'"); 
  }
  arg1 = reinterpret_cast< Vec3f * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vec3f___div__" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  result = ((Vec3f const *)arg1)->operator /(arg2);
  resultobj = SWIG_NewPointerObj((new Vec3f(static_cast< const Vec3f& >(result))), SWIGTYPE_p_Vec3f, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec3f___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec3f *arg1 = (Vec3f *) 0 ;
  Vec3f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vec3f___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec3f___eq__" "', argument " "1"" of type '" "Vec3f const *""'"); 
  }
  arg1 = reinterpret_cast< Vec3f * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vec3f,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vec3f___eq__" "', argument " "2"" of type '" "Vec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vec3f___eq__" "', argument " "2"" of type '" "Vec3f const &""'"); 
  }
  arg2 = reinterpret_cast< Vec3f * >(argp2);
  result = (bool)((Vec3f const *)arg1)->operator ==((Vec3f const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec3f___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec3f *arg1 = (Vec3f *) 0 ;
  Vec3f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vec3f___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec3f___ne__" "', argument " "1"" of type '" "Vec3f const *""'"); 
  }
  arg1 = reinterpret_cast< Vec3f * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vec3f,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vec3f___ne__" "', argument " "2"" of type '" "Vec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vec3f___ne__" "', argument " "2"" of type '" "Vec3f const &""'"); 
  }
  arg2 = reinterpret_cast< Vec3f * >(argp2);
  result = (bool)((Vec3f const *)arg1)->operator !=((Vec3f const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec3f_Abs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec3f *arg1 = (Vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Vec3f result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vec3f_Abs",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec3f_Abs" "', argument " "1"" of type '" "Vec3f const *""'"); 
  }
  arg1 = reinterpret_cast< Vec3f * >(argp1);
  result = ((Vec3f const *)arg1)->Abs();
  resultobj = SWIG_NewPointerObj((new Vec3f(static_cast< const Vec3f& >(result))), SWIGTYPE_p_Vec3f, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec3f_Min__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec3f *arg1 = (Vec3f *) 0 ;
  Vec3f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Vec3f result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vec3f_Min",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec3f_Min" "', argument " "1"" of type '" "Vec3f const *""'"); 
  }
  arg1 = reinterpret_cast< Vec3f * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vec3f,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vec3f_Min" "', argument " "2"" of type '" "Vec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vec3f_Min" "', argument " "2"" of type '" "Vec3f const &""'"); 
  }
  arg2 = reinterpret_cast< Vec3f * >(argp2);
  result = ((Vec3f const *)arg1)->Min((Vec3f const &)*arg2);
  resultobj = SWIG_NewPointerObj((new Vec3f(static_cast< const Vec3f& >(result))), SWIGTYPE_p_Vec3f, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec3f_Max__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec3f *arg1 = (Vec3f *) 0 ;
  Vec3f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Vec3f result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vec3f_Max",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec3f_Max" "', argument " "1"" of type '" "Vec3f const *""'"); 
  }
  arg1 = reinterpret_cast< Vec3f * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vec3f,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vec3f_Max" "', argument " "2"" of type '" "Vec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vec3f_Max" "', argument " "2"" of type '" "Vec3f const &""'"); 
  }
  arg2 = reinterpret_cast< Vec3f * >(argp2);
  result = ((Vec3f const *)arg1)->Max((Vec3f const &)*arg2);
  resultobj = SWIG_NewPointerObj((new Vec3f(static_cast< const Vec3f& >(result))), SWIGTYPE_p_Vec3f, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec3f_Max__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec3f *arg1 = (Vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vec3f_Max",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec3f_Max" "', argument " "1"" of type '" "Vec3f *""'"); 
  }
  arg1 = reinterpret_cast< Vec3f * >(argp1);
  result = (float)(arg1)->Max();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec3f_Max(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Vec3f, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Vec3f_Max__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Vec3f, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Vec3f, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Vec3f_Max__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Vec3f_Max'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Max(Vec3f const *,Vec3f const &)\n"
    "    Max(Vec3f *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec3f_Min__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec3f *arg1 = (Vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vec3f_Min",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec3f_Min" "', argument " "1"" of type '" "Vec3f *""'"); 
  }
  arg1 = reinterpret_cast< Vec3f * >(argp1);
  result = (float)(arg1)->Min();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec3f_Min(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Vec3f, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Vec3f_Min__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Vec3f, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Vec3f, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Vec3f_Min__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Vec3f_Min'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Min(Vec3f const *,Vec3f const &)\n"
    "    Min(Vec3f *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec3f_maxidx(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec3f *arg1 = (Vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vec3f_maxidx",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec3f_maxidx" "', argument " "1"" of type '" "Vec3f const *""'"); 
  }
  arg1 = reinterpret_cast< Vec3f * >(argp1);
  result = (int)((Vec3f const *)arg1)->maxidx();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec3f_minidx(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec3f *arg1 = (Vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vec3f_minidx",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec3f_minidx" "', argument " "1"" of type '" "Vec3f const *""'"); 
  }
  arg1 = reinterpret_cast< Vec3f * >(argp1);
  result = (int)((Vec3f const *)arg1)->minidx();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec3f_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec3f *arg1 = (Vec3f *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vec3f_get",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec3f_get" "', argument " "1"" of type '" "Vec3f *""'"); 
  }
  arg1 = reinterpret_cast< Vec3f * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vec3f_get" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (float)(arg1)->get(arg2);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec3f_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec3f *arg1 = (Vec3f *) 0 ;
  int arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Vec3f_set",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec3f_set" "', argument " "1"" of type '" "Vec3f *""'"); 
  }
  arg1 = reinterpret_cast< Vec3f * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vec3f_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Vec3f_set" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  (arg1)->set(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec3f___getitem_ref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec3f *arg1 = (Vec3f *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vec3f___getitem_ref__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec3f___getitem_ref__" "', argument " "1"" of type '" "Vec3f *""'"); 
  }
  arg1 = reinterpret_cast< Vec3f * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vec3f___getitem_ref__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (float *) &(arg1)->operator [](arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_float, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec3f___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec3f *arg1 = (Vec3f *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vec3f___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec3f___getitem__" "', argument " "1"" of type '" "Vec3f const *""'"); 
  }
  arg1 = reinterpret_cast< Vec3f * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vec3f___getitem__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (float *) &((Vec3f const *)arg1)->operator [](arg2);
  resultobj = SWIG_From_float(static_cast< float >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec3f_rotate__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec3f *arg1 = (Vec3f *) 0 ;
  Vec3f *arg2 = 0 ;
  float arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Vec3f result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Vec3f_rotate",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec3f_rotate" "', argument " "1"" of type '" "Vec3f *""'"); 
  }
  arg1 = reinterpret_cast< Vec3f * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vec3f,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vec3f_rotate" "', argument " "2"" of type '" "Vec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vec3f_rotate" "', argument " "2"" of type '" "Vec3f const &""'"); 
  }
  arg2 = reinterpret_cast< Vec3f * >(argp2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Vec3f_rotate" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Vec3f_rotate" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  result = (arg1)->rotate((Vec3f const &)*arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj((new Vec3f(static_cast< const Vec3f& >(result))), SWIGTYPE_p_Vec3f, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec3f_rotate__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec3f *arg1 = (Vec3f *) 0 ;
  Vec3f *arg2 = 0 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Vec3f result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Vec3f_rotate",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec3f_rotate" "', argument " "1"" of type '" "Vec3f *""'"); 
  }
  arg1 = reinterpret_cast< Vec3f * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vec3f,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vec3f_rotate" "', argument " "2"" of type '" "Vec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vec3f_rotate" "', argument " "2"" of type '" "Vec3f const &""'"); 
  }
  arg2 = reinterpret_cast< Vec3f * >(argp2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Vec3f_rotate" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  result = (arg1)->rotate((Vec3f const &)*arg2,arg3);
  resultobj = SWIG_NewPointerObj((new Vec3f(static_cast< const Vec3f& >(result))), SWIGTYPE_p_Vec3f, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec3f_rotate(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Vec3f, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Vec3f, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Vec3f_rotate__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Vec3f, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Vec3f, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Vec3f_rotate__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Vec3f_rotate'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    rotate(Vec3f *,Vec3f const &,float,bool)\n"
    "    rotate(Vec3f *,Vec3f const &,float)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec3f___repr__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec3f *arg1 = (Vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vec3f___repr__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec3f___repr__" "', argument " "1"" of type '" "Vec3f const *""'"); 
  }
  arg1 = reinterpret_cast< Vec3f * >(argp1);
  result = ((Vec3f const *)arg1)->repr();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec3f___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec3f *arg1 = (Vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vec3f___str__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec3f___str__" "', argument " "1"" of type '" "Vec3f const *""'"); 
  }
  arg1 = reinterpret_cast< Vec3f * >(argp1);
  result = ((Vec3f const *)arg1)->str();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec3f_SelfTest(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":Vec3f_SelfTest")) SWIG_fail;
  result = (int)Vec3f::SelfTest();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Vec3f(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec3f *arg1 = (Vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Vec3f",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vec3f, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Vec3f" "', argument " "1"" of type '" "Vec3f *""'"); 
  }
  arg1 = reinterpret_cast< Vec3f * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Vec3f_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Vec3f, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_Vec4f_x_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec4f *arg1 = (Vec4f *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vec4f_x_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vec4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec4f_x_set" "', argument " "1"" of type '" "Vec4f *""'"); 
  }
  arg1 = reinterpret_cast< Vec4f * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vec4f_x_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->x = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec4f_x_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec4f *arg1 = (Vec4f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vec4f_x_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vec4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec4f_x_get" "', argument " "1"" of type '" "Vec4f *""'"); 
  }
  arg1 = reinterpret_cast< Vec4f * >(argp1);
  result = (float) ((arg1)->x);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec4f_y_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec4f *arg1 = (Vec4f *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vec4f_y_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vec4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec4f_y_set" "', argument " "1"" of type '" "Vec4f *""'"); 
  }
  arg1 = reinterpret_cast< Vec4f * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vec4f_y_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->y = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec4f_y_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec4f *arg1 = (Vec4f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vec4f_y_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vec4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec4f_y_get" "', argument " "1"" of type '" "Vec4f *""'"); 
  }
  arg1 = reinterpret_cast< Vec4f * >(argp1);
  result = (float) ((arg1)->y);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec4f_z_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec4f *arg1 = (Vec4f *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vec4f_z_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vec4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec4f_z_set" "', argument " "1"" of type '" "Vec4f *""'"); 
  }
  arg1 = reinterpret_cast< Vec4f * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vec4f_z_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->z = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec4f_z_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec4f *arg1 = (Vec4f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vec4f_z_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vec4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec4f_z_get" "', argument " "1"" of type '" "Vec4f *""'"); 
  }
  arg1 = reinterpret_cast< Vec4f * >(argp1);
  result = (float) ((arg1)->z);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec4f_w_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec4f *arg1 = (Vec4f *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vec4f_w_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vec4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec4f_w_set" "', argument " "1"" of type '" "Vec4f *""'"); 
  }
  arg1 = reinterpret_cast< Vec4f * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vec4f_w_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->w = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec4f_w_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec4f *arg1 = (Vec4f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vec4f_w_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vec4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec4f_w_get" "', argument " "1"" of type '" "Vec4f *""'"); 
  }
  arg1 = reinterpret_cast< Vec4f * >(argp1);
  result = (float) ((arg1)->w);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Vec4f__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec4f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Vec4f")) SWIG_fail;
  result = (Vec4f *)new Vec4f();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vec4f, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Vec4f__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec4f *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Vec4f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Vec4f",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Vec4f,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Vec4f" "', argument " "1"" of type '" "Vec4f const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Vec4f" "', argument " "1"" of type '" "Vec4f const &""'"); 
  }
  arg1 = reinterpret_cast< Vec4f * >(argp1);
  result = (Vec4f *)new Vec4f((Vec4f const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vec4f, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Vec4f__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Vec4f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_Vec4f",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Vec4f" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Vec4f" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Vec4f" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_Vec4f" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  result = (Vec4f *)new Vec4f(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vec4f, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Vec4f__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  float *arg1 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Vec4f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Vec4f",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Vec4f" "', argument " "1"" of type '" "float const [4]""'"); 
  } 
  arg1 = reinterpret_cast< float * >(argp1);
  result = (Vec4f *)new Vec4f((float const (*))arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vec4f, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Vec4f__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double *arg1 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Vec4f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Vec4f",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Vec4f" "', argument " "1"" of type '" "double const [4]""'"); 
  } 
  arg1 = reinterpret_cast< double * >(argp1);
  result = (Vec4f *)new Vec4f((double const (*))arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vec4f, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Vec4f__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float,std::allocator< float > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  Vec4f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Vec4f",&obj0)) SWIG_fail;
  {
    std::vector<float,std::allocator< float > > *ptr = (std::vector<float,std::allocator< float > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Vec4f" "', argument " "1"" of type '" "std::vector< float,std::allocator< float > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Vec4f" "', argument " "1"" of type '" "std::vector< float,std::allocator< float > > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (Vec4f *)new Vec4f((std::vector< float,std::allocator< float > > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vec4f, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Vec4f(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Vec4f__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Vec4f, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Vec4f__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_float, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Vec4f__SWIG_3(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_double, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Vec4f__SWIG_4(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<float,std::allocator< float > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Vec4f__SWIG_5(self, args);
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_Vec4f__SWIG_2(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Vec4f'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Vec4f()\n"
    "    Vec4f(Vec4f const &)\n"
    "    Vec4f(float,float,float,float)\n"
    "    Vec4f(float const [4])\n"
    "    Vec4f(double const [4])\n"
    "    Vec4f(std::vector< float,std::allocator< float > > const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec4f_module2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec4f *arg1 = (Vec4f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vec4f_module2",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vec4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec4f_module2" "', argument " "1"" of type '" "Vec4f const *""'"); 
  }
  arg1 = reinterpret_cast< Vec4f * >(argp1);
  result = (float)((Vec4f const *)arg1)->module2();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec4f_module(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec4f *arg1 = (Vec4f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vec4f_module",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vec4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec4f_module" "', argument " "1"" of type '" "Vec4f const *""'"); 
  }
  arg1 = reinterpret_cast< Vec4f * >(argp1);
  result = (float)((Vec4f const *)arg1)->module();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec4f_normalize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec4f *arg1 = (Vec4f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Vec4f result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vec4f_normalize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vec4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec4f_normalize" "', argument " "1"" of type '" "Vec4f const *""'"); 
  }
  arg1 = reinterpret_cast< Vec4f * >(argp1);
  result = ((Vec4f const *)arg1)->normalize();
  resultobj = SWIG_NewPointerObj((new Vec4f(static_cast< const Vec4f& >(result))), SWIGTYPE_p_Vec4f, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec4f_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec4f *arg1 = (Vec4f *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vec4f_get",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vec4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec4f_get" "', argument " "1"" of type '" "Vec4f *""'"); 
  }
  arg1 = reinterpret_cast< Vec4f * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vec4f_get" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (float)(arg1)->get(arg2);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec4f_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec4f *arg1 = (Vec4f *) 0 ;
  int arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Vec4f_set",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vec4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec4f_set" "', argument " "1"" of type '" "Vec4f *""'"); 
  }
  arg1 = reinterpret_cast< Vec4f * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vec4f_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Vec4f_set" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  (arg1)->set(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec4f___getitem_ref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec4f *arg1 = (Vec4f *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vec4f___getitem_ref__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vec4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec4f___getitem_ref__" "', argument " "1"" of type '" "Vec4f *""'"); 
  }
  arg1 = reinterpret_cast< Vec4f * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vec4f___getitem_ref__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (float *) &(arg1)->operator [](arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_float, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec4f___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec4f *arg1 = (Vec4f *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vec4f___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vec4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec4f___getitem__" "', argument " "1"" of type '" "Vec4f const *""'"); 
  }
  arg1 = reinterpret_cast< Vec4f * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vec4f___getitem__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (float *) &((Vec4f const *)arg1)->operator [](arg2);
  resultobj = SWIG_From_float(static_cast< float >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec4f___imul__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec4f *arg1 = (Vec4f *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Vec4f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vec4f___imul__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vec4f, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec4f___imul__" "', argument " "1"" of type '" "Vec4f *""'"); 
  }
  arg1 = reinterpret_cast< Vec4f * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vec4f___imul__" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  result = (Vec4f *) &(arg1)->operator *=(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vec4f, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec4f___idiv__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec4f *arg1 = (Vec4f *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Vec4f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vec4f___idiv__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vec4f, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec4f___idiv__" "', argument " "1"" of type '" "Vec4f *""'"); 
  }
  arg1 = reinterpret_cast< Vec4f * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vec4f___idiv__" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  result = (Vec4f *) &(arg1)->operator /=(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vec4f, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec4f___iadd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec4f *arg1 = (Vec4f *) 0 ;
  Vec4f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Vec4f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vec4f___iadd__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vec4f, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec4f___iadd__" "', argument " "1"" of type '" "Vec4f *""'"); 
  }
  arg1 = reinterpret_cast< Vec4f * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vec4f,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vec4f___iadd__" "', argument " "2"" of type '" "Vec4f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vec4f___iadd__" "', argument " "2"" of type '" "Vec4f const &""'"); 
  }
  arg2 = reinterpret_cast< Vec4f * >(argp2);
  result = (Vec4f *) &(arg1)->operator +=((Vec4f const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vec4f, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec4f___isub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec4f *arg1 = (Vec4f *) 0 ;
  Vec4f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Vec4f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vec4f___isub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vec4f, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec4f___isub__" "', argument " "1"" of type '" "Vec4f *""'"); 
  }
  arg1 = reinterpret_cast< Vec4f * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vec4f,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vec4f___isub__" "', argument " "2"" of type '" "Vec4f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vec4f___isub__" "', argument " "2"" of type '" "Vec4f const &""'"); 
  }
  arg2 = reinterpret_cast< Vec4f * >(argp2);
  result = (Vec4f *) &(arg1)->operator -=((Vec4f const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vec4f, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec4f_assign__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec4f *arg1 = (Vec4f *) 0 ;
  Vec4f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Vec4f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vec4f_assign",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vec4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec4f_assign" "', argument " "1"" of type '" "Vec4f *""'"); 
  }
  arg1 = reinterpret_cast< Vec4f * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vec4f,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vec4f_assign" "', argument " "2"" of type '" "Vec4f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vec4f_assign" "', argument " "2"" of type '" "Vec4f const &""'"); 
  }
  arg2 = reinterpret_cast< Vec4f * >(argp2);
  result = (Vec4f *) &(arg1)->operator =((Vec4f const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vec4f, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec4f_assign__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec4f *arg1 = (Vec4f *) 0 ;
  std::vector< float,std::allocator< float > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Vec4f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vec4f_assign",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vec4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec4f_assign" "', argument " "1"" of type '" "Vec4f *""'"); 
  }
  arg1 = reinterpret_cast< Vec4f * >(argp1);
  {
    std::vector<float,std::allocator< float > > *ptr = (std::vector<float,std::allocator< float > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vec4f_assign" "', argument " "2"" of type '" "std::vector< float,std::allocator< float > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vec4f_assign" "', argument " "2"" of type '" "std::vector< float,std::allocator< float > > const &""'"); 
    }
    arg2 = ptr;
  }
  result = (Vec4f *) &(arg1)->operator =((std::vector< float,std::allocator< float > > const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vec4f, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec4f_assign(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Vec4f, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Vec4f, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Vec4f_assign__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Vec4f, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector<float,std::allocator< float > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Vec4f_assign__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Vec4f_assign'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operator =(Vec4f *,Vec4f const &)\n"
    "    operator =(Vec4f *,std::vector< float,std::allocator< float > > const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec4f_Min(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec4f *arg1 = (Vec4f *) 0 ;
  Vec4f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Vec4f result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vec4f_Min",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vec4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec4f_Min" "', argument " "1"" of type '" "Vec4f const *""'"); 
  }
  arg1 = reinterpret_cast< Vec4f * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vec4f,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vec4f_Min" "', argument " "2"" of type '" "Vec4f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vec4f_Min" "', argument " "2"" of type '" "Vec4f const &""'"); 
  }
  arg2 = reinterpret_cast< Vec4f * >(argp2);
  result = ((Vec4f const *)arg1)->Min((Vec4f const &)*arg2);
  resultobj = SWIG_NewPointerObj((new Vec4f(static_cast< const Vec4f& >(result))), SWIGTYPE_p_Vec4f, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec4f_Max(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec4f *arg1 = (Vec4f *) 0 ;
  Vec4f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Vec4f result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vec4f_Max",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vec4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec4f_Max" "', argument " "1"" of type '" "Vec4f const *""'"); 
  }
  arg1 = reinterpret_cast< Vec4f * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vec4f,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vec4f_Max" "', argument " "2"" of type '" "Vec4f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vec4f_Max" "', argument " "2"" of type '" "Vec4f const &""'"); 
  }
  arg2 = reinterpret_cast< Vec4f * >(argp2);
  result = ((Vec4f const *)arg1)->Max((Vec4f const &)*arg2);
  resultobj = SWIG_NewPointerObj((new Vec4f(static_cast< const Vec4f& >(result))), SWIGTYPE_p_Vec4f, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec4f___mul____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec4f *arg1 = (Vec4f *) 0 ;
  Vec4f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vec4f___mul__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vec4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec4f___mul__" "', argument " "1"" of type '" "Vec4f const *""'"); 
  }
  arg1 = reinterpret_cast< Vec4f * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vec4f,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vec4f___mul__" "', argument " "2"" of type '" "Vec4f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vec4f___mul__" "', argument " "2"" of type '" "Vec4f const &""'"); 
  }
  arg2 = reinterpret_cast< Vec4f * >(argp2);
  result = (float)((Vec4f const *)arg1)->operator *((Vec4f const &)*arg2);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec4f___add__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec4f *arg1 = (Vec4f *) 0 ;
  Vec4f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Vec4f result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vec4f___add__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vec4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec4f___add__" "', argument " "1"" of type '" "Vec4f const *""'"); 
  }
  arg1 = reinterpret_cast< Vec4f * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vec4f,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vec4f___add__" "', argument " "2"" of type '" "Vec4f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vec4f___add__" "', argument " "2"" of type '" "Vec4f const &""'"); 
  }
  arg2 = reinterpret_cast< Vec4f * >(argp2);
  result = ((Vec4f const *)arg1)->operator +((Vec4f const &)*arg2);
  resultobj = SWIG_NewPointerObj((new Vec4f(static_cast< const Vec4f& >(result))), SWIGTYPE_p_Vec4f, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec4f___sub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec4f *arg1 = (Vec4f *) 0 ;
  Vec4f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Vec4f result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vec4f___sub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vec4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec4f___sub__" "', argument " "1"" of type '" "Vec4f const *""'"); 
  }
  arg1 = reinterpret_cast< Vec4f * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vec4f,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vec4f___sub__" "', argument " "2"" of type '" "Vec4f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vec4f___sub__" "', argument " "2"" of type '" "Vec4f const &""'"); 
  }
  arg2 = reinterpret_cast< Vec4f * >(argp2);
  result = ((Vec4f const *)arg1)->operator -((Vec4f const &)*arg2);
  resultobj = SWIG_NewPointerObj((new Vec4f(static_cast< const Vec4f& >(result))), SWIGTYPE_p_Vec4f, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec4f___mul____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec4f *arg1 = (Vec4f *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Vec4f result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vec4f___mul__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vec4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec4f___mul__" "', argument " "1"" of type '" "Vec4f const *""'"); 
  }
  arg1 = reinterpret_cast< Vec4f * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vec4f___mul__" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  result = ((Vec4f const *)arg1)->operator *(arg2);
  resultobj = SWIG_NewPointerObj((new Vec4f(static_cast< const Vec4f& >(result))), SWIGTYPE_p_Vec4f, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec4f___div__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec4f *arg1 = (Vec4f *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Vec4f result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vec4f___div__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vec4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec4f___div__" "', argument " "1"" of type '" "Vec4f const *""'"); 
  }
  arg1 = reinterpret_cast< Vec4f * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vec4f___div__" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  result = ((Vec4f const *)arg1)->operator /(arg2);
  resultobj = SWIG_NewPointerObj((new Vec4f(static_cast< const Vec4f& >(result))), SWIGTYPE_p_Vec4f, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec4f___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec4f *arg1 = (Vec4f *) 0 ;
  Vec4f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vec4f___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vec4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec4f___eq__" "', argument " "1"" of type '" "Vec4f const *""'"); 
  }
  arg1 = reinterpret_cast< Vec4f * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vec4f,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vec4f___eq__" "', argument " "2"" of type '" "Vec4f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vec4f___eq__" "', argument " "2"" of type '" "Vec4f const &""'"); 
  }
  arg2 = reinterpret_cast< Vec4f * >(argp2);
  result = (bool)((Vec4f const *)arg1)->operator ==((Vec4f const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec4f___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec4f *arg1 = (Vec4f *) 0 ;
  Vec4f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vec4f___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vec4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec4f___ne__" "', argument " "1"" of type '" "Vec4f const *""'"); 
  }
  arg1 = reinterpret_cast< Vec4f * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vec4f,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vec4f___ne__" "', argument " "2"" of type '" "Vec4f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vec4f___ne__" "', argument " "2"" of type '" "Vec4f const &""'"); 
  }
  arg2 = reinterpret_cast< Vec4f * >(argp2);
  result = (bool)((Vec4f const *)arg1)->operator !=((Vec4f const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec4f___mul____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec4f *arg1 = (Vec4f *) 0 ;
  Mat4f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Vec4f result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vec4f___mul__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vec4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec4f___mul__" "', argument " "1"" of type '" "Vec4f const *""'"); 
  }
  arg1 = reinterpret_cast< Vec4f * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Mat4f,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vec4f___mul__" "', argument " "2"" of type '" "Mat4f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vec4f___mul__" "', argument " "2"" of type '" "Mat4f const &""'"); 
  }
  arg2 = reinterpret_cast< Mat4f * >(argp2);
  result = ((Vec4f const *)arg1)->operator *((Mat4f const &)*arg2);
  resultobj = SWIG_NewPointerObj((new Vec4f(static_cast< const Vec4f& >(result))), SWIGTYPE_p_Vec4f, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec4f___mul__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Vec4f, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Vec4f, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Vec4f___mul____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Vec4f, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Mat4f, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Vec4f___mul____SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Vec4f, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Vec4f___mul____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Vec4f_fuzzyEqual__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec4f *arg1 = (Vec4f *) 0 ;
  Vec4f *arg2 = 0 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Vec4f_fuzzyEqual",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vec4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec4f_fuzzyEqual" "', argument " "1"" of type '" "Vec4f const *""'"); 
  }
  arg1 = reinterpret_cast< Vec4f * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vec4f,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vec4f_fuzzyEqual" "', argument " "2"" of type '" "Vec4f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vec4f_fuzzyEqual" "', argument " "2"" of type '" "Vec4f const &""'"); 
  }
  arg2 = reinterpret_cast< Vec4f * >(argp2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Vec4f_fuzzyEqual" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  result = (bool)((Vec4f const *)arg1)->fuzzyEqual((Vec4f const &)*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec4f_fuzzyEqual__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec4f *arg1 = (Vec4f *) 0 ;
  Vec4f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vec4f_fuzzyEqual",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vec4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec4f_fuzzyEqual" "', argument " "1"" of type '" "Vec4f const *""'"); 
  }
  arg1 = reinterpret_cast< Vec4f * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vec4f,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vec4f_fuzzyEqual" "', argument " "2"" of type '" "Vec4f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vec4f_fuzzyEqual" "', argument " "2"" of type '" "Vec4f const &""'"); 
  }
  arg2 = reinterpret_cast< Vec4f * >(argp2);
  result = (bool)((Vec4f const *)arg1)->fuzzyEqual((Vec4f const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec4f_fuzzyEqual(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Vec4f, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Vec4f, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Vec4f_fuzzyEqual__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Vec4f, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Vec4f, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Vec4f_fuzzyEqual__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Vec4f_fuzzyEqual'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fuzzyEqual(Vec4f const *,Vec4f const &,float)\n"
    "    fuzzyEqual(Vec4f const *,Vec4f const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec4f___repr__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec4f *arg1 = (Vec4f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vec4f___repr__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vec4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec4f___repr__" "', argument " "1"" of type '" "Vec4f const *""'"); 
  }
  arg1 = reinterpret_cast< Vec4f * >(argp1);
  result = ((Vec4f const *)arg1)->repr();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec4f___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec4f *arg1 = (Vec4f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vec4f___str__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vec4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec4f___str__" "', argument " "1"" of type '" "Vec4f const *""'"); 
  }
  arg1 = reinterpret_cast< Vec4f * >(argp1);
  result = ((Vec4f const *)arg1)->str();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec4f_SelfTest(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":Vec4f_SelfTest")) SWIG_fail;
  result = (int)Vec4f::SelfTest();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Vec4f(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec4f *arg1 = (Vec4f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Vec4f",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vec4f, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Vec4f" "', argument " "1"" of type '" "Vec4f *""'"); 
  }
  arg1 = reinterpret_cast< Vec4f * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Vec4f_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Vec4f, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_Vecf_mem_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vecf *arg1 = (Vecf *) 0 ;
  float *arg2 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vecf_mem_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vecf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vecf_mem_set" "', argument " "1"" of type '" "Vecf *""'"); 
  }
  arg1 = reinterpret_cast< Vecf * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_float, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vecf_mem_set" "', argument " "2"" of type '" "float *""'"); 
  }
  arg2 = reinterpret_cast< float * >(argp2);
  if (arg1) (arg1)->mem = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vecf_mem_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vecf *arg1 = (Vecf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vecf_mem_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vecf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vecf_mem_get" "', argument " "1"" of type '" "Vecf *""'"); 
  }
  arg1 = reinterpret_cast< Vecf * >(argp1);
  result = (float *) ((arg1)->mem);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_float, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vecf_dim_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vecf *arg1 = (Vecf *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vecf_dim_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vecf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vecf_dim_set" "', argument " "1"" of type '" "Vecf *""'"); 
  }
  arg1 = reinterpret_cast< Vecf * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vecf_dim_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->dim = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vecf_dim_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vecf *arg1 = (Vecf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vecf_dim_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vecf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vecf_dim_get" "', argument " "1"" of type '" "Vecf *""'"); 
  }
  arg1 = reinterpret_cast< Vecf * >(argp1);
  result = (int) ((arg1)->dim);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Vecf__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vecf *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Vecf")) SWIG_fail;
  result = (Vecf *)new Vecf();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vecf, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Vecf__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vecf *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Vecf *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Vecf",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Vecf,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Vecf" "', argument " "1"" of type '" "Vecf const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Vecf" "', argument " "1"" of type '" "Vecf const &""'"); 
  }
  arg1 = reinterpret_cast< Vecf * >(argp1);
  result = (Vecf *)new Vecf((Vecf const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vecf, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Vecf__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float,std::allocator< float > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  Vecf *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Vecf",&obj0)) SWIG_fail;
  {
    std::vector<float,std::allocator< float > > *ptr = (std::vector<float,std::allocator< float > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Vecf" "', argument " "1"" of type '" "std::vector< float,std::allocator< float > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Vecf" "', argument " "1"" of type '" "std::vector< float,std::allocator< float > > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (Vecf *)new Vecf((std::vector< float,std::allocator< float > > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vecf, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Vecf__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  Vecf *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Vecf",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Vecf" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = (Vecf *)new Vecf(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vecf, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Vecf__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  float arg2 ;
  float *arg3 = (float *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Vecf *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_Vecf",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Vecf" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Vecf" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_Vecf" "', argument " "3"" of type '" "float const *""'"); 
  }
  arg3 = reinterpret_cast< float * >(argp3);
  result = (Vecf *)new Vecf(arg1,arg2,(float const *)arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vecf, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Vecf__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  float *arg2 = (float *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Vecf *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Vecf",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Vecf" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Vecf" "', argument " "2"" of type '" "float const *""'"); 
  }
  arg2 = reinterpret_cast< float * >(argp2);
  result = (Vecf *)new Vecf(arg1,(float const *)arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vecf, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Vecf__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double *arg2 = (double *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Vecf *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Vecf",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Vecf" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Vecf" "', argument " "2"" of type '" "double const *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  result = (Vecf *)new Vecf(arg1,(double const *)arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vecf, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Vecf__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Vecf *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_Vecf",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Vecf" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Vecf" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Vecf" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  result = (Vecf *)new Vecf(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vecf, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Vecf__SWIG_8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Vecf *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_Vecf",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Vecf" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Vecf" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Vecf" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_Vecf" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  result = (Vecf *)new Vecf(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vecf, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Vecf__SWIG_9(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  Vecf *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_Vecf",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Vecf" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Vecf" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Vecf" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_Vecf" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  ecode5 = SWIG_AsVal_float(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_Vecf" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = static_cast< float >(val5);
  result = (Vecf *)new Vecf(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vecf, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Vecf__SWIG_10(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  Vecf *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:new_Vecf",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Vecf" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Vecf" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Vecf" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_Vecf" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  ecode5 = SWIG_AsVal_float(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_Vecf" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = static_cast< float >(val5);
  ecode6 = SWIG_AsVal_float(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_Vecf" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = static_cast< float >(val6);
  result = (Vecf *)new Vecf(arg1,arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vecf, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Vecf__SWIG_11(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  float val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  Vecf *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:new_Vecf",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Vecf" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Vecf" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Vecf" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_Vecf" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  ecode5 = SWIG_AsVal_float(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_Vecf" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = static_cast< float >(val5);
  ecode6 = SWIG_AsVal_float(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_Vecf" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = static_cast< float >(val6);
  ecode7 = SWIG_AsVal_float(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_Vecf" "', argument " "7"" of type '" "float""'");
  } 
  arg7 = static_cast< float >(val7);
  result = (Vecf *)new Vecf(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vecf, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Vecf(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[8];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 7); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Vecf__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Vecf, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Vecf__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Vecf__SWIG_3(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<float,std::allocator< float > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Vecf__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_float, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_Vecf__SWIG_5(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_Vecf__SWIG_6(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_float, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_Vecf__SWIG_4(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_Vecf__SWIG_7(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_Vecf__SWIG_8(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_float(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_Vecf__SWIG_9(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_float(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_float(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_new_Vecf__SWIG_10(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_float(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_float(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_float(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_new_Vecf__SWIG_11(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Vecf'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Vecf()\n"
    "    Vecf(Vecf const &)\n"
    "    Vecf(std::vector< float,std::allocator< float > > const &)\n"
    "    Vecf(int)\n"
    "    Vecf(int,float,float const *)\n"
    "    Vecf(int,float const *)\n"
    "    Vecf(int,double const *)\n"
    "    Vecf(float,float,float)\n"
    "    Vecf(float,float,float,float)\n"
    "    Vecf(float,float,float,float,float)\n"
    "    Vecf(float,float,float,float,float,float)\n"
    "    Vecf(float,float,float,float,float,float,float)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Vecf(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vecf *arg1 = (Vecf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Vecf",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vecf, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Vecf" "', argument " "1"" of type '" "Vecf *""'"); 
  }
  arg1 = reinterpret_cast< Vecf * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vecf_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vecf *arg1 = (Vecf *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vecf_get",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vecf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vecf_get" "', argument " "1"" of type '" "Vecf *""'"); 
  }
  arg1 = reinterpret_cast< Vecf * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vecf_get" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (float)(arg1)->get(arg2);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vecf_set__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vecf *arg1 = (Vecf *) 0 ;
  int arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Vecf_set",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vecf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vecf_set" "', argument " "1"" of type '" "Vecf *""'"); 
  }
  arg1 = reinterpret_cast< Vecf * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vecf_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Vecf_set" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  (arg1)->set(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vecf_set__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vecf *arg1 = (Vecf *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vecf_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vecf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vecf_set" "', argument " "1"" of type '" "Vecf *""'"); 
  }
  arg1 = reinterpret_cast< Vecf * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vecf_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  (arg1)->set(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vecf_set(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Vecf, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Vecf_set__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Vecf, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Vecf_set__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Vecf_set'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    set(Vecf *,int,float)\n"
    "    set(Vecf *,float)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vecf___getitem_ref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vecf *arg1 = (Vecf *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vecf___getitem_ref__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vecf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vecf___getitem_ref__" "', argument " "1"" of type '" "Vecf *""'"); 
  }
  arg1 = reinterpret_cast< Vecf * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vecf___getitem_ref__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (float *) &(arg1)->operator [](arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_float, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vecf___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vecf *arg1 = (Vecf *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vecf___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vecf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vecf___getitem__" "', argument " "1"" of type '" "Vecf const *""'"); 
  }
  arg1 = reinterpret_cast< Vecf * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vecf___getitem__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (float *) &((Vecf const *)arg1)->operator [](arg2);
  resultobj = SWIG_From_float(static_cast< float >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vecf___imul__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vecf *arg1 = (Vecf *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Vecf *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vecf___imul__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vecf, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vecf___imul__" "', argument " "1"" of type '" "Vecf *""'"); 
  }
  arg1 = reinterpret_cast< Vecf * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vecf___imul__" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  result = (Vecf *) &(arg1)->operator *=(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vecf, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vecf___idiv__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vecf *arg1 = (Vecf *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Vecf *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vecf___idiv__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vecf, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vecf___idiv__" "', argument " "1"" of type '" "Vecf *""'"); 
  }
  arg1 = reinterpret_cast< Vecf * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vecf___idiv__" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  result = (Vecf *) &(arg1)->operator /=(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vecf, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vecf___iadd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vecf *arg1 = (Vecf *) 0 ;
  Vecf *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Vecf *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vecf___iadd__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vecf, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vecf___iadd__" "', argument " "1"" of type '" "Vecf *""'"); 
  }
  arg1 = reinterpret_cast< Vecf * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vecf,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vecf___iadd__" "', argument " "2"" of type '" "Vecf const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vecf___iadd__" "', argument " "2"" of type '" "Vecf const &""'"); 
  }
  arg2 = reinterpret_cast< Vecf * >(argp2);
  result = (Vecf *) &(arg1)->operator +=((Vecf const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vecf, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vecf___isub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vecf *arg1 = (Vecf *) 0 ;
  Vecf *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Vecf *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vecf___isub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vecf, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vecf___isub__" "', argument " "1"" of type '" "Vecf *""'"); 
  }
  arg1 = reinterpret_cast< Vecf * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vecf,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vecf___isub__" "', argument " "2"" of type '" "Vecf const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vecf___isub__" "', argument " "2"" of type '" "Vecf const &""'"); 
  }
  arg2 = reinterpret_cast< Vecf * >(argp2);
  result = (Vecf *) &(arg1)->operator -=((Vecf const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vecf, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vecf_assign__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vecf *arg1 = (Vecf *) 0 ;
  Vecf *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Vecf *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vecf_assign",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vecf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vecf_assign" "', argument " "1"" of type '" "Vecf *""'"); 
  }
  arg1 = reinterpret_cast< Vecf * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vecf,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vecf_assign" "', argument " "2"" of type '" "Vecf const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vecf_assign" "', argument " "2"" of type '" "Vecf const &""'"); 
  }
  arg2 = reinterpret_cast< Vecf * >(argp2);
  result = (Vecf *) &(arg1)->operator =((Vecf const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vecf, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vecf_assign__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vecf *arg1 = (Vecf *) 0 ;
  std::vector< float,std::allocator< float > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Vecf *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vecf_assign",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vecf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vecf_assign" "', argument " "1"" of type '" "Vecf *""'"); 
  }
  arg1 = reinterpret_cast< Vecf * >(argp1);
  {
    std::vector<float,std::allocator< float > > *ptr = (std::vector<float,std::allocator< float > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vecf_assign" "', argument " "2"" of type '" "std::vector< float,std::allocator< float > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vecf_assign" "', argument " "2"" of type '" "std::vector< float,std::allocator< float > > const &""'"); 
    }
    arg2 = ptr;
  }
  result = (Vecf *) &(arg1)->operator =((std::vector< float,std::allocator< float > > const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vecf, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vecf_assign(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Vecf, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Vecf, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Vecf_assign__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Vecf, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector<float,std::allocator< float > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Vecf_assign__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Vecf_assign'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operator =(Vecf *,Vecf const &)\n"
    "    operator =(Vecf *,std::vector< float,std::allocator< float > > const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vecf___mul____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vecf *arg1 = (Vecf *) 0 ;
  Vecf *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vecf___mul__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vecf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vecf___mul__" "', argument " "1"" of type '" "Vecf const *""'"); 
  }
  arg1 = reinterpret_cast< Vecf * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vecf,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vecf___mul__" "', argument " "2"" of type '" "Vecf const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vecf___mul__" "', argument " "2"" of type '" "Vecf const &""'"); 
  }
  arg2 = reinterpret_cast< Vecf * >(argp2);
  result = (float)((Vecf const *)arg1)->operator *((Vecf const &)*arg2);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vecf___add__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vecf *arg1 = (Vecf *) 0 ;
  Vecf *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Vecf result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vecf___add__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vecf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vecf___add__" "', argument " "1"" of type '" "Vecf const *""'"); 
  }
  arg1 = reinterpret_cast< Vecf * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vecf,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vecf___add__" "', argument " "2"" of type '" "Vecf const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vecf___add__" "', argument " "2"" of type '" "Vecf const &""'"); 
  }
  arg2 = reinterpret_cast< Vecf * >(argp2);
  result = ((Vecf const *)arg1)->operator +((Vecf const &)*arg2);
  resultobj = SWIG_NewPointerObj((new Vecf(static_cast< const Vecf& >(result))), SWIGTYPE_p_Vecf, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vecf___sub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vecf *arg1 = (Vecf *) 0 ;
  Vecf *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Vecf result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vecf___sub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vecf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vecf___sub__" "', argument " "1"" of type '" "Vecf const *""'"); 
  }
  arg1 = reinterpret_cast< Vecf * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vecf,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vecf___sub__" "', argument " "2"" of type '" "Vecf const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vecf___sub__" "', argument " "2"" of type '" "Vecf const &""'"); 
  }
  arg2 = reinterpret_cast< Vecf * >(argp2);
  result = ((Vecf const *)arg1)->operator -((Vecf const &)*arg2);
  resultobj = SWIG_NewPointerObj((new Vecf(static_cast< const Vecf& >(result))), SWIGTYPE_p_Vecf, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vecf___mul____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vecf *arg1 = (Vecf *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Vecf result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vecf___mul__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vecf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vecf___mul__" "', argument " "1"" of type '" "Vecf const *""'"); 
  }
  arg1 = reinterpret_cast< Vecf * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vecf___mul__" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  result = ((Vecf const *)arg1)->operator *(arg2);
  resultobj = SWIG_NewPointerObj((new Vecf(static_cast< const Vecf& >(result))), SWIGTYPE_p_Vecf, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vecf___div__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vecf *arg1 = (Vecf *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Vecf result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vecf___div__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vecf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vecf___div__" "', argument " "1"" of type '" "Vecf const *""'"); 
  }
  arg1 = reinterpret_cast< Vecf * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vecf___div__" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  result = ((Vecf const *)arg1)->operator /(arg2);
  resultobj = SWIG_NewPointerObj((new Vecf(static_cast< const Vecf& >(result))), SWIGTYPE_p_Vecf, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vecf___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vecf *arg1 = (Vecf *) 0 ;
  Vecf *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vecf___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vecf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vecf___eq__" "', argument " "1"" of type '" "Vecf const *""'"); 
  }
  arg1 = reinterpret_cast< Vecf * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vecf,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vecf___eq__" "', argument " "2"" of type '" "Vecf const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vecf___eq__" "', argument " "2"" of type '" "Vecf const &""'"); 
  }
  arg2 = reinterpret_cast< Vecf * >(argp2);
  result = (bool)((Vecf const *)arg1)->operator ==((Vecf const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vecf___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vecf *arg1 = (Vecf *) 0 ;
  Vecf *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vecf___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vecf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vecf___ne__" "', argument " "1"" of type '" "Vecf const *""'"); 
  }
  arg1 = reinterpret_cast< Vecf * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vecf,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vecf___ne__" "', argument " "2"" of type '" "Vecf const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vecf___ne__" "', argument " "2"" of type '" "Vecf const &""'"); 
  }
  arg2 = reinterpret_cast< Vecf * >(argp2);
  result = (bool)((Vecf const *)arg1)->operator !=((Vecf const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vecf_Min(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vecf *arg1 = (Vecf *) 0 ;
  Vecf *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Vecf result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vecf_Min",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vecf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vecf_Min" "', argument " "1"" of type '" "Vecf const *""'"); 
  }
  arg1 = reinterpret_cast< Vecf * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vecf,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vecf_Min" "', argument " "2"" of type '" "Vecf const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vecf_Min" "', argument " "2"" of type '" "Vecf const &""'"); 
  }
  arg2 = reinterpret_cast< Vecf * >(argp2);
  result = ((Vecf const *)arg1)->Min((Vecf const &)*arg2);
  resultobj = SWIG_NewPointerObj((new Vecf(static_cast< const Vecf& >(result))), SWIGTYPE_p_Vecf, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vecf_Max(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vecf *arg1 = (Vecf *) 0 ;
  Vecf *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Vecf result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vecf_Max",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vecf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vecf_Max" "', argument " "1"" of type '" "Vecf const *""'"); 
  }
  arg1 = reinterpret_cast< Vecf * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vecf,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vecf_Max" "', argument " "2"" of type '" "Vecf const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vecf_Max" "', argument " "2"" of type '" "Vecf const &""'"); 
  }
  arg2 = reinterpret_cast< Vecf * >(argp2);
  result = ((Vecf const *)arg1)->Max((Vecf const &)*arg2);
  resultobj = SWIG_NewPointerObj((new Vecf(static_cast< const Vecf& >(result))), SWIGTYPE_p_Vecf, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vecf_module2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vecf *arg1 = (Vecf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vecf_module2",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vecf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vecf_module2" "', argument " "1"" of type '" "Vecf const *""'"); 
  }
  arg1 = reinterpret_cast< Vecf * >(argp1);
  result = (float)((Vecf const *)arg1)->module2();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vecf_module(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vecf *arg1 = (Vecf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vecf_module",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vecf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vecf_module" "', argument " "1"" of type '" "Vecf const *""'"); 
  }
  arg1 = reinterpret_cast< Vecf * >(argp1);
  result = (float)((Vecf const *)arg1)->module();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vecf_normalize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vecf *arg1 = (Vecf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Vecf result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vecf_normalize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vecf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vecf_normalize" "', argument " "1"" of type '" "Vecf const *""'"); 
  }
  arg1 = reinterpret_cast< Vecf * >(argp1);
  result = ((Vecf const *)arg1)->normalize();
  resultobj = SWIG_NewPointerObj((new Vecf(static_cast< const Vecf& >(result))), SWIGTYPE_p_Vecf, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vecf_fuzzyEqual__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vecf *arg1 = (Vecf *) 0 ;
  Vecf *arg2 = 0 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Vecf_fuzzyEqual",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vecf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vecf_fuzzyEqual" "', argument " "1"" of type '" "Vecf const *""'"); 
  }
  arg1 = reinterpret_cast< Vecf * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vecf,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vecf_fuzzyEqual" "', argument " "2"" of type '" "Vecf const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vecf_fuzzyEqual" "', argument " "2"" of type '" "Vecf const &""'"); 
  }
  arg2 = reinterpret_cast< Vecf * >(argp2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Vecf_fuzzyEqual" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  result = (bool)((Vecf const *)arg1)->fuzzyEqual((Vecf const &)*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vecf_fuzzyEqual__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vecf *arg1 = (Vecf *) 0 ;
  Vecf *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vecf_fuzzyEqual",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vecf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vecf_fuzzyEqual" "', argument " "1"" of type '" "Vecf const *""'"); 
  }
  arg1 = reinterpret_cast< Vecf * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vecf,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vecf_fuzzyEqual" "', argument " "2"" of type '" "Vecf const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vecf_fuzzyEqual" "', argument " "2"" of type '" "Vecf const &""'"); 
  }
  arg2 = reinterpret_cast< Vecf * >(argp2);
  result = (bool)((Vecf const *)arg1)->fuzzyEqual((Vecf const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vecf_fuzzyEqual(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Vecf, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Vecf, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Vecf_fuzzyEqual__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Vecf, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Vecf, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Vecf_fuzzyEqual__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Vecf_fuzzyEqual'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fuzzyEqual(Vecf const *,Vecf const &,float)\n"
    "    fuzzyEqual(Vecf const *,Vecf const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vecf_permutate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vecf *arg1 = (Vecf *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Vecf result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Vecf_permutate",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vecf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vecf_permutate" "', argument " "1"" of type '" "Vecf const *""'"); 
  }
  arg1 = reinterpret_cast< Vecf * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vecf_permutate" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Vecf_permutate" "', argument " "3"" of type '" "int const *""'"); 
  }
  arg3 = reinterpret_cast< int * >(argp3);
  result = ((Vecf const *)arg1)->permutate(arg2,(int const *)arg3);
  resultobj = SWIG_NewPointerObj((new Vecf(static_cast< const Vecf& >(result))), SWIGTYPE_p_Vecf, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vecf___mul____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vecf *arg1 = (Vecf *) 0 ;
  Matf *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::tr1::shared_ptr< Matf const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Vecf result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vecf___mul__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vecf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vecf___mul__" "', argument " "1"" of type '" "Vecf const *""'"); 
  }
  arg1 = reinterpret_cast< Vecf * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vecf___mul__" "', argument " "2"" of type '" "Matf const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vecf___mul__" "', argument " "2"" of type '" "Matf const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< std::tr1::shared_ptr< const Matf > * >(argp2);
      delete reinterpret_cast< std::tr1::shared_ptr< const Matf > * >(argp2);
      arg2 = const_cast< Matf * >(tempshared2.get());
    } else {
      arg2 = const_cast< Matf * >(reinterpret_cast< std::tr1::shared_ptr< const Matf > * >(argp2)->get());
    }
  }
  result = ((Vecf const *)arg1)->operator *((Matf const &)*arg2);
  resultobj = SWIG_NewPointerObj((new Vecf(static_cast< const Vecf& >(result))), SWIGTYPE_p_Vecf, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vecf___mul__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Vecf, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Vecf, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Vecf___mul____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Vecf, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Vecf___mul____SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Vecf, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Vecf___mul____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Vecf___repr__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vecf *arg1 = (Vecf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vecf___repr__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vecf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vecf___repr__" "', argument " "1"" of type '" "Vecf const *""'"); 
  }
  arg1 = reinterpret_cast< Vecf * >(argp1);
  result = ((Vecf const *)arg1)->repr();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vecf___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vecf *arg1 = (Vecf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vecf___str__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vecf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vecf___str__" "', argument " "1"" of type '" "Vecf const *""'"); 
  }
  arg1 = reinterpret_cast< Vecf * >(argp1);
  result = ((Vecf const *)arg1)->str();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vecf_SelfTest(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":Vecf_SelfTest")) SWIG_fail;
  result = (int)Vecf::SelfTest();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Vecf_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Vecf, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_Triangle2i_p0_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Triangle2i *arg1 = (Triangle2i *) 0 ;
  Vec2i *arg2 = (Vec2i *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Triangle2i_p0_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Triangle2i, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Triangle2i_p0_set" "', argument " "1"" of type '" "Triangle2i *""'"); 
  }
  arg1 = reinterpret_cast< Triangle2i * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Vec2i, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Triangle2i_p0_set" "', argument " "2"" of type '" "Vec2i *""'"); 
  }
  arg2 = reinterpret_cast< Vec2i * >(argp2);
  if (arg1) (arg1)->p0 = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Triangle2i_p0_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Triangle2i *arg1 = (Triangle2i *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Vec2i *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Triangle2i_p0_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Triangle2i, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Triangle2i_p0_get" "', argument " "1"" of type '" "Triangle2i *""'"); 
  }
  arg1 = reinterpret_cast< Triangle2i * >(argp1);
  result = (Vec2i *)& ((arg1)->p0);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vec2i, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Triangle2i_p1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Triangle2i *arg1 = (Triangle2i *) 0 ;
  Vec2i *arg2 = (Vec2i *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Triangle2i_p1_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Triangle2i, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Triangle2i_p1_set" "', argument " "1"" of type '" "Triangle2i *""'"); 
  }
  arg1 = reinterpret_cast< Triangle2i * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Vec2i, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Triangle2i_p1_set" "', argument " "2"" of type '" "Vec2i *""'"); 
  }
  arg2 = reinterpret_cast< Vec2i * >(argp2);
  if (arg1) (arg1)->p1 = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Triangle2i_p1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Triangle2i *arg1 = (Triangle2i *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Vec2i *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Triangle2i_p1_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Triangle2i, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Triangle2i_p1_get" "', argument " "1"" of type '" "Triangle2i *""'"); 
  }
  arg1 = reinterpret_cast< Triangle2i * >(argp1);
  result = (Vec2i *)& ((arg1)->p1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vec2i, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Triangle2i_p2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Triangle2i *arg1 = (Triangle2i *) 0 ;
  Vec2i *arg2 = (Vec2i *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Triangle2i_p2_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Triangle2i, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Triangle2i_p2_set" "', argument " "1"" of type '" "Triangle2i *""'"); 
  }
  arg1 = reinterpret_cast< Triangle2i * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Vec2i, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Triangle2i_p2_set" "', argument " "2"" of type '" "Vec2i *""'"); 
  }
  arg2 = reinterpret_cast< Vec2i * >(argp2);
  if (arg1) (arg1)->p2 = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Triangle2i_p2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Triangle2i *arg1 = (Triangle2i *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Vec2i *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Triangle2i_p2_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Triangle2i, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Triangle2i_p2_get" "', argument " "1"" of type '" "Triangle2i *""'"); 
  }
  arg1 = reinterpret_cast< Triangle2i * >(argp1);
  result = (Vec2i *)& ((arg1)->p2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vec2i, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Triangle2i__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Triangle2i *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Triangle2i")) SWIG_fail;
  result = (Triangle2i *)new Triangle2i();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Triangle2i, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Triangle2i__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Triangle2i *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Triangle2i *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Triangle2i",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Triangle2i,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Triangle2i" "', argument " "1"" of type '" "Triangle2i const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Triangle2i" "', argument " "1"" of type '" "Triangle2i const &""'"); 
  }
  arg1 = reinterpret_cast< Triangle2i * >(argp1);
  result = (Triangle2i *)new Triangle2i((Triangle2i const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Triangle2i, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Triangle2i__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec2i *arg1 = 0 ;
  Vec2i *arg2 = 0 ;
  Vec2i *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Triangle2i *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_Triangle2i",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Vec2i,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Triangle2i" "', argument " "1"" of type '" "Vec2i const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Triangle2i" "', argument " "1"" of type '" "Vec2i const &""'"); 
  }
  arg1 = reinterpret_cast< Vec2i * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vec2i,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Triangle2i" "', argument " "2"" of type '" "Vec2i const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Triangle2i" "', argument " "2"" of type '" "Vec2i const &""'"); 
  }
  arg2 = reinterpret_cast< Vec2i * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Vec2i,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_Triangle2i" "', argument " "3"" of type '" "Vec2i const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Triangle2i" "', argument " "3"" of type '" "Vec2i const &""'"); 
  }
  arg3 = reinterpret_cast< Vec2i * >(argp3);
  result = (Triangle2i *)new Triangle2i((Vec2i const &)*arg1,(Vec2i const &)*arg2,(Vec2i const &)*arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Triangle2i, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Triangle2i(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Triangle2i__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Triangle2i, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Triangle2i__SWIG_1(self, args);
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Vec2i, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Vec2i, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_Vec2i, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_Triangle2i__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Triangle2i'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Triangle2i()\n"
    "    Triangle2i(Triangle2i const &)\n"
    "    Triangle2i(Vec2i const &,Vec2i const &,Vec2i const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Triangle2i_getPoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Triangle2i *arg1 = (Triangle2i *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Vec2i result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Triangle2i_getPoint",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Triangle2i, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Triangle2i_getPoint" "', argument " "1"" of type '" "Triangle2i const *""'"); 
  }
  arg1 = reinterpret_cast< Triangle2i * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Triangle2i_getPoint" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = ((Triangle2i const *)arg1)->getPoint(arg2);
  resultobj = SWIG_NewPointerObj((new Vec2i(static_cast< const Vec2i& >(result))), SWIGTYPE_p_Vec2i, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Triangle2i_getRefPoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Triangle2i *arg1 = (Triangle2i *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Vec2i *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Triangle2i_getRefPoint",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Triangle2i, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Triangle2i_getRefPoint" "', argument " "1"" of type '" "Triangle2i *""'"); 
  }
  arg1 = reinterpret_cast< Triangle2i * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Triangle2i_getRefPoint" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (Vec2i *) &(arg1)->getRefPoint(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vec2i, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Triangle2i_left(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Triangle2i *arg1 = (Triangle2i *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Triangle2i_left",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Triangle2i, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Triangle2i_left" "', argument " "1"" of type '" "Triangle2i const *""'"); 
  }
  arg1 = reinterpret_cast< Triangle2i * >(argp1);
  result = (int)((Triangle2i const *)arg1)->left();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Triangle2i_right(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Triangle2i *arg1 = (Triangle2i *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Triangle2i_right",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Triangle2i, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Triangle2i_right" "', argument " "1"" of type '" "Triangle2i const *""'"); 
  }
  arg1 = reinterpret_cast< Triangle2i * >(argp1);
  result = (int)((Triangle2i const *)arg1)->right();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Triangle2i_bottom(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Triangle2i *arg1 = (Triangle2i *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Triangle2i_bottom",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Triangle2i, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Triangle2i_bottom" "', argument " "1"" of type '" "Triangle2i const *""'"); 
  }
  arg1 = reinterpret_cast< Triangle2i * >(argp1);
  result = (int)((Triangle2i const *)arg1)->bottom();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Triangle2i_top(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Triangle2i *arg1 = (Triangle2i *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Triangle2i_top",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Triangle2i, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Triangle2i_top" "', argument " "1"" of type '" "Triangle2i const *""'"); 
  }
  arg1 = reinterpret_cast< Triangle2i * >(argp1);
  result = (int)((Triangle2i const *)arg1)->top();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Triangle2i___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Triangle2i *arg1 = (Triangle2i *) 0 ;
  Triangle2i *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Triangle2i___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Triangle2i, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Triangle2i___eq__" "', argument " "1"" of type '" "Triangle2i const *""'"); 
  }
  arg1 = reinterpret_cast< Triangle2i * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Triangle2i,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Triangle2i___eq__" "', argument " "2"" of type '" "Triangle2i const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Triangle2i___eq__" "', argument " "2"" of type '" "Triangle2i const &""'"); 
  }
  arg2 = reinterpret_cast< Triangle2i * >(argp2);
  result = (bool)((Triangle2i const *)arg1)->operator ==((Triangle2i const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Triangle2i_scale(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Triangle2i *arg1 = (Triangle2i *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Triangle2i result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Triangle2i_scale",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Triangle2i, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Triangle2i_scale" "', argument " "1"" of type '" "Triangle2i const *""'"); 
  }
  arg1 = reinterpret_cast< Triangle2i * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Triangle2i_scale" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Triangle2i_scale" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = ((Triangle2i const *)arg1)->scale(arg2,arg3);
  resultobj = SWIG_NewPointerObj((new Triangle2i(static_cast< const Triangle2i& >(result))), SWIGTYPE_p_Triangle2i, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Triangle2i_translate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Triangle2i *arg1 = (Triangle2i *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Triangle2i result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Triangle2i_translate",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Triangle2i, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Triangle2i_translate" "', argument " "1"" of type '" "Triangle2i const *""'"); 
  }
  arg1 = reinterpret_cast< Triangle2i * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Triangle2i_translate" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Triangle2i_translate" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = ((Triangle2i const *)arg1)->translate(arg2,arg3);
  resultobj = SWIG_NewPointerObj((new Triangle2i(static_cast< const Triangle2i& >(result))), SWIGTYPE_p_Triangle2i, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Triangle2i_centerx(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Triangle2i *arg1 = (Triangle2i *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Triangle2i_centerx",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Triangle2i, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Triangle2i_centerx" "', argument " "1"" of type '" "Triangle2i const *""'"); 
  }
  arg1 = reinterpret_cast< Triangle2i * >(argp1);
  result = (int)((Triangle2i const *)arg1)->centerx();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Triangle2i_centery(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Triangle2i *arg1 = (Triangle2i *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Triangle2i_centery",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Triangle2i, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Triangle2i_centery" "', argument " "1"" of type '" "Triangle2i const *""'"); 
  }
  arg1 = reinterpret_cast< Triangle2i * >(argp1);
  result = (int)((Triangle2i const *)arg1)->centery();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Triangle2i(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Triangle2i *arg1 = (Triangle2i *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Triangle2i",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Triangle2i, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Triangle2i" "', argument " "1"" of type '" "Triangle2i *""'"); 
  }
  arg1 = reinterpret_cast< Triangle2i * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Triangle2i_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Triangle2i, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Plane4f__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Plane4f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Plane4f")) SWIG_fail;
  result = (Plane4f *)new Plane4f();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Plane4f, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Plane4f__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec4f *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Plane4f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Plane4f",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Vec4f,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Plane4f" "', argument " "1"" of type '" "Vec4f const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Plane4f" "', argument " "1"" of type '" "Vec4f const &""'"); 
  }
  arg1 = reinterpret_cast< Vec4f * >(argp1);
  result = (Plane4f *)new Plane4f((Vec4f const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Plane4f, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Plane4f__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Plane4f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_Plane4f",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Plane4f" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Plane4f" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Plane4f" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_Plane4f" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  result = (Plane4f *)new Plane4f(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Plane4f, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Plane4f__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float,std::allocator< float > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  Plane4f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Plane4f",&obj0)) SWIG_fail;
  {
    std::vector<float,std::allocator< float > > *ptr = (std::vector<float,std::allocator< float > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Plane4f" "', argument " "1"" of type '" "std::vector< float,std::allocator< float > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Plane4f" "', argument " "1"" of type '" "std::vector< float,std::allocator< float > > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (Plane4f *)new Plane4f((std::vector< float,std::allocator< float > > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Plane4f, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Plane4f__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec3f arg1 ;
  Vec3f arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Plane4f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Plane4f",&obj0,&obj1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Vec3f,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Plane4f" "', argument " "1"" of type '" "Vec3f""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Plane4f" "', argument " "1"" of type '" "Vec3f""'");
    } else {
      Vec3f * temp = reinterpret_cast< Vec3f * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vec3f,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Plane4f" "', argument " "2"" of type '" "Vec3f""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Plane4f" "', argument " "2"" of type '" "Vec3f""'");
    } else {
      Vec3f * temp = reinterpret_cast< Vec3f * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (Plane4f *)new Plane4f(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Plane4f, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Plane4f__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec3f arg1 ;
  float arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Plane4f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Plane4f",&obj0,&obj1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Vec3f,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Plane4f" "', argument " "1"" of type '" "Vec3f""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Plane4f" "', argument " "1"" of type '" "Vec3f""'");
    } else {
      Vec3f * temp = reinterpret_cast< Vec3f * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Plane4f" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  result = (Plane4f *)new Plane4f(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Plane4f, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Plane4f__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec3f *arg1 = 0 ;
  Vec3f *arg2 = 0 ;
  Vec3f *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Plane4f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_Plane4f",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Vec3f,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Plane4f" "', argument " "1"" of type '" "Vec3f const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Plane4f" "', argument " "1"" of type '" "Vec3f const &""'"); 
  }
  arg1 = reinterpret_cast< Vec3f * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vec3f,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Plane4f" "', argument " "2"" of type '" "Vec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Plane4f" "', argument " "2"" of type '" "Vec3f const &""'"); 
  }
  arg2 = reinterpret_cast< Vec3f * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Vec3f,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_Plane4f" "', argument " "3"" of type '" "Vec3f const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Plane4f" "', argument " "3"" of type '" "Vec3f const &""'"); 
  }
  arg3 = reinterpret_cast< Vec3f * >(argp3);
  result = (Plane4f *)new Plane4f((Vec3f const &)*arg1,(Vec3f const &)*arg2,(Vec3f const &)*arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Plane4f, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Plane4f(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Plane4f__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Vec4f, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Plane4f__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<float,std::allocator< float > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Plane4f__SWIG_3(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Vec3f, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Vec3f, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_Plane4f__SWIG_4(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Vec3f, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Plane4f__SWIG_5(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Vec3f, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Vec3f, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_Vec3f, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_Plane4f__SWIG_6(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_Plane4f__SWIG_2(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Plane4f'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Plane4f()\n"
    "    Plane4f(Vec4f const &)\n"
    "    Plane4f(float,float,float,float)\n"
    "    Plane4f(std::vector< float,std::allocator< float > > const &)\n"
    "    Plane4f(Vec3f,Vec3f)\n"
    "    Plane4f(Vec3f,float)\n"
    "    Plane4f(Vec3f const &,Vec3f const &,Vec3f const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plane4f_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Plane4f *arg1 = (Plane4f *) 0 ;
  Vec3f *arg2 = 0 ;
  Vec3f *arg3 = 0 ;
  Vec3f *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Plane4f_set",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Plane4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plane4f_set" "', argument " "1"" of type '" "Plane4f *""'"); 
  }
  arg1 = reinterpret_cast< Plane4f * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vec3f,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Plane4f_set" "', argument " "2"" of type '" "Vec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Plane4f_set" "', argument " "2"" of type '" "Vec3f const &""'"); 
  }
  arg2 = reinterpret_cast< Vec3f * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Vec3f,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Plane4f_set" "', argument " "3"" of type '" "Vec3f const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Plane4f_set" "', argument " "3"" of type '" "Vec3f const &""'"); 
  }
  arg3 = reinterpret_cast< Vec3f * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_Vec3f,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Plane4f_set" "', argument " "4"" of type '" "Vec3f const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Plane4f_set" "', argument " "4"" of type '" "Vec3f const &""'"); 
  }
  arg4 = reinterpret_cast< Vec3f * >(argp4);
  (arg1)->set((Vec3f const &)*arg2,(Vec3f const &)*arg3,(Vec3f const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plane4f_normalize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Plane4f *arg1 = (Plane4f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Plane4f_normalize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Plane4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plane4f_normalize" "', argument " "1"" of type '" "Plane4f *""'"); 
  }
  arg1 = reinterpret_cast< Plane4f * >(argp1);
  (arg1)->normalize();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plane4f_getProjectionMatrix(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Plane4f *arg1 = (Plane4f *) 0 ;
  Vec3f arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Mat4f result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Plane4f_getProjectionMatrix",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Plane4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plane4f_getProjectionMatrix" "', argument " "1"" of type '" "Plane4f *""'"); 
  }
  arg1 = reinterpret_cast< Plane4f * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vec3f,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Plane4f_getProjectionMatrix" "', argument " "2"" of type '" "Vec3f""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Plane4f_getProjectionMatrix" "', argument " "2"" of type '" "Vec3f""'");
    } else {
      Vec3f * temp = reinterpret_cast< Vec3f * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (arg1)->getProjectionMatrix(arg2);
  resultobj = SWIG_NewPointerObj((new Mat4f(static_cast< const Mat4f& >(result))), SWIGTYPE_p_Mat4f, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plane4f_projectPoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Plane4f *arg1 = (Plane4f *) 0 ;
  Vec3f arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Vec3f result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Plane4f_projectPoint",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Plane4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plane4f_projectPoint" "', argument " "1"" of type '" "Plane4f *""'"); 
  }
  arg1 = reinterpret_cast< Plane4f * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vec3f,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Plane4f_projectPoint" "', argument " "2"" of type '" "Vec3f""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Plane4f_projectPoint" "', argument " "2"" of type '" "Vec3f""'");
    } else {
      Vec3f * temp = reinterpret_cast< Vec3f * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (arg1)->projectPoint(arg2);
  resultobj = SWIG_NewPointerObj((new Vec3f(static_cast< const Vec3f& >(result))), SWIGTYPE_p_Vec3f, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plane4f_projectVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Plane4f *arg1 = (Plane4f *) 0 ;
  Vec3f arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Vec3f result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Plane4f_projectVector",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Plane4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plane4f_projectVector" "', argument " "1"" of type '" "Plane4f *""'"); 
  }
  arg1 = reinterpret_cast< Plane4f * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vec3f,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Plane4f_projectVector" "', argument " "2"" of type '" "Vec3f""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Plane4f_projectVector" "', argument " "2"" of type '" "Vec3f""'");
    } else {
      Vec3f * temp = reinterpret_cast< Vec3f * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (arg1)->projectVector(arg2);
  resultobj = SWIG_NewPointerObj((new Vec3f(static_cast< const Vec3f& >(result))), SWIGTYPE_p_Vec3f, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plane4f_bestFittingPlane__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  float *arg2 = (float *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Plane4f result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Plane4f_bestFittingPlane",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Plane4f_bestFittingPlane" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Plane4f_bestFittingPlane" "', argument " "2"" of type '" "float const *""'"); 
  }
  arg2 = reinterpret_cast< float * >(argp2);
  result = Plane4f::bestFittingPlane(arg1,(float const *)arg2);
  resultobj = SWIG_NewPointerObj((new Plane4f(static_cast< const Plane4f& >(result))), SWIGTYPE_p_Plane4f, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plane4f_bestFittingPlane__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float,std::allocator< float > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  Plane4f result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Plane4f_bestFittingPlane",&obj0)) SWIG_fail;
  {
    std::vector<float,std::allocator< float > > *ptr = (std::vector<float,std::allocator< float > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plane4f_bestFittingPlane" "', argument " "1"" of type '" "std::vector< float,std::allocator< float > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Plane4f_bestFittingPlane" "', argument " "1"" of type '" "std::vector< float,std::allocator< float > > const &""'"); 
    }
    arg1 = ptr;
  }
  result = Plane4f::bestFittingPlane((std::vector< float,std::allocator< float > > const &)*arg1);
  resultobj = SWIG_NewPointerObj((new Plane4f(static_cast< const Plane4f& >(result))), SWIGTYPE_p_Plane4f, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plane4f_bestFittingPlane(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<float,std::allocator< float > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Plane4f_bestFittingPlane__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_float, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Plane4f_bestFittingPlane__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Plane4f_bestFittingPlane'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    bestFittingPlane(int,float const *)\n"
    "    Plane4f::bestFittingPlane(std::vector< float,std::allocator< float > > const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plane4f_getNormal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Plane4f *arg1 = (Plane4f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Vec3f result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Plane4f_getNormal",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Plane4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plane4f_getNormal" "', argument " "1"" of type '" "Plane4f const *""'"); 
  }
  arg1 = reinterpret_cast< Plane4f * >(argp1);
  result = ((Plane4f const *)arg1)->getNormal();
  resultobj = SWIG_NewPointerObj((new Vec3f(static_cast< const Vec3f& >(result))), SWIGTYPE_p_Vec3f, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plane4f_getDistance__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Plane4f *arg1 = (Plane4f *) 0 ;
  Vec3f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Plane4f_getDistance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Plane4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plane4f_getDistance" "', argument " "1"" of type '" "Plane4f const *""'"); 
  }
  arg1 = reinterpret_cast< Plane4f * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vec3f,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Plane4f_getDistance" "', argument " "2"" of type '" "Vec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Plane4f_getDistance" "', argument " "2"" of type '" "Vec3f const &""'"); 
  }
  arg2 = reinterpret_cast< Vec3f * >(argp2);
  result = (float)((Plane4f const *)arg1)->getDistance((Vec3f const &)*arg2);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plane4f_getDistance__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Plane4f *arg1 = (Plane4f *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Plane4f_getDistance",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Plane4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plane4f_getDistance" "', argument " "1"" of type '" "Plane4f const *""'"); 
  }
  arg1 = reinterpret_cast< Plane4f * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Plane4f_getDistance" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Plane4f_getDistance" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Plane4f_getDistance" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  result = (float)((Plane4f const *)arg1)->getDistance(arg2,arg3,arg4);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plane4f_getDistance(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Plane4f, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Vec3f, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Plane4f_getDistance__SWIG_0(self, args);
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Plane4f, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Plane4f_getDistance__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Plane4f_getDistance'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    getDistance(Plane4f const *,Vec3f const &)\n"
    "    getDistance(Plane4f const *,float,float,float)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plane4f_reverse(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Plane4f *arg1 = (Plane4f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Plane4f result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Plane4f_reverse",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Plane4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plane4f_reverse" "', argument " "1"" of type '" "Plane4f const *""'"); 
  }
  arg1 = reinterpret_cast< Plane4f * >(argp1);
  result = ((Plane4f const *)arg1)->reverse();
  resultobj = SWIG_NewPointerObj((new Plane4f(static_cast< const Plane4f& >(result))), SWIGTYPE_p_Plane4f, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plane4f_forceBelow(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Plane4f *arg1 = (Plane4f *) 0 ;
  Vec3f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Plane4f result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Plane4f_forceBelow",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Plane4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plane4f_forceBelow" "', argument " "1"" of type '" "Plane4f const *""'"); 
  }
  arg1 = reinterpret_cast< Plane4f * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vec3f,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Plane4f_forceBelow" "', argument " "2"" of type '" "Vec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Plane4f_forceBelow" "', argument " "2"" of type '" "Vec3f const &""'"); 
  }
  arg2 = reinterpret_cast< Vec3f * >(argp2);
  result = ((Plane4f const *)arg1)->forceBelow((Vec3f const &)*arg2);
  resultobj = SWIG_NewPointerObj((new Plane4f(static_cast< const Plane4f& >(result))), SWIGTYPE_p_Plane4f, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plane4f_forceAbove(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Plane4f *arg1 = (Plane4f *) 0 ;
  Vec3f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Plane4f result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Plane4f_forceAbove",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Plane4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plane4f_forceAbove" "', argument " "1"" of type '" "Plane4f const *""'"); 
  }
  arg1 = reinterpret_cast< Plane4f * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vec3f,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Plane4f_forceAbove" "', argument " "2"" of type '" "Vec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Plane4f_forceAbove" "', argument " "2"" of type '" "Vec3f const &""'"); 
  }
  arg2 = reinterpret_cast< Vec3f * >(argp2);
  result = ((Plane4f const *)arg1)->forceAbove((Vec3f const &)*arg2);
  resultobj = SWIG_NewPointerObj((new Plane4f(static_cast< const Plane4f& >(result))), SWIGTYPE_p_Plane4f, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plane4f___repr__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Plane4f *arg1 = (Plane4f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Plane4f___repr__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Plane4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plane4f___repr__" "', argument " "1"" of type '" "Plane4f const *""'"); 
  }
  arg1 = reinterpret_cast< Plane4f * >(argp1);
  result = ((Plane4f const *)arg1)->repr();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plane4f___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Plane4f *arg1 = (Plane4f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Plane4f___str__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Plane4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plane4f___str__" "', argument " "1"" of type '" "Plane4f const *""'"); 
  }
  arg1 = reinterpret_cast< Plane4f * >(argp1);
  result = ((Plane4f const *)arg1)->str();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plane4f_SelfTest(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":Plane4f_SelfTest")) SWIG_fail;
  result = (int)Plane4f::SelfTest();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Plane4f(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Plane4f *arg1 = (Plane4f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Plane4f",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Plane4f, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Plane4f" "', argument " "1"" of type '" "Plane4f *""'"); 
  }
  arg1 = reinterpret_cast< Plane4f * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Plane4f_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Plane4f, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Planef__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Planef *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Planef")) SWIG_fail;
  result = (Planef *)new Planef();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Planef, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Planef__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Planef *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Planef *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Planef",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Planef,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Planef" "', argument " "1"" of type '" "Planef const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Planef" "', argument " "1"" of type '" "Planef const &""'"); 
  }
  arg1 = reinterpret_cast< Planef * >(argp1);
  result = (Planef *)new Planef((Planef const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Planef, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Planef__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  Planef *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Planef",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Planef" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = (Planef *)new Planef(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Planef, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Planef__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float,std::allocator< float > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  Planef *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Planef",&obj0)) SWIG_fail;
  {
    std::vector<float,std::allocator< float > > *ptr = (std::vector<float,std::allocator< float > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Planef" "', argument " "1"" of type '" "std::vector< float,std::allocator< float > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Planef" "', argument " "1"" of type '" "std::vector< float,std::allocator< float > > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (Planef *)new Planef((std::vector< float,std::allocator< float > > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Planef, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Planef__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Planef *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_Planef",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Planef" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Planef" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Planef" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  result = (Planef *)new Planef(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Planef, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Planef__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Planef *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_Planef",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Planef" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Planef" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Planef" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_Planef" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  result = (Planef *)new Planef(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Planef, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Planef__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  float *arg2 = (float *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Planef *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Planef",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Planef" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Planef" "', argument " "2"" of type '" "float const *""'"); 
  }
  arg2 = reinterpret_cast< float * >(argp2);
  result = (Planef *)new Planef(arg1,(float const *)arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Planef, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Planef__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double *arg2 = (double *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Planef *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Planef",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Planef" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Planef" "', argument " "2"" of type '" "double const *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  result = (Planef *)new Planef(arg1,(double const *)arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Planef, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Planef__SWIG_8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vecf *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Planef *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Planef",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Vecf,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Planef" "', argument " "1"" of type '" "Vecf const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Planef" "', argument " "1"" of type '" "Vecf const &""'"); 
  }
  arg1 = reinterpret_cast< Vecf * >(argp1);
  result = (Planef *)new Planef((Vecf const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Planef, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Planef__SWIG_9(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vecf arg1 ;
  float arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Planef *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Planef",&obj0,&obj1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Vecf,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Planef" "', argument " "1"" of type '" "Vecf""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Planef" "', argument " "1"" of type '" "Vecf""'");
    } else {
      Vecf * temp = reinterpret_cast< Vecf * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Planef" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  result = (Planef *)new Planef(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Planef, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Planef__SWIG_10(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vecf arg1 ;
  Vecf arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Planef *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Planef",&obj0,&obj1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Vecf,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Planef" "', argument " "1"" of type '" "Vecf""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Planef" "', argument " "1"" of type '" "Vecf""'");
    } else {
      Vecf * temp = reinterpret_cast< Vecf * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vecf,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Planef" "', argument " "2"" of type '" "Vecf""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Planef" "', argument " "2"" of type '" "Vecf""'");
    } else {
      Vecf * temp = reinterpret_cast< Vecf * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (Planef *)new Planef(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Planef, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Planef(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Planef__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Planef, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Planef__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Vecf, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Planef__SWIG_8(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Planef__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<float,std::allocator< float > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Planef__SWIG_3(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Vecf, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Vecf, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_Planef__SWIG_10(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Vecf, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Planef__SWIG_9(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_Planef__SWIG_7(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_float, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_Planef__SWIG_6(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_Planef__SWIG_4(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_Planef__SWIG_5(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Planef'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Planef()\n"
    "    Planef(Planef const &)\n"
    "    Planef(int)\n"
    "    Planef(std::vector< float,std::allocator< float > > const &)\n"
    "    Planef(float,float,float)\n"
    "    Planef(float,float,float,float)\n"
    "    Planef(int,float const *)\n"
    "    Planef(int,double const *)\n"
    "    Planef(Vecf const &)\n"
    "    Planef(Vecf,float)\n"
    "    Planef(Vecf,Vecf)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Planef_normalize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Planef *arg1 = (Planef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Planef_normalize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Planef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Planef_normalize" "', argument " "1"" of type '" "Planef *""'"); 
  }
  arg1 = reinterpret_cast< Planef * >(argp1);
  (arg1)->normalize();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Planef_bestFittingPlane__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  float *arg3 = (float *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Planef result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Planef_bestFittingPlane",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Planef_bestFittingPlane" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Planef_bestFittingPlane" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Planef_bestFittingPlane" "', argument " "3"" of type '" "float const *""'"); 
  }
  arg3 = reinterpret_cast< float * >(argp3);
  result = Planef::bestFittingPlane(arg1,arg2,(float const *)arg3);
  resultobj = SWIG_NewPointerObj((new Planef(static_cast< const Planef& >(result))), SWIGTYPE_p_Planef, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Planef_bestFittingPlane__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  std::vector< float,std::allocator< float > > *arg2 = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Planef result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Planef_bestFittingPlane",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Planef_bestFittingPlane" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    std::vector<float,std::allocator< float > > *ptr = (std::vector<float,std::allocator< float > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Planef_bestFittingPlane" "', argument " "2"" of type '" "std::vector< float,std::allocator< float > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Planef_bestFittingPlane" "', argument " "2"" of type '" "std::vector< float,std::allocator< float > > const &""'"); 
    }
    arg2 = ptr;
  }
  result = Planef::bestFittingPlane(arg1,(std::vector< float,std::allocator< float > > const &)*arg2);
  resultobj = SWIG_NewPointerObj((new Planef(static_cast< const Planef& >(result))), SWIGTYPE_p_Planef, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Planef_bestFittingPlane(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector<float,std::allocator< float > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Planef_bestFittingPlane__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_float, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Planef_bestFittingPlane__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Planef_bestFittingPlane'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    bestFittingPlane(int,int,float const *)\n"
    "    Planef::bestFittingPlane(int,std::vector< float,std::allocator< float > > const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Planef_getNormal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Planef *arg1 = (Planef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Vecf result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Planef_getNormal",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Planef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Planef_getNormal" "', argument " "1"" of type '" "Planef const *""'"); 
  }
  arg1 = reinterpret_cast< Planef * >(argp1);
  result = ((Planef const *)arg1)->getNormal();
  resultobj = SWIG_NewPointerObj((new Vecf(static_cast< const Vecf& >(result))), SWIGTYPE_p_Vecf, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Planef_getDistance__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Planef *arg1 = (Planef *) 0 ;
  float *arg2 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Planef_getDistance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Planef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Planef_getDistance" "', argument " "1"" of type '" "Planef const *""'"); 
  }
  arg1 = reinterpret_cast< Planef * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Planef_getDistance" "', argument " "2"" of type '" "float const *""'"); 
  }
  arg2 = reinterpret_cast< float * >(argp2);
  result = (float)((Planef const *)arg1)->getDistance((float const *)arg2);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Planef_getDistance__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Planef *arg1 = (Planef *) 0 ;
  Vecf *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Planef_getDistance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Planef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Planef_getDistance" "', argument " "1"" of type '" "Planef const *""'"); 
  }
  arg1 = reinterpret_cast< Planef * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vecf,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Planef_getDistance" "', argument " "2"" of type '" "Vecf const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Planef_getDistance" "', argument " "2"" of type '" "Vecf const &""'"); 
  }
  arg2 = reinterpret_cast< Vecf * >(argp2);
  result = (float)((Planef const *)arg1)->getDistance((Vecf const &)*arg2);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Planef_getDistance(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Planef, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_float, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Planef_getDistance__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Planef, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Vecf, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Planef_getDistance__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Planef_getDistance'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    getDistance(Planef const *,float const *)\n"
    "    getDistance(Planef const *,Vecf const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Planef_reverse(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Planef *arg1 = (Planef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Planef result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Planef_reverse",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Planef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Planef_reverse" "', argument " "1"" of type '" "Planef const *""'"); 
  }
  arg1 = reinterpret_cast< Planef * >(argp1);
  result = ((Planef const *)arg1)->reverse();
  resultobj = SWIG_NewPointerObj((new Planef(static_cast< const Planef& >(result))), SWIGTYPE_p_Planef, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Planef_forceBelow(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Planef *arg1 = (Planef *) 0 ;
  Vecf *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Planef result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Planef_forceBelow",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Planef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Planef_forceBelow" "', argument " "1"" of type '" "Planef const *""'"); 
  }
  arg1 = reinterpret_cast< Planef * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vecf,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Planef_forceBelow" "', argument " "2"" of type '" "Vecf const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Planef_forceBelow" "', argument " "2"" of type '" "Vecf const &""'"); 
  }
  arg2 = reinterpret_cast< Vecf * >(argp2);
  result = ((Planef const *)arg1)->forceBelow((Vecf const &)*arg2);
  resultobj = SWIG_NewPointerObj((new Planef(static_cast< const Planef& >(result))), SWIGTYPE_p_Planef, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Planef_forceAbove(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Planef *arg1 = (Planef *) 0 ;
  Vecf *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Planef result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Planef_forceAbove",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Planef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Planef_forceAbove" "', argument " "1"" of type '" "Planef const *""'"); 
  }
  arg1 = reinterpret_cast< Planef * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vecf,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Planef_forceAbove" "', argument " "2"" of type '" "Vecf const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Planef_forceAbove" "', argument " "2"" of type '" "Vecf const &""'"); 
  }
  arg2 = reinterpret_cast< Vecf * >(argp2);
  result = ((Planef const *)arg1)->forceAbove((Vecf const &)*arg2);
  resultobj = SWIG_NewPointerObj((new Planef(static_cast< const Planef& >(result))), SWIGTYPE_p_Planef, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Planef_getProjectionMatrix(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Planef *arg1 = (Planef *) 0 ;
  Vecf arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Matf result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Planef_getProjectionMatrix",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Planef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Planef_getProjectionMatrix" "', argument " "1"" of type '" "Planef *""'"); 
  }
  arg1 = reinterpret_cast< Planef * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vecf,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Planef_getProjectionMatrix" "', argument " "2"" of type '" "Vecf""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Planef_getProjectionMatrix" "', argument " "2"" of type '" "Vecf""'");
    } else {
      Vecf * temp = reinterpret_cast< Vecf * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (arg1)->getProjectionMatrix(arg2);
  {
    std::tr1::shared_ptr<  Matf > *smartresult = new std::tr1::shared_ptr<  Matf >(new Matf((Matf &)result));
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Planef_projectPoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Planef *arg1 = (Planef *) 0 ;
  Vecf arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Vecf result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Planef_projectPoint",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Planef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Planef_projectPoint" "', argument " "1"" of type '" "Planef *""'"); 
  }
  arg1 = reinterpret_cast< Planef * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vecf,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Planef_projectPoint" "', argument " "2"" of type '" "Vecf""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Planef_projectPoint" "', argument " "2"" of type '" "Vecf""'");
    } else {
      Vecf * temp = reinterpret_cast< Vecf * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (arg1)->projectPoint(arg2);
  resultobj = SWIG_NewPointerObj((new Vecf(static_cast< const Vecf& >(result))), SWIGTYPE_p_Vecf, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Planef_getRandomPlane(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  Planef result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Planef_getRandomPlane",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Planef_getRandomPlane" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = Planef::getRandomPlane(arg1);
  resultobj = SWIG_NewPointerObj((new Planef(static_cast< const Planef& >(result))), SWIGTYPE_p_Planef, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Planef_getRandomPoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Planef *arg1 = (Planef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Vecf result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Planef_getRandomPoint",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Planef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Planef_getRandomPoint" "', argument " "1"" of type '" "Planef *""'"); 
  }
  arg1 = reinterpret_cast< Planef * >(argp1);
  result = (arg1)->getRandomPoint();
  resultobj = SWIG_NewPointerObj((new Vecf(static_cast< const Vecf& >(result))), SWIGTYPE_p_Vecf, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Planef_getMainDirection(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Planef *arg1 = (Planef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Planef_getMainDirection",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Planef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Planef_getMainDirection" "', argument " "1"" of type '" "Planef const *""'"); 
  }
  arg1 = reinterpret_cast< Planef * >(argp1);
  result = (int)((Planef const *)arg1)->getMainDirection();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Planef___repr__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Planef *arg1 = (Planef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Planef___repr__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Planef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Planef___repr__" "', argument " "1"" of type '" "Planef const *""'"); 
  }
  arg1 = reinterpret_cast< Planef * >(argp1);
  result = ((Planef const *)arg1)->repr();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Planef___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Planef *arg1 = (Planef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Planef___str__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Planef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Planef___str__" "', argument " "1"" of type '" "Planef const *""'"); 
  }
  arg1 = reinterpret_cast< Planef * >(argp1);
  result = ((Planef const *)arg1)->str();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Planef_SelfTest(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":Planef_SelfTest")) SWIG_fail;
  result = (int)Planef::SelfTest();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Planef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Planef *arg1 = (Planef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Planef",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Planef, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Planef" "', argument " "1"" of type '" "Planef *""'"); 
  }
  arg1 = reinterpret_cast< Planef * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Planef_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Planef, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_Mat4f_Write(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Mat4f *arg1 = (Mat4f *) 0 ;
  Archive *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Mat4f_Write",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Mat4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mat4f_Write" "', argument " "1"" of type '" "Mat4f *""'"); 
  }
  arg1 = reinterpret_cast< Mat4f * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Archive,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Mat4f_Write" "', argument " "2"" of type '" "Archive &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mat4f_Write" "', argument " "2"" of type '" "Archive &""'"); 
  }
  arg2 = reinterpret_cast< Archive * >(argp2);
  (arg1)->Write(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mat4f_Read(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Mat4f *arg1 = (Mat4f *) 0 ;
  Archive *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Mat4f_Read",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Mat4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mat4f_Read" "', argument " "1"" of type '" "Mat4f *""'"); 
  }
  arg1 = reinterpret_cast< Mat4f * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Archive,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Mat4f_Read" "', argument " "2"" of type '" "Archive &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mat4f_Read" "', argument " "2"" of type '" "Archive &""'"); 
  }
  arg2 = reinterpret_cast< Archive * >(argp2);
  (arg1)->Read(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mat4f_mat_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Mat4f *arg1 = (Mat4f *) 0 ;
  float *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Mat4f_mat_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Mat4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mat4f_mat_set" "', argument " "1"" of type '" "Mat4f *""'"); 
  }
  arg1 = reinterpret_cast< Mat4f * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Mat4f_mat_set" "', argument " "2"" of type '" "float [16]""'"); 
  } 
  arg2 = reinterpret_cast< float * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)16; ++ii) arg1->mat[ii] = arg2[ii];
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""mat""' of type '""float [16]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mat4f_mat_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Mat4f *arg1 = (Mat4f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Mat4f_mat_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Mat4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mat4f_mat_get" "', argument " "1"" of type '" "Mat4f *""'"); 
  }
  arg1 = reinterpret_cast< Mat4f * >(argp1);
  result = (float *)(float *) ((arg1)->mat);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_float, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Mat4f__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Mat4f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Mat4f")) SWIG_fail;
  result = (Mat4f *)new Mat4f();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Mat4f, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Mat4f__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Mat4f *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Mat4f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Mat4f",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Mat4f,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Mat4f" "', argument " "1"" of type '" "Mat4f const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Mat4f" "', argument " "1"" of type '" "Mat4f const &""'"); 
  }
  arg1 = reinterpret_cast< Mat4f * >(argp1);
  result = (Mat4f *)new Mat4f((Mat4f const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Mat4f, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Mat4f__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  float arg9 ;
  float arg10 ;
  float arg11 ;
  float arg12 ;
  float arg13 ;
  float arg14 ;
  float arg15 ;
  float arg16 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  float val7 ;
  int ecode7 = 0 ;
  float val8 ;
  int ecode8 = 0 ;
  float val9 ;
  int ecode9 = 0 ;
  float val10 ;
  int ecode10 = 0 ;
  float val11 ;
  int ecode11 = 0 ;
  float val12 ;
  int ecode12 = 0 ;
  float val13 ;
  int ecode13 = 0 ;
  float val14 ;
  int ecode14 = 0 ;
  float val15 ;
  int ecode15 = 0 ;
  float val16 ;
  int ecode16 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  PyObject * obj10 = 0 ;
  PyObject * obj11 = 0 ;
  PyObject * obj12 = 0 ;
  PyObject * obj13 = 0 ;
  PyObject * obj14 = 0 ;
  PyObject * obj15 = 0 ;
  Mat4f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOOOOOOO:new_Mat4f",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10,&obj11,&obj12,&obj13,&obj14,&obj15)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Mat4f" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Mat4f" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Mat4f" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_Mat4f" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  ecode5 = SWIG_AsVal_float(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_Mat4f" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = static_cast< float >(val5);
  ecode6 = SWIG_AsVal_float(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_Mat4f" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = static_cast< float >(val6);
  ecode7 = SWIG_AsVal_float(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_Mat4f" "', argument " "7"" of type '" "float""'");
  } 
  arg7 = static_cast< float >(val7);
  ecode8 = SWIG_AsVal_float(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "new_Mat4f" "', argument " "8"" of type '" "float""'");
  } 
  arg8 = static_cast< float >(val8);
  ecode9 = SWIG_AsVal_float(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "new_Mat4f" "', argument " "9"" of type '" "float""'");
  } 
  arg9 = static_cast< float >(val9);
  ecode10 = SWIG_AsVal_float(obj9, &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "new_Mat4f" "', argument " "10"" of type '" "float""'");
  } 
  arg10 = static_cast< float >(val10);
  ecode11 = SWIG_AsVal_float(obj10, &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "new_Mat4f" "', argument " "11"" of type '" "float""'");
  } 
  arg11 = static_cast< float >(val11);
  ecode12 = SWIG_AsVal_float(obj11, &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "new_Mat4f" "', argument " "12"" of type '" "float""'");
  } 
  arg12 = static_cast< float >(val12);
  ecode13 = SWIG_AsVal_float(obj12, &val13);
  if (!SWIG_IsOK(ecode13)) {
    SWIG_exception_fail(SWIG_ArgError(ecode13), "in method '" "new_Mat4f" "', argument " "13"" of type '" "float""'");
  } 
  arg13 = static_cast< float >(val13);
  ecode14 = SWIG_AsVal_float(obj13, &val14);
  if (!SWIG_IsOK(ecode14)) {
    SWIG_exception_fail(SWIG_ArgError(ecode14), "in method '" "new_Mat4f" "', argument " "14"" of type '" "float""'");
  } 
  arg14 = static_cast< float >(val14);
  ecode15 = SWIG_AsVal_float(obj14, &val15);
  if (!SWIG_IsOK(ecode15)) {
    SWIG_exception_fail(SWIG_ArgError(ecode15), "in method '" "new_Mat4f" "', argument " "15"" of type '" "float""'");
  } 
  arg15 = static_cast< float >(val15);
  ecode16 = SWIG_AsVal_float(obj15, &val16);
  if (!SWIG_IsOK(ecode16)) {
    SWIG_exception_fail(SWIG_ArgError(ecode16), "in method '" "new_Mat4f" "', argument " "16"" of type '" "float""'");
  } 
  arg16 = static_cast< float >(val16);
  result = (Mat4f *)new Mat4f(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Mat4f, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Mat4f__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  float *arg1 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Mat4f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Mat4f",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Mat4f" "', argument " "1"" of type '" "float const *""'"); 
  }
  arg1 = reinterpret_cast< float * >(argp1);
  result = (Mat4f *)new Mat4f((float const *)arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Mat4f, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Mat4f__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double *arg1 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Mat4f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Mat4f",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Mat4f" "', argument " "1"" of type '" "double const *""'"); 
  }
  arg1 = reinterpret_cast< double * >(argp1);
  result = (Mat4f *)new Mat4f((double const *)arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Mat4f, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Mat4f__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float,std::allocator< float > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  Mat4f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Mat4f",&obj0)) SWIG_fail;
  {
    std::vector<float,std::allocator< float > > *ptr = (std::vector<float,std::allocator< float > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Mat4f" "', argument " "1"" of type '" "std::vector< float,std::allocator< float > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Mat4f" "', argument " "1"" of type '" "std::vector< float,std::allocator< float > > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (Mat4f *)new Mat4f((std::vector< float,std::allocator< float > > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Mat4f, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Mat4f(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[17];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 16); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Mat4f__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Mat4f, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Mat4f__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_float, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Mat4f__SWIG_3(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_double, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Mat4f__SWIG_4(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<float,std::allocator< float > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Mat4f__SWIG_5(self, args);
    }
  }
  if (argc == 16) {
    int _v;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_float(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_float(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_float(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_float(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    {
                      int res = SWIG_AsVal_float(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      {
                        int res = SWIG_AsVal_float(argv[9], NULL);
                        _v = SWIG_CheckState(res);
                      }
                      if (_v) {
                        {
                          int res = SWIG_AsVal_float(argv[10], NULL);
                          _v = SWIG_CheckState(res);
                        }
                        if (_v) {
                          {
                            int res = SWIG_AsVal_float(argv[11], NULL);
                            _v = SWIG_CheckState(res);
                          }
                          if (_v) {
                            {
                              int res = SWIG_AsVal_float(argv[12], NULL);
                              _v = SWIG_CheckState(res);
                            }
                            if (_v) {
                              {
                                int res = SWIG_AsVal_float(argv[13], NULL);
                                _v = SWIG_CheckState(res);
                              }
                              if (_v) {
                                {
                                  int res = SWIG_AsVal_float(argv[14], NULL);
                                  _v = SWIG_CheckState(res);
                                }
                                if (_v) {
                                  {
                                    int res = SWIG_AsVal_float(argv[15], NULL);
                                    _v = SWIG_CheckState(res);
                                  }
                                  if (_v) {
                                    return _wrap_new_Mat4f__SWIG_2(self, args);
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Mat4f'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mat4f()\n"
    "    Mat4f(Mat4f const &)\n"
    "    Mat4f(float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float)\n"
    "    Mat4f(float const *)\n"
    "    Mat4f(double const *)\n"
    "    Mat4f(std::vector< float,std::allocator< float > > const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mat4f_assign__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Mat4f *arg1 = (Mat4f *) 0 ;
  Mat4f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Mat4f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Mat4f_assign",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Mat4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mat4f_assign" "', argument " "1"" of type '" "Mat4f *""'"); 
  }
  arg1 = reinterpret_cast< Mat4f * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Mat4f,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Mat4f_assign" "', argument " "2"" of type '" "Mat4f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mat4f_assign" "', argument " "2"" of type '" "Mat4f const &""'"); 
  }
  arg2 = reinterpret_cast< Mat4f * >(argp2);
  result = (Mat4f *) &(arg1)->operator =((Mat4f const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Mat4f, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mat4f_assign__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Mat4f *arg1 = (Mat4f *) 0 ;
  std::vector< float,std::allocator< float > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Mat4f result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Mat4f_assign",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Mat4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mat4f_assign" "', argument " "1"" of type '" "Mat4f *""'"); 
  }
  arg1 = reinterpret_cast< Mat4f * >(argp1);
  {
    std::vector<float,std::allocator< float > > *ptr = (std::vector<float,std::allocator< float > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Mat4f_assign" "', argument " "2"" of type '" "std::vector< float,std::allocator< float > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mat4f_assign" "', argument " "2"" of type '" "std::vector< float,std::allocator< float > > const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->operator =((std::vector< float,std::allocator< float > > const &)*arg2);
  resultobj = SWIG_NewPointerObj((new Mat4f(static_cast< const Mat4f& >(result))), SWIGTYPE_p_Mat4f, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mat4f_assign(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mat4f, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Mat4f, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Mat4f_assign__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mat4f, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector<float,std::allocator< float > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Mat4f_assign__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Mat4f_assign'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operator =(Mat4f *,Mat4f const &)\n"
    "    operator =(Mat4f *,std::vector< float,std::allocator< float > > const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mat4f_c_vector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Mat4f *arg1 = (Mat4f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Mat4f_c_vector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Mat4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mat4f_c_vector" "', argument " "1"" of type '" "Mat4f *""'"); 
  }
  arg1 = reinterpret_cast< Mat4f * >(argp1);
  result = (arg1)->c_vector();
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mat4f_get__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Mat4f *arg1 = (Mat4f *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Mat4f_get",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Mat4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mat4f_get" "', argument " "1"" of type '" "Mat4f const *""'"); 
  }
  arg1 = reinterpret_cast< Mat4f * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Mat4f_get" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (float)((Mat4f const *)arg1)->get(arg2);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mat4f_set__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Mat4f *arg1 = (Mat4f *) 0 ;
  int arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Mat4f_set",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Mat4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mat4f_set" "', argument " "1"" of type '" "Mat4f *""'"); 
  }
  arg1 = reinterpret_cast< Mat4f * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Mat4f_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Mat4f_set" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  (arg1)->set(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mat4f___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Mat4f *arg1 = (Mat4f *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Mat4f___call__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Mat4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mat4f___call__" "', argument " "1"" of type '" "Mat4f *""'"); 
  }
  arg1 = reinterpret_cast< Mat4f * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Mat4f___call__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Mat4f___call__" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (float)(arg1)->operator ()(arg2,arg3);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mat4f_get__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Mat4f *arg1 = (Mat4f *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Mat4f_get",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Mat4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mat4f_get" "', argument " "1"" of type '" "Mat4f *""'"); 
  }
  arg1 = reinterpret_cast< Mat4f * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Mat4f_get" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Mat4f_get" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (float)(arg1)->get(arg2,arg3);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mat4f_get(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mat4f, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Mat4f_get__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mat4f, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Mat4f_get__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Mat4f_get'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    get(Mat4f const *,int)\n"
    "    get(Mat4f *,int,int)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mat4f_set__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Mat4f *arg1 = (Mat4f *) 0 ;
  int arg2 ;
  int arg3 ;
  float arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Mat4f_set",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Mat4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mat4f_set" "', argument " "1"" of type '" "Mat4f *""'"); 
  }
  arg1 = reinterpret_cast< Mat4f * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Mat4f_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Mat4f_set" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Mat4f_set" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  (arg1)->set(arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mat4f_set(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mat4f, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Mat4f_set__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mat4f, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Mat4f_set__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Mat4f_set'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    set(Mat4f *,int,float)\n"
    "    set(Mat4f *,int,int,float)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mat4f_a11(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Mat4f *arg1 = (Mat4f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Mat4f_a11",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Mat4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mat4f_a11" "', argument " "1"" of type '" "Mat4f *""'"); 
  }
  arg1 = reinterpret_cast< Mat4f * >(argp1);
  result = (float)(arg1)->a11();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mat4f_a12(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Mat4f *arg1 = (Mat4f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Mat4f_a12",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Mat4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mat4f_a12" "', argument " "1"" of type '" "Mat4f *""'"); 
  }
  arg1 = reinterpret_cast< Mat4f * >(argp1);
  result = (float)(arg1)->a12();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mat4f_a13(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Mat4f *arg1 = (Mat4f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Mat4f_a13",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Mat4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mat4f_a13" "', argument " "1"" of type '" "Mat4f *""'"); 
  }
  arg1 = reinterpret_cast< Mat4f * >(argp1);
  result = (float)(arg1)->a13();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mat4f_a14(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Mat4f *arg1 = (Mat4f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Mat4f_a14",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Mat4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mat4f_a14" "', argument " "1"" of type '" "Mat4f *""'"); 
  }
  arg1 = reinterpret_cast< Mat4f * >(argp1);
  result = (float)(arg1)->a14();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mat4f_a21(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Mat4f *arg1 = (Mat4f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Mat4f_a21",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Mat4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mat4f_a21" "', argument " "1"" of type '" "Mat4f *""'"); 
  }
  arg1 = reinterpret_cast< Mat4f * >(argp1);
  result = (float)(arg1)->a21();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mat4f_a22(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Mat4f *arg1 = (Mat4f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Mat4f_a22",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Mat4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mat4f_a22" "', argument " "1"" of type '" "Mat4f *""'"); 
  }
  arg1 = reinterpret_cast< Mat4f * >(argp1);
  result = (float)(arg1)->a22();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mat4f_a23(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Mat4f *arg1 = (Mat4f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Mat4f_a23",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Mat4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mat4f_a23" "', argument " "1"" of type '" "Mat4f *""'"); 
  }
  arg1 = reinterpret_cast< Mat4f * >(argp1);
  result = (float)(arg1)->a23();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mat4f_a24(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Mat4f *arg1 = (Mat4f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Mat4f_a24",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Mat4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mat4f_a24" "', argument " "1"" of type '" "Mat4f *""'"); 
  }
  arg1 = reinterpret_cast< Mat4f * >(argp1);
  result = (float)(arg1)->a24();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mat4f_a31(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Mat4f *arg1 = (Mat4f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Mat4f_a31",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Mat4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mat4f_a31" "', argument " "1"" of type '" "Mat4f *""'"); 
  }
  arg1 = reinterpret_cast< Mat4f * >(argp1);
  result = (float)(arg1)->a31();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mat4f_a32(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Mat4f *arg1 = (Mat4f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Mat4f_a32",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Mat4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mat4f_a32" "', argument " "1"" of type '" "Mat4f *""'"); 
  }
  arg1 = reinterpret_cast< Mat4f * >(argp1);
  result = (float)(arg1)->a32();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mat4f_a33(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Mat4f *arg1 = (Mat4f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Mat4f_a33",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Mat4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mat4f_a33" "', argument " "1"" of type '" "Mat4f *""'"); 
  }
  arg1 = reinterpret_cast< Mat4f * >(argp1);
  result = (float)(arg1)->a33();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mat4f_a34(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Mat4f *arg1 = (Mat4f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Mat4f_a34",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Mat4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mat4f_a34" "', argument " "1"" of type '" "Mat4f *""'"); 
  }
  arg1 = reinterpret_cast< Mat4f * >(argp1);
  result = (float)(arg1)->a34();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mat4f_a41(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Mat4f *arg1 = (Mat4f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Mat4f_a41",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Mat4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mat4f_a41" "', argument " "1"" of type '" "Mat4f *""'"); 
  }
  arg1 = reinterpret_cast< Mat4f * >(argp1);
  result = (float)(arg1)->a41();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mat4f_a42(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Mat4f *arg1 = (Mat4f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Mat4f_a42",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Mat4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mat4f_a42" "', argument " "1"" of type '" "Mat4f *""'"); 
  }
  arg1 = reinterpret_cast< Mat4f * >(argp1);
  result = (float)(arg1)->a42();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mat4f_a43(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Mat4f *arg1 = (Mat4f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Mat4f_a43",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Mat4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mat4f_a43" "', argument " "1"" of type '" "Mat4f *""'"); 
  }
  arg1 = reinterpret_cast< Mat4f * >(argp1);
  result = (float)(arg1)->a43();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mat4f_a44(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Mat4f *arg1 = (Mat4f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Mat4f_a44",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Mat4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mat4f_a44" "', argument " "1"" of type '" "Mat4f *""'"); 
  }
  arg1 = reinterpret_cast< Mat4f * >(argp1);
  result = (float)(arg1)->a44();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mat4f___getitem_ref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Mat4f *arg1 = (Mat4f *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Mat4f___getitem_ref__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Mat4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mat4f___getitem_ref__" "', argument " "1"" of type '" "Mat4f *""'"); 
  }
  arg1 = reinterpret_cast< Mat4f * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Mat4f___getitem_ref__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (float *) &(arg1)->operator [](arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_float, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mat4f___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Mat4f *arg1 = (Mat4f *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Mat4f___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Mat4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mat4f___getitem__" "', argument " "1"" of type '" "Mat4f const *""'"); 
  }
  arg1 = reinterpret_cast< Mat4f * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Mat4f___getitem__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (float *) &((Mat4f const *)arg1)->operator [](arg2);
  resultobj = SWIG_From_float(static_cast< float >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mat4f___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Mat4f *arg1 = (Mat4f *) 0 ;
  Mat4f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Mat4f___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Mat4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mat4f___eq__" "', argument " "1"" of type '" "Mat4f *""'"); 
  }
  arg1 = reinterpret_cast< Mat4f * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Mat4f,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Mat4f___eq__" "', argument " "2"" of type '" "Mat4f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mat4f___eq__" "', argument " "2"" of type '" "Mat4f const &""'"); 
  }
  arg2 = reinterpret_cast< Mat4f * >(argp2);
  result = (bool)(arg1)->operator ==((Mat4f const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mat4f_transpose(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Mat4f *arg1 = (Mat4f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Mat4f result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Mat4f_transpose",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Mat4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mat4f_transpose" "', argument " "1"" of type '" "Mat4f const *""'"); 
  }
  arg1 = reinterpret_cast< Mat4f * >(argp1);
  result = ((Mat4f const *)arg1)->transpose();
  resultobj = SWIG_NewPointerObj((new Mat4f(static_cast< const Mat4f& >(result))), SWIGTYPE_p_Mat4f, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mat4f_zero(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Mat4f result;
  
  if (!PyArg_ParseTuple(args,(char *)":Mat4f_zero")) SWIG_fail;
  result = Mat4f::zero();
  resultobj = SWIG_NewPointerObj((new Mat4f(static_cast< const Mat4f& >(result))), SWIGTYPE_p_Mat4f, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mat4f_determinant__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  float *arg1 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Mat4f_determinant",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mat4f_determinant" "', argument " "1"" of type '" "float const *""'"); 
  }
  arg1 = reinterpret_cast< float * >(argp1);
  result = (float)Mat4f::determinant((float const *)arg1);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mat4f_determinant__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Mat4f *arg1 = (Mat4f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Mat4f_determinant",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Mat4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mat4f_determinant" "', argument " "1"" of type '" "Mat4f const *""'"); 
  }
  arg1 = reinterpret_cast< Mat4f * >(argp1);
  result = (float)((Mat4f const *)arg1)->determinant();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mat4f_determinant(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_float, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Mat4f_determinant__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mat4f, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Mat4f_determinant__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Mat4f_determinant'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    determinant(float const *)\n"
    "    determinant(Mat4f const *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mat4f_invert(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Mat4f *arg1 = (Mat4f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Mat4f result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Mat4f_invert",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Mat4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mat4f_invert" "', argument " "1"" of type '" "Mat4f const *""'"); 
  }
  arg1 = reinterpret_cast< Mat4f * >(argp1);
  result = ((Mat4f const *)arg1)->invert();
  resultobj = SWIG_NewPointerObj((new Mat4f(static_cast< const Mat4f& >(result))), SWIGTYPE_p_Mat4f, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mat4f_scale__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Mat4f result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Mat4f_scale",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Mat4f_scale" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Mat4f_scale" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Mat4f_scale" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  result = Mat4f::scale(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj((new Mat4f(static_cast< const Mat4f& >(result))), SWIGTYPE_p_Mat4f, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mat4f_scale__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec3f arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Mat4f result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Mat4f_scale",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Vec3f,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mat4f_scale" "', argument " "1"" of type '" "Vec3f""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mat4f_scale" "', argument " "1"" of type '" "Vec3f""'");
    } else {
      Vec3f * temp = reinterpret_cast< Vec3f * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  result = Mat4f::scale(arg1);
  resultobj = SWIG_NewPointerObj((new Mat4f(static_cast< const Mat4f& >(result))), SWIGTYPE_p_Mat4f, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mat4f_scale(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Vec3f, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Mat4f_scale__SWIG_1(self, args);
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Mat4f_scale__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Mat4f_scale'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    scale(float,float,float)\n"
    "    Mat4f::scale(Vec3f)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mat4f_translate__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Mat4f result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Mat4f_translate",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Mat4f_translate" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Mat4f_translate" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Mat4f_translate" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  result = Mat4f::translate(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj((new Mat4f(static_cast< const Mat4f& >(result))), SWIGTYPE_p_Mat4f, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mat4f_translate__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec3f arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Mat4f result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Mat4f_translate",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Vec3f,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mat4f_translate" "', argument " "1"" of type '" "Vec3f""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mat4f_translate" "', argument " "1"" of type '" "Vec3f""'");
    } else {
      Vec3f * temp = reinterpret_cast< Vec3f * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  result = Mat4f::translate(arg1);
  resultobj = SWIG_NewPointerObj((new Mat4f(static_cast< const Mat4f& >(result))), SWIGTYPE_p_Mat4f, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mat4f_translate(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Vec3f, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Mat4f_translate__SWIG_1(self, args);
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Mat4f_translate__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Mat4f_translate'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    translate(float,float,float)\n"
    "    Mat4f::translate(Vec3f)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mat4f_rotate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec3f arg1 ;
  float arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Mat4f result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Mat4f_rotate",&obj0,&obj1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Vec3f,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mat4f_rotate" "', argument " "1"" of type '" "Vec3f""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mat4f_rotate" "', argument " "1"" of type '" "Vec3f""'");
    } else {
      Vec3f * temp = reinterpret_cast< Vec3f * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Mat4f_rotate" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  result = Mat4f::rotate(arg1,arg2);
  resultobj = SWIG_NewPointerObj((new Mat4f(static_cast< const Mat4f& >(result))), SWIGTYPE_p_Mat4f, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mat4f_rotatex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  float arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  Mat4f result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Mat4f_rotatex",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Mat4f_rotatex" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  result = Mat4f::rotatex(arg1);
  resultobj = SWIG_NewPointerObj((new Mat4f(static_cast< const Mat4f& >(result))), SWIGTYPE_p_Mat4f, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mat4f_rotatey(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  float arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  Mat4f result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Mat4f_rotatey",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Mat4f_rotatey" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  result = Mat4f::rotatey(arg1);
  resultobj = SWIG_NewPointerObj((new Mat4f(static_cast< const Mat4f& >(result))), SWIGTYPE_p_Mat4f, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mat4f_rotatez(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  float arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  Mat4f result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Mat4f_rotatez",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Mat4f_rotatez" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  result = Mat4f::rotatez(arg1);
  resultobj = SWIG_NewPointerObj((new Mat4f(static_cast< const Mat4f& >(result))), SWIGTYPE_p_Mat4f, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mat4f_ortho(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  Mat4f result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:Mat4f_ortho",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Mat4f_ortho" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Mat4f_ortho" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Mat4f_ortho" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Mat4f_ortho" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  ecode5 = SWIG_AsVal_float(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Mat4f_ortho" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = static_cast< float >(val5);
  ecode6 = SWIG_AsVal_float(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Mat4f_ortho" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = static_cast< float >(val6);
  result = Mat4f::ortho(arg1,arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_NewPointerObj((new Mat4f(static_cast< const Mat4f& >(result))), SWIGTYPE_p_Mat4f, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mat4f_perspective(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Mat4f result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Mat4f_perspective",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Mat4f_perspective" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Mat4f_perspective" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Mat4f_perspective" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Mat4f_perspective" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  result = Mat4f::perspective(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj((new Mat4f(static_cast< const Mat4f& >(result))), SWIGTYPE_p_Mat4f, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mat4f_frustum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  Mat4f result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:Mat4f_frustum",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Mat4f_frustum" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Mat4f_frustum" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Mat4f_frustum" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Mat4f_frustum" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  ecode5 = SWIG_AsVal_float(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Mat4f_frustum" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = static_cast< float >(val5);
  ecode6 = SWIG_AsVal_float(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Mat4f_frustum" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = static_cast< float >(val6);
  result = Mat4f::frustum(arg1,arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_NewPointerObj((new Mat4f(static_cast< const Mat4f& >(result))), SWIGTYPE_p_Mat4f, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mat4f_lookat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  float arg9 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  float val7 ;
  int ecode7 = 0 ;
  float val8 ;
  int ecode8 = 0 ;
  float val9 ;
  int ecode9 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  Mat4f result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOO:Mat4f_lookat",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Mat4f_lookat" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Mat4f_lookat" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Mat4f_lookat" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Mat4f_lookat" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  ecode5 = SWIG_AsVal_float(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Mat4f_lookat" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = static_cast< float >(val5);
  ecode6 = SWIG_AsVal_float(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Mat4f_lookat" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = static_cast< float >(val6);
  ecode7 = SWIG_AsVal_float(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "Mat4f_lookat" "', argument " "7"" of type '" "float""'");
  } 
  arg7 = static_cast< float >(val7);
  ecode8 = SWIG_AsVal_float(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "Mat4f_lookat" "', argument " "8"" of type '" "float""'");
  } 
  arg8 = static_cast< float >(val8);
  ecode9 = SWIG_AsVal_float(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "Mat4f_lookat" "', argument " "9"" of type '" "float""'");
  } 
  arg9 = static_cast< float >(val9);
  result = Mat4f::lookat(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  resultobj = SWIG_NewPointerObj((new Mat4f(static_cast< const Mat4f& >(result))), SWIGTYPE_p_Mat4f, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mat4f_fuzzyEqual__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Mat4f *arg1 = (Mat4f *) 0 ;
  Mat4f *arg2 = 0 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Mat4f_fuzzyEqual",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Mat4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mat4f_fuzzyEqual" "', argument " "1"" of type '" "Mat4f const *""'"); 
  }
  arg1 = reinterpret_cast< Mat4f * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Mat4f,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Mat4f_fuzzyEqual" "', argument " "2"" of type '" "Mat4f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mat4f_fuzzyEqual" "', argument " "2"" of type '" "Mat4f const &""'"); 
  }
  arg2 = reinterpret_cast< Mat4f * >(argp2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Mat4f_fuzzyEqual" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  result = (bool)((Mat4f const *)arg1)->fuzzyEqual((Mat4f const &)*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mat4f_fuzzyEqual__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Mat4f *arg1 = (Mat4f *) 0 ;
  Mat4f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Mat4f_fuzzyEqual",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Mat4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mat4f_fuzzyEqual" "', argument " "1"" of type '" "Mat4f const *""'"); 
  }
  arg1 = reinterpret_cast< Mat4f * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Mat4f,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Mat4f_fuzzyEqual" "', argument " "2"" of type '" "Mat4f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mat4f_fuzzyEqual" "', argument " "2"" of type '" "Mat4f const &""'"); 
  }
  arg2 = reinterpret_cast< Mat4f * >(argp2);
  result = (bool)((Mat4f const *)arg1)->fuzzyEqual((Mat4f const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mat4f_fuzzyEqual(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mat4f, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Mat4f, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Mat4f_fuzzyEqual__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mat4f, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Mat4f, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Mat4f_fuzzyEqual__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Mat4f_fuzzyEqual'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fuzzyEqual(Mat4f const *,Mat4f const &,float)\n"
    "    fuzzyEqual(Mat4f const *,Mat4f const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mat4f_almostZero__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Mat4f *arg1 = (Mat4f *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Mat4f_almostZero",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Mat4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mat4f_almostZero" "', argument " "1"" of type '" "Mat4f *""'"); 
  }
  arg1 = reinterpret_cast< Mat4f * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Mat4f_almostZero" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  result = (bool)(arg1)->almostZero(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mat4f_almostZero__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Mat4f *arg1 = (Mat4f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Mat4f_almostZero",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Mat4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mat4f_almostZero" "', argument " "1"" of type '" "Mat4f *""'"); 
  }
  arg1 = reinterpret_cast< Mat4f * >(argp1);
  result = (bool)(arg1)->almostZero();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mat4f_almostZero(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mat4f, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Mat4f_almostZero__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mat4f, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Mat4f_almostZero__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Mat4f_almostZero'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    almostZero(Mat4f *,float)\n"
    "    almostZero(Mat4f *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mat4f_almostIdentity__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Mat4f *arg1 = (Mat4f *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Mat4f_almostIdentity",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Mat4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mat4f_almostIdentity" "', argument " "1"" of type '" "Mat4f *""'"); 
  }
  arg1 = reinterpret_cast< Mat4f * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Mat4f_almostIdentity" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  result = (bool)(arg1)->almostIdentity(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mat4f_almostIdentity__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Mat4f *arg1 = (Mat4f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Mat4f_almostIdentity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Mat4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mat4f_almostIdentity" "', argument " "1"" of type '" "Mat4f *""'"); 
  }
  arg1 = reinterpret_cast< Mat4f * >(argp1);
  result = (bool)(arg1)->almostIdentity();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mat4f_almostIdentity(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mat4f, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Mat4f_almostIdentity__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mat4f, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Mat4f_almostIdentity__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Mat4f_almostIdentity'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    almostIdentity(Mat4f *,float)\n"
    "    almostIdentity(Mat4f *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mat4f_row(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Mat4f *arg1 = (Mat4f *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Vec4f result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Mat4f_row",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Mat4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mat4f_row" "', argument " "1"" of type '" "Mat4f const *""'"); 
  }
  arg1 = reinterpret_cast< Mat4f * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Mat4f_row" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = ((Mat4f const *)arg1)->row(arg2);
  resultobj = SWIG_NewPointerObj((new Vec4f(static_cast< const Vec4f& >(result))), SWIGTYPE_p_Vec4f, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mat4f_col(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Mat4f *arg1 = (Mat4f *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Vec4f result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Mat4f_col",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Mat4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mat4f_col" "', argument " "1"" of type '" "Mat4f const *""'"); 
  }
  arg1 = reinterpret_cast< Mat4f * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Mat4f_col" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = ((Mat4f const *)arg1)->col(arg2);
  resultobj = SWIG_NewPointerObj((new Vec4f(static_cast< const Vec4f& >(result))), SWIGTYPE_p_Vec4f, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mat4f___add__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Mat4f *arg1 = (Mat4f *) 0 ;
  Mat4f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Mat4f result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Mat4f___add__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Mat4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mat4f___add__" "', argument " "1"" of type '" "Mat4f const *""'"); 
  }
  arg1 = reinterpret_cast< Mat4f * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Mat4f,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Mat4f___add__" "', argument " "2"" of type '" "Mat4f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mat4f___add__" "', argument " "2"" of type '" "Mat4f const &""'"); 
  }
  arg2 = reinterpret_cast< Mat4f * >(argp2);
  result = ((Mat4f const *)arg1)->operator +((Mat4f const &)*arg2);
  resultobj = SWIG_NewPointerObj((new Mat4f(static_cast< const Mat4f& >(result))), SWIGTYPE_p_Mat4f, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mat4f___sub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Mat4f *arg1 = (Mat4f *) 0 ;
  Mat4f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Mat4f result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Mat4f___sub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Mat4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mat4f___sub__" "', argument " "1"" of type '" "Mat4f const *""'"); 
  }
  arg1 = reinterpret_cast< Mat4f * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Mat4f,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Mat4f___sub__" "', argument " "2"" of type '" "Mat4f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mat4f___sub__" "', argument " "2"" of type '" "Mat4f const &""'"); 
  }
  arg2 = reinterpret_cast< Mat4f * >(argp2);
  result = ((Mat4f const *)arg1)->operator -((Mat4f const &)*arg2);
  resultobj = SWIG_NewPointerObj((new Mat4f(static_cast< const Mat4f& >(result))), SWIGTYPE_p_Mat4f, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mat4f___mul____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Mat4f *arg1 = (Mat4f *) 0 ;
  Mat4f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Mat4f result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Mat4f___mul__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Mat4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mat4f___mul__" "', argument " "1"" of type '" "Mat4f const *""'"); 
  }
  arg1 = reinterpret_cast< Mat4f * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Mat4f,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Mat4f___mul__" "', argument " "2"" of type '" "Mat4f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mat4f___mul__" "', argument " "2"" of type '" "Mat4f const &""'"); 
  }
  arg2 = reinterpret_cast< Mat4f * >(argp2);
  result = ((Mat4f const *)arg1)->operator *((Mat4f const &)*arg2);
  resultobj = SWIG_NewPointerObj((new Mat4f(static_cast< const Mat4f& >(result))), SWIGTYPE_p_Mat4f, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mat4f___mul____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Mat4f *arg1 = (Mat4f *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Mat4f result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Mat4f___mul__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Mat4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mat4f___mul__" "', argument " "1"" of type '" "Mat4f const *""'"); 
  }
  arg1 = reinterpret_cast< Mat4f * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Mat4f___mul__" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  result = ((Mat4f const *)arg1)->operator *(arg2);
  resultobj = SWIG_NewPointerObj((new Mat4f(static_cast< const Mat4f& >(result))), SWIGTYPE_p_Mat4f, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mat4f___mul____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Mat4f *arg1 = (Mat4f *) 0 ;
  Vec4f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Vec4f result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Mat4f___mul__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Mat4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mat4f___mul__" "', argument " "1"" of type '" "Mat4f const *""'"); 
  }
  arg1 = reinterpret_cast< Mat4f * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vec4f,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Mat4f___mul__" "', argument " "2"" of type '" "Vec4f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mat4f___mul__" "', argument " "2"" of type '" "Vec4f const &""'"); 
  }
  arg2 = reinterpret_cast< Vec4f * >(argp2);
  result = ((Mat4f const *)arg1)->operator *((Vec4f const &)*arg2);
  resultobj = SWIG_NewPointerObj((new Vec4f(static_cast< const Vec4f& >(result))), SWIGTYPE_p_Vec4f, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mat4f___mul____SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Mat4f *arg1 = (Mat4f *) 0 ;
  Vec3f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Vec3f result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Mat4f___mul__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Mat4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mat4f___mul__" "', argument " "1"" of type '" "Mat4f const *""'"); 
  }
  arg1 = reinterpret_cast< Mat4f * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vec3f,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Mat4f___mul__" "', argument " "2"" of type '" "Vec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mat4f___mul__" "', argument " "2"" of type '" "Vec3f const &""'"); 
  }
  arg2 = reinterpret_cast< Vec3f * >(argp2);
  result = ((Mat4f const *)arg1)->operator *((Vec3f const &)*arg2);
  resultobj = SWIG_NewPointerObj((new Vec3f(static_cast< const Vec3f& >(result))), SWIGTYPE_p_Vec3f, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mat4f___mul__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mat4f, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Mat4f, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Mat4f___mul____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mat4f, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Vec4f, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Mat4f___mul____SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mat4f, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Vec3f, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Mat4f___mul____SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mat4f, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Mat4f___mul____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Mat4f_decompose(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Mat4f *arg1 = (Mat4f *) 0 ;
  Vec3f *arg2 = 0 ;
  Vec3f *arg3 = 0 ;
  Vec3f *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Mat4f_decompose",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Mat4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mat4f_decompose" "', argument " "1"" of type '" "Mat4f const *""'"); 
  }
  arg1 = reinterpret_cast< Mat4f * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Mat4f_decompose" "', argument " "2"" of type '" "Vec3f &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mat4f_decompose" "', argument " "2"" of type '" "Vec3f &""'"); 
  }
  arg2 = reinterpret_cast< Vec3f * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Vec3f,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Mat4f_decompose" "', argument " "3"" of type '" "Vec3f &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mat4f_decompose" "', argument " "3"" of type '" "Vec3f &""'"); 
  }
  arg3 = reinterpret_cast< Vec3f * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_Vec3f,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Mat4f_decompose" "', argument " "4"" of type '" "Vec3f &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mat4f_decompose" "', argument " "4"" of type '" "Vec3f &""'"); 
  }
  arg4 = reinterpret_cast< Vec3f * >(argp4);
  result = (bool)((Mat4f const *)arg1)->decompose(*arg2,*arg3,*arg4);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mat4f_getProjectionMatrix__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  float *arg2 = (float *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Mat4f result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Mat4f_getProjectionMatrix",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Mat4f_getProjectionMatrix" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Mat4f_getProjectionMatrix" "', argument " "2"" of type '" "float const *""'"); 
  }
  arg2 = reinterpret_cast< float * >(argp2);
  result = Mat4f::getProjectionMatrix(arg1,(float const *)arg2);
  resultobj = SWIG_NewPointerObj((new Mat4f(static_cast< const Mat4f& >(result))), SWIGTYPE_p_Mat4f, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mat4f_getProjectionMatrix__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Vec3f,std::allocator< Vec3f > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  Mat4f result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Mat4f_getProjectionMatrix",&obj0)) SWIG_fail;
  {
    std::vector<Vec3f,std::allocator< Vec3f > > *ptr = (std::vector<Vec3f,std::allocator< Vec3f > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mat4f_getProjectionMatrix" "', argument " "1"" of type '" "std::vector< Vec3f,std::allocator< Vec3f > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mat4f_getProjectionMatrix" "', argument " "1"" of type '" "std::vector< Vec3f,std::allocator< Vec3f > > const &""'"); 
    }
    arg1 = ptr;
  }
  result = Mat4f::getProjectionMatrix((std::vector< Vec3f,std::allocator< Vec3f > > const &)*arg1);
  resultobj = SWIG_NewPointerObj((new Mat4f(static_cast< const Mat4f& >(result))), SWIGTYPE_p_Mat4f, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mat4f_getProjectionMatrix(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<Vec3f,std::allocator< Vec3f > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Mat4f_getProjectionMatrix__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_float, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Mat4f_getProjectionMatrix__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Mat4f_getProjectionMatrix'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    getProjectionMatrix(int,float const *)\n"
    "    Mat4f::getProjectionMatrix(std::vector< Vec3f,std::allocator< Vec3f > > const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mat4f___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Mat4f *arg1 = (Mat4f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Mat4f___str__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Mat4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mat4f___str__" "', argument " "1"" of type '" "Mat4f const *""'"); 
  }
  arg1 = reinterpret_cast< Mat4f * >(argp1);
  result = ((Mat4f const *)arg1)->str();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mat4f___repr__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Mat4f *arg1 = (Mat4f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Mat4f___repr__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Mat4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mat4f___repr__" "', argument " "1"" of type '" "Mat4f const *""'"); 
  }
  arg1 = reinterpret_cast< Mat4f * >(argp1);
  result = ((Mat4f const *)arg1)->repr();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mat4f_SelfTest(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":Mat4f_SelfTest")) SWIG_fail;
  result = (int)Mat4f::SelfTest();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Mat4f(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Mat4f *arg1 = (Mat4f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Mat4f",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Mat4f, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Mat4f" "', argument " "1"" of type '" "Mat4f *""'"); 
  }
  arg1 = reinterpret_cast< Mat4f * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Mat4f_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Mat4f, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_Matf_Write(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Matf *arg1 = (Matf *) 0 ;
  Archive *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Matf > tempshared1 ;
  std::tr1::shared_ptr< Matf > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Matf_Write",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matf_Write" "', argument " "1"" of type '" "Matf *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Matf > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Matf > * >(argp1);
      arg1 = const_cast< Matf * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Matf > * >(argp1);
      arg1 = const_cast< Matf * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Archive,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Matf_Write" "', argument " "2"" of type '" "Archive &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Matf_Write" "', argument " "2"" of type '" "Archive &""'"); 
  }
  arg2 = reinterpret_cast< Archive * >(argp2);
  (arg1)->Write(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matf_Read(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Matf *arg1 = (Matf *) 0 ;
  Archive *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Matf > tempshared1 ;
  std::tr1::shared_ptr< Matf > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Matf_Read",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matf_Read" "', argument " "1"" of type '" "Matf *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Matf > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Matf > * >(argp1);
      arg1 = const_cast< Matf * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Matf > * >(argp1);
      arg1 = const_cast< Matf * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Archive,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Matf_Read" "', argument " "2"" of type '" "Archive &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Matf_Read" "', argument " "2"" of type '" "Archive &""'"); 
  }
  arg2 = reinterpret_cast< Archive * >(argp2);
  (arg1)->Read(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matf_mem_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Matf *arg1 = (Matf *) 0 ;
  float *arg2 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Matf > tempshared1 ;
  std::tr1::shared_ptr< Matf > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Matf_mem_set",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matf_mem_set" "', argument " "1"" of type '" "Matf *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Matf > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Matf > * >(argp1);
      arg1 = const_cast< Matf * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Matf > * >(argp1);
      arg1 = const_cast< Matf * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_float, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Matf_mem_set" "', argument " "2"" of type '" "float *""'"); 
  }
  arg2 = reinterpret_cast< float * >(argp2);
  if (arg1) (arg1)->mem = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matf_mem_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Matf *arg1 = (Matf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Matf > tempshared1 ;
  std::tr1::shared_ptr< Matf > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  float *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Matf_mem_get",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matf_mem_get" "', argument " "1"" of type '" "Matf *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Matf > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Matf > * >(argp1);
      arg1 = const_cast< Matf * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Matf > * >(argp1);
      arg1 = const_cast< Matf * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (float *) ((arg1)->mem);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_float, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matf_dim_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Matf *arg1 = (Matf *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Matf > tempshared1 ;
  std::tr1::shared_ptr< Matf > *smartarg1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Matf_dim_set",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matf_dim_set" "', argument " "1"" of type '" "Matf *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Matf > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Matf > * >(argp1);
      arg1 = const_cast< Matf * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Matf > * >(argp1);
      arg1 = const_cast< Matf * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Matf_dim_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->dim = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matf_dim_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Matf *arg1 = (Matf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Matf > tempshared1 ;
  std::tr1::shared_ptr< Matf > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Matf_dim_get",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matf_dim_get" "', argument " "1"" of type '" "Matf *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Matf > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Matf > * >(argp1);
      arg1 = const_cast< Matf * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Matf > * >(argp1);
      arg1 = const_cast< Matf * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (int) ((arg1)->dim);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Matf__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Matf *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Matf")) SWIG_fail;
  result = (Matf *)new Matf();
  {
    std::tr1::shared_ptr<  Matf > *smartresult = result ? new std::tr1::shared_ptr<  Matf >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Matf__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Matf *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Matf const > tempshared1 ;
  PyObject * obj0 = 0 ;
  Matf *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Matf",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Matf" "', argument " "1"" of type '" "Matf const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Matf" "', argument " "1"" of type '" "Matf const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr< const Matf > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr< const Matf > * >(argp1);
      arg1 = const_cast< Matf * >(tempshared1.get());
    } else {
      arg1 = const_cast< Matf * >(reinterpret_cast< std::tr1::shared_ptr< const Matf > * >(argp1)->get());
    }
  }
  result = (Matf *)new Matf((Matf const &)*arg1);
  {
    std::tr1::shared_ptr<  Matf > *smartresult = result ? new std::tr1::shared_ptr<  Matf >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Matf__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  Matf *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Matf",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Matf" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = (Matf *)new Matf(arg1);
  {
    std::tr1::shared_ptr<  Matf > *smartresult = result ? new std::tr1::shared_ptr<  Matf >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Matf__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  float *arg2 = (float *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Matf *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Matf",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Matf" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Matf" "', argument " "2"" of type '" "float const *""'"); 
  }
  arg2 = reinterpret_cast< float * >(argp2);
  result = (Matf *)new Matf(arg1,(float const *)arg2);
  {
    std::tr1::shared_ptr<  Matf > *smartresult = result ? new std::tr1::shared_ptr<  Matf >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Matf__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double *arg2 = (double *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Matf *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Matf",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Matf" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Matf" "', argument " "2"" of type '" "double const *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  result = (Matf *)new Matf(arg1,(double const *)arg2);
  {
    std::tr1::shared_ptr<  Matf > *smartresult = result ? new std::tr1::shared_ptr<  Matf >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Matf__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Matf *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_Matf",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Matf" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Matf" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Matf" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_Matf" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  result = (Matf *)new Matf(arg1,arg2,arg3,arg4);
  {
    std::tr1::shared_ptr<  Matf > *smartresult = result ? new std::tr1::shared_ptr<  Matf >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Matf__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  float arg9 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  float val7 ;
  int ecode7 = 0 ;
  float val8 ;
  int ecode8 = 0 ;
  float val9 ;
  int ecode9 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  Matf *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOO:new_Matf",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Matf" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Matf" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Matf" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_Matf" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  ecode5 = SWIG_AsVal_float(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_Matf" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = static_cast< float >(val5);
  ecode6 = SWIG_AsVal_float(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_Matf" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = static_cast< float >(val6);
  ecode7 = SWIG_AsVal_float(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_Matf" "', argument " "7"" of type '" "float""'");
  } 
  arg7 = static_cast< float >(val7);
  ecode8 = SWIG_AsVal_float(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "new_Matf" "', argument " "8"" of type '" "float""'");
  } 
  arg8 = static_cast< float >(val8);
  ecode9 = SWIG_AsVal_float(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "new_Matf" "', argument " "9"" of type '" "float""'");
  } 
  arg9 = static_cast< float >(val9);
  result = (Matf *)new Matf(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  {
    std::tr1::shared_ptr<  Matf > *smartresult = result ? new std::tr1::shared_ptr<  Matf >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Matf__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float,std::allocator< float > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  Matf *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Matf",&obj0)) SWIG_fail;
  {
    std::vector<float,std::allocator< float > > *ptr = (std::vector<float,std::allocator< float > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Matf" "', argument " "1"" of type '" "std::vector< float,std::allocator< float > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Matf" "', argument " "1"" of type '" "std::vector< float,std::allocator< float > > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (Matf *)new Matf((std::vector< float,std::allocator< float > > const &)*arg1);
  {
    std::tr1::shared_ptr<  Matf > *smartresult = result ? new std::tr1::shared_ptr<  Matf >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Matf__SWIG_8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Mat4f *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Matf *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Matf",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Mat4f,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Matf" "', argument " "1"" of type '" "Mat4f &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Matf" "', argument " "1"" of type '" "Mat4f &""'"); 
  }
  arg1 = reinterpret_cast< Mat4f * >(argp1);
  result = (Matf *)new Matf(*arg1);
  {
    std::tr1::shared_ptr<  Matf > *smartresult = result ? new std::tr1::shared_ptr<  Matf >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Matf(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[10];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 9); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Matf__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Matf__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mat4f, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Matf__SWIG_8(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Matf__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<float,std::allocator< float > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Matf__SWIG_7(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_float, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_Matf__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_Matf__SWIG_4(self, args);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_Matf__SWIG_5(self, args);
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_float(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_float(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_float(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_float(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    {
                      int res = SWIG_AsVal_float(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      return _wrap_new_Matf__SWIG_6(self, args);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Matf'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Matf()\n"
    "    Matf(Matf const &)\n"
    "    Matf(int)\n"
    "    Matf(int,float const *)\n"
    "    Matf(int,double const *)\n"
    "    Matf(float,float,float,float)\n"
    "    Matf(float,float,float,float,float,float,float,float,float)\n"
    "    Matf(std::vector< float,std::allocator< float > > const &)\n"
    "    Matf(Mat4f &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Matf(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Matf *arg1 = (Matf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Matf > tempshared1 ;
  std::tr1::shared_ptr< Matf > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Matf",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Matf" "', argument " "1"" of type '" "Matf *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Matf > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Matf > * >(argp1);
      arg1 = const_cast< Matf * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Matf > * >(argp1);
      arg1 = const_cast< Matf * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (void)arg1; delete smartarg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matf_c_vector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Matf *arg1 = (Matf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Matf > tempshared1 ;
  std::tr1::shared_ptr< Matf > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Matf_c_vector",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matf_c_vector" "', argument " "1"" of type '" "Matf *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Matf > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Matf > * >(argp1);
      arg1 = const_cast< Matf * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Matf > * >(argp1);
      arg1 = const_cast< Matf * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (arg1)->c_vector();
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matf_get__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Matf *arg1 = (Matf *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Matf const > tempshared1 ;
  std::tr1::shared_ptr< Matf const > *smartarg1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Matf_get",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matf_get" "', argument " "1"" of type '" "Matf const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr< const Matf > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr< const Matf > * >(argp1);
      arg1 = const_cast< Matf * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr< const Matf > * >(argp1);
      arg1 = const_cast< Matf * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Matf_get" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (float)((Matf const *)arg1)->get(arg2);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matf_set__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Matf *arg1 = (Matf *) 0 ;
  int arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Matf > tempshared1 ;
  std::tr1::shared_ptr< Matf > *smartarg1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Matf_set",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matf_set" "', argument " "1"" of type '" "Matf *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Matf > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Matf > * >(argp1);
      arg1 = const_cast< Matf * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Matf > * >(argp1);
      arg1 = const_cast< Matf * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Matf_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Matf_set" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  (arg1)->set(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matf_get__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Matf *arg1 = (Matf *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Matf const > tempshared1 ;
  std::tr1::shared_ptr< Matf const > *smartarg1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Matf_get",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matf_get" "', argument " "1"" of type '" "Matf const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr< const Matf > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr< const Matf > * >(argp1);
      arg1 = const_cast< Matf * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr< const Matf > * >(argp1);
      arg1 = const_cast< Matf * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Matf_get" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Matf_get" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (float)((Matf const *)arg1)->get(arg2,arg3);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matf_get(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Matf_get__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Matf_get__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Matf_get'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    get(Matf const *,int)\n"
    "    get(Matf const *,int,int)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matf_set__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Matf *arg1 = (Matf *) 0 ;
  int arg2 ;
  int arg3 ;
  float arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Matf > tempshared1 ;
  std::tr1::shared_ptr< Matf > *smartarg1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Matf_set",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matf_set" "', argument " "1"" of type '" "Matf *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Matf > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Matf > * >(argp1);
      arg1 = const_cast< Matf * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Matf > * >(argp1);
      arg1 = const_cast< Matf * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Matf_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Matf_set" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Matf_set" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  (arg1)->set(arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matf_set(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Matf_set__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Matf_set__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Matf_set'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    set(Matf *,int,float)\n"
    "    set(Matf *,int,int,float)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matf___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Matf *arg1 = (Matf *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Matf const > tempshared1 ;
  std::tr1::shared_ptr< Matf const > *smartarg1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Matf___call__",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matf___call__" "', argument " "1"" of type '" "Matf const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr< const Matf > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr< const Matf > * >(argp1);
      arg1 = const_cast< Matf * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr< const Matf > * >(argp1);
      arg1 = const_cast< Matf * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Matf___call__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Matf___call__" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (float)((Matf const *)arg1)->operator ()(arg2,arg3);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matf___getitem_ref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Matf *arg1 = (Matf *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Matf > tempshared1 ;
  std::tr1::shared_ptr< Matf > *smartarg1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Matf___getitem_ref__",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matf___getitem_ref__" "', argument " "1"" of type '" "Matf *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Matf > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Matf > * >(argp1);
      arg1 = const_cast< Matf * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Matf > * >(argp1);
      arg1 = const_cast< Matf * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Matf___getitem_ref__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (float *) &(arg1)->operator [](arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_float, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matf___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Matf *arg1 = (Matf *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Matf const > tempshared1 ;
  std::tr1::shared_ptr< Matf const > *smartarg1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Matf___getitem__",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matf___getitem__" "', argument " "1"" of type '" "Matf const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr< const Matf > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr< const Matf > * >(argp1);
      arg1 = const_cast< Matf * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr< const Matf > * >(argp1);
      arg1 = const_cast< Matf * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Matf___getitem__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (float *) &((Matf const *)arg1)->operator [](arg2);
  resultobj = SWIG_From_float(static_cast< float >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matf_row(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Matf *arg1 = (Matf *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Matf const > tempshared1 ;
  std::tr1::shared_ptr< Matf const > *smartarg1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Vecf result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Matf_row",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matf_row" "', argument " "1"" of type '" "Matf const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr< const Matf > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr< const Matf > * >(argp1);
      arg1 = const_cast< Matf * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr< const Matf > * >(argp1);
      arg1 = const_cast< Matf * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Matf_row" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = ((Matf const *)arg1)->row(arg2);
  resultobj = SWIG_NewPointerObj((new Vecf(static_cast< const Vecf& >(result))), SWIGTYPE_p_Vecf, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matf_col(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Matf *arg1 = (Matf *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Matf const > tempshared1 ;
  std::tr1::shared_ptr< Matf const > *smartarg1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Vecf result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Matf_col",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matf_col" "', argument " "1"" of type '" "Matf const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr< const Matf > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr< const Matf > * >(argp1);
      arg1 = const_cast< Matf * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr< const Matf > * >(argp1);
      arg1 = const_cast< Matf * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Matf_col" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = ((Matf const *)arg1)->col(arg2);
  resultobj = SWIG_NewPointerObj((new Vecf(static_cast< const Vecf& >(result))), SWIGTYPE_p_Vecf, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matf_swapRows__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Matf *arg1 = (Matf *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Matf const > tempshared1 ;
  std::tr1::shared_ptr< Matf const > *smartarg1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Matf result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Matf_swapRows",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matf_swapRows" "', argument " "1"" of type '" "Matf const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr< const Matf > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr< const Matf > * >(argp1);
      arg1 = const_cast< Matf * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr< const Matf > * >(argp1);
      arg1 = const_cast< Matf * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Matf_swapRows" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Matf_swapRows" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg2 = ptr;
  }
  result = ((Matf const *)arg1)->swapRows((std::vector< int,std::allocator< int > > const &)*arg2);
  {
    std::tr1::shared_ptr<  Matf > *smartresult = new std::tr1::shared_ptr<  Matf >(new Matf((Matf &)result));
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, SWIG_POINTER_OWN);
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matf_swapRows__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Matf *arg1 = (Matf *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Matf const > tempshared1 ;
  std::tr1::shared_ptr< Matf const > *smartarg1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Matf result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Matf_swapRows",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matf_swapRows" "', argument " "1"" of type '" "Matf const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr< const Matf > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr< const Matf > * >(argp1);
      arg1 = const_cast< Matf * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr< const Matf > * >(argp1);
      arg1 = const_cast< Matf * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Matf_swapRows" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Matf_swapRows" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = ((Matf const *)arg1)->swapRows(arg2,arg3);
  {
    std::tr1::shared_ptr<  Matf > *smartresult = new std::tr1::shared_ptr<  Matf >(new Matf((Matf &)result));
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matf_swapRows(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector<int,std::allocator< int > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Matf_swapRows__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Matf_swapRows__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Matf_swapRows'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    swapRows(Matf const *,std::vector< int,std::allocator< int > > const &)\n"
    "    swapRows(Matf const *,int,int)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matf_swapCols__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Matf *arg1 = (Matf *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Matf const > tempshared1 ;
  std::tr1::shared_ptr< Matf const > *smartarg1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Matf result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Matf_swapCols",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matf_swapCols" "', argument " "1"" of type '" "Matf const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr< const Matf > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr< const Matf > * >(argp1);
      arg1 = const_cast< Matf * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr< const Matf > * >(argp1);
      arg1 = const_cast< Matf * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Matf_swapCols" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Matf_swapCols" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg2 = ptr;
  }
  result = ((Matf const *)arg1)->swapCols((std::vector< int,std::allocator< int > > const &)*arg2);
  {
    std::tr1::shared_ptr<  Matf > *smartresult = new std::tr1::shared_ptr<  Matf >(new Matf((Matf &)result));
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, SWIG_POINTER_OWN);
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matf_swapCols__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Matf *arg1 = (Matf *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Matf const > tempshared1 ;
  std::tr1::shared_ptr< Matf const > *smartarg1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Matf result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Matf_swapCols",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matf_swapCols" "', argument " "1"" of type '" "Matf const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr< const Matf > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr< const Matf > * >(argp1);
      arg1 = const_cast< Matf * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr< const Matf > * >(argp1);
      arg1 = const_cast< Matf * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Matf_swapCols" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Matf_swapCols" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = ((Matf const *)arg1)->swapCols(arg2,arg3);
  {
    std::tr1::shared_ptr<  Matf > *smartresult = new std::tr1::shared_ptr<  Matf >(new Matf((Matf &)result));
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matf_swapCols(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector<int,std::allocator< int > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Matf_swapCols__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Matf_swapCols__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Matf_swapCols'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    swapCols(Matf const *,std::vector< int,std::allocator< int > > const &)\n"
    "    swapCols(Matf const *,int,int)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matf_toMat4f(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Matf *arg1 = (Matf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Matf const > tempshared1 ;
  std::tr1::shared_ptr< Matf const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  Mat4f result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Matf_toMat4f",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matf_toMat4f" "', argument " "1"" of type '" "Matf const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr< const Matf > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr< const Matf > * >(argp1);
      arg1 = const_cast< Matf * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr< const Matf > * >(argp1);
      arg1 = const_cast< Matf * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((Matf const *)arg1)->toMat4f();
  resultobj = SWIG_NewPointerObj((new Mat4f(static_cast< const Mat4f& >(result))), SWIGTYPE_p_Mat4f, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matf_transpose(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Matf *arg1 = (Matf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Matf const > tempshared1 ;
  std::tr1::shared_ptr< Matf const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  Matf result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Matf_transpose",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matf_transpose" "', argument " "1"" of type '" "Matf const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr< const Matf > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr< const Matf > * >(argp1);
      arg1 = const_cast< Matf * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr< const Matf > * >(argp1);
      arg1 = const_cast< Matf * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((Matf const *)arg1)->transpose();
  {
    std::tr1::shared_ptr<  Matf > *smartresult = new std::tr1::shared_ptr<  Matf >(new Matf((Matf &)result));
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matf_assign__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Matf *arg1 = (Matf *) 0 ;
  Matf *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Matf > tempshared1 ;
  std::tr1::shared_ptr< Matf > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::tr1::shared_ptr< Matf const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Matf *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Matf_assign",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matf_assign" "', argument " "1"" of type '" "Matf *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Matf > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Matf > * >(argp1);
      arg1 = const_cast< Matf * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Matf > * >(argp1);
      arg1 = const_cast< Matf * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Matf_assign" "', argument " "2"" of type '" "Matf const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Matf_assign" "', argument " "2"" of type '" "Matf const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< std::tr1::shared_ptr< const Matf > * >(argp2);
      delete reinterpret_cast< std::tr1::shared_ptr< const Matf > * >(argp2);
      arg2 = const_cast< Matf * >(tempshared2.get());
    } else {
      arg2 = const_cast< Matf * >(reinterpret_cast< std::tr1::shared_ptr< const Matf > * >(argp2)->get());
    }
  }
  result = (Matf *) &(arg1)->operator =((Matf const &)*arg2);
  {
    std::tr1::shared_ptr<  Matf > *smartresult = new std::tr1::shared_ptr<  Matf >(result SWIG_NO_NULL_DELETER_0);
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matf_assign__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Matf *arg1 = (Matf *) 0 ;
  std::vector< float,std::allocator< float > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Matf > tempshared1 ;
  std::tr1::shared_ptr< Matf > *smartarg1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Matf *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Matf_assign",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matf_assign" "', argument " "1"" of type '" "Matf *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Matf > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Matf > * >(argp1);
      arg1 = const_cast< Matf * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Matf > * >(argp1);
      arg1 = const_cast< Matf * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    std::vector<float,std::allocator< float > > *ptr = (std::vector<float,std::allocator< float > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Matf_assign" "', argument " "2"" of type '" "std::vector< float,std::allocator< float > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Matf_assign" "', argument " "2"" of type '" "std::vector< float,std::allocator< float > > const &""'"); 
    }
    arg2 = ptr;
  }
  result = (Matf *) &(arg1)->operator =((std::vector< float,std::allocator< float > > const &)*arg2);
  {
    std::tr1::shared_ptr<  Matf > *smartresult = new std::tr1::shared_ptr<  Matf >(result SWIG_NO_NULL_DELETER_0);
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, SWIG_POINTER_OWN);
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matf_assign(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Matf_assign__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector<float,std::allocator< float > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Matf_assign__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Matf_assign'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operator =(Matf *,Matf const &)\n"
    "    operator =(Matf *,std::vector< float,std::allocator< float > > const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matf___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Matf *arg1 = (Matf *) 0 ;
  Matf *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Matf const > tempshared1 ;
  std::tr1::shared_ptr< Matf const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::tr1::shared_ptr< Matf const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Matf___eq__",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matf___eq__" "', argument " "1"" of type '" "Matf const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr< const Matf > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr< const Matf > * >(argp1);
      arg1 = const_cast< Matf * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr< const Matf > * >(argp1);
      arg1 = const_cast< Matf * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Matf___eq__" "', argument " "2"" of type '" "Matf const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Matf___eq__" "', argument " "2"" of type '" "Matf const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< std::tr1::shared_ptr< const Matf > * >(argp2);
      delete reinterpret_cast< std::tr1::shared_ptr< const Matf > * >(argp2);
      arg2 = const_cast< Matf * >(tempshared2.get());
    } else {
      arg2 = const_cast< Matf * >(reinterpret_cast< std::tr1::shared_ptr< const Matf > * >(argp2)->get());
    }
  }
  result = (bool)((Matf const *)arg1)->operator ==((Matf const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matf_fuzzyEqual__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Matf *arg1 = (Matf *) 0 ;
  Matf *arg2 = 0 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Matf const > tempshared1 ;
  std::tr1::shared_ptr< Matf const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::tr1::shared_ptr< Matf const > tempshared2 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Matf_fuzzyEqual",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matf_fuzzyEqual" "', argument " "1"" of type '" "Matf const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr< const Matf > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr< const Matf > * >(argp1);
      arg1 = const_cast< Matf * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr< const Matf > * >(argp1);
      arg1 = const_cast< Matf * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Matf_fuzzyEqual" "', argument " "2"" of type '" "Matf const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Matf_fuzzyEqual" "', argument " "2"" of type '" "Matf const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< std::tr1::shared_ptr< const Matf > * >(argp2);
      delete reinterpret_cast< std::tr1::shared_ptr< const Matf > * >(argp2);
      arg2 = const_cast< Matf * >(tempshared2.get());
    } else {
      arg2 = const_cast< Matf * >(reinterpret_cast< std::tr1::shared_ptr< const Matf > * >(argp2)->get());
    }
  }
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Matf_fuzzyEqual" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  result = (bool)((Matf const *)arg1)->fuzzyEqual((Matf const &)*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matf_fuzzyEqual__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Matf *arg1 = (Matf *) 0 ;
  Matf *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Matf const > tempshared1 ;
  std::tr1::shared_ptr< Matf const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::tr1::shared_ptr< Matf const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Matf_fuzzyEqual",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matf_fuzzyEqual" "', argument " "1"" of type '" "Matf const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr< const Matf > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr< const Matf > * >(argp1);
      arg1 = const_cast< Matf * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr< const Matf > * >(argp1);
      arg1 = const_cast< Matf * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Matf_fuzzyEqual" "', argument " "2"" of type '" "Matf const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Matf_fuzzyEqual" "', argument " "2"" of type '" "Matf const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< std::tr1::shared_ptr< const Matf > * >(argp2);
      delete reinterpret_cast< std::tr1::shared_ptr< const Matf > * >(argp2);
      arg2 = const_cast< Matf * >(tempshared2.get());
    } else {
      arg2 = const_cast< Matf * >(reinterpret_cast< std::tr1::shared_ptr< const Matf > * >(argp2)->get());
    }
  }
  result = (bool)((Matf const *)arg1)->fuzzyEqual((Matf const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matf_fuzzyEqual(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Matf_fuzzyEqual__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Matf_fuzzyEqual__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Matf_fuzzyEqual'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fuzzyEqual(Matf const *,Matf const &,float)\n"
    "    fuzzyEqual(Matf const *,Matf const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matf_zero(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  Matf result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Matf_zero",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Matf_zero" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = Matf::zero(arg1);
  {
    std::tr1::shared_ptr<  Matf > *smartresult = new std::tr1::shared_ptr<  Matf >(new Matf((Matf &)result));
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matf_almostZero__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Matf *arg1 = (Matf *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Matf const > tempshared1 ;
  std::tr1::shared_ptr< Matf const > *smartarg1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Matf_almostZero",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matf_almostZero" "', argument " "1"" of type '" "Matf const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr< const Matf > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr< const Matf > * >(argp1);
      arg1 = const_cast< Matf * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr< const Matf > * >(argp1);
      arg1 = const_cast< Matf * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Matf_almostZero" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  result = (bool)((Matf const *)arg1)->almostZero(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matf_almostZero__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Matf *arg1 = (Matf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Matf const > tempshared1 ;
  std::tr1::shared_ptr< Matf const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Matf_almostZero",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matf_almostZero" "', argument " "1"" of type '" "Matf const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr< const Matf > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr< const Matf > * >(argp1);
      arg1 = const_cast< Matf * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr< const Matf > * >(argp1);
      arg1 = const_cast< Matf * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (bool)((Matf const *)arg1)->almostZero();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matf_almostZero(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Matf_almostZero__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Matf_almostZero__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Matf_almostZero'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    almostZero(Matf const *,float)\n"
    "    almostZero(Matf const *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matf_almostIdentity__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Matf *arg1 = (Matf *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Matf const > tempshared1 ;
  std::tr1::shared_ptr< Matf const > *smartarg1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Matf_almostIdentity",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matf_almostIdentity" "', argument " "1"" of type '" "Matf const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr< const Matf > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr< const Matf > * >(argp1);
      arg1 = const_cast< Matf * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr< const Matf > * >(argp1);
      arg1 = const_cast< Matf * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Matf_almostIdentity" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  result = (bool)((Matf const *)arg1)->almostIdentity(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matf_almostIdentity__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Matf *arg1 = (Matf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Matf const > tempshared1 ;
  std::tr1::shared_ptr< Matf const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Matf_almostIdentity",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matf_almostIdentity" "', argument " "1"" of type '" "Matf const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr< const Matf > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr< const Matf > * >(argp1);
      arg1 = const_cast< Matf * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr< const Matf > * >(argp1);
      arg1 = const_cast< Matf * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (bool)((Matf const *)arg1)->almostIdentity();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matf_almostIdentity(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Matf_almostIdentity__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Matf_almostIdentity__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Matf_almostIdentity'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    almostIdentity(Matf const *,float)\n"
    "    almostIdentity(Matf const *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matf_extract(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Matf *arg1 = (Matf *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Matf const > tempshared1 ;
  std::tr1::shared_ptr< Matf const > *smartarg1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Matf result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Matf_extract",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matf_extract" "', argument " "1"" of type '" "Matf const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr< const Matf > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr< const Matf > * >(argp1);
      arg1 = const_cast< Matf * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr< const Matf > * >(argp1);
      arg1 = const_cast< Matf * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Matf_extract" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = ((Matf const *)arg1)->extract(arg2);
  {
    std::tr1::shared_ptr<  Matf > *smartresult = new std::tr1::shared_ptr<  Matf >(new Matf((Matf &)result));
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matf___add__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Matf *arg1 = (Matf *) 0 ;
  Matf *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Matf const > tempshared1 ;
  std::tr1::shared_ptr< Matf const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::tr1::shared_ptr< Matf const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Matf result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Matf___add__",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matf___add__" "', argument " "1"" of type '" "Matf const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr< const Matf > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr< const Matf > * >(argp1);
      arg1 = const_cast< Matf * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr< const Matf > * >(argp1);
      arg1 = const_cast< Matf * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Matf___add__" "', argument " "2"" of type '" "Matf const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Matf___add__" "', argument " "2"" of type '" "Matf const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< std::tr1::shared_ptr< const Matf > * >(argp2);
      delete reinterpret_cast< std::tr1::shared_ptr< const Matf > * >(argp2);
      arg2 = const_cast< Matf * >(tempshared2.get());
    } else {
      arg2 = const_cast< Matf * >(reinterpret_cast< std::tr1::shared_ptr< const Matf > * >(argp2)->get());
    }
  }
  result = ((Matf const *)arg1)->operator +((Matf const &)*arg2);
  {
    std::tr1::shared_ptr<  Matf > *smartresult = new std::tr1::shared_ptr<  Matf >(new Matf((Matf &)result));
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matf___sub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Matf *arg1 = (Matf *) 0 ;
  Matf *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Matf const > tempshared1 ;
  std::tr1::shared_ptr< Matf const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::tr1::shared_ptr< Matf const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Matf result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Matf___sub__",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matf___sub__" "', argument " "1"" of type '" "Matf const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr< const Matf > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr< const Matf > * >(argp1);
      arg1 = const_cast< Matf * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr< const Matf > * >(argp1);
      arg1 = const_cast< Matf * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Matf___sub__" "', argument " "2"" of type '" "Matf const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Matf___sub__" "', argument " "2"" of type '" "Matf const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< std::tr1::shared_ptr< const Matf > * >(argp2);
      delete reinterpret_cast< std::tr1::shared_ptr< const Matf > * >(argp2);
      arg2 = const_cast< Matf * >(tempshared2.get());
    } else {
      arg2 = const_cast< Matf * >(reinterpret_cast< std::tr1::shared_ptr< const Matf > * >(argp2)->get());
    }
  }
  result = ((Matf const *)arg1)->operator -((Matf const &)*arg2);
  {
    std::tr1::shared_ptr<  Matf > *smartresult = new std::tr1::shared_ptr<  Matf >(new Matf((Matf &)result));
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matf___mul____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Matf *arg1 = (Matf *) 0 ;
  Matf *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Matf const > tempshared1 ;
  std::tr1::shared_ptr< Matf const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::tr1::shared_ptr< Matf const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Matf result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Matf___mul__",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matf___mul__" "', argument " "1"" of type '" "Matf const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr< const Matf > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr< const Matf > * >(argp1);
      arg1 = const_cast< Matf * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr< const Matf > * >(argp1);
      arg1 = const_cast< Matf * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Matf___mul__" "', argument " "2"" of type '" "Matf const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Matf___mul__" "', argument " "2"" of type '" "Matf const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< std::tr1::shared_ptr< const Matf > * >(argp2);
      delete reinterpret_cast< std::tr1::shared_ptr< const Matf > * >(argp2);
      arg2 = const_cast< Matf * >(tempshared2.get());
    } else {
      arg2 = const_cast< Matf * >(reinterpret_cast< std::tr1::shared_ptr< const Matf > * >(argp2)->get());
    }
  }
  result = ((Matf const *)arg1)->operator *((Matf const &)*arg2);
  {
    std::tr1::shared_ptr<  Matf > *smartresult = new std::tr1::shared_ptr<  Matf >(new Matf((Matf &)result));
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matf_scaleV(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vecf arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Matf result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Matf_scaleV",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Vecf,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matf_scaleV" "', argument " "1"" of type '" "Vecf""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Matf_scaleV" "', argument " "1"" of type '" "Vecf""'");
    } else {
      Vecf * temp = reinterpret_cast< Vecf * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  result = Matf::scaleV(arg1);
  {
    std::tr1::shared_ptr<  Matf > *smartresult = new std::tr1::shared_ptr<  Matf >(new Matf((Matf &)result));
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matf_scaleH(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vecf arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Matf result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Matf_scaleH",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Vecf,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matf_scaleH" "', argument " "1"" of type '" "Vecf""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Matf_scaleH" "', argument " "1"" of type '" "Vecf""'");
    } else {
      Vecf * temp = reinterpret_cast< Vecf * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  result = Matf::scaleH(arg1);
  {
    std::tr1::shared_ptr<  Matf > *smartresult = new std::tr1::shared_ptr<  Matf >(new Matf((Matf &)result));
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matf_translateV(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vecf arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Matf result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Matf_translateV",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Vecf,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matf_translateV" "', argument " "1"" of type '" "Vecf""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Matf_translateV" "', argument " "1"" of type '" "Vecf""'");
    } else {
      Vecf * temp = reinterpret_cast< Vecf * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  result = Matf::translateV(arg1);
  {
    std::tr1::shared_ptr<  Matf > *smartresult = new std::tr1::shared_ptr<  Matf >(new Matf((Matf &)result));
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matf_translateH(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vecf arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Matf result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Matf_translateH",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Vecf,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matf_translateH" "', argument " "1"" of type '" "Vecf""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Matf_translateH" "', argument " "1"" of type '" "Vecf""'");
    } else {
      Vecf * temp = reinterpret_cast< Vecf * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  result = Matf::translateH(arg1);
  {
    std::tr1::shared_ptr<  Matf > *smartresult = new std::tr1::shared_ptr<  Matf >(new Matf((Matf &)result));
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matf_rotateV(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  float arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Matf result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Matf_rotateV",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Matf_rotateV" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Matf_rotateV" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Matf_rotateV" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Matf_rotateV" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  result = Matf::rotateV(arg1,arg2,arg3,arg4);
  {
    std::tr1::shared_ptr<  Matf > *smartresult = new std::tr1::shared_ptr<  Matf >(new Matf((Matf &)result));
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matf_rotateH(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  float arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Matf result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Matf_rotateH",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Matf_rotateH" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Matf_rotateH" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Matf_rotateH" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Matf_rotateH" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  result = Matf::rotateH(arg1,arg2,arg3,arg4);
  {
    std::tr1::shared_ptr<  Matf > *smartresult = new std::tr1::shared_ptr<  Matf >(new Matf((Matf &)result));
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matf___mul____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Matf *arg1 = (Matf *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Matf > tempshared1 ;
  std::tr1::shared_ptr< Matf > *smartarg1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Matf result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Matf___mul__",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matf___mul__" "', argument " "1"" of type '" "Matf *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Matf > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Matf > * >(argp1);
      arg1 = const_cast< Matf * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Matf > * >(argp1);
      arg1 = const_cast< Matf * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Matf___mul__" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  result = (arg1)->operator *(arg2);
  {
    std::tr1::shared_ptr<  Matf > *smartresult = new std::tr1::shared_ptr<  Matf >(new Matf((Matf &)result));
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matf___mul____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Matf *arg1 = (Matf *) 0 ;
  Vecf *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Matf const > tempshared1 ;
  std::tr1::shared_ptr< Matf const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Vecf result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Matf___mul__",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matf___mul__" "', argument " "1"" of type '" "Matf const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr< const Matf > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr< const Matf > * >(argp1);
      arg1 = const_cast< Matf * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr< const Matf > * >(argp1);
      arg1 = const_cast< Matf * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vecf,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Matf___mul__" "', argument " "2"" of type '" "Vecf const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Matf___mul__" "', argument " "2"" of type '" "Vecf const &""'"); 
  }
  arg2 = reinterpret_cast< Vecf * >(argp2);
  result = ((Matf const *)arg1)->operator *((Vecf const &)*arg2);
  resultobj = SWIG_NewPointerObj((new Vecf(static_cast< const Vecf& >(result))), SWIGTYPE_p_Vecf, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matf___mul__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Matf___mul____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Vecf, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Matf___mul____SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Matf___mul____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Matf_invert(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Matf *arg1 = (Matf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Matf const > tempshared1 ;
  std::tr1::shared_ptr< Matf const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  Matf result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Matf_invert",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matf_invert" "', argument " "1"" of type '" "Matf const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr< const Matf > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr< const Matf > * >(argp1);
      arg1 = const_cast< Matf * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr< const Matf > * >(argp1);
      arg1 = const_cast< Matf * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((Matf const *)arg1)->invert();
  {
    std::tr1::shared_ptr<  Matf > *smartresult = new std::tr1::shared_ptr<  Matf >(new Matf((Matf &)result));
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matf_getProjectionMatrix(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  float *arg3 = (float *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Matf result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Matf_getProjectionMatrix",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Matf_getProjectionMatrix" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Matf_getProjectionMatrix" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Matf_getProjectionMatrix" "', argument " "3"" of type '" "float const *""'"); 
  }
  arg3 = reinterpret_cast< float * >(argp3);
  result = Matf::getProjectionMatrix(arg1,arg2,(float const *)arg3);
  {
    std::tr1::shared_ptr<  Matf > *smartresult = new std::tr1::shared_ptr<  Matf >(new Matf((Matf &)result));
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matf___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Matf *arg1 = (Matf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Matf const > tempshared1 ;
  std::tr1::shared_ptr< Matf const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Matf___str__",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matf___str__" "', argument " "1"" of type '" "Matf const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr< const Matf > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr< const Matf > * >(argp1);
      arg1 = const_cast< Matf * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr< const Matf > * >(argp1);
      arg1 = const_cast< Matf * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((Matf const *)arg1)->str();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matf___repr__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Matf *arg1 = (Matf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Matf const > tempshared1 ;
  std::tr1::shared_ptr< Matf const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Matf___repr__",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matf___repr__" "', argument " "1"" of type '" "Matf const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr< const Matf > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr< const Matf > * >(argp1);
      arg1 = const_cast< Matf * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr< const Matf > * >(argp1);
      arg1 = const_cast< Matf * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((Matf const *)arg1)->repr();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matf_SelfTest(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":Matf_SelfTest")) SWIG_fail;
  result = (int)Matf::SelfTest();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Matf_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_Ball3f_center_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Ball3f *arg1 = (Ball3f *) 0 ;
  Vec3f *arg2 = (Vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Ball3f_center_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Ball3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ball3f_center_set" "', argument " "1"" of type '" "Ball3f *""'"); 
  }
  arg1 = reinterpret_cast< Ball3f * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Vec3f, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Ball3f_center_set" "', argument " "2"" of type '" "Vec3f *""'"); 
  }
  arg2 = reinterpret_cast< Vec3f * >(argp2);
  if (arg1) (arg1)->center = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ball3f_center_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Ball3f *arg1 = (Ball3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Vec3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Ball3f_center_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Ball3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ball3f_center_get" "', argument " "1"" of type '" "Ball3f *""'"); 
  }
  arg1 = reinterpret_cast< Ball3f * >(argp1);
  result = (Vec3f *)& ((arg1)->center);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vec3f, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ball3f_radius_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Ball3f *arg1 = (Ball3f *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Ball3f_radius_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Ball3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ball3f_radius_set" "', argument " "1"" of type '" "Ball3f *""'"); 
  }
  arg1 = reinterpret_cast< Ball3f * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Ball3f_radius_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->radius = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ball3f_radius_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Ball3f *arg1 = (Ball3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Ball3f_radius_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Ball3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ball3f_radius_get" "', argument " "1"" of type '" "Ball3f *""'"); 
  }
  arg1 = reinterpret_cast< Ball3f * >(argp1);
  result = (float) ((arg1)->radius);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Ball3f__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Ball3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Ball3f")) SWIG_fail;
  result = (Ball3f *)new Ball3f();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Ball3f, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Ball3f__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Ball3f *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Ball3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Ball3f",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Ball3f,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Ball3f" "', argument " "1"" of type '" "Ball3f const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Ball3f" "', argument " "1"" of type '" "Ball3f const &""'"); 
  }
  arg1 = reinterpret_cast< Ball3f * >(argp1);
  result = (Ball3f *)new Ball3f((Ball3f const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Ball3f, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Ball3f__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  float arg1 ;
  Vec3f arg2 ;
  float val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Ball3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Ball3f",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Ball3f" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vec3f,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Ball3f" "', argument " "2"" of type '" "Vec3f""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Ball3f" "', argument " "2"" of type '" "Vec3f""'");
    } else {
      Vec3f * temp = reinterpret_cast< Vec3f * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (Ball3f *)new Ball3f(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Ball3f, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Ball3f(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Ball3f__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Ball3f, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Ball3f__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Vec3f, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_Ball3f__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Ball3f'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Ball3f()\n"
    "    Ball3f(Ball3f const &)\n"
    "    Ball3f(float,Vec3f)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ball3f_bestFittingBall(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float,std::allocator< float > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  Ball3f result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Ball3f_bestFittingBall",&obj0)) SWIG_fail;
  {
    std::vector<float,std::allocator< float > > *ptr = (std::vector<float,std::allocator< float > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ball3f_bestFittingBall" "', argument " "1"" of type '" "std::vector< float,std::allocator< float > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Ball3f_bestFittingBall" "', argument " "1"" of type '" "std::vector< float,std::allocator< float > > const &""'"); 
    }
    arg1 = ptr;
  }
  result = Ball3f::bestFittingBall((std::vector< float,std::allocator< float > > const &)*arg1);
  resultobj = SWIG_NewPointerObj((new Ball3f(static_cast< const Ball3f& >(result))), SWIGTYPE_p_Ball3f, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ball3f_isValid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Ball3f *arg1 = (Ball3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Ball3f_isValid",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Ball3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ball3f_isValid" "', argument " "1"" of type '" "Ball3f const *""'"); 
  }
  arg1 = reinterpret_cast< Ball3f * >(argp1);
  result = (bool)((Ball3f const *)arg1)->isValid();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ball3f_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Ball3f *arg1 = (Ball3f *) 0 ;
  Ball3f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Ball3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Ball3f_assign",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Ball3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ball3f_assign" "', argument " "1"" of type '" "Ball3f *""'"); 
  }
  arg1 = reinterpret_cast< Ball3f * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Ball3f,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Ball3f_assign" "', argument " "2"" of type '" "Ball3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Ball3f_assign" "', argument " "2"" of type '" "Ball3f const &""'"); 
  }
  arg2 = reinterpret_cast< Ball3f * >(argp2);
  result = (Ball3f *) &(arg1)->operator =((Ball3f const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Ball3f, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ball3f___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Ball3f *arg1 = (Ball3f *) 0 ;
  Ball3f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Ball3f___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Ball3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ball3f___eq__" "', argument " "1"" of type '" "Ball3f const *""'"); 
  }
  arg1 = reinterpret_cast< Ball3f * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Ball3f,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Ball3f___eq__" "', argument " "2"" of type '" "Ball3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Ball3f___eq__" "', argument " "2"" of type '" "Ball3f const &""'"); 
  }
  arg2 = reinterpret_cast< Ball3f * >(argp2);
  result = (bool)((Ball3f const *)arg1)->operator ==((Ball3f const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ball3f_fuzzyEqual(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Ball3f *arg1 = (Ball3f *) 0 ;
  Ball3f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Ball3f_fuzzyEqual",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Ball3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ball3f_fuzzyEqual" "', argument " "1"" of type '" "Ball3f const *""'"); 
  }
  arg1 = reinterpret_cast< Ball3f * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Ball3f,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Ball3f_fuzzyEqual" "', argument " "2"" of type '" "Ball3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Ball3f_fuzzyEqual" "', argument " "2"" of type '" "Ball3f const &""'"); 
  }
  arg2 = reinterpret_cast< Ball3f * >(argp2);
  result = (bool)((Ball3f const *)arg1)->fuzzyEqual((Ball3f const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ball3f_surface(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Ball3f *arg1 = (Ball3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Ball3f_surface",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Ball3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ball3f_surface" "', argument " "1"" of type '" "Ball3f const *""'"); 
  }
  arg1 = reinterpret_cast< Ball3f * >(argp1);
  result = (float)((Ball3f const *)arg1)->surface();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ball3f_volume(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Ball3f *arg1 = (Ball3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Ball3f_volume",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Ball3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ball3f_volume" "', argument " "1"" of type '" "Ball3f const *""'"); 
  }
  arg1 = reinterpret_cast< Ball3f * >(argp1);
  result = (float)((Ball3f const *)arg1)->volume();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ball3f___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Ball3f *arg1 = (Ball3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Ball3f___str__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Ball3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ball3f___str__" "', argument " "1"" of type '" "Ball3f const *""'"); 
  }
  arg1 = reinterpret_cast< Ball3f * >(argp1);
  result = ((Ball3f const *)arg1)->str();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ball3f___repr__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Ball3f *arg1 = (Ball3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Ball3f___repr__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Ball3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ball3f___repr__" "', argument " "1"" of type '" "Ball3f const *""'"); 
  }
  arg1 = reinterpret_cast< Ball3f * >(argp1);
  result = ((Ball3f const *)arg1)->repr();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ball3f_SelfTest(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":Ball3f_SelfTest")) SWIG_fail;
  result = (int)Ball3f::SelfTest();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Ball3f(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Ball3f *arg1 = (Ball3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Ball3f",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Ball3f, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Ball3f" "', argument " "1"" of type '" "Ball3f *""'"); 
  }
  arg1 = reinterpret_cast< Ball3f * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Ball3f_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Ball3f, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_Ballf_center_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Ballf *arg1 = (Ballf *) 0 ;
  Vecf *arg2 = (Vecf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Ballf_center_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Ballf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ballf_center_set" "', argument " "1"" of type '" "Ballf *""'"); 
  }
  arg1 = reinterpret_cast< Ballf * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Vecf, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Ballf_center_set" "', argument " "2"" of type '" "Vecf *""'"); 
  }
  arg2 = reinterpret_cast< Vecf * >(argp2);
  if (arg1) (arg1)->center = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ballf_center_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Ballf *arg1 = (Ballf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Vecf *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Ballf_center_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Ballf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ballf_center_get" "', argument " "1"" of type '" "Ballf *""'"); 
  }
  arg1 = reinterpret_cast< Ballf * >(argp1);
  result = (Vecf *)& ((arg1)->center);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vecf, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ballf_radius_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Ballf *arg1 = (Ballf *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Ballf_radius_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Ballf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ballf_radius_set" "', argument " "1"" of type '" "Ballf *""'"); 
  }
  arg1 = reinterpret_cast< Ballf * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Ballf_radius_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->radius = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ballf_radius_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Ballf *arg1 = (Ballf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Ballf_radius_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Ballf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ballf_radius_get" "', argument " "1"" of type '" "Ballf *""'"); 
  }
  arg1 = reinterpret_cast< Ballf * >(argp1);
  result = (float) ((arg1)->radius);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Ballf__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Ballf *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Ballf")) SWIG_fail;
  result = (Ballf *)new Ballf();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Ballf, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Ballf__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Ballf *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Ballf *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Ballf",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Ballf,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Ballf" "', argument " "1"" of type '" "Ballf const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Ballf" "', argument " "1"" of type '" "Ballf const &""'"); 
  }
  arg1 = reinterpret_cast< Ballf * >(argp1);
  result = (Ballf *)new Ballf((Ballf const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Ballf, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Ballf__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  float arg1 ;
  Vecf arg2 ;
  float val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Ballf *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Ballf",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Ballf" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vecf,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Ballf" "', argument " "2"" of type '" "Vecf""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Ballf" "', argument " "2"" of type '" "Vecf""'");
    } else {
      Vecf * temp = reinterpret_cast< Vecf * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (Ballf *)new Ballf(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Ballf, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Ballf(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Ballf__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Ballf, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Ballf__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Vecf, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_Ballf__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Ballf'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Ballf()\n"
    "    Ballf(Ballf const &)\n"
    "    Ballf(float,Vecf)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ballf_dim(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Ballf *arg1 = (Ballf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Ballf_dim",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Ballf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ballf_dim" "', argument " "1"" of type '" "Ballf const *""'"); 
  }
  arg1 = reinterpret_cast< Ballf * >(argp1);
  result = (int)((Ballf const *)arg1)->dim();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ballf_bestFittingBall(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  std::vector< float,std::allocator< float > > *arg2 = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Ballf result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Ballf_bestFittingBall",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Ballf_bestFittingBall" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    std::vector<float,std::allocator< float > > *ptr = (std::vector<float,std::allocator< float > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Ballf_bestFittingBall" "', argument " "2"" of type '" "std::vector< float,std::allocator< float > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Ballf_bestFittingBall" "', argument " "2"" of type '" "std::vector< float,std::allocator< float > > const &""'"); 
    }
    arg2 = ptr;
  }
  result = Ballf::bestFittingBall(arg1,(std::vector< float,std::allocator< float > > const &)*arg2);
  resultobj = SWIG_NewPointerObj((new Ballf(static_cast< const Ballf& >(result))), SWIGTYPE_p_Ballf, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ballf_isValid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Ballf *arg1 = (Ballf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Ballf_isValid",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Ballf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ballf_isValid" "', argument " "1"" of type '" "Ballf const *""'"); 
  }
  arg1 = reinterpret_cast< Ballf * >(argp1);
  result = (bool)((Ballf const *)arg1)->isValid();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ballf_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Ballf *arg1 = (Ballf *) 0 ;
  Ballf *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Ballf *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Ballf_assign",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Ballf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ballf_assign" "', argument " "1"" of type '" "Ballf *""'"); 
  }
  arg1 = reinterpret_cast< Ballf * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Ballf,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Ballf_assign" "', argument " "2"" of type '" "Ballf const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Ballf_assign" "', argument " "2"" of type '" "Ballf const &""'"); 
  }
  arg2 = reinterpret_cast< Ballf * >(argp2);
  result = (Ballf *) &(arg1)->operator =((Ballf const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Ballf, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ballf___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Ballf *arg1 = (Ballf *) 0 ;
  Ballf *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Ballf___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Ballf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ballf___eq__" "', argument " "1"" of type '" "Ballf const *""'"); 
  }
  arg1 = reinterpret_cast< Ballf * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Ballf,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Ballf___eq__" "', argument " "2"" of type '" "Ballf const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Ballf___eq__" "', argument " "2"" of type '" "Ballf const &""'"); 
  }
  arg2 = reinterpret_cast< Ballf * >(argp2);
  result = (bool)((Ballf const *)arg1)->operator ==((Ballf const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ballf_fuzzyEqual(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Ballf *arg1 = (Ballf *) 0 ;
  Ballf *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Ballf_fuzzyEqual",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Ballf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ballf_fuzzyEqual" "', argument " "1"" of type '" "Ballf const *""'"); 
  }
  arg1 = reinterpret_cast< Ballf * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Ballf,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Ballf_fuzzyEqual" "', argument " "2"" of type '" "Ballf const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Ballf_fuzzyEqual" "', argument " "2"" of type '" "Ballf const &""'"); 
  }
  arg2 = reinterpret_cast< Ballf * >(argp2);
  result = (bool)((Ballf const *)arg1)->fuzzyEqual((Ballf const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ballf___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Ballf *arg1 = (Ballf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Ballf___str__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Ballf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ballf___str__" "', argument " "1"" of type '" "Ballf const *""'"); 
  }
  arg1 = reinterpret_cast< Ballf * >(argp1);
  result = ((Ballf const *)arg1)->str();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ballf___repr__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Ballf *arg1 = (Ballf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Ballf___repr__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Ballf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ballf___repr__" "', argument " "1"" of type '" "Ballf const *""'"); 
  }
  arg1 = reinterpret_cast< Ballf * >(argp1);
  result = ((Ballf const *)arg1)->repr();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ballf_SelfTest(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":Ballf_SelfTest")) SWIG_fail;
  result = (int)Ballf::SelfTest();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Ballf(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Ballf *arg1 = (Ballf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Ballf",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Ballf, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Ballf" "', argument " "1"" of type '" "Ballf *""'"); 
  }
  arg1 = reinterpret_cast< Ballf * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Ballf_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Ballf, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_Box2i_p1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box2i *arg1 = (Box2i *) 0 ;
  Vec2i *arg2 = (Vec2i *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Box2i_p1_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box2i, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Box2i_p1_set" "', argument " "1"" of type '" "Box2i *""'"); 
  }
  arg1 = reinterpret_cast< Box2i * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Vec2i, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Box2i_p1_set" "', argument " "2"" of type '" "Vec2i *""'"); 
  }
  arg2 = reinterpret_cast< Vec2i * >(argp2);
  if (arg1) (arg1)->p1 = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Box2i_p1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box2i *arg1 = (Box2i *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Vec2i *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Box2i_p1_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box2i, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Box2i_p1_get" "', argument " "1"" of type '" "Box2i *""'"); 
  }
  arg1 = reinterpret_cast< Box2i * >(argp1);
  result = (Vec2i *)& ((arg1)->p1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vec2i, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Box2i_p2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box2i *arg1 = (Box2i *) 0 ;
  Vec2i *arg2 = (Vec2i *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Box2i_p2_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box2i, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Box2i_p2_set" "', argument " "1"" of type '" "Box2i *""'"); 
  }
  arg1 = reinterpret_cast< Box2i * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Vec2i, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Box2i_p2_set" "', argument " "2"" of type '" "Vec2i *""'"); 
  }
  arg2 = reinterpret_cast< Vec2i * >(argp2);
  if (arg1) (arg1)->p2 = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Box2i_p2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box2i *arg1 = (Box2i *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Vec2i *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Box2i_p2_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box2i, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Box2i_p2_get" "', argument " "1"" of type '" "Box2i *""'"); 
  }
  arg1 = reinterpret_cast< Box2i * >(argp1);
  result = (Vec2i *)& ((arg1)->p2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vec2i, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Box2i_align_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box2i *arg1 = (Box2i *) 0 ;
  unsigned char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Box2i_align_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box2i, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Box2i_align_set" "', argument " "1"" of type '" "Box2i *""'"); 
  }
  arg1 = reinterpret_cast< Box2i * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Box2i_align_set" "', argument " "2"" of type '" "unsigned char""'");
  } 
  arg2 = static_cast< unsigned char >(val2);
  if (arg1) (arg1)->align = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Box2i_align_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box2i *arg1 = (Box2i *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned char result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Box2i_align_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box2i, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Box2i_align_get" "', argument " "1"" of type '" "Box2i *""'"); 
  }
  arg1 = reinterpret_cast< Box2i * >(argp1);
  result = (unsigned char) ((arg1)->align);
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Box2i__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec2i *arg1 = 0 ;
  Vec2i *arg2 = 0 ;
  unsigned char arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned char val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Box2i *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_Box2i",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Vec2i,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Box2i" "', argument " "1"" of type '" "Vec2i const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Box2i" "', argument " "1"" of type '" "Vec2i const &""'"); 
  }
  arg1 = reinterpret_cast< Vec2i * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vec2i,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Box2i" "', argument " "2"" of type '" "Vec2i const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Box2i" "', argument " "2"" of type '" "Vec2i const &""'"); 
  }
  arg2 = reinterpret_cast< Vec2i * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_char(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Box2i" "', argument " "3"" of type '" "unsigned char""'");
  } 
  arg3 = static_cast< unsigned char >(val3);
  result = (Box2i *)new Box2i((Vec2i const &)*arg1,(Vec2i const &)*arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Box2i, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Box2i__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec2i *arg1 = 0 ;
  Vec2i *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Box2i *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Box2i",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Vec2i,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Box2i" "', argument " "1"" of type '" "Vec2i const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Box2i" "', argument " "1"" of type '" "Vec2i const &""'"); 
  }
  arg1 = reinterpret_cast< Vec2i * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vec2i,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Box2i" "', argument " "2"" of type '" "Vec2i const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Box2i" "', argument " "2"" of type '" "Vec2i const &""'"); 
  }
  arg2 = reinterpret_cast< Vec2i * >(argp2);
  result = (Box2i *)new Box2i((Vec2i const &)*arg1,(Vec2i const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Box2i, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Box2i(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Vec2i, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Vec2i, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_Box2i__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Vec2i, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Vec2i, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_Box2i__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Box2i'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Box2i(Vec2i const &,Vec2i const &,unsigned char)\n"
    "    Box2i(Vec2i const &,Vec2i const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Box2i_left(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box2i *arg1 = (Box2i *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Box2i_left",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box2i, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Box2i_left" "', argument " "1"" of type '" "Box2i const *""'"); 
  }
  arg1 = reinterpret_cast< Box2i * >(argp1);
  result = (int)((Box2i const *)arg1)->left();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Box2i_right(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box2i *arg1 = (Box2i *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Box2i_right",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box2i, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Box2i_right" "', argument " "1"" of type '" "Box2i const *""'"); 
  }
  arg1 = reinterpret_cast< Box2i * >(argp1);
  result = (int)((Box2i const *)arg1)->right();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Box2i_bottom(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box2i *arg1 = (Box2i *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Box2i_bottom",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box2i, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Box2i_bottom" "', argument " "1"" of type '" "Box2i const *""'"); 
  }
  arg1 = reinterpret_cast< Box2i * >(argp1);
  result = (int)((Box2i const *)arg1)->bottom();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Box2i_top(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box2i *arg1 = (Box2i *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Box2i_top",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box2i, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Box2i_top" "', argument " "1"" of type '" "Box2i const *""'"); 
  }
  arg1 = reinterpret_cast< Box2i * >(argp1);
  result = (int)((Box2i const *)arg1)->top();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Box2i_width(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box2i *arg1 = (Box2i *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Box2i_width",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box2i, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Box2i_width" "', argument " "1"" of type '" "Box2i const *""'"); 
  }
  arg1 = reinterpret_cast< Box2i * >(argp1);
  result = (int)((Box2i const *)arg1)->width();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Box2i_height(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box2i *arg1 = (Box2i *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Box2i_height",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box2i, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Box2i_height" "', argument " "1"" of type '" "Box2i const *""'"); 
  }
  arg1 = reinterpret_cast< Box2i * >(argp1);
  result = (int)((Box2i const *)arg1)->height();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Box2i_area(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box2i *arg1 = (Box2i *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Box2i_area",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box2i, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Box2i_area" "', argument " "1"" of type '" "Box2i const *""'"); 
  }
  arg1 = reinterpret_cast< Box2i * >(argp1);
  result = (int)((Box2i const *)arg1)->area();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Box2i_isValid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box2i *arg1 = (Box2i *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Box2i_isValid",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box2i, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Box2i_isValid" "', argument " "1"" of type '" "Box2i const *""'"); 
  }
  arg1 = reinterpret_cast< Box2i * >(argp1);
  result = (bool)((Box2i const *)arg1)->isValid();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Box2i_contains__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box2i *arg1 = (Box2i *) 0 ;
  Vec2i arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Box2i_contains",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box2i, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Box2i_contains" "', argument " "1"" of type '" "Box2i const *""'"); 
  }
  arg1 = reinterpret_cast< Box2i * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vec2i,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Box2i_contains" "', argument " "2"" of type '" "Vec2i const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Box2i_contains" "', argument " "2"" of type '" "Vec2i const""'");
    } else {
      Vec2i * temp = reinterpret_cast< Vec2i * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)((Box2i const *)arg1)->contains(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Box2i_contains__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box2i *arg1 = (Box2i *) 0 ;
  Box2i *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Box2i_contains",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box2i, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Box2i_contains" "', argument " "1"" of type '" "Box2i const *""'"); 
  }
  arg1 = reinterpret_cast< Box2i * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Box2i,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Box2i_contains" "', argument " "2"" of type '" "Box2i const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Box2i_contains" "', argument " "2"" of type '" "Box2i const &""'"); 
  }
  arg2 = reinterpret_cast< Box2i * >(argp2);
  result = (bool)((Box2i const *)arg1)->contains((Box2i const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Box2i_contains(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Box2i, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Vec2i, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Box2i_contains__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Box2i, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Box2i, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Box2i_contains__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Box2i_contains'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    contains(Box2i const *,Vec2i const)\n"
    "    contains(Box2i const *,Box2i const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Box2i___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box2i *arg1 = (Box2i *) 0 ;
  Box2i *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Box2i___lt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box2i, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Box2i___lt__" "', argument " "1"" of type '" "Box2i const *""'"); 
  }
  arg1 = reinterpret_cast< Box2i * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Box2i,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Box2i___lt__" "', argument " "2"" of type '" "Box2i const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Box2i___lt__" "', argument " "2"" of type '" "Box2i const &""'"); 
  }
  arg2 = reinterpret_cast< Box2i * >(argp2);
  result = (bool)((Box2i const *)arg1)->operator <((Box2i const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Box2i(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box2i *arg1 = (Box2i *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Box2i",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box2i, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Box2i" "', argument " "1"" of type '" "Box2i *""'"); 
  }
  arg1 = reinterpret_cast< Box2i * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Box2i_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Box2i, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_Box3f_Write(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box3f *arg1 = (Box3f *) 0 ;
  Archive *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Box3f_Write",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Box3f_Write" "', argument " "1"" of type '" "Box3f *""'"); 
  }
  arg1 = reinterpret_cast< Box3f * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Archive,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Box3f_Write" "', argument " "2"" of type '" "Archive &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Box3f_Write" "', argument " "2"" of type '" "Archive &""'"); 
  }
  arg2 = reinterpret_cast< Archive * >(argp2);
  (arg1)->Write(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Box3f_Read(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box3f *arg1 = (Box3f *) 0 ;
  Archive *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Box3f_Read",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Box3f_Read" "', argument " "1"" of type '" "Box3f *""'"); 
  }
  arg1 = reinterpret_cast< Box3f * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Archive,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Box3f_Read" "', argument " "2"" of type '" "Archive &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Box3f_Read" "', argument " "2"" of type '" "Archive &""'"); 
  }
  arg2 = reinterpret_cast< Archive * >(argp2);
  (arg1)->Read(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Box3f_p1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box3f *arg1 = (Box3f *) 0 ;
  Vec3f *arg2 = (Vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Box3f_p1_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Box3f_p1_set" "', argument " "1"" of type '" "Box3f *""'"); 
  }
  arg1 = reinterpret_cast< Box3f * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Vec3f, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Box3f_p1_set" "', argument " "2"" of type '" "Vec3f *""'"); 
  }
  arg2 = reinterpret_cast< Vec3f * >(argp2);
  if (arg1) (arg1)->p1 = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Box3f_p1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box3f *arg1 = (Box3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Vec3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Box3f_p1_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Box3f_p1_get" "', argument " "1"" of type '" "Box3f *""'"); 
  }
  arg1 = reinterpret_cast< Box3f * >(argp1);
  result = (Vec3f *)& ((arg1)->p1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vec3f, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Box3f_p2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box3f *arg1 = (Box3f *) 0 ;
  Vec3f *arg2 = (Vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Box3f_p2_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Box3f_p2_set" "', argument " "1"" of type '" "Box3f *""'"); 
  }
  arg1 = reinterpret_cast< Box3f * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Vec3f, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Box3f_p2_set" "', argument " "2"" of type '" "Vec3f *""'"); 
  }
  arg2 = reinterpret_cast< Vec3f * >(argp2);
  if (arg1) (arg1)->p2 = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Box3f_p2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box3f *arg1 = (Box3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Vec3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Box3f_p2_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Box3f_p2_get" "', argument " "1"" of type '" "Box3f *""'"); 
  }
  arg1 = reinterpret_cast< Box3f * >(argp1);
  result = (Vec3f *)& ((arg1)->p2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vec3f, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Box3f__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Box3f")) SWIG_fail;
  result = (Box3f *)new Box3f();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Box3f, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Box3f__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box3f *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Box3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Box3f",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Box3f,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Box3f" "', argument " "1"" of type '" "Box3f const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Box3f" "', argument " "1"" of type '" "Box3f const &""'"); 
  }
  arg1 = reinterpret_cast< Box3f * >(argp1);
  result = (Box3f *)new Box3f((Box3f const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Box3f, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Box3f__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec3f *arg1 = 0 ;
  Vec3f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Box3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Box3f",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Vec3f,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Box3f" "', argument " "1"" of type '" "Vec3f const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Box3f" "', argument " "1"" of type '" "Vec3f const &""'"); 
  }
  arg1 = reinterpret_cast< Vec3f * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vec3f,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Box3f" "', argument " "2"" of type '" "Vec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Box3f" "', argument " "2"" of type '" "Vec3f const &""'"); 
  }
  arg2 = reinterpret_cast< Vec3f * >(argp2);
  result = (Box3f *)new Box3f((Vec3f const &)*arg1,(Vec3f const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Box3f, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Box3f(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Box3f__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Box3f, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Box3f__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Vec3f, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Vec3f, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_Box3f__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Box3f'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Box3f()\n"
    "    Box3f(Box3f const &)\n"
    "    Box3f(Vec3f const &,Vec3f const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Box3f_buildFromCenter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec3f *arg1 = 0 ;
  Vec3f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Box3f result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Box3f_buildFromCenter",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Vec3f,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Box3f_buildFromCenter" "', argument " "1"" of type '" "Vec3f const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Box3f_buildFromCenter" "', argument " "1"" of type '" "Vec3f const &""'"); 
  }
  arg1 = reinterpret_cast< Vec3f * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vec3f,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Box3f_buildFromCenter" "', argument " "2"" of type '" "Vec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Box3f_buildFromCenter" "', argument " "2"" of type '" "Vec3f const &""'"); 
  }
  arg2 = reinterpret_cast< Vec3f * >(argp2);
  result = Box3f::buildFromCenter((Vec3f const &)*arg1,(Vec3f const &)*arg2);
  resultobj = SWIG_NewPointerObj((new Box3f(static_cast< const Box3f& >(result))), SWIGTYPE_p_Box3f, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Box3f_reset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box3f *arg1 = (Box3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Box3f_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Box3f_reset" "', argument " "1"" of type '" "Box3f *""'"); 
  }
  arg1 = reinterpret_cast< Box3f * >(argp1);
  (arg1)->reset();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Box3f_getPoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box3f *arg1 = (Box3f *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Vec3f result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Box3f_getPoint",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Box3f_getPoint" "', argument " "1"" of type '" "Box3f const *""'"); 
  }
  arg1 = reinterpret_cast< Box3f * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Box3f_getPoint" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = ((Box3f const *)arg1)->getPoint(arg2);
  resultobj = SWIG_NewPointerObj((new Vec3f(static_cast< const Vec3f& >(result))), SWIGTYPE_p_Vec3f, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Box3f_getPlane(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box3f *arg1 = (Box3f *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Plane4f result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Box3f_getPlane",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Box3f_getPlane" "', argument " "1"" of type '" "Box3f const *""'"); 
  }
  arg1 = reinterpret_cast< Box3f * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Box3f_getPlane" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = ((Box3f const *)arg1)->getPlane(arg2);
  resultobj = SWIG_NewPointerObj((new Plane4f(static_cast< const Plane4f& >(result))), SWIGTYPE_p_Plane4f, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Box3f_add__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box3f *arg1 = (Box3f *) 0 ;
  Vec3f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Box3f_add",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Box3f_add" "', argument " "1"" of type '" "Box3f *""'"); 
  }
  arg1 = reinterpret_cast< Box3f * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vec3f,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Box3f_add" "', argument " "2"" of type '" "Vec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Box3f_add" "', argument " "2"" of type '" "Vec3f const &""'"); 
  }
  arg2 = reinterpret_cast< Vec3f * >(argp2);
  (arg1)->add((Vec3f const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Box3f_add__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box3f *arg1 = (Box3f *) 0 ;
  Box3f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Box3f_add",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Box3f_add" "', argument " "1"" of type '" "Box3f *""'"); 
  }
  arg1 = reinterpret_cast< Box3f * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Box3f,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Box3f_add" "', argument " "2"" of type '" "Box3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Box3f_add" "', argument " "2"" of type '" "Box3f const &""'"); 
  }
  arg2 = reinterpret_cast< Box3f * >(argp2);
  (arg1)->add((Box3f const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Box3f_add(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Box3f, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Vec3f, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Box3f_add__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Box3f, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Box3f, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Box3f_add__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Box3f_add'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    add(Box3f *,Vec3f const &)\n"
    "    add(Box3f *,Box3f const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Box3f_isValid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box3f *arg1 = (Box3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Box3f_isValid",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Box3f_isValid" "', argument " "1"" of type '" "Box3f const *""'"); 
  }
  arg1 = reinterpret_cast< Box3f * >(argp1);
  result = (bool)((Box3f const *)arg1)->isValid();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Box3f_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box3f *arg1 = (Box3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Vec3f result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Box3f_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Box3f_size" "', argument " "1"" of type '" "Box3f const *""'"); 
  }
  arg1 = reinterpret_cast< Box3f * >(argp1);
  result = ((Box3f const *)arg1)->size();
  resultobj = SWIG_NewPointerObj((new Vec3f(static_cast< const Vec3f& >(result))), SWIGTYPE_p_Vec3f, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Box3f_minsize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box3f *arg1 = (Box3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Box3f_minsize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Box3f_minsize" "', argument " "1"" of type '" "Box3f const *""'"); 
  }
  arg1 = reinterpret_cast< Box3f * >(argp1);
  result = (float)((Box3f const *)arg1)->minsize();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Box3f_maxsize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box3f *arg1 = (Box3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Box3f_maxsize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Box3f_maxsize" "', argument " "1"" of type '" "Box3f const *""'"); 
  }
  arg1 = reinterpret_cast< Box3f * >(argp1);
  result = (float)((Box3f const *)arg1)->maxsize();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Box3f_translate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box3f *arg1 = (Box3f *) 0 ;
  Vec3f arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Box3f result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Box3f_translate",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Box3f_translate" "', argument " "1"" of type '" "Box3f const *""'"); 
  }
  arg1 = reinterpret_cast< Box3f * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vec3f,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Box3f_translate" "', argument " "2"" of type '" "Vec3f""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Box3f_translate" "', argument " "2"" of type '" "Vec3f""'");
    } else {
      Vec3f * temp = reinterpret_cast< Vec3f * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = ((Box3f const *)arg1)->translate(arg2);
  resultobj = SWIG_NewPointerObj((new Box3f(static_cast< const Box3f& >(result))), SWIGTYPE_p_Box3f, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Box3f_scale(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box3f *arg1 = (Box3f *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Box3f result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Box3f_scale",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Box3f_scale" "', argument " "1"" of type '" "Box3f const *""'"); 
  }
  arg1 = reinterpret_cast< Box3f * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Box3f_scale" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  result = ((Box3f const *)arg1)->scale(arg2);
  resultobj = SWIG_NewPointerObj((new Box3f(static_cast< const Box3f& >(result))), SWIGTYPE_p_Box3f, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Box3f_center(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box3f *arg1 = (Box3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Vec3f result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Box3f_center",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Box3f_center" "', argument " "1"" of type '" "Box3f const *""'"); 
  }
  arg1 = reinterpret_cast< Box3f * >(argp1);
  result = ((Box3f const *)arg1)->center();
  resultobj = SWIG_NewPointerObj((new Vec3f(static_cast< const Vec3f& >(result))), SWIGTYPE_p_Vec3f, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Box3f_contains__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box3f *arg1 = (Box3f *) 0 ;
  Vec3f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Box3f_contains",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Box3f_contains" "', argument " "1"" of type '" "Box3f const *""'"); 
  }
  arg1 = reinterpret_cast< Box3f * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vec3f,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Box3f_contains" "', argument " "2"" of type '" "Vec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Box3f_contains" "', argument " "2"" of type '" "Vec3f const &""'"); 
  }
  arg2 = reinterpret_cast< Vec3f * >(argp2);
  result = (bool)((Box3f const *)arg1)->contains((Vec3f const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Box3f_contains__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box3f *arg1 = (Box3f *) 0 ;
  Box3f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Box3f_contains",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Box3f_contains" "', argument " "1"" of type '" "Box3f const *""'"); 
  }
  arg1 = reinterpret_cast< Box3f * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Box3f,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Box3f_contains" "', argument " "2"" of type '" "Box3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Box3f_contains" "', argument " "2"" of type '" "Box3f const &""'"); 
  }
  arg2 = reinterpret_cast< Box3f * >(argp2);
  result = (bool)((Box3f const *)arg1)->contains((Box3f const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Box3f_contains(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Box3f, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Vec3f, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Box3f_contains__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Box3f, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Box3f, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Box3f_contains__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Box3f_contains'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    contains(Box3f const *,Vec3f const &)\n"
    "    contains(Box3f const *,Box3f const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Box3f_overlap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box3f *arg1 = (Box3f *) 0 ;
  Box3f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Box3f_overlap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Box3f_overlap" "', argument " "1"" of type '" "Box3f const *""'"); 
  }
  arg1 = reinterpret_cast< Box3f * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Box3f,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Box3f_overlap" "', argument " "2"" of type '" "Box3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Box3f_overlap" "', argument " "2"" of type '" "Box3f const &""'"); 
  }
  arg2 = reinterpret_cast< Box3f * >(argp2);
  result = (bool)((Box3f const *)arg1)->overlap((Box3f const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Box3f_intersection(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box3f *arg1 = (Box3f *) 0 ;
  Box3f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Box3f result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Box3f_intersection",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Box3f_intersection" "', argument " "1"" of type '" "Box3f *""'"); 
  }
  arg1 = reinterpret_cast< Box3f * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Box3f,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Box3f_intersection" "', argument " "2"" of type '" "Box3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Box3f_intersection" "', argument " "2"" of type '" "Box3f const &""'"); 
  }
  arg2 = reinterpret_cast< Box3f * >(argp2);
  result = (arg1)->intersection((Box3f const &)*arg2);
  resultobj = SWIG_NewPointerObj((new Box3f(static_cast< const Box3f& >(result))), SWIGTYPE_p_Box3f, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Box3f___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box3f *arg1 = (Box3f *) 0 ;
  Box3f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Box3f___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Box3f___eq__" "', argument " "1"" of type '" "Box3f const *""'"); 
  }
  arg1 = reinterpret_cast< Box3f * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Box3f,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Box3f___eq__" "', argument " "2"" of type '" "Box3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Box3f___eq__" "', argument " "2"" of type '" "Box3f const &""'"); 
  }
  arg2 = reinterpret_cast< Box3f * >(argp2);
  result = (bool)((Box3f const *)arg1)->operator ==((Box3f const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Box3f_fuzzyEqual__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box3f *arg1 = (Box3f *) 0 ;
  Box3f *arg2 = 0 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Box3f_fuzzyEqual",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Box3f_fuzzyEqual" "', argument " "1"" of type '" "Box3f const *""'"); 
  }
  arg1 = reinterpret_cast< Box3f * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Box3f,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Box3f_fuzzyEqual" "', argument " "2"" of type '" "Box3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Box3f_fuzzyEqual" "', argument " "2"" of type '" "Box3f const &""'"); 
  }
  arg2 = reinterpret_cast< Box3f * >(argp2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Box3f_fuzzyEqual" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  result = (bool)((Box3f const *)arg1)->fuzzyEqual((Box3f const &)*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Box3f_fuzzyEqual__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box3f *arg1 = (Box3f *) 0 ;
  Box3f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Box3f_fuzzyEqual",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Box3f_fuzzyEqual" "', argument " "1"" of type '" "Box3f const *""'"); 
  }
  arg1 = reinterpret_cast< Box3f * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Box3f,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Box3f_fuzzyEqual" "', argument " "2"" of type '" "Box3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Box3f_fuzzyEqual" "', argument " "2"" of type '" "Box3f const &""'"); 
  }
  arg2 = reinterpret_cast< Box3f * >(argp2);
  result = (bool)((Box3f const *)arg1)->fuzzyEqual((Box3f const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Box3f_fuzzyEqual(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Box3f, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Box3f, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Box3f_fuzzyEqual__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Box3f, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Box3f, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Box3f_fuzzyEqual__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Box3f_fuzzyEqual'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fuzzyEqual(Box3f const *,Box3f const &,float)\n"
    "    fuzzyEqual(Box3f const *,Box3f const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Box3f_surface(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box3f *arg1 = (Box3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Box3f_surface",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Box3f_surface" "', argument " "1"" of type '" "Box3f const *""'"); 
  }
  arg1 = reinterpret_cast< Box3f * >(argp1);
  result = (float)((Box3f const *)arg1)->surface();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Box3f_volume(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box3f *arg1 = (Box3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Box3f_volume",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Box3f_volume" "', argument " "1"" of type '" "Box3f const *""'"); 
  }
  arg1 = reinterpret_cast< Box3f * >(argp1);
  result = (float)((Box3f const *)arg1)->volume();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Box3f___repr__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box3f *arg1 = (Box3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Box3f___repr__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Box3f___repr__" "', argument " "1"" of type '" "Box3f const *""'"); 
  }
  arg1 = reinterpret_cast< Box3f * >(argp1);
  result = ((Box3f const *)arg1)->repr();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Box3f___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box3f *arg1 = (Box3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Box3f___str__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Box3f___str__" "', argument " "1"" of type '" "Box3f const *""'"); 
  }
  arg1 = reinterpret_cast< Box3f * >(argp1);
  result = ((Box3f const *)arg1)->str();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Box3f_SelfTest(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":Box3f_SelfTest")) SWIG_fail;
  result = (int)Box3f::SelfTest();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Box3f(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box3f *arg1 = (Box3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Box3f",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box3f, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Box3f" "', argument " "1"" of type '" "Box3f *""'"); 
  }
  arg1 = reinterpret_cast< Box3f * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Box3f_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Box3f, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_Boxf_p1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Boxf *arg1 = (Boxf *) 0 ;
  Vecf *arg2 = (Vecf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Boxf_p1_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Boxf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Boxf_p1_set" "', argument " "1"" of type '" "Boxf *""'"); 
  }
  arg1 = reinterpret_cast< Boxf * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Vecf, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Boxf_p1_set" "', argument " "2"" of type '" "Vecf *""'"); 
  }
  arg2 = reinterpret_cast< Vecf * >(argp2);
  if (arg1) (arg1)->p1 = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Boxf_p1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Boxf *arg1 = (Boxf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Vecf *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Boxf_p1_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Boxf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Boxf_p1_get" "', argument " "1"" of type '" "Boxf *""'"); 
  }
  arg1 = reinterpret_cast< Boxf * >(argp1);
  result = (Vecf *)& ((arg1)->p1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vecf, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Boxf_p2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Boxf *arg1 = (Boxf *) 0 ;
  Vecf *arg2 = (Vecf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Boxf_p2_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Boxf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Boxf_p2_set" "', argument " "1"" of type '" "Boxf *""'"); 
  }
  arg1 = reinterpret_cast< Boxf * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Vecf, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Boxf_p2_set" "', argument " "2"" of type '" "Vecf *""'"); 
  }
  arg2 = reinterpret_cast< Vecf * >(argp2);
  if (arg1) (arg1)->p2 = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Boxf_p2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Boxf *arg1 = (Boxf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Vecf *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Boxf_p2_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Boxf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Boxf_p2_get" "', argument " "1"" of type '" "Boxf *""'"); 
  }
  arg1 = reinterpret_cast< Boxf * >(argp1);
  result = (Vecf *)& ((arg1)->p2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vecf, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Boxf__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Boxf *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Boxf")) SWIG_fail;
  result = (Boxf *)new Boxf();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Boxf, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Boxf__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Boxf *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Boxf *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Boxf",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Boxf,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Boxf" "', argument " "1"" of type '" "Boxf const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Boxf" "', argument " "1"" of type '" "Boxf const &""'"); 
  }
  arg1 = reinterpret_cast< Boxf * >(argp1);
  result = (Boxf *)new Boxf((Boxf const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Boxf, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Boxf__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  Boxf *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Boxf",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Boxf" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = (Boxf *)new Boxf(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Boxf, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Boxf__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vecf arg1 ;
  Vecf arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Boxf *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Boxf",&obj0,&obj1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Vecf,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Boxf" "', argument " "1"" of type '" "Vecf""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Boxf" "', argument " "1"" of type '" "Vecf""'");
    } else {
      Vecf * temp = reinterpret_cast< Vecf * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vecf,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Boxf" "', argument " "2"" of type '" "Vecf""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Boxf" "', argument " "2"" of type '" "Vecf""'");
    } else {
      Vecf * temp = reinterpret_cast< Vecf * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (Boxf *)new Boxf(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Boxf, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Boxf__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  float arg2 ;
  float arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Boxf *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_Boxf",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Boxf" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Boxf" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Boxf" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  result = (Boxf *)new Boxf(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Boxf, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Boxf(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Boxf__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Boxf, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Boxf__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Boxf__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Vecf, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Vecf, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_Boxf__SWIG_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_Boxf__SWIG_4(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Boxf'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Boxf()\n"
    "    Boxf(Boxf const &)\n"
    "    Boxf(int)\n"
    "    Boxf(Vecf,Vecf)\n"
    "    Boxf(int,float,float)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Boxf_reset__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Boxf *arg1 = (Boxf *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Boxf_reset",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Boxf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Boxf_reset" "', argument " "1"" of type '" "Boxf *""'"); 
  }
  arg1 = reinterpret_cast< Boxf * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Boxf_reset" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->reset(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Boxf_reset__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Boxf *arg1 = (Boxf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Boxf_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Boxf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Boxf_reset" "', argument " "1"" of type '" "Boxf *""'"); 
  }
  arg1 = reinterpret_cast< Boxf * >(argp1);
  (arg1)->reset();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Boxf_reset(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Boxf, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Boxf_reset__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Boxf, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Boxf_reset__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Boxf_reset'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    reset(Boxf *,int)\n"
    "    reset(Boxf *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Boxf_add__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Boxf *arg1 = (Boxf *) 0 ;
  Vecf *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Boxf_add",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Boxf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Boxf_add" "', argument " "1"" of type '" "Boxf *""'"); 
  }
  arg1 = reinterpret_cast< Boxf * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vecf,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Boxf_add" "', argument " "2"" of type '" "Vecf const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Boxf_add" "', argument " "2"" of type '" "Vecf const &""'"); 
  }
  arg2 = reinterpret_cast< Vecf * >(argp2);
  (arg1)->add((Vecf const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Boxf_add__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Boxf *arg1 = (Boxf *) 0 ;
  Boxf *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Boxf_add",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Boxf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Boxf_add" "', argument " "1"" of type '" "Boxf *""'"); 
  }
  arg1 = reinterpret_cast< Boxf * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Boxf,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Boxf_add" "', argument " "2"" of type '" "Boxf const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Boxf_add" "', argument " "2"" of type '" "Boxf const &""'"); 
  }
  arg2 = reinterpret_cast< Boxf * >(argp2);
  (arg1)->add((Boxf const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Boxf_add(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Boxf, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Vecf, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Boxf_add__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Boxf, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Boxf, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Boxf_add__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Boxf_add'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    add(Boxf *,Vecf const &)\n"
    "    add(Boxf *,Boxf const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Boxf_isValid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Boxf *arg1 = (Boxf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Boxf_isValid",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Boxf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Boxf_isValid" "', argument " "1"" of type '" "Boxf const *""'"); 
  }
  arg1 = reinterpret_cast< Boxf * >(argp1);
  result = (bool)((Boxf const *)arg1)->isValid();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Boxf_center(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Boxf *arg1 = (Boxf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Vecf result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Boxf_center",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Boxf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Boxf_center" "', argument " "1"" of type '" "Boxf const *""'"); 
  }
  arg1 = reinterpret_cast< Boxf * >(argp1);
  result = ((Boxf const *)arg1)->center();
  resultobj = SWIG_NewPointerObj((new Vecf(static_cast< const Vecf& >(result))), SWIGTYPE_p_Vecf, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Boxf_dim(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Boxf *arg1 = (Boxf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Boxf_dim",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Boxf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Boxf_dim" "', argument " "1"" of type '" "Boxf const *""'"); 
  }
  arg1 = reinterpret_cast< Boxf * >(argp1);
  result = (int)((Boxf const *)arg1)->dim();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Boxf_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Boxf *arg1 = (Boxf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Vecf result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Boxf_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Boxf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Boxf_size" "', argument " "1"" of type '" "Boxf const *""'"); 
  }
  arg1 = reinterpret_cast< Boxf * >(argp1);
  result = ((Boxf const *)arg1)->size();
  resultobj = SWIG_NewPointerObj((new Vecf(static_cast< const Vecf& >(result))), SWIGTYPE_p_Vecf, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Boxf_minsizeidx(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Boxf *arg1 = (Boxf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Boxf_minsizeidx",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Boxf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Boxf_minsizeidx" "', argument " "1"" of type '" "Boxf const *""'"); 
  }
  arg1 = reinterpret_cast< Boxf * >(argp1);
  result = (int)((Boxf const *)arg1)->minsizeidx();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Boxf_maxsizeidx(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Boxf *arg1 = (Boxf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Boxf_maxsizeidx",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Boxf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Boxf_maxsizeidx" "', argument " "1"" of type '" "Boxf const *""'"); 
  }
  arg1 = reinterpret_cast< Boxf * >(argp1);
  result = (int)((Boxf const *)arg1)->maxsizeidx();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Boxf_minsize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Boxf *arg1 = (Boxf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Boxf_minsize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Boxf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Boxf_minsize" "', argument " "1"" of type '" "Boxf const *""'"); 
  }
  arg1 = reinterpret_cast< Boxf * >(argp1);
  result = (float)((Boxf const *)arg1)->minsize();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Boxf_maxsize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Boxf *arg1 = (Boxf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Boxf_maxsize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Boxf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Boxf_maxsize" "', argument " "1"" of type '" "Boxf const *""'"); 
  }
  arg1 = reinterpret_cast< Boxf * >(argp1);
  result = (float)((Boxf const *)arg1)->maxsize();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Boxf___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Boxf *arg1 = (Boxf *) 0 ;
  Boxf *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Boxf___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Boxf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Boxf___eq__" "', argument " "1"" of type '" "Boxf const *""'"); 
  }
  arg1 = reinterpret_cast< Boxf * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Boxf,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Boxf___eq__" "', argument " "2"" of type '" "Boxf const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Boxf___eq__" "', argument " "2"" of type '" "Boxf const &""'"); 
  }
  arg2 = reinterpret_cast< Boxf * >(argp2);
  result = (bool)((Boxf const *)arg1)->operator ==((Boxf const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Boxf_fuzzyEqual__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Boxf *arg1 = (Boxf *) 0 ;
  Boxf *arg2 = 0 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Boxf_fuzzyEqual",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Boxf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Boxf_fuzzyEqual" "', argument " "1"" of type '" "Boxf const *""'"); 
  }
  arg1 = reinterpret_cast< Boxf * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Boxf,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Boxf_fuzzyEqual" "', argument " "2"" of type '" "Boxf const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Boxf_fuzzyEqual" "', argument " "2"" of type '" "Boxf const &""'"); 
  }
  arg2 = reinterpret_cast< Boxf * >(argp2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Boxf_fuzzyEqual" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  result = (bool)((Boxf const *)arg1)->fuzzyEqual((Boxf const &)*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Boxf_fuzzyEqual__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Boxf *arg1 = (Boxf *) 0 ;
  Boxf *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Boxf_fuzzyEqual",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Boxf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Boxf_fuzzyEqual" "', argument " "1"" of type '" "Boxf const *""'"); 
  }
  arg1 = reinterpret_cast< Boxf * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Boxf,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Boxf_fuzzyEqual" "', argument " "2"" of type '" "Boxf const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Boxf_fuzzyEqual" "', argument " "2"" of type '" "Boxf const &""'"); 
  }
  arg2 = reinterpret_cast< Boxf * >(argp2);
  result = (bool)((Boxf const *)arg1)->fuzzyEqual((Boxf const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Boxf_fuzzyEqual(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Boxf, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Boxf, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Boxf_fuzzyEqual__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Boxf, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Boxf, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Boxf_fuzzyEqual__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Boxf_fuzzyEqual'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fuzzyEqual(Boxf const *,Boxf const &,float)\n"
    "    fuzzyEqual(Boxf const *,Boxf const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Boxf_scale(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Boxf *arg1 = (Boxf *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Boxf result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Boxf_scale",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Boxf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Boxf_scale" "', argument " "1"" of type '" "Boxf const *""'"); 
  }
  arg1 = reinterpret_cast< Boxf * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Boxf_scale" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  result = ((Boxf const *)arg1)->scale(arg2);
  resultobj = SWIG_NewPointerObj((new Boxf(static_cast< const Boxf& >(result))), SWIGTYPE_p_Boxf, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Boxf_volume(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Boxf *arg1 = (Boxf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Boxf_volume",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Boxf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Boxf_volume" "', argument " "1"" of type '" "Boxf const *""'"); 
  }
  arg1 = reinterpret_cast< Boxf * >(argp1);
  result = (float)((Boxf const *)arg1)->volume();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Boxf_overlap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Boxf *arg1 = (Boxf *) 0 ;
  Boxf *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Boxf_overlap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Boxf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Boxf_overlap" "', argument " "1"" of type '" "Boxf const *""'"); 
  }
  arg1 = reinterpret_cast< Boxf * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Boxf,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Boxf_overlap" "', argument " "2"" of type '" "Boxf const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Boxf_overlap" "', argument " "2"" of type '" "Boxf const &""'"); 
  }
  arg2 = reinterpret_cast< Boxf * >(argp2);
  result = (bool)((Boxf const *)arg1)->overlap((Boxf const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Boxf_contains(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Boxf *arg1 = (Boxf *) 0 ;
  Vecf *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Boxf_contains",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Boxf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Boxf_contains" "', argument " "1"" of type '" "Boxf const *""'"); 
  }
  arg1 = reinterpret_cast< Boxf * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vecf,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Boxf_contains" "', argument " "2"" of type '" "Vecf const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Boxf_contains" "', argument " "2"" of type '" "Vecf const &""'"); 
  }
  arg2 = reinterpret_cast< Vecf * >(argp2);
  result = (bool)((Boxf const *)arg1)->contains((Vecf const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Boxf_toBox3f(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Boxf *arg1 = (Boxf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Box3f result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Boxf_toBox3f",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Boxf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Boxf_toBox3f" "', argument " "1"" of type '" "Boxf const *""'"); 
  }
  arg1 = reinterpret_cast< Boxf * >(argp1);
  result = ((Boxf const *)arg1)->toBox3f();
  resultobj = SWIG_NewPointerObj((new Box3f(static_cast< const Box3f& >(result))), SWIGTYPE_p_Box3f, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Boxf_isAbove(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Boxf *arg1 = (Boxf *) 0 ;
  Planef *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Boxf_isAbove",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Boxf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Boxf_isAbove" "', argument " "1"" of type '" "Boxf const *""'"); 
  }
  arg1 = reinterpret_cast< Boxf * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Planef,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Boxf_isAbove" "', argument " "2"" of type '" "Planef const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Boxf_isAbove" "', argument " "2"" of type '" "Planef const &""'"); 
  }
  arg2 = reinterpret_cast< Planef * >(argp2);
  result = (bool)((Boxf const *)arg1)->isAbove((Planef const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Boxf_isBelow(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Boxf *arg1 = (Boxf *) 0 ;
  Planef *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Boxf_isBelow",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Boxf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Boxf_isBelow" "', argument " "1"" of type '" "Boxf const *""'"); 
  }
  arg1 = reinterpret_cast< Boxf * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Planef,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Boxf_isBelow" "', argument " "2"" of type '" "Planef const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Boxf_isBelow" "', argument " "2"" of type '" "Planef const &""'"); 
  }
  arg2 = reinterpret_cast< Planef * >(argp2);
  result = (bool)((Boxf const *)arg1)->isBelow((Planef const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Boxf___repr__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Boxf *arg1 = (Boxf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Boxf___repr__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Boxf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Boxf___repr__" "', argument " "1"" of type '" "Boxf const *""'"); 
  }
  arg1 = reinterpret_cast< Boxf * >(argp1);
  result = ((Boxf const *)arg1)->repr();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Boxf___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Boxf *arg1 = (Boxf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Boxf___str__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Boxf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Boxf___str__" "', argument " "1"" of type '" "Boxf const *""'"); 
  }
  arg1 = reinterpret_cast< Boxf * >(argp1);
  result = ((Boxf const *)arg1)->str();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Boxf_SelfTest(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":Boxf_SelfTest")) SWIG_fail;
  result = (int)Boxf::SelfTest();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Boxf(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Boxf *arg1 = (Boxf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Boxf",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Boxf, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Boxf" "', argument " "1"" of type '" "Boxf *""'"); 
  }
  arg1 = reinterpret_cast< Boxf * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Boxf_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Boxf, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_Ray3f_origin_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Ray3f *arg1 = (Ray3f *) 0 ;
  Vec3f *arg2 = (Vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Ray3f_origin_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Ray3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ray3f_origin_set" "', argument " "1"" of type '" "Ray3f *""'"); 
  }
  arg1 = reinterpret_cast< Ray3f * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Vec3f, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Ray3f_origin_set" "', argument " "2"" of type '" "Vec3f *""'"); 
  }
  arg2 = reinterpret_cast< Vec3f * >(argp2);
  if (arg1) (arg1)->origin = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ray3f_origin_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Ray3f *arg1 = (Ray3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Vec3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Ray3f_origin_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Ray3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ray3f_origin_get" "', argument " "1"" of type '" "Ray3f *""'"); 
  }
  arg1 = reinterpret_cast< Ray3f * >(argp1);
  result = (Vec3f *)& ((arg1)->origin);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vec3f, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ray3f_dir_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Ray3f *arg1 = (Ray3f *) 0 ;
  Vec3f *arg2 = (Vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Ray3f_dir_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Ray3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ray3f_dir_set" "', argument " "1"" of type '" "Ray3f *""'"); 
  }
  arg1 = reinterpret_cast< Ray3f * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Vec3f, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Ray3f_dir_set" "', argument " "2"" of type '" "Vec3f *""'"); 
  }
  arg2 = reinterpret_cast< Vec3f * >(argp2);
  if (arg1) (arg1)->dir = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ray3f_dir_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Ray3f *arg1 = (Ray3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Vec3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Ray3f_dir_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Ray3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ray3f_dir_get" "', argument " "1"" of type '" "Ray3f *""'"); 
  }
  arg1 = reinterpret_cast< Ray3f * >(argp1);
  result = (Vec3f *)& ((arg1)->dir);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vec3f, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Ray3f__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Ray3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Ray3f")) SWIG_fail;
  result = (Ray3f *)new Ray3f();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Ray3f, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Ray3f__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec3f arg1 ;
  Vec3f arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Ray3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Ray3f",&obj0,&obj1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Vec3f,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Ray3f" "', argument " "1"" of type '" "Vec3f""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Ray3f" "', argument " "1"" of type '" "Vec3f""'");
    } else {
      Vec3f * temp = reinterpret_cast< Vec3f * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vec3f,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Ray3f" "', argument " "2"" of type '" "Vec3f""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Ray3f" "', argument " "2"" of type '" "Vec3f""'");
    } else {
      Vec3f * temp = reinterpret_cast< Vec3f * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (Ray3f *)new Ray3f(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Ray3f, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Ray3f(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Ray3f__SWIG_0(self, args);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Vec3f, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Vec3f, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_Ray3f__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Ray3f'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Ray3f()\n"
    "    Ray3f(Vec3f,Vec3f)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ray3f_getPoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Ray3f *arg1 = (Ray3f *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Vec3f result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Ray3f_getPoint",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Ray3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ray3f_getPoint" "', argument " "1"" of type '" "Ray3f const *""'"); 
  }
  arg1 = reinterpret_cast< Ray3f * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Ray3f_getPoint" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  result = ((Ray3f const *)arg1)->getPoint(arg2);
  resultobj = SWIG_NewPointerObj((new Vec3f(static_cast< const Vec3f& >(result))), SWIGTYPE_p_Vec3f, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ray3f_setOrigin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Ray3f *arg1 = (Ray3f *) 0 ;
  Vec3f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Ray3f_setOrigin",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Ray3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ray3f_setOrigin" "', argument " "1"" of type '" "Ray3f *""'"); 
  }
  arg1 = reinterpret_cast< Ray3f * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vec3f,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Ray3f_setOrigin" "', argument " "2"" of type '" "Vec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Ray3f_setOrigin" "', argument " "2"" of type '" "Vec3f const &""'"); 
  }
  arg2 = reinterpret_cast< Vec3f * >(argp2);
  (arg1)->setOrigin((Vec3f const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ray3f_setDir__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Ray3f *arg1 = (Ray3f *) 0 ;
  Vec3f *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Ray3f_setDir",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Ray3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ray3f_setDir" "', argument " "1"" of type '" "Ray3f *""'"); 
  }
  arg1 = reinterpret_cast< Ray3f * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vec3f,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Ray3f_setDir" "', argument " "2"" of type '" "Vec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Ray3f_setDir" "', argument " "2"" of type '" "Vec3f const &""'"); 
  }
  arg2 = reinterpret_cast< Vec3f * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Ray3f_setDir" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  (arg1)->setDir((Vec3f const &)*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ray3f_setDir__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Ray3f *arg1 = (Ray3f *) 0 ;
  Vec3f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Ray3f_setDir",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Ray3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ray3f_setDir" "', argument " "1"" of type '" "Ray3f *""'"); 
  }
  arg1 = reinterpret_cast< Ray3f * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vec3f,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Ray3f_setDir" "', argument " "2"" of type '" "Vec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Ray3f_setDir" "', argument " "2"" of type '" "Vec3f const &""'"); 
  }
  arg2 = reinterpret_cast< Vec3f * >(argp2);
  (arg1)->setDir((Vec3f const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ray3f_setDir(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Ray3f, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Vec3f, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Ray3f_setDir__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Ray3f, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Vec3f, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Ray3f_setDir__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Ray3f_setDir'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    setDir(Ray3f *,Vec3f const &,bool)\n"
    "    setDir(Ray3f *,Vec3f const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ray3f_intersection(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Ray3f *arg1 = (Ray3f *) 0 ;
  Plane4f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Vec3f result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Ray3f_intersection",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Ray3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ray3f_intersection" "', argument " "1"" of type '" "Ray3f const *""'"); 
  }
  arg1 = reinterpret_cast< Ray3f * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Plane4f,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Ray3f_intersection" "', argument " "2"" of type '" "Plane4f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Ray3f_intersection" "', argument " "2"" of type '" "Plane4f const &""'"); 
  }
  arg2 = reinterpret_cast< Plane4f * >(argp2);
  result = ((Ray3f const *)arg1)->intersection((Plane4f const &)*arg2);
  resultobj = SWIG_NewPointerObj((new Vec3f(static_cast< const Vec3f& >(result))), SWIGTYPE_p_Vec3f, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ray3f___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Ray3f *arg1 = (Ray3f *) 0 ;
  Ray3f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Ray3f___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Ray3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ray3f___eq__" "', argument " "1"" of type '" "Ray3f const *""'"); 
  }
  arg1 = reinterpret_cast< Ray3f * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Ray3f,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Ray3f___eq__" "', argument " "2"" of type '" "Ray3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Ray3f___eq__" "', argument " "2"" of type '" "Ray3f const &""'"); 
  }
  arg2 = reinterpret_cast< Ray3f * >(argp2);
  result = (bool)((Ray3f const *)arg1)->operator ==((Ray3f const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ray3f___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Ray3f *arg1 = (Ray3f *) 0 ;
  Ray3f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Ray3f___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Ray3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ray3f___ne__" "', argument " "1"" of type '" "Ray3f const *""'"); 
  }
  arg1 = reinterpret_cast< Ray3f * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Ray3f,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Ray3f___ne__" "', argument " "2"" of type '" "Ray3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Ray3f___ne__" "', argument " "2"" of type '" "Ray3f const &""'"); 
  }
  arg2 = reinterpret_cast< Ray3f * >(argp2);
  result = (bool)((Ray3f const *)arg1)->operator !=((Ray3f const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ray3f_intersectLine(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Ray3f *arg1 = (Ray3f *) 0 ;
  float *arg2 ;
  float *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Ray3f_intersectLine",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Ray3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ray3f_intersectLine" "', argument " "1"" of type '" "Ray3f *""'"); 
  }
  arg1 = reinterpret_cast< Ray3f * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Ray3f_intersectLine" "', argument " "2"" of type '" "float [2]""'"); 
  } 
  arg2 = reinterpret_cast< float * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Ray3f_intersectLine" "', argument " "3"" of type '" "float [2]""'"); 
  } 
  arg3 = reinterpret_cast< float * >(argp3);
  result = (float)(arg1)->intersectLine(arg2,arg3);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ray3f_intersectTriangle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Ray3f *arg1 = (Ray3f *) 0 ;
  Vec3f *arg2 = 0 ;
  Vec3f *arg3 = 0 ;
  Vec3f *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Ray3f_intersectTriangle",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Ray3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ray3f_intersectTriangle" "', argument " "1"" of type '" "Ray3f const *""'"); 
  }
  arg1 = reinterpret_cast< Ray3f * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vec3f,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Ray3f_intersectTriangle" "', argument " "2"" of type '" "Vec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Ray3f_intersectTriangle" "', argument " "2"" of type '" "Vec3f const &""'"); 
  }
  arg2 = reinterpret_cast< Vec3f * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Vec3f,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Ray3f_intersectTriangle" "', argument " "3"" of type '" "Vec3f const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Ray3f_intersectTriangle" "', argument " "3"" of type '" "Vec3f const &""'"); 
  }
  arg3 = reinterpret_cast< Vec3f * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_Vec3f,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Ray3f_intersectTriangle" "', argument " "4"" of type '" "Vec3f const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Ray3f_intersectTriangle" "', argument " "4"" of type '" "Vec3f const &""'"); 
  }
  arg4 = reinterpret_cast< Vec3f * >(argp4);
  result = (float)((Ray3f const *)arg1)->intersectTriangle((Vec3f const &)*arg2,(Vec3f const &)*arg3,(Vec3f const &)*arg4);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ray3f_intersectBox__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Ray3f *arg1 = (Ray3f *) 0 ;
  float *arg2 = 0 ;
  float *arg3 = 0 ;
  Box3f arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Ray3f_intersectBox",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Ray3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ray3f_intersectBox" "', argument " "1"" of type '" "Ray3f const *""'"); 
  }
  arg1 = reinterpret_cast< Ray3f * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_float,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Ray3f_intersectBox" "', argument " "2"" of type '" "float &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Ray3f_intersectBox" "', argument " "2"" of type '" "float &""'"); 
  }
  arg2 = reinterpret_cast< float * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_float,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Ray3f_intersectBox" "', argument " "3"" of type '" "float &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Ray3f_intersectBox" "', argument " "3"" of type '" "float &""'"); 
  }
  arg3 = reinterpret_cast< float * >(argp3);
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_Box3f,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Ray3f_intersectBox" "', argument " "4"" of type '" "Box3f""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Ray3f_intersectBox" "', argument " "4"" of type '" "Box3f""'");
    } else {
      Box3f * temp = reinterpret_cast< Box3f * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  result = (bool)((Ray3f const *)arg1)->intersectBox(*arg2,*arg3,arg4);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ray3f_intersectBox__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Ray3f *arg1 = (Ray3f *) 0 ;
  Box3f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Ray3f_intersectBox",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Ray3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ray3f_intersectBox" "', argument " "1"" of type '" "Ray3f const *""'"); 
  }
  arg1 = reinterpret_cast< Ray3f * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Box3f,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Ray3f_intersectBox" "', argument " "2"" of type '" "Box3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Ray3f_intersectBox" "', argument " "2"" of type '" "Box3f const &""'"); 
  }
  arg2 = reinterpret_cast< Box3f * >(argp2);
  result = ((Ray3f const *)arg1)->intersectBox((Box3f const &)*arg2);
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ray3f_intersectBox(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Ray3f, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Box3f, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Ray3f_intersectBox__SWIG_1(self, args);
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Ray3f, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_float, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_float, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_Box3f, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_Ray3f_intersectBox__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Ray3f_intersectBox'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    intersectBox(Ray3f const *,float &,float &,Box3f)\n"
    "    intersectBox(Ray3f const *,Box3f const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ray3f___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Ray3f *arg1 = (Ray3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Ray3f___str__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Ray3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ray3f___str__" "', argument " "1"" of type '" "Ray3f const *""'"); 
  }
  arg1 = reinterpret_cast< Ray3f * >(argp1);
  result = ((Ray3f const *)arg1)->str();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ray3f___repr__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Ray3f *arg1 = (Ray3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Ray3f___repr__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Ray3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ray3f___repr__" "', argument " "1"" of type '" "Ray3f const *""'"); 
  }
  arg1 = reinterpret_cast< Ray3f * >(argp1);
  result = ((Ray3f const *)arg1)->repr();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ray3f_SelfTest(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":Ray3f_SelfTest")) SWIG_fail;
  result = (int)Ray3f::SelfTest();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Ray3f(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Ray3f *arg1 = (Ray3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Ray3f",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Ray3f, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Ray3f" "', argument " "1"" of type '" "Ray3f *""'"); 
  }
  arg1 = reinterpret_cast< Ray3f * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Ray3f_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Ray3f, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_Rayf_origin_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Rayf *arg1 = (Rayf *) 0 ;
  Vecf *arg2 = (Vecf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Rayf_origin_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Rayf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rayf_origin_set" "', argument " "1"" of type '" "Rayf *""'"); 
  }
  arg1 = reinterpret_cast< Rayf * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Vecf, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rayf_origin_set" "', argument " "2"" of type '" "Vecf *""'"); 
  }
  arg2 = reinterpret_cast< Vecf * >(argp2);
  if (arg1) (arg1)->origin = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rayf_origin_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Rayf *arg1 = (Rayf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Vecf *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Rayf_origin_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Rayf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rayf_origin_get" "', argument " "1"" of type '" "Rayf *""'"); 
  }
  arg1 = reinterpret_cast< Rayf * >(argp1);
  result = (Vecf *)& ((arg1)->origin);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vecf, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rayf_dir_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Rayf *arg1 = (Rayf *) 0 ;
  Vecf *arg2 = (Vecf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Rayf_dir_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Rayf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rayf_dir_set" "', argument " "1"" of type '" "Rayf *""'"); 
  }
  arg1 = reinterpret_cast< Rayf * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Vecf, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rayf_dir_set" "', argument " "2"" of type '" "Vecf *""'"); 
  }
  arg2 = reinterpret_cast< Vecf * >(argp2);
  if (arg1) (arg1)->dir = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rayf_dir_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Rayf *arg1 = (Rayf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Vecf *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Rayf_dir_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Rayf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rayf_dir_get" "', argument " "1"" of type '" "Rayf *""'"); 
  }
  arg1 = reinterpret_cast< Rayf * >(argp1);
  result = (Vecf *)& ((arg1)->dir);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vecf, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Rayf__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Rayf *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Rayf")) SWIG_fail;
  result = (Rayf *)new Rayf();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Rayf, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Rayf__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vecf arg1 ;
  Vecf arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Rayf *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Rayf",&obj0,&obj1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Vecf,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Rayf" "', argument " "1"" of type '" "Vecf""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Rayf" "', argument " "1"" of type '" "Vecf""'");
    } else {
      Vecf * temp = reinterpret_cast< Vecf * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vecf,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Rayf" "', argument " "2"" of type '" "Vecf""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Rayf" "', argument " "2"" of type '" "Vecf""'");
    } else {
      Vecf * temp = reinterpret_cast< Vecf * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (Rayf *)new Rayf(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Rayf, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Rayf(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Rayf__SWIG_0(self, args);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Vecf, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Vecf, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_Rayf__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Rayf'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Rayf()\n"
    "    Rayf(Vecf,Vecf)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rayf_getPoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Rayf *arg1 = (Rayf *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Vecf result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Rayf_getPoint",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Rayf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rayf_getPoint" "', argument " "1"" of type '" "Rayf const *""'"); 
  }
  arg1 = reinterpret_cast< Rayf * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Rayf_getPoint" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  result = ((Rayf const *)arg1)->getPoint(arg2);
  resultobj = SWIG_NewPointerObj((new Vecf(static_cast< const Vecf& >(result))), SWIGTYPE_p_Vecf, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rayf_setOrigin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Rayf *arg1 = (Rayf *) 0 ;
  Vecf *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Rayf_setOrigin",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Rayf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rayf_setOrigin" "', argument " "1"" of type '" "Rayf *""'"); 
  }
  arg1 = reinterpret_cast< Rayf * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vecf,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rayf_setOrigin" "', argument " "2"" of type '" "Vecf const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rayf_setOrigin" "', argument " "2"" of type '" "Vecf const &""'"); 
  }
  arg2 = reinterpret_cast< Vecf * >(argp2);
  (arg1)->setOrigin((Vecf const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rayf_setDir__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Rayf *arg1 = (Rayf *) 0 ;
  Vecf arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Rayf_setDir",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Rayf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rayf_setDir" "', argument " "1"" of type '" "Rayf *""'"); 
  }
  arg1 = reinterpret_cast< Rayf * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vecf,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rayf_setDir" "', argument " "2"" of type '" "Vecf""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rayf_setDir" "', argument " "2"" of type '" "Vecf""'");
    } else {
      Vecf * temp = reinterpret_cast< Vecf * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Rayf_setDir" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  (arg1)->setDir(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rayf_setDir__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Rayf *arg1 = (Rayf *) 0 ;
  Vecf arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Rayf_setDir",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Rayf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rayf_setDir" "', argument " "1"" of type '" "Rayf *""'"); 
  }
  arg1 = reinterpret_cast< Rayf * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vecf,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rayf_setDir" "', argument " "2"" of type '" "Vecf""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rayf_setDir" "', argument " "2"" of type '" "Vecf""'");
    } else {
      Vecf * temp = reinterpret_cast< Vecf * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  (arg1)->setDir(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rayf_setDir(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Rayf, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Vecf, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Rayf_setDir__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Rayf, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Vecf, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Rayf_setDir__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Rayf_setDir'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    setDir(Rayf *,Vecf,bool)\n"
    "    setDir(Rayf *,Vecf)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rayf_intersection(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Rayf *arg1 = (Rayf *) 0 ;
  Planef *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Vecf result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Rayf_intersection",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Rayf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rayf_intersection" "', argument " "1"" of type '" "Rayf const *""'"); 
  }
  arg1 = reinterpret_cast< Rayf * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Planef,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rayf_intersection" "', argument " "2"" of type '" "Planef const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rayf_intersection" "', argument " "2"" of type '" "Planef const &""'"); 
  }
  arg2 = reinterpret_cast< Planef * >(argp2);
  result = ((Rayf const *)arg1)->intersection((Planef const &)*arg2);
  resultobj = SWIG_NewPointerObj((new Vecf(static_cast< const Vecf& >(result))), SWIGTYPE_p_Vecf, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rayf___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Rayf *arg1 = (Rayf *) 0 ;
  Rayf *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Rayf___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Rayf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rayf___eq__" "', argument " "1"" of type '" "Rayf const *""'"); 
  }
  arg1 = reinterpret_cast< Rayf * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Rayf,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rayf___eq__" "', argument " "2"" of type '" "Rayf const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rayf___eq__" "', argument " "2"" of type '" "Rayf const &""'"); 
  }
  arg2 = reinterpret_cast< Rayf * >(argp2);
  result = (bool)((Rayf const *)arg1)->operator ==((Rayf const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rayf___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Rayf *arg1 = (Rayf *) 0 ;
  Rayf *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Rayf___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Rayf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rayf___ne__" "', argument " "1"" of type '" "Rayf const *""'"); 
  }
  arg1 = reinterpret_cast< Rayf * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Rayf,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rayf___ne__" "', argument " "2"" of type '" "Rayf const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rayf___ne__" "', argument " "2"" of type '" "Rayf const &""'"); 
  }
  arg2 = reinterpret_cast< Rayf * >(argp2);
  result = (bool)((Rayf const *)arg1)->operator !=((Rayf const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rayf___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Rayf *arg1 = (Rayf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Rayf___str__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Rayf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rayf___str__" "', argument " "1"" of type '" "Rayf const *""'"); 
  }
  arg1 = reinterpret_cast< Rayf * >(argp1);
  result = ((Rayf const *)arg1)->str();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rayf___repr__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Rayf *arg1 = (Rayf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Rayf___repr__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Rayf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rayf___repr__" "', argument " "1"" of type '" "Rayf const *""'"); 
  }
  arg1 = reinterpret_cast< Rayf * >(argp1);
  result = ((Rayf const *)arg1)->repr();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rayf_SelfTest(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":Rayf_SelfTest")) SWIG_fail;
  result = (int)Rayf::SelfTest();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Rayf(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Rayf *arg1 = (Rayf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Rayf",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Rayf, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Rayf" "', argument " "1"" of type '" "Rayf *""'"); 
  }
  arg1 = reinterpret_cast< Rayf * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Rayf_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Rayf, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_Quaternion_x_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Quaternion *arg1 = (Quaternion *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Quaternion_x_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Quaternion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quaternion_x_set" "', argument " "1"" of type '" "Quaternion *""'"); 
  }
  arg1 = reinterpret_cast< Quaternion * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Quaternion_x_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->x = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Quaternion_x_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Quaternion *arg1 = (Quaternion *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Quaternion_x_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Quaternion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quaternion_x_get" "', argument " "1"" of type '" "Quaternion *""'"); 
  }
  arg1 = reinterpret_cast< Quaternion * >(argp1);
  result = (float) ((arg1)->x);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Quaternion_y_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Quaternion *arg1 = (Quaternion *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Quaternion_y_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Quaternion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quaternion_y_set" "', argument " "1"" of type '" "Quaternion *""'"); 
  }
  arg1 = reinterpret_cast< Quaternion * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Quaternion_y_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->y = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Quaternion_y_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Quaternion *arg1 = (Quaternion *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Quaternion_y_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Quaternion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quaternion_y_get" "', argument " "1"" of type '" "Quaternion *""'"); 
  }
  arg1 = reinterpret_cast< Quaternion * >(argp1);
  result = (float) ((arg1)->y);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Quaternion_z_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Quaternion *arg1 = (Quaternion *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Quaternion_z_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Quaternion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quaternion_z_set" "', argument " "1"" of type '" "Quaternion *""'"); 
  }
  arg1 = reinterpret_cast< Quaternion * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Quaternion_z_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->z = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Quaternion_z_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Quaternion *arg1 = (Quaternion *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Quaternion_z_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Quaternion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quaternion_z_get" "', argument " "1"" of type '" "Quaternion *""'"); 
  }
  arg1 = reinterpret_cast< Quaternion * >(argp1);
  result = (float) ((arg1)->z);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Quaternion_w_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Quaternion *arg1 = (Quaternion *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Quaternion_w_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Quaternion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quaternion_w_set" "', argument " "1"" of type '" "Quaternion *""'"); 
  }
  arg1 = reinterpret_cast< Quaternion * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Quaternion_w_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->w = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Quaternion_w_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Quaternion *arg1 = (Quaternion *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Quaternion_w_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Quaternion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quaternion_w_get" "', argument " "1"" of type '" "Quaternion *""'"); 
  }
  arg1 = reinterpret_cast< Quaternion * >(argp1);
  result = (float) ((arg1)->w);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_Quaternion_ZERO_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Quaternion_ZERO is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Quaternion_ZERO_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&Quaternion::ZERO), SWIGTYPE_p_Quaternion,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Quaternion_IDENTITY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Quaternion_IDENTITY is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Quaternion_IDENTITY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&Quaternion::IDENTITY), SWIGTYPE_p_Quaternion,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_Quaternion__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Quaternion *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Quaternion")) SWIG_fail;
  result = (Quaternion *)new Quaternion();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quaternion, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Quaternion__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Quaternion *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Quaternion *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Quaternion",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Quaternion,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Quaternion" "', argument " "1"" of type '" "Quaternion const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Quaternion" "', argument " "1"" of type '" "Quaternion const &""'"); 
  }
  arg1 = reinterpret_cast< Quaternion * >(argp1);
  result = (Quaternion *)new Quaternion((Quaternion const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quaternion, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Quaternion__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Quaternion *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_Quaternion",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Quaternion" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Quaternion" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Quaternion" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_Quaternion" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  result = (Quaternion *)new Quaternion(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quaternion, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Quaternion__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float,std::allocator< float > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  Quaternion *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Quaternion",&obj0)) SWIG_fail;
  {
    std::vector<float,std::allocator< float > > *ptr = (std::vector<float,std::allocator< float > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Quaternion" "', argument " "1"" of type '" "std::vector< float,std::allocator< float > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Quaternion" "', argument " "1"" of type '" "std::vector< float,std::allocator< float > > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (Quaternion *)new Quaternion((std::vector< float,std::allocator< float > > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quaternion, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Quaternion__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec3f arg1 ;
  float arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Quaternion *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Quaternion",&obj0,&obj1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Vec3f,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Quaternion" "', argument " "1"" of type '" "Vec3f""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Quaternion" "', argument " "1"" of type '" "Vec3f""'");
    } else {
      Vec3f * temp = reinterpret_cast< Vec3f * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Quaternion" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  result = (Quaternion *)new Quaternion(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quaternion, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Quaternion__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Mat4f *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Quaternion *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Quaternion",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Mat4f,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Quaternion" "', argument " "1"" of type '" "Mat4f &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Quaternion" "', argument " "1"" of type '" "Mat4f &""'"); 
  }
  arg1 = reinterpret_cast< Mat4f * >(argp1);
  result = (Quaternion *)new Quaternion(*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quaternion, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Quaternion__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec3f *arg1 = 0 ;
  Vec3f *arg2 = 0 ;
  Vec3f *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Quaternion *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_Quaternion",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Vec3f,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Quaternion" "', argument " "1"" of type '" "Vec3f const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Quaternion" "', argument " "1"" of type '" "Vec3f const &""'"); 
  }
  arg1 = reinterpret_cast< Vec3f * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vec3f,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Quaternion" "', argument " "2"" of type '" "Vec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Quaternion" "', argument " "2"" of type '" "Vec3f const &""'"); 
  }
  arg2 = reinterpret_cast< Vec3f * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Vec3f,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_Quaternion" "', argument " "3"" of type '" "Vec3f const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Quaternion" "', argument " "3"" of type '" "Vec3f const &""'"); 
  }
  arg3 = reinterpret_cast< Vec3f * >(argp3);
  result = (Quaternion *)new Quaternion((Vec3f const &)*arg1,(Vec3f const &)*arg2,(Vec3f const &)*arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quaternion, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Quaternion(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Quaternion__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Quaternion, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Quaternion__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mat4f, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Quaternion__SWIG_5(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<float,std::allocator< float > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Quaternion__SWIG_3(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Vec3f, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Quaternion__SWIG_4(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Vec3f, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Vec3f, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_Vec3f, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_Quaternion__SWIG_6(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_Quaternion__SWIG_2(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Quaternion'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Quaternion()\n"
    "    Quaternion(Quaternion const &)\n"
    "    Quaternion(float,float,float,float)\n"
    "    Quaternion(std::vector< float,std::allocator< float > > const &)\n"
    "    Quaternion(Vec3f,float)\n"
    "    Quaternion(Mat4f &)\n"
    "    Quaternion(Vec3f const &,Vec3f const &,Vec3f const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Quaternion_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Quaternion *arg1 = (Quaternion *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Quaternion_get",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Quaternion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quaternion_get" "', argument " "1"" of type '" "Quaternion *""'"); 
  }
  arg1 = reinterpret_cast< Quaternion * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Quaternion_get" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (float)(arg1)->get(arg2);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Quaternion_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Quaternion *arg1 = (Quaternion *) 0 ;
  int arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Quaternion_set",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Quaternion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quaternion_set" "', argument " "1"" of type '" "Quaternion *""'"); 
  }
  arg1 = reinterpret_cast< Quaternion * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Quaternion_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Quaternion_set" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  (arg1)->set(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Quaternion___getitem_ref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Quaternion *arg1 = (Quaternion *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Quaternion___getitem_ref__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Quaternion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quaternion___getitem_ref__" "', argument " "1"" of type '" "Quaternion *""'"); 
  }
  arg1 = reinterpret_cast< Quaternion * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Quaternion___getitem_ref__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (float *) &(arg1)->operator [](arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_float, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Quaternion___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Quaternion *arg1 = (Quaternion *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Quaternion___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Quaternion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quaternion___getitem__" "', argument " "1"" of type '" "Quaternion const *""'"); 
  }
  arg1 = reinterpret_cast< Quaternion * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Quaternion___getitem__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (float *) &((Quaternion const *)arg1)->operator [](arg2);
  resultobj = SWIG_From_float(static_cast< float >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Quaternion_fromMatrix(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Quaternion *arg1 = (Quaternion *) 0 ;
  Mat4f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Quaternion_fromMatrix",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Quaternion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quaternion_fromMatrix" "', argument " "1"" of type '" "Quaternion *""'"); 
  }
  arg1 = reinterpret_cast< Quaternion * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Mat4f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Quaternion_fromMatrix" "', argument " "2"" of type '" "Mat4f &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Quaternion_fromMatrix" "', argument " "2"" of type '" "Mat4f &""'"); 
  }
  arg2 = reinterpret_cast< Mat4f * >(argp2);
  (arg1)->fromMatrix(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Quaternion_getMatrix(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Quaternion *arg1 = (Quaternion *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Mat4f result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Quaternion_getMatrix",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Quaternion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quaternion_getMatrix" "', argument " "1"" of type '" "Quaternion const *""'"); 
  }
  arg1 = reinterpret_cast< Quaternion * >(argp1);
  result = ((Quaternion const *)arg1)->getMatrix();
  resultobj = SWIG_NewPointerObj((new Mat4f(static_cast< const Mat4f& >(result))), SWIGTYPE_p_Mat4f, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Quaternion_getAxis__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Quaternion *arg1 = (Quaternion *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Vec3f result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Quaternion_getAxis",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Quaternion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quaternion_getAxis" "', argument " "1"" of type '" "Quaternion const *""'"); 
  }
  arg1 = reinterpret_cast< Quaternion * >(argp1);
  result = ((Quaternion const *)arg1)->getAxis();
  resultobj = SWIG_NewPointerObj((new Vec3f(static_cast< const Vec3f& >(result))), SWIGTYPE_p_Vec3f, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Quaternion_getAngle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Quaternion *arg1 = (Quaternion *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Quaternion_getAngle",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Quaternion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quaternion_getAngle" "', argument " "1"" of type '" "Quaternion const *""'"); 
  }
  arg1 = reinterpret_cast< Quaternion * >(argp1);
  result = (float)((Quaternion const *)arg1)->getAngle();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Quaternion_getAxis__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Quaternion *arg1 = (Quaternion *) 0 ;
  Vec3f *arg2 = 0 ;
  Vec3f *arg3 = 0 ;
  Vec3f *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Quaternion_getAxis",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Quaternion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quaternion_getAxis" "', argument " "1"" of type '" "Quaternion const *""'"); 
  }
  arg1 = reinterpret_cast< Quaternion * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Quaternion_getAxis" "', argument " "2"" of type '" "Vec3f &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Quaternion_getAxis" "', argument " "2"" of type '" "Vec3f &""'"); 
  }
  arg2 = reinterpret_cast< Vec3f * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Vec3f,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Quaternion_getAxis" "', argument " "3"" of type '" "Vec3f &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Quaternion_getAxis" "', argument " "3"" of type '" "Vec3f &""'"); 
  }
  arg3 = reinterpret_cast< Vec3f * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_Vec3f,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Quaternion_getAxis" "', argument " "4"" of type '" "Vec3f &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Quaternion_getAxis" "', argument " "4"" of type '" "Vec3f &""'"); 
  }
  arg4 = reinterpret_cast< Vec3f * >(argp4);
  ((Quaternion const *)arg1)->getAxis(*arg2,*arg3,*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Quaternion_getAxis(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Quaternion, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Quaternion_getAxis__SWIG_0(self, args);
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Quaternion, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Vec3f, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Vec3f, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_Vec3f, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_Quaternion_getAxis__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Quaternion_getAxis'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    getAxis(Quaternion const *)\n"
    "    getAxis(Quaternion const *,Vec3f &,Vec3f &,Vec3f &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Quaternion___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Quaternion *arg1 = (Quaternion *) 0 ;
  Quaternion *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Quaternion___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Quaternion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quaternion___eq__" "', argument " "1"" of type '" "Quaternion const *""'"); 
  }
  arg1 = reinterpret_cast< Quaternion * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Quaternion,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Quaternion___eq__" "', argument " "2"" of type '" "Quaternion const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Quaternion___eq__" "', argument " "2"" of type '" "Quaternion const &""'"); 
  }
  arg2 = reinterpret_cast< Quaternion * >(argp2);
  result = (bool)((Quaternion const *)arg1)->operator ==((Quaternion const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Quaternion_assign__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Quaternion *arg1 = (Quaternion *) 0 ;
  Quaternion *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Quaternion *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Quaternion_assign",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Quaternion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quaternion_assign" "', argument " "1"" of type '" "Quaternion *""'"); 
  }
  arg1 = reinterpret_cast< Quaternion * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Quaternion,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Quaternion_assign" "', argument " "2"" of type '" "Quaternion const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Quaternion_assign" "', argument " "2"" of type '" "Quaternion const &""'"); 
  }
  arg2 = reinterpret_cast< Quaternion * >(argp2);
  result = (Quaternion *) &(arg1)->operator =((Quaternion const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quaternion, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Quaternion_assign__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Quaternion *arg1 = (Quaternion *) 0 ;
  std::vector< float,std::allocator< float > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Quaternion *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Quaternion_assign",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Quaternion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quaternion_assign" "', argument " "1"" of type '" "Quaternion *""'"); 
  }
  arg1 = reinterpret_cast< Quaternion * >(argp1);
  {
    std::vector<float,std::allocator< float > > *ptr = (std::vector<float,std::allocator< float > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Quaternion_assign" "', argument " "2"" of type '" "std::vector< float,std::allocator< float > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Quaternion_assign" "', argument " "2"" of type '" "std::vector< float,std::allocator< float > > const &""'"); 
    }
    arg2 = ptr;
  }
  result = (Quaternion *) &(arg1)->operator =((std::vector< float,std::allocator< float > > const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quaternion, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Quaternion_assign(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Quaternion, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Quaternion, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Quaternion_assign__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Quaternion, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector<float,std::allocator< float > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Quaternion_assign__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Quaternion_assign'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operator =(Quaternion *,Quaternion const &)\n"
    "    operator =(Quaternion *,std::vector< float,std::allocator< float > > const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Quaternion_fuzzyEqual__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Quaternion *arg1 = (Quaternion *) 0 ;
  Vec4f *arg2 = 0 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Quaternion_fuzzyEqual",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Quaternion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quaternion_fuzzyEqual" "', argument " "1"" of type '" "Quaternion const *""'"); 
  }
  arg1 = reinterpret_cast< Quaternion * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vec4f,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Quaternion_fuzzyEqual" "', argument " "2"" of type '" "Vec4f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Quaternion_fuzzyEqual" "', argument " "2"" of type '" "Vec4f const &""'"); 
  }
  arg2 = reinterpret_cast< Vec4f * >(argp2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Quaternion_fuzzyEqual" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  result = (bool)((Quaternion const *)arg1)->fuzzyEqual((Vec4f const &)*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Quaternion_fuzzyEqual__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Quaternion *arg1 = (Quaternion *) 0 ;
  Vec4f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Quaternion_fuzzyEqual",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Quaternion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quaternion_fuzzyEqual" "', argument " "1"" of type '" "Quaternion const *""'"); 
  }
  arg1 = reinterpret_cast< Quaternion * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vec4f,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Quaternion_fuzzyEqual" "', argument " "2"" of type '" "Vec4f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Quaternion_fuzzyEqual" "', argument " "2"" of type '" "Vec4f const &""'"); 
  }
  arg2 = reinterpret_cast< Vec4f * >(argp2);
  result = (bool)((Quaternion const *)arg1)->fuzzyEqual((Vec4f const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Quaternion_fuzzyEqual(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Quaternion, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Vec4f, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Quaternion_fuzzyEqual__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Quaternion, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Vec4f, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Quaternion_fuzzyEqual__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Quaternion_fuzzyEqual'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fuzzyEqual(Quaternion const *,Vec4f const &,float)\n"
    "    fuzzyEqual(Quaternion const *,Vec4f const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Quaternion___add__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Quaternion *arg1 = (Quaternion *) 0 ;
  Quaternion *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Quaternion result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Quaternion___add__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Quaternion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quaternion___add__" "', argument " "1"" of type '" "Quaternion const *""'"); 
  }
  arg1 = reinterpret_cast< Quaternion * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Quaternion,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Quaternion___add__" "', argument " "2"" of type '" "Quaternion const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Quaternion___add__" "', argument " "2"" of type '" "Quaternion const &""'"); 
  }
  arg2 = reinterpret_cast< Quaternion * >(argp2);
  result = ((Quaternion const *)arg1)->operator +((Quaternion const &)*arg2);
  resultobj = SWIG_NewPointerObj((new Quaternion(static_cast< const Quaternion& >(result))), SWIGTYPE_p_Quaternion, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Quaternion___sub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Quaternion *arg1 = (Quaternion *) 0 ;
  Quaternion *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Quaternion result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Quaternion___sub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Quaternion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quaternion___sub__" "', argument " "1"" of type '" "Quaternion const *""'"); 
  }
  arg1 = reinterpret_cast< Quaternion * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Quaternion,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Quaternion___sub__" "', argument " "2"" of type '" "Quaternion const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Quaternion___sub__" "', argument " "2"" of type '" "Quaternion const &""'"); 
  }
  arg2 = reinterpret_cast< Quaternion * >(argp2);
  result = ((Quaternion const *)arg1)->operator -((Quaternion const &)*arg2);
  resultobj = SWIG_NewPointerObj((new Quaternion(static_cast< const Quaternion& >(result))), SWIGTYPE_p_Quaternion, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Quaternion___mul____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Quaternion *arg1 = (Quaternion *) 0 ;
  Quaternion *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Quaternion result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Quaternion___mul__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Quaternion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quaternion___mul__" "', argument " "1"" of type '" "Quaternion const *""'"); 
  }
  arg1 = reinterpret_cast< Quaternion * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Quaternion,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Quaternion___mul__" "', argument " "2"" of type '" "Quaternion const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Quaternion___mul__" "', argument " "2"" of type '" "Quaternion const &""'"); 
  }
  arg2 = reinterpret_cast< Quaternion * >(argp2);
  result = ((Quaternion const *)arg1)->operator *((Quaternion const &)*arg2);
  resultobj = SWIG_NewPointerObj((new Quaternion(static_cast< const Quaternion& >(result))), SWIGTYPE_p_Quaternion, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Quaternion___mul____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Quaternion *arg1 = (Quaternion *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Quaternion result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Quaternion___mul__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Quaternion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quaternion___mul__" "', argument " "1"" of type '" "Quaternion const *""'"); 
  }
  arg1 = reinterpret_cast< Quaternion * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Quaternion___mul__" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  result = ((Quaternion const *)arg1)->operator *(arg2);
  resultobj = SWIG_NewPointerObj((new Quaternion(static_cast< const Quaternion& >(result))), SWIGTYPE_p_Quaternion, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Quaternion___neg__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Quaternion *arg1 = (Quaternion *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Quaternion result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Quaternion___neg__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Quaternion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quaternion___neg__" "', argument " "1"" of type '" "Quaternion const *""'"); 
  }
  arg1 = reinterpret_cast< Quaternion * >(argp1);
  result = ((Quaternion const *)arg1)->operator -();
  resultobj = SWIG_NewPointerObj((new Quaternion(static_cast< const Quaternion& >(result))), SWIGTYPE_p_Quaternion, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Quaternion_Dot(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Quaternion *arg1 = (Quaternion *) 0 ;
  Quaternion *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Quaternion_Dot",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Quaternion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quaternion_Dot" "', argument " "1"" of type '" "Quaternion const *""'"); 
  }
  arg1 = reinterpret_cast< Quaternion * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Quaternion,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Quaternion_Dot" "', argument " "2"" of type '" "Quaternion const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Quaternion_Dot" "', argument " "2"" of type '" "Quaternion const &""'"); 
  }
  arg2 = reinterpret_cast< Quaternion * >(argp2);
  result = (float)((Quaternion const *)arg1)->Dot((Quaternion const &)*arg2);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Quaternion_Norm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Quaternion *arg1 = (Quaternion *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Quaternion_Norm",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Quaternion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quaternion_Norm" "', argument " "1"" of type '" "Quaternion const *""'"); 
  }
  arg1 = reinterpret_cast< Quaternion * >(argp1);
  result = (float)((Quaternion const *)arg1)->Norm();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Quaternion_Inverse(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Quaternion *arg1 = (Quaternion *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Quaternion result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Quaternion_Inverse",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Quaternion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quaternion_Inverse" "', argument " "1"" of type '" "Quaternion const *""'"); 
  }
  arg1 = reinterpret_cast< Quaternion * >(argp1);
  result = ((Quaternion const *)arg1)->Inverse();
  resultobj = SWIG_NewPointerObj((new Quaternion(static_cast< const Quaternion& >(result))), SWIGTYPE_p_Quaternion, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Quaternion_UnitInverse(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Quaternion *arg1 = (Quaternion *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Quaternion result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Quaternion_UnitInverse",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Quaternion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quaternion_UnitInverse" "', argument " "1"" of type '" "Quaternion const *""'"); 
  }
  arg1 = reinterpret_cast< Quaternion * >(argp1);
  result = ((Quaternion const *)arg1)->UnitInverse();
  resultobj = SWIG_NewPointerObj((new Quaternion(static_cast< const Quaternion& >(result))), SWIGTYPE_p_Quaternion, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Quaternion_Exp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Quaternion *arg1 = (Quaternion *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Quaternion result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Quaternion_Exp",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Quaternion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quaternion_Exp" "', argument " "1"" of type '" "Quaternion const *""'"); 
  }
  arg1 = reinterpret_cast< Quaternion * >(argp1);
  result = ((Quaternion const *)arg1)->Exp();
  resultobj = SWIG_NewPointerObj((new Quaternion(static_cast< const Quaternion& >(result))), SWIGTYPE_p_Quaternion, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Quaternion_Log(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Quaternion *arg1 = (Quaternion *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Quaternion result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Quaternion_Log",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Quaternion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quaternion_Log" "', argument " "1"" of type '" "Quaternion const *""'"); 
  }
  arg1 = reinterpret_cast< Quaternion * >(argp1);
  result = ((Quaternion const *)arg1)->Log();
  resultobj = SWIG_NewPointerObj((new Quaternion(static_cast< const Quaternion& >(result))), SWIGTYPE_p_Quaternion, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Quaternion___mul____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Quaternion *arg1 = (Quaternion *) 0 ;
  Vec3f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Vec3f result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Quaternion___mul__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Quaternion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quaternion___mul__" "', argument " "1"" of type '" "Quaternion const *""'"); 
  }
  arg1 = reinterpret_cast< Quaternion * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vec3f,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Quaternion___mul__" "', argument " "2"" of type '" "Vec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Quaternion___mul__" "', argument " "2"" of type '" "Vec3f const &""'"); 
  }
  arg2 = reinterpret_cast< Vec3f * >(argp2);
  result = ((Quaternion const *)arg1)->operator *((Vec3f const &)*arg2);
  resultobj = SWIG_NewPointerObj((new Vec3f(static_cast< const Vec3f& >(result))), SWIGTYPE_p_Vec3f, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Quaternion___mul__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Quaternion, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Quaternion, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Quaternion___mul____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Quaternion, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Vec3f, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Quaternion___mul____SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Quaternion, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Quaternion___mul____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Quaternion_Slerp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  float arg1 ;
  Quaternion *arg2 = 0 ;
  Quaternion *arg3 = 0 ;
  float val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Quaternion result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Quaternion_Slerp",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Quaternion_Slerp" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Quaternion,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Quaternion_Slerp" "', argument " "2"" of type '" "Quaternion const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Quaternion_Slerp" "', argument " "2"" of type '" "Quaternion const &""'"); 
  }
  arg2 = reinterpret_cast< Quaternion * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Quaternion,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Quaternion_Slerp" "', argument " "3"" of type '" "Quaternion const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Quaternion_Slerp" "', argument " "3"" of type '" "Quaternion const &""'"); 
  }
  arg3 = reinterpret_cast< Quaternion * >(argp3);
  result = Quaternion::Slerp(arg1,(Quaternion const &)*arg2,(Quaternion const &)*arg3);
  resultobj = SWIG_NewPointerObj((new Quaternion(static_cast< const Quaternion& >(result))), SWIGTYPE_p_Quaternion, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Quaternion_SlerpExtraSpins(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  float arg1 ;
  Quaternion *arg2 = 0 ;
  Quaternion *arg3 = 0 ;
  int arg4 ;
  float val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Quaternion result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Quaternion_SlerpExtraSpins",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Quaternion_SlerpExtraSpins" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Quaternion,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Quaternion_SlerpExtraSpins" "', argument " "2"" of type '" "Quaternion const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Quaternion_SlerpExtraSpins" "', argument " "2"" of type '" "Quaternion const &""'"); 
  }
  arg2 = reinterpret_cast< Quaternion * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Quaternion,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Quaternion_SlerpExtraSpins" "', argument " "3"" of type '" "Quaternion const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Quaternion_SlerpExtraSpins" "', argument " "3"" of type '" "Quaternion const &""'"); 
  }
  arg3 = reinterpret_cast< Quaternion * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Quaternion_SlerpExtraSpins" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  result = Quaternion::SlerpExtraSpins(arg1,(Quaternion const &)*arg2,(Quaternion const &)*arg3,arg4);
  resultobj = SWIG_NewPointerObj((new Quaternion(static_cast< const Quaternion& >(result))), SWIGTYPE_p_Quaternion, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Quaternion_Intermediate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Quaternion *arg1 = 0 ;
  Quaternion *arg2 = 0 ;
  Quaternion *arg3 = 0 ;
  Quaternion *arg4 = 0 ;
  Quaternion *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Quaternion_Intermediate",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Quaternion,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quaternion_Intermediate" "', argument " "1"" of type '" "Quaternion const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Quaternion_Intermediate" "', argument " "1"" of type '" "Quaternion const &""'"); 
  }
  arg1 = reinterpret_cast< Quaternion * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Quaternion,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Quaternion_Intermediate" "', argument " "2"" of type '" "Quaternion const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Quaternion_Intermediate" "', argument " "2"" of type '" "Quaternion const &""'"); 
  }
  arg2 = reinterpret_cast< Quaternion * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Quaternion,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Quaternion_Intermediate" "', argument " "3"" of type '" "Quaternion const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Quaternion_Intermediate" "', argument " "3"" of type '" "Quaternion const &""'"); 
  }
  arg3 = reinterpret_cast< Quaternion * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_Quaternion,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Quaternion_Intermediate" "', argument " "4"" of type '" "Quaternion &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Quaternion_Intermediate" "', argument " "4"" of type '" "Quaternion &""'"); 
  }
  arg4 = reinterpret_cast< Quaternion * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_Quaternion,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Quaternion_Intermediate" "', argument " "5"" of type '" "Quaternion &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Quaternion_Intermediate" "', argument " "5"" of type '" "Quaternion &""'"); 
  }
  arg5 = reinterpret_cast< Quaternion * >(argp5);
  Quaternion::Intermediate((Quaternion const &)*arg1,(Quaternion const &)*arg2,(Quaternion const &)*arg3,*arg4,*arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Quaternion_Squad(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  float arg1 ;
  Quaternion *arg2 = 0 ;
  Quaternion *arg3 = 0 ;
  Quaternion *arg4 = 0 ;
  Quaternion *arg5 = 0 ;
  float val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  Quaternion result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Quaternion_Squad",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Quaternion_Squad" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Quaternion,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Quaternion_Squad" "', argument " "2"" of type '" "Quaternion const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Quaternion_Squad" "', argument " "2"" of type '" "Quaternion const &""'"); 
  }
  arg2 = reinterpret_cast< Quaternion * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Quaternion,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Quaternion_Squad" "', argument " "3"" of type '" "Quaternion const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Quaternion_Squad" "', argument " "3"" of type '" "Quaternion const &""'"); 
  }
  arg3 = reinterpret_cast< Quaternion * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_Quaternion,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Quaternion_Squad" "', argument " "4"" of type '" "Quaternion const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Quaternion_Squad" "', argument " "4"" of type '" "Quaternion const &""'"); 
  }
  arg4 = reinterpret_cast< Quaternion * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_Quaternion,  0  | 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Quaternion_Squad" "', argument " "5"" of type '" "Quaternion const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Quaternion_Squad" "', argument " "5"" of type '" "Quaternion const &""'"); 
  }
  arg5 = reinterpret_cast< Quaternion * >(argp5);
  result = Quaternion::Squad(arg1,(Quaternion const &)*arg2,(Quaternion const &)*arg3,(Quaternion const &)*arg4,(Quaternion const &)*arg5);
  resultobj = SWIG_NewPointerObj((new Quaternion(static_cast< const Quaternion& >(result))), SWIGTYPE_p_Quaternion, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Quaternion_trackball(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Quaternion result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Quaternion_trackball",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Quaternion_trackball" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Quaternion_trackball" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Quaternion_trackball" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Quaternion_trackball" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  result = Quaternion::trackball(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj((new Quaternion(static_cast< const Quaternion& >(result))), SWIGTYPE_p_Quaternion, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Quaternion___repr__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Quaternion *arg1 = (Quaternion *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Quaternion___repr__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Quaternion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quaternion___repr__" "', argument " "1"" of type '" "Quaternion const *""'"); 
  }
  arg1 = reinterpret_cast< Quaternion * >(argp1);
  result = ((Quaternion const *)arg1)->repr();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Quaternion_SelfTest(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":Quaternion_SelfTest")) SWIG_fail;
  result = (int)Quaternion::SelfTest();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Quaternion(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Quaternion *arg1 = (Quaternion *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Quaternion",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Quaternion, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Quaternion" "', argument " "1"" of type '" "Quaternion *""'"); 
  }
  arg1 = reinterpret_cast< Quaternion * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Quaternion_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Quaternion, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_LocalSystem_pos_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LocalSystem *arg1 = (LocalSystem *) 0 ;
  Vec3f *arg2 = (Vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LocalSystem_pos_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LocalSystem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocalSystem_pos_set" "', argument " "1"" of type '" "LocalSystem *""'"); 
  }
  arg1 = reinterpret_cast< LocalSystem * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Vec3f, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LocalSystem_pos_set" "', argument " "2"" of type '" "Vec3f *""'"); 
  }
  arg2 = reinterpret_cast< Vec3f * >(argp2);
  if (arg1) (arg1)->pos = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocalSystem_pos_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LocalSystem *arg1 = (LocalSystem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Vec3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LocalSystem_pos_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LocalSystem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocalSystem_pos_get" "', argument " "1"" of type '" "LocalSystem *""'"); 
  }
  arg1 = reinterpret_cast< LocalSystem * >(argp1);
  result = (Vec3f *)& ((arg1)->pos);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vec3f, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocalSystem_dir_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LocalSystem *arg1 = (LocalSystem *) 0 ;
  Vec3f *arg2 = (Vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LocalSystem_dir_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LocalSystem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocalSystem_dir_set" "', argument " "1"" of type '" "LocalSystem *""'"); 
  }
  arg1 = reinterpret_cast< LocalSystem * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Vec3f, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LocalSystem_dir_set" "', argument " "2"" of type '" "Vec3f *""'"); 
  }
  arg2 = reinterpret_cast< Vec3f * >(argp2);
  if (arg1) (arg1)->dir = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocalSystem_dir_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LocalSystem *arg1 = (LocalSystem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Vec3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LocalSystem_dir_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LocalSystem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocalSystem_dir_get" "', argument " "1"" of type '" "LocalSystem *""'"); 
  }
  arg1 = reinterpret_cast< LocalSystem * >(argp1);
  result = (Vec3f *)& ((arg1)->dir);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vec3f, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocalSystem_vup_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LocalSystem *arg1 = (LocalSystem *) 0 ;
  Vec3f *arg2 = (Vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LocalSystem_vup_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LocalSystem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocalSystem_vup_set" "', argument " "1"" of type '" "LocalSystem *""'"); 
  }
  arg1 = reinterpret_cast< LocalSystem * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Vec3f, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LocalSystem_vup_set" "', argument " "2"" of type '" "Vec3f *""'"); 
  }
  arg2 = reinterpret_cast< Vec3f * >(argp2);
  if (arg1) (arg1)->vup = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocalSystem_vup_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LocalSystem *arg1 = (LocalSystem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Vec3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LocalSystem_vup_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LocalSystem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocalSystem_vup_get" "', argument " "1"" of type '" "LocalSystem *""'"); 
  }
  arg1 = reinterpret_cast< LocalSystem * >(argp1);
  result = (Vec3f *)& ((arg1)->vup);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vec3f, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LocalSystem(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LocalSystem *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_LocalSystem")) SWIG_fail;
  result = (LocalSystem *)new LocalSystem();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_LocalSystem, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_LocalSystem(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LocalSystem *arg1 = (LocalSystem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_LocalSystem",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LocalSystem, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LocalSystem" "', argument " "1"" of type '" "LocalSystem *""'"); 
  }
  arg1 = reinterpret_cast< LocalSystem * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LocalSystem_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_LocalSystem, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_Vector_Write(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vector *arg1 = (Vector *) 0 ;
  Archive *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Vector > tempshared1 ;
  std::tr1::shared_ptr< Vector > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vector_Write",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Vector_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_Write" "', argument " "1"" of type '" "Vector *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Vector > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Vector > * >(argp1);
      arg1 = const_cast< Vector * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Vector > * >(argp1);
      arg1 = const_cast< Vector * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Archive,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vector_Write" "', argument " "2"" of type '" "Archive &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vector_Write" "', argument " "2"" of type '" "Archive &""'"); 
  }
  arg2 = reinterpret_cast< Archive * >(argp2);
  (arg1)->Write(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_Read(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vector *arg1 = (Vector *) 0 ;
  Archive *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Vector > tempshared1 ;
  std::tr1::shared_ptr< Vector > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vector_Read",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Vector_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_Read" "', argument " "1"" of type '" "Vector *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Vector > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Vector > * >(argp1);
      arg1 = const_cast< Vector * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Vector > * >(argp1);
      arg1 = const_cast< Vector * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Archive,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vector_Read" "', argument " "2"" of type '" "Archive &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vector_Read" "', argument " "2"" of type '" "Archive &""'"); 
  }
  arg2 = reinterpret_cast< Archive * >(argp2);
  (arg1)->Read(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_gpu_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vector *arg1 = (Vector *) 0 ;
  std::tr1::shared_ptr< EngineResource > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Vector > tempshared1 ;
  std::tr1::shared_ptr< Vector > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::tr1::shared_ptr< EngineResource > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vector_gpu_set",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Vector_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_gpu_set" "', argument " "1"" of type '" "Vector *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Vector > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Vector > * >(argp1);
      arg1 = const_cast< Vector * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Vector > * >(argp1);
      arg1 = const_cast< Vector * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_std__tr1__shared_ptrT_EngineResource_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vector_gpu_set" "', argument " "2"" of type '" "std::tr1::shared_ptr< EngineResource > const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< std::tr1::shared_ptr< EngineResource > * >(argp2);
      delete reinterpret_cast< std::tr1::shared_ptr< EngineResource > * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< std::tr1::shared_ptr< EngineResource > * >(argp2) : &tempshared2;
    }
  }
  if (arg1) (arg1)->gpu = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_gpu_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vector *arg1 = (Vector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Vector > tempshared1 ;
  std::tr1::shared_ptr< Vector > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  std::tr1::shared_ptr< EngineResource > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vector_gpu_get",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Vector_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_gpu_get" "', argument " "1"" of type '" "Vector *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Vector > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Vector > * >(argp1);
      arg1 = const_cast< Vector * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Vector > * >(argp1);
      arg1 = const_cast< Vector * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (std::tr1::shared_ptr< EngineResource > *) & ((arg1)->gpu);
  {
    std::tr1::shared_ptr<  EngineResource > *smartresult = *result ? new std::tr1::shared_ptr<  EngineResource >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_EngineResource_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Vector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vector *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Vector")) SWIG_fail;
  result = (Vector *)new Vector();
  {
    std::tr1::shared_ptr<  Vector > *smartresult = result ? new std::tr1::shared_ptr<  Vector >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Vector_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Vector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vector *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Vector const > tempshared1 ;
  PyObject * obj0 = 0 ;
  Vector *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Vector",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Vector_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Vector" "', argument " "1"" of type '" "Vector const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Vector" "', argument " "1"" of type '" "Vector const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr< const Vector > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr< const Vector > * >(argp1);
      arg1 = const_cast< Vector * >(tempshared1.get());
    } else {
      arg1 = const_cast< Vector * >(reinterpret_cast< std::tr1::shared_ptr< const Vector > * >(argp1)->get());
    }
  }
  result = (Vector *)new Vector((Vector const &)*arg1);
  {
    std::tr1::shared_ptr<  Vector > *smartresult = result ? new std::tr1::shared_ptr<  Vector >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Vector_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Vector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  Vector *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Vector",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Vector" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = (Vector *)new Vector(arg1);
  {
    std::tr1::shared_ptr<  Vector > *smartresult = result ? new std::tr1::shared_ptr<  Vector >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Vector_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Vector__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  float *arg2 = (float *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Vector *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Vector",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Vector" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Vector" "', argument " "2"" of type '" "float const *""'"); 
  }
  arg2 = reinterpret_cast< float * >(argp2);
  result = (Vector *)new Vector(arg1,(float const *)arg2);
  {
    std::tr1::shared_ptr<  Vector > *smartresult = result ? new std::tr1::shared_ptr<  Vector >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Vector_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Vector__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float,std::allocator< float > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  Vector *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Vector",&obj0)) SWIG_fail;
  {
    std::vector<float,std::allocator< float > > *ptr = (std::vector<float,std::allocator< float > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Vector" "', argument " "1"" of type '" "std::vector< float,std::allocator< float > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Vector" "', argument " "1"" of type '" "std::vector< float,std::allocator< float > > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (Vector *)new Vector((std::vector< float,std::allocator< float > > const &)*arg1);
  {
    std::tr1::shared_ptr<  Vector > *smartresult = result ? new std::tr1::shared_ptr<  Vector >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Vector_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Vector__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int,std::allocator< int > > *arg1 = 0 ;
  std::vector< float,std::allocator< float > > *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Vector *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Vector",&obj0,&obj1)) SWIG_fail;
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Vector" "', argument " "1"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Vector" "', argument " "1"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::vector<float,std::allocator< float > > *ptr = (std::vector<float,std::allocator< float > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Vector" "', argument " "2"" of type '" "std::vector< float,std::allocator< float > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Vector" "', argument " "2"" of type '" "std::vector< float,std::allocator< float > > const &""'"); 
    }
    arg2 = ptr;
  }
  result = (Vector *)new Vector((std::vector< int,std::allocator< int > > const &)*arg1,(std::vector< float,std::allocator< float > > const &)*arg2);
  {
    std::tr1::shared_ptr<  Vector > *smartresult = result ? new std::tr1::shared_ptr<  Vector >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Vector_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Vector__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int,std::allocator< int > > *arg1 = 0 ;
  float *arg2 = (float *) 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Vector *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Vector",&obj0,&obj1)) SWIG_fail;
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Vector" "', argument " "1"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Vector" "', argument " "1"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Vector" "', argument " "2"" of type '" "float const *""'"); 
  }
  arg2 = reinterpret_cast< float * >(argp2);
  result = (Vector *)new Vector((std::vector< int,std::allocator< int > > const &)*arg1,(float const *)arg2);
  {
    std::tr1::shared_ptr<  Vector > *smartresult = result ? new std::tr1::shared_ptr<  Vector >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Vector_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Vector(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Vector__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Vector_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Vector__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Vector__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<float,std::allocator< float > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Vector__SWIG_4(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_float, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_Vector__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_float, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_Vector__SWIG_6(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector<float,std::allocator< float > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_Vector__SWIG_5(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Vector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Vector()\n"
    "    Vector(Vector const &)\n"
    "    Vector(int)\n"
    "    Vector(int,float const *)\n"
    "    Vector(std::vector< float,std::allocator< float > > const &)\n"
    "    Vector(std::vector< int,std::allocator< int > > const &,std::vector< float,std::allocator< float > > const &)\n"
    "    Vector(std::vector< int,std::allocator< int > > const &,float const *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Vector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vector *arg1 = (Vector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Vector > tempshared1 ;
  std::tr1::shared_ptr< Vector > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Vector",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Vector_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Vector" "', argument " "1"" of type '" "Vector *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Vector > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Vector > * >(argp1);
      arg1 = const_cast< Vector * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Vector > * >(argp1);
      arg1 = const_cast< Vector * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (void)arg1; delete smartarg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_assign__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vector *arg1 = (Vector *) 0 ;
  Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Vector > tempshared1 ;
  std::tr1::shared_ptr< Vector > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::tr1::shared_ptr< Vector const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Vector *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vector_assign",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Vector_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_assign" "', argument " "1"" of type '" "Vector *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Vector > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Vector > * >(argp1);
      arg1 = const_cast< Vector * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Vector > * >(argp1);
      arg1 = const_cast< Vector * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_std__tr1__shared_ptrT_Vector_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vector_assign" "', argument " "2"" of type '" "Vector const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vector_assign" "', argument " "2"" of type '" "Vector const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< std::tr1::shared_ptr< const Vector > * >(argp2);
      delete reinterpret_cast< std::tr1::shared_ptr< const Vector > * >(argp2);
      arg2 = const_cast< Vector * >(tempshared2.get());
    } else {
      arg2 = const_cast< Vector * >(reinterpret_cast< std::tr1::shared_ptr< const Vector > * >(argp2)->get());
    }
  }
  result = (Vector *) &(arg1)->operator =((Vector const &)*arg2);
  {
    std::tr1::shared_ptr<  Vector > *smartresult = new std::tr1::shared_ptr<  Vector >(result SWIG_NO_NULL_DELETER_0);
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Vector_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_assign__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vector *arg1 = (Vector *) 0 ;
  std::vector< float,std::allocator< float > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Vector > tempshared1 ;
  std::tr1::shared_ptr< Vector > *smartarg1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Vector *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vector_assign",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Vector_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_assign" "', argument " "1"" of type '" "Vector *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Vector > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Vector > * >(argp1);
      arg1 = const_cast< Vector * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Vector > * >(argp1);
      arg1 = const_cast< Vector * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    std::vector<float,std::allocator< float > > *ptr = (std::vector<float,std::allocator< float > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vector_assign" "', argument " "2"" of type '" "std::vector< float,std::allocator< float > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vector_assign" "', argument " "2"" of type '" "std::vector< float,std::allocator< float > > const &""'"); 
    }
    arg2 = ptr;
  }
  result = (Vector *) &(arg1)->operator =((std::vector< float,std::allocator< float > > const &)*arg2);
  {
    std::tr1::shared_ptr<  Vector > *smartresult = new std::tr1::shared_ptr<  Vector >(result SWIG_NO_NULL_DELETER_0);
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Vector_t, SWIG_POINTER_OWN);
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_assign(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Vector_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Vector_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Vector_assign__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Vector_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector<float,std::allocator< float > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Vector_assign__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Vector_assign'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operator =(Vector *,Vector const &)\n"
    "    operator =(Vector *,std::vector< float,std::allocator< float > > const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vector *arg1 = (Vector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Vector const > tempshared1 ;
  std::tr1::shared_ptr< Vector const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vector_size",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Vector_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_size" "', argument " "1"" of type '" "Vector const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr< const Vector > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr< const Vector > * >(argp1);
      arg1 = const_cast< Vector * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr< const Vector > * >(argp1);
      arg1 = const_cast< Vector * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (int)((Vector const *)arg1)->size();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_memsize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vector *arg1 = (Vector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Vector const > tempshared1 ;
  std::tr1::shared_ptr< Vector const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vector_memsize",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Vector_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_memsize" "', argument " "1"" of type '" "Vector const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr< const Vector > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr< const Vector > * >(argp1);
      arg1 = const_cast< Vector * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr< const Vector > * >(argp1);
      arg1 = const_cast< Vector * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (int)((Vector const *)arg1)->memsize();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_mem(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vector *arg1 = (Vector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Vector > tempshared1 ;
  std::tr1::shared_ptr< Vector > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  float *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vector_mem",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Vector_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_mem" "', argument " "1"" of type '" "Vector *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Vector > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Vector > * >(argp1);
      arg1 = const_cast< Vector * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Vector > * >(argp1);
      arg1 = const_cast< Vector * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (float *)(arg1)->mem();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_float, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_resize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vector *arg1 = (Vector *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Vector > tempshared1 ;
  std::tr1::shared_ptr< Vector > *smartarg1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vector_resize",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Vector_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_resize" "', argument " "1"" of type '" "Vector *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Vector > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Vector > * >(argp1);
      arg1 = const_cast< Vector * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Vector > * >(argp1);
      arg1 = const_cast< Vector * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vector_resize" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vector *arg1 = (Vector *) 0 ;
  Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Vector > tempshared1 ;
  std::tr1::shared_ptr< Vector > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::tr1::shared_ptr< Vector const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vector_append",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Vector_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_append" "', argument " "1"" of type '" "Vector *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Vector > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Vector > * >(argp1);
      arg1 = const_cast< Vector * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Vector > * >(argp1);
      arg1 = const_cast< Vector * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_std__tr1__shared_ptrT_Vector_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vector_append" "', argument " "2"" of type '" "Vector const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vector_append" "', argument " "2"" of type '" "Vector const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< std::tr1::shared_ptr< const Vector > * >(argp2);
      delete reinterpret_cast< std::tr1::shared_ptr< const Vector > * >(argp2);
      arg2 = const_cast< Vector * >(tempshared2.get());
    } else {
      arg2 = const_cast< Vector * >(reinterpret_cast< std::tr1::shared_ptr< const Vector > * >(argp2)->get());
    }
  }
  (arg1)->append((Vector const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_zero(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vector *arg1 = (Vector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Vector > tempshared1 ;
  std::tr1::shared_ptr< Vector > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vector_zero",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Vector_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_zero" "', argument " "1"" of type '" "Vector *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Vector > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Vector > * >(argp1);
      arg1 = const_cast< Vector * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Vector > * >(argp1);
      arg1 = const_cast< Vector * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (arg1)->zero();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vector *arg1 = (Vector *) 0 ;
  Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Vector const > tempshared1 ;
  std::tr1::shared_ptr< Vector const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::tr1::shared_ptr< Vector const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vector___eq__",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Vector_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector___eq__" "', argument " "1"" of type '" "Vector const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr< const Vector > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr< const Vector > * >(argp1);
      arg1 = const_cast< Vector * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr< const Vector > * >(argp1);
      arg1 = const_cast< Vector * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_std__tr1__shared_ptrT_Vector_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vector___eq__" "', argument " "2"" of type '" "Vector const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vector___eq__" "', argument " "2"" of type '" "Vector const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< std::tr1::shared_ptr< const Vector > * >(argp2);
      delete reinterpret_cast< std::tr1::shared_ptr< const Vector > * >(argp2);
      arg2 = const_cast< Vector * >(tempshared2.get());
    } else {
      arg2 = const_cast< Vector * >(reinterpret_cast< std::tr1::shared_ptr< const Vector > * >(argp2)->get());
    }
  }
  result = (bool)((Vector const *)arg1)->operator ==((Vector const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vector *arg1 = (Vector *) 0 ;
  Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Vector const > tempshared1 ;
  std::tr1::shared_ptr< Vector const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::tr1::shared_ptr< Vector const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vector___ne__",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Vector_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector___ne__" "', argument " "1"" of type '" "Vector const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr< const Vector > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr< const Vector > * >(argp1);
      arg1 = const_cast< Vector * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr< const Vector > * >(argp1);
      arg1 = const_cast< Vector * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_std__tr1__shared_ptrT_Vector_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vector___ne__" "', argument " "2"" of type '" "Vector const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vector___ne__" "', argument " "2"" of type '" "Vector const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< std::tr1::shared_ptr< const Vector > * >(argp2);
      delete reinterpret_cast< std::tr1::shared_ptr< const Vector > * >(argp2);
      arg2 = const_cast< Vector * >(tempshared2.get());
    } else {
      arg2 = const_cast< Vector * >(reinterpret_cast< std::tr1::shared_ptr< const Vector > * >(argp2)->get());
    }
  }
  result = (bool)((Vector const *)arg1)->operator !=((Vector const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vector *arg1 = (Vector *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Vector const > tempshared1 ;
  std::tr1::shared_ptr< Vector const > *smartarg1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vector_get",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Vector_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_get" "', argument " "1"" of type '" "Vector const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr< const Vector > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr< const Vector > * >(argp1);
      arg1 = const_cast< Vector * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr< const Vector > * >(argp1);
      arg1 = const_cast< Vector * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vector_get" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (float)((Vector const *)arg1)->get(arg2);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vector *arg1 = (Vector *) 0 ;
  int arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Vector > tempshared1 ;
  std::tr1::shared_ptr< Vector > *smartarg1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Vector_set",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Vector_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_set" "', argument " "1"" of type '" "Vector *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Vector > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Vector > * >(argp1);
      arg1 = const_cast< Vector * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Vector > * >(argp1);
      arg1 = const_cast< Vector * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vector_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Vector_set" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  (arg1)->set(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector___getitem_ref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vector *arg1 = (Vector *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Vector > tempshared1 ;
  std::tr1::shared_ptr< Vector > *smartarg1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vector___getitem_ref__",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Vector_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector___getitem_ref__" "', argument " "1"" of type '" "Vector *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Vector > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Vector > * >(argp1);
      arg1 = const_cast< Vector * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Vector > * >(argp1);
      arg1 = const_cast< Vector * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vector___getitem_ref__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (float *) &(arg1)->operator [](arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_float, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vector *arg1 = (Vector *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Vector const > tempshared1 ;
  std::tr1::shared_ptr< Vector const > *smartarg1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vector___getitem__",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Vector_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector___getitem__" "', argument " "1"" of type '" "Vector const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr< const Vector > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr< const Vector > * >(argp1);
      arg1 = const_cast< Vector * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr< const Vector > * >(argp1);
      arg1 = const_cast< Vector * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vector___getitem__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (float *) &((Vector const *)arg1)->operator [](arg2);
  resultobj = SWIG_From_float(static_cast< float >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_extract__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vector *arg1 = (Vector *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Vector > tempshared1 ;
  std::tr1::shared_ptr< Vector > *smartarg1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Vector result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Vector_extract",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Vector_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_extract" "', argument " "1"" of type '" "Vector *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Vector > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Vector > * >(argp1);
      arg1 = const_cast< Vector * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Vector > * >(argp1);
      arg1 = const_cast< Vector * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vector_extract" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vector_extract" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Vector_extract" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (arg1)->extract((std::vector< int,std::allocator< int > > const &)*arg2,arg3);
  {
    std::tr1::shared_ptr<  Vector > *smartresult = new std::tr1::shared_ptr<  Vector >(new Vector((Vector &)result));
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Vector_t, SWIG_POINTER_OWN);
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_extract__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vector *arg1 = (Vector *) 0 ;
  int arg2 ;
  int arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Vector > tempshared1 ;
  std::tr1::shared_ptr< Vector > *smartarg1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Vector result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Vector_extract",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Vector_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_extract" "', argument " "1"" of type '" "Vector *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Vector > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Vector > * >(argp1);
      arg1 = const_cast< Vector * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Vector > * >(argp1);
      arg1 = const_cast< Vector * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vector_extract" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Vector_extract" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Vector_extract" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  result = (arg1)->extract(arg2,arg3,arg4);
  {
    std::tr1::shared_ptr<  Vector > *smartresult = new std::tr1::shared_ptr<  Vector >(new Vector((Vector &)result));
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Vector_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_extract(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Vector_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector<int,std::allocator< int > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Vector_extract__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Vector_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Vector_extract__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Vector_extract'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    extract(Vector *,std::vector< int,std::allocator< int > > const &,bool)\n"
    "    extract(Vector *,int,int,bool)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_parse__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  float *arg2 = (float *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Vector_parse",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Vector_parse" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vector_parse" "', argument " "2"" of type '" "float *""'"); 
  }
  arg2 = reinterpret_cast< float * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Vector_parse" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(obj3, &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Vector_parse" "', argument " "4"" of type '" "char *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  Vector::parse(arg1,arg2,(char const *)arg3,arg4);
  resultobj = SWIG_Py_Void();
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_parse__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  float *arg2 = (float *) 0 ;
  char *arg3 = (char *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Vector_parse",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Vector_parse" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vector_parse" "', argument " "2"" of type '" "float *""'"); 
  }
  arg2 = reinterpret_cast< float * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Vector_parse" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  Vector::parse(arg1,arg2,(char const *)arg3);
  resultobj = SWIG_Py_Void();
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_parse(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_float, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Vector_parse__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_float, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_Vector_parse__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Vector_parse'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    parse(int,float *,char const *,char *)\n"
    "    Vector::parse(int,float *,char const *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_c_vector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vector *arg1 = (Vector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Vector const > tempshared1 ;
  std::tr1::shared_ptr< Vector const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vector_c_vector",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Vector_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_c_vector" "', argument " "1"" of type '" "Vector const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr< const Vector > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr< const Vector > * >(argp1);
      arg1 = const_cast< Vector * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr< const Vector > * >(argp1);
      arg1 = const_cast< Vector * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((Vector const *)arg1)->c_vector();
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector___repr__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vector *arg1 = (Vector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Vector const > tempshared1 ;
  std::tr1::shared_ptr< Vector const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vector___repr__",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Vector_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector___repr__" "', argument " "1"" of type '" "Vector const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr< const Vector > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr< const Vector > * >(argp1);
      arg1 = const_cast< Vector * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr< const Vector > * >(argp1);
      arg1 = const_cast< Vector * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((Vector const *)arg1)->repr();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vector *arg1 = (Vector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Vector const > tempshared1 ;
  std::tr1::shared_ptr< Vector const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vector___str__",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Vector_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector___str__" "', argument " "1"" of type '" "Vector const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr< const Vector > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr< const Vector > * >(argp1);
      arg1 = const_cast< Vector * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr< const Vector > * >(argp1);
      arg1 = const_cast< Vector * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((Vector const *)arg1)->str();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_SelfTest(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":Vector_SelfTest")) SWIG_fail;
  result = (int)Vector::SelfTest();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Vector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__tr1__shared_ptrT_Vector_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_Color4f_Write(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Color4f *arg1 = (Color4f *) 0 ;
  Archive *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Color4f_Write",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Color4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Color4f_Write" "', argument " "1"" of type '" "Color4f *""'"); 
  }
  arg1 = reinterpret_cast< Color4f * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Archive,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Color4f_Write" "', argument " "2"" of type '" "Archive &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Color4f_Write" "', argument " "2"" of type '" "Archive &""'"); 
  }
  arg2 = reinterpret_cast< Archive * >(argp2);
  (arg1)->Write(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Color4f_Read(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Color4f *arg1 = (Color4f *) 0 ;
  Archive *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Color4f_Read",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Color4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Color4f_Read" "', argument " "1"" of type '" "Color4f *""'"); 
  }
  arg1 = reinterpret_cast< Color4f * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Archive,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Color4f_Read" "', argument " "2"" of type '" "Archive &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Color4f_Read" "', argument " "2"" of type '" "Archive &""'"); 
  }
  arg2 = reinterpret_cast< Archive * >(argp2);
  (arg1)->Read(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Color4f_r_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Color4f *arg1 = (Color4f *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Color4f_r_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Color4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Color4f_r_set" "', argument " "1"" of type '" "Color4f *""'"); 
  }
  arg1 = reinterpret_cast< Color4f * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Color4f_r_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->r = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Color4f_r_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Color4f *arg1 = (Color4f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Color4f_r_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Color4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Color4f_r_get" "', argument " "1"" of type '" "Color4f *""'"); 
  }
  arg1 = reinterpret_cast< Color4f * >(argp1);
  result = (float) ((arg1)->r);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Color4f_g_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Color4f *arg1 = (Color4f *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Color4f_g_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Color4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Color4f_g_set" "', argument " "1"" of type '" "Color4f *""'"); 
  }
  arg1 = reinterpret_cast< Color4f * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Color4f_g_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->g = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Color4f_g_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Color4f *arg1 = (Color4f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Color4f_g_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Color4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Color4f_g_get" "', argument " "1"" of type '" "Color4f *""'"); 
  }
  arg1 = reinterpret_cast< Color4f * >(argp1);
  result = (float) ((arg1)->g);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Color4f_b_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Color4f *arg1 = (Color4f *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Color4f_b_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Color4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Color4f_b_set" "', argument " "1"" of type '" "Color4f *""'"); 
  }
  arg1 = reinterpret_cast< Color4f * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Color4f_b_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->b = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Color4f_b_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Color4f *arg1 = (Color4f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Color4f_b_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Color4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Color4f_b_get" "', argument " "1"" of type '" "Color4f *""'"); 
  }
  arg1 = reinterpret_cast< Color4f * >(argp1);
  result = (float) ((arg1)->b);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Color4f_a_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Color4f *arg1 = (Color4f *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Color4f_a_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Color4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Color4f_a_set" "', argument " "1"" of type '" "Color4f *""'"); 
  }
  arg1 = reinterpret_cast< Color4f * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Color4f_a_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->a = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Color4f_a_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Color4f *arg1 = (Color4f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Color4f_a_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Color4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Color4f_a_get" "', argument " "1"" of type '" "Color4f *""'"); 
  }
  arg1 = reinterpret_cast< Color4f * >(argp1);
  result = (float) ((arg1)->a);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Color4f__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Color4f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Color4f")) SWIG_fail;
  result = (Color4f *)new Color4f();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Color4f, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Color4f__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Color4f *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Color4f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Color4f",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Color4f,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Color4f" "', argument " "1"" of type '" "Color4f const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Color4f" "', argument " "1"" of type '" "Color4f const &""'"); 
  }
  arg1 = reinterpret_cast< Color4f * >(argp1);
  result = (Color4f *)new Color4f((Color4f const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Color4f, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Color4f__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Color4f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_Color4f",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Color4f" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Color4f" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Color4f" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_Color4f" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  result = (Color4f *)new Color4f(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Color4f, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Color4f__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Color4f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_Color4f",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Color4f" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Color4f" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Color4f" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  result = (Color4f *)new Color4f(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Color4f, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Color4f__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float,std::allocator< float > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  Color4f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Color4f",&obj0)) SWIG_fail;
  {
    std::vector<float,std::allocator< float > > *ptr = (std::vector<float,std::allocator< float > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Color4f" "', argument " "1"" of type '" "std::vector< float,std::allocator< float > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Color4f" "', argument " "1"" of type '" "std::vector< float,std::allocator< float > > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (Color4f *)new Color4f((std::vector< float,std::allocator< float > > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Color4f, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Color4f_Black(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Color4f result;
  
  if (!PyArg_ParseTuple(args,(char *)":Color4f_Black")) SWIG_fail;
  result = Color4f::Black();
  resultobj = SWIG_NewPointerObj((new Color4f(static_cast< const Color4f& >(result))), SWIGTYPE_p_Color4f, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Color4f_White(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Color4f result;
  
  if (!PyArg_ParseTuple(args,(char *)":Color4f_White")) SWIG_fail;
  result = Color4f::White();
  resultobj = SWIG_NewPointerObj((new Color4f(static_cast< const Color4f& >(result))), SWIGTYPE_p_Color4f, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Color4f_Red(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Color4f result;
  
  if (!PyArg_ParseTuple(args,(char *)":Color4f_Red")) SWIG_fail;
  result = Color4f::Red();
  resultobj = SWIG_NewPointerObj((new Color4f(static_cast< const Color4f& >(result))), SWIGTYPE_p_Color4f, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Color4f_Green(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Color4f result;
  
  if (!PyArg_ParseTuple(args,(char *)":Color4f_Green")) SWIG_fail;
  result = Color4f::Green();
  resultobj = SWIG_NewPointerObj((new Color4f(static_cast< const Color4f& >(result))), SWIGTYPE_p_Color4f, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Color4f_Blue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Color4f result;
  
  if (!PyArg_ParseTuple(args,(char *)":Color4f_Blue")) SWIG_fail;
  result = Color4f::Blue();
  resultobj = SWIG_NewPointerObj((new Color4f(static_cast< const Color4f& >(result))), SWIGTYPE_p_Color4f, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Color4f_Yellow(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Color4f result;
  
  if (!PyArg_ParseTuple(args,(char *)":Color4f_Yellow")) SWIG_fail;
  result = Color4f::Yellow();
  resultobj = SWIG_NewPointerObj((new Color4f(static_cast< const Color4f& >(result))), SWIGTYPE_p_Color4f, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Color4f__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  float *arg1 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Color4f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Color4f",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Color4f" "', argument " "1"" of type '" "float *""'"); 
  }
  arg1 = reinterpret_cast< float * >(argp1);
  result = (Color4f *)new Color4f(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Color4f, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Color4f(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Color4f__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Color4f, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Color4f__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_float, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Color4f__SWIG_5(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<float,std::allocator< float > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Color4f__SWIG_4(self, args);
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_Color4f__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_Color4f__SWIG_2(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Color4f'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Color4f()\n"
    "    Color4f(Color4f const &)\n"
    "    Color4f(float,float,float,float)\n"
    "    Color4f(float,float,float)\n"
    "    Color4f(std::vector< float,std::allocator< float > > const &)\n"
    "    Color4f(float *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Color4f_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Color4f *arg1 = (Color4f *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Color4f_get",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Color4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Color4f_get" "', argument " "1"" of type '" "Color4f *""'"); 
  }
  arg1 = reinterpret_cast< Color4f * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Color4f_get" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (float)(arg1)->get(arg2);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Color4f_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Color4f *arg1 = (Color4f *) 0 ;
  int arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Color4f_set",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Color4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Color4f_set" "', argument " "1"" of type '" "Color4f *""'"); 
  }
  arg1 = reinterpret_cast< Color4f * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Color4f_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Color4f_set" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  (arg1)->set(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Color4f___getitem_ref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Color4f *arg1 = (Color4f *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Color4f___getitem_ref__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Color4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Color4f___getitem_ref__" "', argument " "1"" of type '" "Color4f *""'"); 
  }
  arg1 = reinterpret_cast< Color4f * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Color4f___getitem_ref__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (float *) &(arg1)->operator [](arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_float, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Color4f___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Color4f *arg1 = (Color4f *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Color4f___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Color4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Color4f___getitem__" "', argument " "1"" of type '" "Color4f const *""'"); 
  }
  arg1 = reinterpret_cast< Color4f * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Color4f___getitem__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (float *) &((Color4f const *)arg1)->operator [](arg2);
  resultobj = SWIG_From_float(static_cast< float >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Color4f___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Color4f *arg1 = (Color4f *) 0 ;
  Color4f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Color4f___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Color4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Color4f___eq__" "', argument " "1"" of type '" "Color4f const *""'"); 
  }
  arg1 = reinterpret_cast< Color4f * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Color4f,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Color4f___eq__" "', argument " "2"" of type '" "Color4f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Color4f___eq__" "', argument " "2"" of type '" "Color4f const &""'"); 
  }
  arg2 = reinterpret_cast< Color4f * >(argp2);
  result = (bool)((Color4f const *)arg1)->operator ==((Color4f const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Color4f___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Color4f *arg1 = (Color4f *) 0 ;
  Color4f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Color4f___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Color4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Color4f___ne__" "', argument " "1"" of type '" "Color4f const *""'"); 
  }
  arg1 = reinterpret_cast< Color4f * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Color4f,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Color4f___ne__" "', argument " "2"" of type '" "Color4f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Color4f___ne__" "', argument " "2"" of type '" "Color4f const &""'"); 
  }
  arg2 = reinterpret_cast< Color4f * >(argp2);
  result = (bool)((Color4f const *)arg1)->operator !=((Color4f const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Color4f_sscanf(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject * obj0 = 0 ;
  Color4f result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Color4f_sscanf",&obj0)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Color4f_sscanf" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  result = Color4f::sscanf((char const *)arg1);
  resultobj = SWIG_NewPointerObj((new Color4f(static_cast< const Color4f& >(result))), SWIGTYPE_p_Color4f, SWIG_POINTER_OWN |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Color4f_randomRGB(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Color4f result;
  
  if (!PyArg_ParseTuple(args,(char *)":Color4f_randomRGB")) SWIG_fail;
  result = Color4f::randomRGB();
  resultobj = SWIG_NewPointerObj((new Color4f(static_cast< const Color4f& >(result))), SWIGTYPE_p_Color4f, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Color4f_randomRGBA(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Color4f result;
  
  if (!PyArg_ParseTuple(args,(char *)":Color4f_randomRGBA")) SWIG_fail;
  result = Color4f::randomRGBA();
  resultobj = SWIG_NewPointerObj((new Color4f(static_cast< const Color4f& >(result))), SWIGTYPE_p_Color4f, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Color4f___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Color4f *arg1 = (Color4f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Color4f___str__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Color4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Color4f___str__" "', argument " "1"" of type '" "Color4f const *""'"); 
  }
  arg1 = reinterpret_cast< Color4f * >(argp1);
  result = ((Color4f const *)arg1)->str();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Color4f___repr__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Color4f *arg1 = (Color4f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Color4f___repr__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Color4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Color4f___repr__" "', argument " "1"" of type '" "Color4f const *""'"); 
  }
  arg1 = reinterpret_cast< Color4f * >(argp1);
  result = ((Color4f const *)arg1)->repr();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Color4f(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Color4f *arg1 = (Color4f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Color4f",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Color4f, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Color4f" "', argument " "1"" of type '" "Color4f *""'"); 
  }
  arg1 = reinterpret_cast< Color4f * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Color4f_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Color4f, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_Frustum_walk_speed_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Frustum *arg1 = (Frustum *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Frustum_walk_speed_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Frustum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Frustum_walk_speed_set" "', argument " "1"" of type '" "Frustum *""'"); 
  }
  arg1 = reinterpret_cast< Frustum * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Frustum_walk_speed_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->walk_speed = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Frustum_walk_speed_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Frustum *arg1 = (Frustum *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Frustum_walk_speed_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Frustum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Frustum_walk_speed_get" "', argument " "1"" of type '" "Frustum *""'"); 
  }
  arg1 = reinterpret_cast< Frustum * >(argp1);
  result = (float) ((arg1)->walk_speed);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Frustum_x_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Frustum *arg1 = (Frustum *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Frustum_x_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Frustum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Frustum_x_set" "', argument " "1"" of type '" "Frustum *""'"); 
  }
  arg1 = reinterpret_cast< Frustum * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Frustum_x_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->x = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Frustum_x_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Frustum *arg1 = (Frustum *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Frustum_x_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Frustum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Frustum_x_get" "', argument " "1"" of type '" "Frustum *""'"); 
  }
  arg1 = reinterpret_cast< Frustum * >(argp1);
  result = (int) ((arg1)->x);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Frustum_y_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Frustum *arg1 = (Frustum *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Frustum_y_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Frustum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Frustum_y_set" "', argument " "1"" of type '" "Frustum *""'"); 
  }
  arg1 = reinterpret_cast< Frustum * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Frustum_y_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->y = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Frustum_y_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Frustum *arg1 = (Frustum *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Frustum_y_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Frustum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Frustum_y_get" "', argument " "1"" of type '" "Frustum *""'"); 
  }
  arg1 = reinterpret_cast< Frustum * >(argp1);
  result = (int) ((arg1)->y);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Frustum_width_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Frustum *arg1 = (Frustum *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Frustum_width_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Frustum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Frustum_width_set" "', argument " "1"" of type '" "Frustum *""'"); 
  }
  arg1 = reinterpret_cast< Frustum * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Frustum_width_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->width = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Frustum_width_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Frustum *arg1 = (Frustum *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Frustum_width_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Frustum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Frustum_width_get" "', argument " "1"" of type '" "Frustum *""'"); 
  }
  arg1 = reinterpret_cast< Frustum * >(argp1);
  result = (int) ((arg1)->width);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Frustum_height_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Frustum *arg1 = (Frustum *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Frustum_height_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Frustum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Frustum_height_set" "', argument " "1"" of type '" "Frustum *""'"); 
  }
  arg1 = reinterpret_cast< Frustum * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Frustum_height_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->height = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Frustum_height_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Frustum *arg1 = (Frustum *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Frustum_height_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Frustum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Frustum_height_get" "', argument " "1"" of type '" "Frustum *""'"); 
  }
  arg1 = reinterpret_cast< Frustum * >(argp1);
  result = (int) ((arg1)->height);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Frustum_pos_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Frustum *arg1 = (Frustum *) 0 ;
  Vec3f *arg2 = (Vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Frustum_pos_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Frustum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Frustum_pos_set" "', argument " "1"" of type '" "Frustum *""'"); 
  }
  arg1 = reinterpret_cast< Frustum * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Vec3f, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Frustum_pos_set" "', argument " "2"" of type '" "Vec3f *""'"); 
  }
  arg2 = reinterpret_cast< Vec3f * >(argp2);
  if (arg1) (arg1)->pos = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Frustum_pos_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Frustum *arg1 = (Frustum *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Vec3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Frustum_pos_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Frustum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Frustum_pos_get" "', argument " "1"" of type '" "Frustum *""'"); 
  }
  arg1 = reinterpret_cast< Frustum * >(argp1);
  result = (Vec3f *)& ((arg1)->pos);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vec3f, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Frustum_dir_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Frustum *arg1 = (Frustum *) 0 ;
  Vec3f *arg2 = (Vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Frustum_dir_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Frustum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Frustum_dir_set" "', argument " "1"" of type '" "Frustum *""'"); 
  }
  arg1 = reinterpret_cast< Frustum * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Vec3f, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Frustum_dir_set" "', argument " "2"" of type '" "Vec3f *""'"); 
  }
  arg2 = reinterpret_cast< Vec3f * >(argp2);
  if (arg1) (arg1)->dir = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Frustum_dir_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Frustum *arg1 = (Frustum *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Vec3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Frustum_dir_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Frustum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Frustum_dir_get" "', argument " "1"" of type '" "Frustum *""'"); 
  }
  arg1 = reinterpret_cast< Frustum * >(argp1);
  result = (Vec3f *)& ((arg1)->dir);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vec3f, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Frustum_vup_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Frustum *arg1 = (Frustum *) 0 ;
  Vec3f *arg2 = (Vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Frustum_vup_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Frustum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Frustum_vup_set" "', argument " "1"" of type '" "Frustum *""'"); 
  }
  arg1 = reinterpret_cast< Frustum * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Vec3f, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Frustum_vup_set" "', argument " "2"" of type '" "Vec3f *""'"); 
  }
  arg2 = reinterpret_cast< Vec3f * >(argp2);
  if (arg1) (arg1)->vup = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Frustum_vup_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Frustum *arg1 = (Frustum *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Vec3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Frustum_vup_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Frustum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Frustum_vup_get" "', argument " "1"" of type '" "Frustum *""'"); 
  }
  arg1 = reinterpret_cast< Frustum * >(argp1);
  result = (Vec3f *)& ((arg1)->vup);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vec3f, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Frustum_right_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Frustum *arg1 = (Frustum *) 0 ;
  Vec3f *arg2 = (Vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Frustum_right_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Frustum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Frustum_right_set" "', argument " "1"" of type '" "Frustum *""'"); 
  }
  arg1 = reinterpret_cast< Frustum * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Vec3f, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Frustum_right_set" "', argument " "2"" of type '" "Vec3f *""'"); 
  }
  arg2 = reinterpret_cast< Vec3f * >(argp2);
  if (arg1) (arg1)->right = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Frustum_right_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Frustum *arg1 = (Frustum *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Vec3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Frustum_right_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Frustum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Frustum_right_get" "', argument " "1"" of type '" "Frustum *""'"); 
  }
  arg1 = reinterpret_cast< Frustum * >(argp1);
  result = (Vec3f *)& ((arg1)->right);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vec3f, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Frustum_projection_matrix_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Frustum *arg1 = (Frustum *) 0 ;
  Mat4f *arg2 = (Mat4f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Frustum_projection_matrix_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Frustum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Frustum_projection_matrix_set" "', argument " "1"" of type '" "Frustum *""'"); 
  }
  arg1 = reinterpret_cast< Frustum * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Mat4f, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Frustum_projection_matrix_set" "', argument " "2"" of type '" "Mat4f *""'"); 
  }
  arg2 = reinterpret_cast< Mat4f * >(argp2);
  if (arg1) (arg1)->projection_matrix = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Frustum_projection_matrix_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Frustum *arg1 = (Frustum *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Mat4f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Frustum_projection_matrix_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Frustum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Frustum_projection_matrix_get" "', argument " "1"" of type '" "Frustum *""'"); 
  }
  arg1 = reinterpret_cast< Frustum * >(argp1);
  result = (Mat4f *)& ((arg1)->projection_matrix);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Mat4f, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Frustum_mat_dir_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Frustum *arg1 = (Frustum *) 0 ;
  Mat4f *arg2 = (Mat4f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Frustum_mat_dir_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Frustum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Frustum_mat_dir_set" "', argument " "1"" of type '" "Frustum *""'"); 
  }
  arg1 = reinterpret_cast< Frustum * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Mat4f, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Frustum_mat_dir_set" "', argument " "2"" of type '" "Mat4f *""'"); 
  }
  arg2 = reinterpret_cast< Mat4f * >(argp2);
  if (arg1) (arg1)->mat_dir = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Frustum_mat_dir_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Frustum *arg1 = (Frustum *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Mat4f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Frustum_mat_dir_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Frustum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Frustum_mat_dir_get" "', argument " "1"" of type '" "Frustum *""'"); 
  }
  arg1 = reinterpret_cast< Frustum * >(argp1);
  result = (Mat4f *)& ((arg1)->mat_dir);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Mat4f, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Frustum_mat_inv_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Frustum *arg1 = (Frustum *) 0 ;
  Mat4f *arg2 = (Mat4f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Frustum_mat_inv_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Frustum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Frustum_mat_inv_set" "', argument " "1"" of type '" "Frustum *""'"); 
  }
  arg1 = reinterpret_cast< Frustum * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Mat4f, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Frustum_mat_inv_set" "', argument " "2"" of type '" "Mat4f *""'"); 
  }
  arg2 = reinterpret_cast< Mat4f * >(argp2);
  if (arg1) (arg1)->mat_inv = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Frustum_mat_inv_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Frustum *arg1 = (Frustum *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Mat4f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Frustum_mat_inv_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Frustum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Frustum_mat_inv_get" "', argument " "1"" of type '" "Frustum *""'"); 
  }
  arg1 = reinterpret_cast< Frustum * >(argp1);
  result = (Mat4f *)& ((arg1)->mat_inv);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Mat4f, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Frustum_aabb_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Frustum *arg1 = (Frustum *) 0 ;
  Box3f *arg2 = (Box3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Frustum_aabb_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Frustum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Frustum_aabb_set" "', argument " "1"" of type '" "Frustum *""'"); 
  }
  arg1 = reinterpret_cast< Frustum * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box3f, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Frustum_aabb_set" "', argument " "2"" of type '" "Box3f *""'"); 
  }
  arg2 = reinterpret_cast< Box3f * >(argp2);
  if (arg1) (arg1)->aabb = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Frustum_aabb_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Frustum *arg1 = (Frustum *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Box3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Frustum_aabb_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Frustum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Frustum_aabb_get" "', argument " "1"" of type '" "Frustum *""'"); 
  }
  arg1 = reinterpret_cast< Frustum * >(argp1);
  result = (Box3f *)& ((arg1)->aabb);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Box3f, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Frustum_planes_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Frustum *arg1 = (Frustum *) 0 ;
  Plane4f *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Frustum_planes_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Frustum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Frustum_planes_set" "', argument " "1"" of type '" "Frustum *""'"); 
  }
  arg1 = reinterpret_cast< Frustum * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Plane4f, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Frustum_planes_set" "', argument " "2"" of type '" "Plane4f [6]""'"); 
  } 
  arg2 = reinterpret_cast< Plane4f * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)6; ++ii) arg1->planes[ii] = arg2[ii];
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""planes""' of type '""Plane4f [6]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Frustum_planes_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Frustum *arg1 = (Frustum *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Plane4f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Frustum_planes_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Frustum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Frustum_planes_get" "', argument " "1"" of type '" "Frustum *""'"); 
  }
  arg1 = reinterpret_cast< Frustum * >(argp1);
  result = (Plane4f *)(Plane4f *) ((arg1)->planes);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Plane4f, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Frustum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Frustum *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Frustum")) SWIG_fail;
  result = (Frustum *)new Frustum();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Frustum, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Frustum_getRay(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Frustum *arg1 = (Frustum *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Ray3f result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Frustum_getRay",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Frustum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Frustum_getRay" "', argument " "1"" of type '" "Frustum const *""'"); 
  }
  arg1 = reinterpret_cast< Frustum * >(argp1);
  result = ((Frustum const *)arg1)->getRay();
  resultobj = SWIG_NewPointerObj((new Ray3f(static_cast< const Ray3f& >(result))), SWIGTYPE_p_Ray3f, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Frustum___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Frustum *arg1 = (Frustum *) 0 ;
  Frustum *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Frustum___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Frustum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Frustum___eq__" "', argument " "1"" of type '" "Frustum const *""'"); 
  }
  arg1 = reinterpret_cast< Frustum * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Frustum,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Frustum___eq__" "', argument " "2"" of type '" "Frustum const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Frustum___eq__" "', argument " "2"" of type '" "Frustum const &""'"); 
  }
  arg2 = reinterpret_cast< Frustum * >(argp2);
  result = (bool)((Frustum const *)arg1)->operator ==((Frustum const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Frustum_points_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Frustum *arg1 = (Frustum *) 0 ;
  Vec3f *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Frustum_points_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Frustum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Frustum_points_set" "', argument " "1"" of type '" "Frustum *""'"); 
  }
  arg1 = reinterpret_cast< Frustum * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Vec3f, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Frustum_points_set" "', argument " "2"" of type '" "Vec3f [8]""'"); 
  } 
  arg2 = reinterpret_cast< Vec3f * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)8; ++ii) arg1->points[ii] = arg2[ii];
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""points""' of type '""Vec3f [8]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Frustum_points_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Frustum *arg1 = (Frustum *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Vec3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Frustum_points_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Frustum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Frustum_points_get" "', argument " "1"" of type '" "Frustum *""'"); 
  }
  arg1 = reinterpret_cast< Frustum * >(argp1);
  result = (Vec3f *)(Vec3f *) ((arg1)->points);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vec3f, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Frustum_refresh(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Frustum *arg1 = (Frustum *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Frustum_refresh",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Frustum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Frustum_refresh" "', argument " "1"" of type '" "Frustum *""'"); 
  }
  arg1 = reinterpret_cast< Frustum * >(argp1);
  (arg1)->refresh();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Frustum_intersect(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Frustum *arg1 = (Frustum *) 0 ;
  Box3f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Frustum_intersect",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Frustum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Frustum_intersect" "', argument " "1"" of type '" "Frustum const *""'"); 
  }
  arg1 = reinterpret_cast< Frustum * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Box3f,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Frustum_intersect" "', argument " "2"" of type '" "Box3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Frustum_intersect" "', argument " "2"" of type '" "Box3f const &""'"); 
  }
  arg2 = reinterpret_cast< Box3f * >(argp2);
  result = (bool)((Frustum const *)arg1)->intersect((Box3f const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Frustum_contains(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Frustum *arg1 = (Frustum *) 0 ;
  Vec3f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Frustum_contains",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Frustum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Frustum_contains" "', argument " "1"" of type '" "Frustum *""'"); 
  }
  arg1 = reinterpret_cast< Frustum * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vec3f,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Frustum_contains" "', argument " "2"" of type '" "Vec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Frustum_contains" "', argument " "2"" of type '" "Vec3f const &""'"); 
  }
  arg2 = reinterpret_cast< Vec3f * >(argp2);
  result = (bool)(arg1)->contains((Vec3f const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Frustum_getModelviewMatrix(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Frustum *arg1 = (Frustum *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Mat4f result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Frustum_getModelviewMatrix",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Frustum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Frustum_getModelviewMatrix" "', argument " "1"" of type '" "Frustum const *""'"); 
  }
  arg1 = reinterpret_cast< Frustum * >(argp1);
  result = ((Frustum const *)arg1)->getModelviewMatrix();
  resultobj = SWIG_NewPointerObj((new Mat4f(static_cast< const Mat4f& >(result))), SWIGTYPE_p_Mat4f, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Frustum_Render(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Frustum *arg1 = (Frustum *) 0 ;
  Engine *arg2 = (Engine *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Frustum_Render",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Frustum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Frustum_Render" "', argument " "1"" of type '" "Frustum *""'"); 
  }
  arg1 = reinterpret_cast< Frustum * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Engine, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Frustum_Render" "', argument " "2"" of type '" "Engine *""'"); 
  }
  arg2 = reinterpret_cast< Engine * >(argp2);
  (arg1)->Render(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Frustum_project(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Frustum *arg1 = (Frustum *) 0 ;
  Vec3f arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Vec3f result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Frustum_project",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Frustum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Frustum_project" "', argument " "1"" of type '" "Frustum *""'"); 
  }
  arg1 = reinterpret_cast< Frustum * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vec3f,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Frustum_project" "', argument " "2"" of type '" "Vec3f""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Frustum_project" "', argument " "2"" of type '" "Vec3f""'");
    } else {
      Vec3f * temp = reinterpret_cast< Vec3f * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (arg1)->project(arg2);
  resultobj = SWIG_NewPointerObj((new Vec3f(static_cast< const Vec3f& >(result))), SWIGTYPE_p_Vec3f, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Frustum_unproject(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Frustum *arg1 = (Frustum *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Ray3f result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Frustum_unproject",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Frustum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Frustum_unproject" "', argument " "1"" of type '" "Frustum *""'"); 
  }
  arg1 = reinterpret_cast< Frustum * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Frustum_unproject" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Frustum_unproject" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (arg1)->unproject(arg2,arg3);
  resultobj = SWIG_NewPointerObj((new Ray3f(static_cast< const Ray3f& >(result))), SWIGTYPE_p_Ray3f, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Frustum_guessBestPosition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Frustum *arg1 = (Frustum *) 0 ;
  Box3f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Frustum_guessBestPosition",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Frustum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Frustum_guessBestPosition" "', argument " "1"" of type '" "Frustum *""'"); 
  }
  arg1 = reinterpret_cast< Frustum * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Box3f,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Frustum_guessBestPosition" "', argument " "2"" of type '" "Box3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Frustum_guessBestPosition" "', argument " "2"" of type '" "Box3f const &""'"); 
  }
  arg2 = reinterpret_cast< Box3f * >(argp2);
  (arg1)->guessBestPosition((Box3f const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Frustum_guessProjectionMatrix__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Frustum *arg1 = (Frustum *) 0 ;
  Box3f arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Frustum_guessProjectionMatrix",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Frustum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Frustum_guessProjectionMatrix" "', argument " "1"" of type '" "Frustum *""'"); 
  }
  arg1 = reinterpret_cast< Frustum * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Box3f,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Frustum_guessProjectionMatrix" "', argument " "2"" of type '" "Box3f""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Frustum_guessProjectionMatrix" "', argument " "2"" of type '" "Box3f""'");
    } else {
      Box3f * temp = reinterpret_cast< Box3f * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Frustum_guessProjectionMatrix" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  (arg1)->guessProjectionMatrix(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Frustum_guessProjectionMatrix__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Frustum *arg1 = (Frustum *) 0 ;
  Box3f arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Frustum_guessProjectionMatrix",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Frustum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Frustum_guessProjectionMatrix" "', argument " "1"" of type '" "Frustum *""'"); 
  }
  arg1 = reinterpret_cast< Frustum * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Box3f,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Frustum_guessProjectionMatrix" "', argument " "2"" of type '" "Box3f""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Frustum_guessProjectionMatrix" "', argument " "2"" of type '" "Box3f""'");
    } else {
      Box3f * temp = reinterpret_cast< Box3f * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  (arg1)->guessProjectionMatrix(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Frustum_guessProjectionMatrix(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Frustum, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Box3f, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Frustum_guessProjectionMatrix__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Frustum, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Box3f, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Frustum_guessProjectionMatrix__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Frustum_guessProjectionMatrix'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    guessProjectionMatrix(Frustum *,Box3f,float)\n"
    "    guessProjectionMatrix(Frustum *,Box3f)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Frustum_defaultMouseWalkingMode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Frustum *arg1 = (Frustum *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:Frustum_defaultMouseWalkingMode",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Frustum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Frustum_defaultMouseWalkingMode" "', argument " "1"" of type '" "Frustum *""'"); 
  }
  arg1 = reinterpret_cast< Frustum * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Frustum_defaultMouseWalkingMode" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Frustum_defaultMouseWalkingMode" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Frustum_defaultMouseWalkingMode" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Frustum_defaultMouseWalkingMode" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Frustum_defaultMouseWalkingMode" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  result = (bool)(arg1)->defaultMouseWalkingMode(arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Frustum_defaultMouseTrackballMode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Frustum *arg1 = (Frustum *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  Vec3f arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  void *argp7 ;
  int res7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:Frustum_defaultMouseTrackballMode",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Frustum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Frustum_defaultMouseTrackballMode" "', argument " "1"" of type '" "Frustum *""'"); 
  }
  arg1 = reinterpret_cast< Frustum * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Frustum_defaultMouseTrackballMode" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Frustum_defaultMouseTrackballMode" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Frustum_defaultMouseTrackballMode" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Frustum_defaultMouseTrackballMode" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Frustum_defaultMouseTrackballMode" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  {
    res7 = SWIG_ConvertPtr(obj6, &argp7, SWIGTYPE_p_Vec3f,  0  | 0);
    if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "Frustum_defaultMouseTrackballMode" "', argument " "7"" of type '" "Vec3f""'"); 
    }  
    if (!argp7) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Frustum_defaultMouseTrackballMode" "', argument " "7"" of type '" "Vec3f""'");
    } else {
      Vec3f * temp = reinterpret_cast< Vec3f * >(argp7);
      arg7 = *temp;
      if (SWIG_IsNewObj(res7)) delete temp;
    }
  }
  result = (bool)(arg1)->defaultMouseTrackballMode(arg2,arg3,arg4,arg5,arg6,arg7);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Frustum_defaultKeyboard(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Frustum *arg1 = (Frustum *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Frustum_defaultKeyboard",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Frustum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Frustum_defaultKeyboard" "', argument " "1"" of type '" "Frustum *""'"); 
  }
  arg1 = reinterpret_cast< Frustum * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Frustum_defaultKeyboard" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Frustum_defaultKeyboard" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Frustum_defaultKeyboard" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  result = (bool)(arg1)->defaultKeyboard(arg2,arg3,arg4);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Frustum_fixVup(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Frustum *arg1 = (Frustum *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Frustum_fixVup",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Frustum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Frustum_fixVup" "', argument " "1"" of type '" "Frustum *""'"); 
  }
  arg1 = reinterpret_cast< Frustum * >(argp1);
  (arg1)->fixVup();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Frustum_getScreenDistance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Frustum *arg1 = (Frustum *) 0 ;
  Vec3f arg2 ;
  Vec3f arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Frustum_getScreenDistance",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Frustum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Frustum_getScreenDistance" "', argument " "1"" of type '" "Frustum *""'"); 
  }
  arg1 = reinterpret_cast< Frustum * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vec3f,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Frustum_getScreenDistance" "', argument " "2"" of type '" "Vec3f""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Frustum_getScreenDistance" "', argument " "2"" of type '" "Vec3f""'");
    } else {
      Vec3f * temp = reinterpret_cast< Vec3f * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Vec3f,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Frustum_getScreenDistance" "', argument " "3"" of type '" "Vec3f""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Frustum_getScreenDistance" "', argument " "3"" of type '" "Vec3f""'");
    } else {
      Vec3f * temp = reinterpret_cast< Vec3f * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  result = (float)(arg1)->getScreenDistance(arg2,arg3);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Frustum_nearOnScreen__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Frustum *arg1 = (Frustum *) 0 ;
  Vec3f arg2 ;
  Vec3f arg3 ;
  float arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Frustum_nearOnScreen",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Frustum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Frustum_nearOnScreen" "', argument " "1"" of type '" "Frustum *""'"); 
  }
  arg1 = reinterpret_cast< Frustum * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vec3f,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Frustum_nearOnScreen" "', argument " "2"" of type '" "Vec3f""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Frustum_nearOnScreen" "', argument " "2"" of type '" "Vec3f""'");
    } else {
      Vec3f * temp = reinterpret_cast< Vec3f * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Vec3f,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Frustum_nearOnScreen" "', argument " "3"" of type '" "Vec3f""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Frustum_nearOnScreen" "', argument " "3"" of type '" "Vec3f""'");
    } else {
      Vec3f * temp = reinterpret_cast< Vec3f * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Frustum_nearOnScreen" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  result = (bool)(arg1)->nearOnScreen(arg2,arg3,arg4);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Frustum_nearOnScreen__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Frustum *arg1 = (Frustum *) 0 ;
  Vec3f arg2 ;
  Vec3f arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Frustum_nearOnScreen",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Frustum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Frustum_nearOnScreen" "', argument " "1"" of type '" "Frustum *""'"); 
  }
  arg1 = reinterpret_cast< Frustum * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vec3f,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Frustum_nearOnScreen" "', argument " "2"" of type '" "Vec3f""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Frustum_nearOnScreen" "', argument " "2"" of type '" "Vec3f""'");
    } else {
      Vec3f * temp = reinterpret_cast< Vec3f * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Vec3f,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Frustum_nearOnScreen" "', argument " "3"" of type '" "Vec3f""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Frustum_nearOnScreen" "', argument " "3"" of type '" "Vec3f""'");
    } else {
      Vec3f * temp = reinterpret_cast< Vec3f * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  result = (bool)(arg1)->nearOnScreen(arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Frustum_nearOnScreen(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Frustum, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Vec3f, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_Vec3f, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Frustum_nearOnScreen__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Frustum, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Vec3f, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_Vec3f, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Frustum_nearOnScreen__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Frustum_nearOnScreen'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    nearOnScreen(Frustum *,Vec3f,Vec3f,float)\n"
    "    nearOnScreen(Frustum *,Vec3f,Vec3f)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Frustum___repr__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Frustum *arg1 = (Frustum *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Frustum___repr__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Frustum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Frustum___repr__" "', argument " "1"" of type '" "Frustum const *""'"); 
  }
  arg1 = reinterpret_cast< Frustum * >(argp1);
  result = ((Frustum const *)arg1)->repr();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Frustum___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Frustum *arg1 = (Frustum *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Frustum___str__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Frustum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Frustum___str__" "', argument " "1"" of type '" "Frustum const *""'"); 
  }
  arg1 = reinterpret_cast< Frustum * >(argp1);
  result = ((Frustum const *)arg1)->str();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Frustum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Frustum *arg1 = (Frustum *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Frustum",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Frustum, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Frustum" "', argument " "1"" of type '" "Frustum *""'"); 
  }
  arg1 = reinterpret_cast< Frustum * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Frustum_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Frustum, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_Texture_filename_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Texture *arg1 = (Texture *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Texture > tempshared1 ;
  std::tr1::shared_ptr< Texture > *smartarg1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Texture_filename_set",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Texture_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Texture_filename_set" "', argument " "1"" of type '" "Texture *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Texture > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Texture > * >(argp1);
      arg1 = const_cast< Texture * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Texture > * >(argp1);
      arg1 = const_cast< Texture * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Texture_filename_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Texture_filename_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->filename = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Texture_filename_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Texture *arg1 = (Texture *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Texture > tempshared1 ;
  std::tr1::shared_ptr< Texture > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Texture_filename_get",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Texture_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Texture_filename_get" "', argument " "1"" of type '" "Texture *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Texture > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Texture > * >(argp1);
      arg1 = const_cast< Texture * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Texture > * >(argp1);
      arg1 = const_cast< Texture * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (std::string *) & ((arg1)->filename);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Texture_gpu_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Texture *arg1 = (Texture *) 0 ;
  std::tr1::shared_ptr< EngineResource > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Texture > tempshared1 ;
  std::tr1::shared_ptr< Texture > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::tr1::shared_ptr< EngineResource > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Texture_gpu_set",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Texture_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Texture_gpu_set" "', argument " "1"" of type '" "Texture *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Texture > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Texture > * >(argp1);
      arg1 = const_cast< Texture * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Texture > * >(argp1);
      arg1 = const_cast< Texture * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_std__tr1__shared_ptrT_EngineResource_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Texture_gpu_set" "', argument " "2"" of type '" "std::tr1::shared_ptr< EngineResource > const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< std::tr1::shared_ptr< EngineResource > * >(argp2);
      delete reinterpret_cast< std::tr1::shared_ptr< EngineResource > * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< std::tr1::shared_ptr< EngineResource > * >(argp2) : &tempshared2;
    }
  }
  if (arg1) (arg1)->gpu = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Texture_gpu_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Texture *arg1 = (Texture *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Texture > tempshared1 ;
  std::tr1::shared_ptr< Texture > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  std::tr1::shared_ptr< EngineResource > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Texture_gpu_get",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Texture_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Texture_gpu_get" "', argument " "1"" of type '" "Texture *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Texture > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Texture > * >(argp1);
      arg1 = const_cast< Texture * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Texture > * >(argp1);
      arg1 = const_cast< Texture * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (std::tr1::shared_ptr< EngineResource > *) & ((arg1)->gpu);
  {
    std::tr1::shared_ptr<  EngineResource > *smartresult = *result ? new std::tr1::shared_ptr<  EngineResource >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_EngineResource_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Texture_bpp_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Texture *arg1 = (Texture *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Texture > tempshared1 ;
  std::tr1::shared_ptr< Texture > *smartarg1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Texture_bpp_set",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Texture_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Texture_bpp_set" "', argument " "1"" of type '" "Texture *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Texture > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Texture > * >(argp1);
      arg1 = const_cast< Texture * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Texture > * >(argp1);
      arg1 = const_cast< Texture * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Texture_bpp_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->bpp = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Texture_bpp_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Texture *arg1 = (Texture *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Texture > tempshared1 ;
  std::tr1::shared_ptr< Texture > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Texture_bpp_get",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Texture_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Texture_bpp_get" "', argument " "1"" of type '" "Texture *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Texture > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Texture > * >(argp1);
      arg1 = const_cast< Texture * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Texture > * >(argp1);
      arg1 = const_cast< Texture * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (int) ((arg1)->bpp);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Texture_width_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Texture *arg1 = (Texture *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Texture > tempshared1 ;
  std::tr1::shared_ptr< Texture > *smartarg1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Texture_width_set",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Texture_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Texture_width_set" "', argument " "1"" of type '" "Texture *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Texture > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Texture > * >(argp1);
      arg1 = const_cast< Texture * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Texture > * >(argp1);
      arg1 = const_cast< Texture * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Texture_width_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  if (arg1) (arg1)->width = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Texture_width_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Texture *arg1 = (Texture *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Texture > tempshared1 ;
  std::tr1::shared_ptr< Texture > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Texture_width_get",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Texture_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Texture_width_get" "', argument " "1"" of type '" "Texture *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Texture > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Texture > * >(argp1);
      arg1 = const_cast< Texture * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Texture > * >(argp1);
      arg1 = const_cast< Texture * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (unsigned int) ((arg1)->width);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Texture_height_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Texture *arg1 = (Texture *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Texture > tempshared1 ;
  std::tr1::shared_ptr< Texture > *smartarg1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Texture_height_set",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Texture_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Texture_height_set" "', argument " "1"" of type '" "Texture *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Texture > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Texture > * >(argp1);
      arg1 = const_cast< Texture * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Texture > * >(argp1);
      arg1 = const_cast< Texture * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Texture_height_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  if (arg1) (arg1)->height = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Texture_height_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Texture *arg1 = (Texture *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Texture > tempshared1 ;
  std::tr1::shared_ptr< Texture > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Texture_height_get",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Texture_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Texture_height_get" "', argument " "1"" of type '" "Texture *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Texture > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Texture > * >(argp1);
      arg1 = const_cast< Texture * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Texture > * >(argp1);
      arg1 = const_cast< Texture * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (unsigned int) ((arg1)->height);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Texture_buffer_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Texture *arg1 = (Texture *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Texture > tempshared1 ;
  std::tr1::shared_ptr< Texture > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Texture_buffer_set",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Texture_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Texture_buffer_set" "', argument " "1"" of type '" "Texture *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Texture > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Texture > * >(argp1);
      arg1 = const_cast< Texture * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Texture > * >(argp1);
      arg1 = const_cast< Texture * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_unsigned_char, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Texture_buffer_set" "', argument " "2"" of type '" "unsigned char *""'"); 
  }
  arg2 = reinterpret_cast< unsigned char * >(argp2);
  if (arg1) (arg1)->buffer = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Texture_buffer_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Texture *arg1 = (Texture *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Texture > tempshared1 ;
  std::tr1::shared_ptr< Texture > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Texture_buffer_get",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Texture_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Texture_buffer_get" "', argument " "1"" of type '" "Texture *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Texture > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Texture > * >(argp1);
      arg1 = const_cast< Texture * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Texture > * >(argp1);
      arg1 = const_cast< Texture * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (unsigned char *) ((arg1)->buffer);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Texture__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Texture *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Texture")) SWIG_fail;
  result = (Texture *)new Texture();
  {
    std::tr1::shared_ptr<  Texture > *smartresult = result ? new std::tr1::shared_ptr<  Texture >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Texture_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Texture__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Texture *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_Texture",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Texture" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Texture" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Texture" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (Texture *)new Texture(arg1,arg2,arg3);
  {
    std::tr1::shared_ptr<  Texture > *smartresult = result ? new std::tr1::shared_ptr<  Texture >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Texture_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Texture__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  unsigned char *arg4 = (unsigned char *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Texture *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_Texture",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Texture" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Texture" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Texture" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_Texture" "', argument " "4"" of type '" "unsigned char *""'"); 
  }
  arg4 = reinterpret_cast< unsigned char * >(argp4);
  result = (Texture *)new Texture(arg1,arg2,arg3,arg4);
  {
    std::tr1::shared_ptr<  Texture > *smartresult = result ? new std::tr1::shared_ptr<  Texture >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Texture_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Texture__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  std::vector< unsigned char,std::allocator< unsigned char > > *arg4 = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Texture *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_Texture",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Texture" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Texture" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Texture" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    std::vector<unsigned char,std::allocator< unsigned char > > *ptr = (std::vector<unsigned char,std::allocator< unsigned char > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_Texture" "', argument " "4"" of type '" "std::vector< unsigned char,std::allocator< unsigned char > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Texture" "', argument " "4"" of type '" "std::vector< unsigned char,std::allocator< unsigned char > > const &""'"); 
    }
    arg4 = ptr;
  }
  result = (Texture *)new Texture(arg1,arg2,arg3,(std::vector< unsigned char,std::allocator< unsigned char > > const &)*arg4);
  {
    std::tr1::shared_ptr<  Texture > *smartresult = result ? new std::tr1::shared_ptr<  Texture >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Texture_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Texture(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Texture__SWIG_0(self, args);
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_Texture__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_unsigned_char, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_new_Texture__SWIG_2(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<unsigned char,std::allocator< unsigned char > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_new_Texture__SWIG_3(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Texture'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Texture()\n"
    "    Texture(int,int,int)\n"
    "    Texture(int,int,int,unsigned char *)\n"
    "    Texture(int,int,int,std::vector< unsigned char,std::allocator< unsigned char > > const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Texture(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Texture *arg1 = (Texture *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Texture > tempshared1 ;
  std::tr1::shared_ptr< Texture > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Texture",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Texture_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Texture" "', argument " "1"" of type '" "Texture *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Texture > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Texture > * >(argp1);
      arg1 = const_cast< Texture * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Texture > * >(argp1);
      arg1 = const_cast< Texture * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (void)arg1; delete smartarg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Texture_open__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  bool arg2 ;
  bool arg3 ;
  bool val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::tr1::shared_ptr< Texture > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Texture_open",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Texture_open" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Texture_open" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Texture_open" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = Texture::open(arg1,arg2,arg3);
  {
    std::tr1::shared_ptr<  Texture > *smartresult = result ? new std::tr1::shared_ptr<  Texture >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Texture_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Texture_open__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  bool arg2 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::tr1::shared_ptr< Texture > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Texture_open",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Texture_open" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Texture_open" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = Texture::open(arg1,arg2);
  {
    std::tr1::shared_ptr<  Texture > *smartresult = result ? new std::tr1::shared_ptr<  Texture >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Texture_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Texture_open__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  std::tr1::shared_ptr< Texture > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Texture_open",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Texture_open" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = Texture::open(arg1);
  {
    std::tr1::shared_ptr<  Texture > *smartresult = result ? new std::tr1::shared_ptr<  Texture >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Texture_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Texture_open(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Texture_open__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Texture_open__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Texture_open__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Texture_open'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    open(std::string,bool,bool)\n"
    "    open(std::string,bool)\n"
    "    Texture::open(std::string)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Texture_flushCache(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":Texture_flushCache")) SWIG_fail;
  Texture::flushCache();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Texture_getCache(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string,std::allocator< std::string > > result;
  
  if (!PyArg_ParseTuple(args,(char *)":Texture_getCache")) SWIG_fail;
  result = Texture::getCache();
  resultobj = swig::from(static_cast< std::vector<std::string,std::allocator< std::string > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Texture_save__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Texture *arg1 = (Texture *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Texture > tempshared1 ;
  std::tr1::shared_ptr< Texture > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Texture_save",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Texture_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Texture_save" "', argument " "1"" of type '" "Texture *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Texture > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Texture > * >(argp1);
      arg1 = const_cast< Texture * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Texture > * >(argp1);
      arg1 = const_cast< Texture * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Texture_save" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (bool)(arg1)->save(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Texture_save__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Texture *arg1 = (Texture *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Texture > tempshared1 ;
  std::tr1::shared_ptr< Texture > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Texture_save",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Texture_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Texture_save" "', argument " "1"" of type '" "Texture *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Texture > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Texture > * >(argp1);
      arg1 = const_cast< Texture * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Texture > * >(argp1);
      arg1 = const_cast< Texture * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (bool)(arg1)->save();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Texture_save(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Texture_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Texture_save__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Texture_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Texture_save__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Texture_save'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    save(Texture *,std::string)\n"
    "    save(Texture *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Texture_deallocBuffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Texture *arg1 = (Texture *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Texture > tempshared1 ;
  std::tr1::shared_ptr< Texture > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Texture_deallocBuffer",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Texture_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Texture_deallocBuffer" "', argument " "1"" of type '" "Texture *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Texture > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Texture > * >(argp1);
      arg1 = const_cast< Texture * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Texture > * >(argp1);
      arg1 = const_cast< Texture * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (arg1)->deallocBuffer();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Texture_memsize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Texture *arg1 = (Texture *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Texture const > tempshared1 ;
  std::tr1::shared_ptr< Texture const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Texture_memsize",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Texture_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Texture_memsize" "', argument " "1"" of type '" "Texture const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr< const Texture > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr< const Texture > * >(argp1);
      arg1 = const_cast< Texture * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr< const Texture > * >(argp1);
      arg1 = const_cast< Texture * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (int)((Texture const *)arg1)->memsize();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Texture_change__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Texture *arg1 = (Texture *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Texture > tempshared1 ;
  std::tr1::shared_ptr< Texture > *smartarg1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Texture_change",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Texture_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Texture_change" "', argument " "1"" of type '" "Texture *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Texture > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Texture > * >(argp1);
      arg1 = const_cast< Texture * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Texture > * >(argp1);
      arg1 = const_cast< Texture * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Texture_change" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Texture_change" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Texture_change" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  (arg1)->change(arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Texture_change__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Texture *arg1 = (Texture *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  unsigned char *arg5 = (unsigned char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Texture > tempshared1 ;
  std::tr1::shared_ptr< Texture > *smartarg1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Texture_change",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Texture_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Texture_change" "', argument " "1"" of type '" "Texture *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Texture > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Texture > * >(argp1);
      arg1 = const_cast< Texture * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Texture > * >(argp1);
      arg1 = const_cast< Texture * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Texture_change" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Texture_change" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Texture_change" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Texture_change" "', argument " "5"" of type '" "unsigned char *""'"); 
  }
  arg5 = reinterpret_cast< unsigned char * >(argp5);
  (arg1)->change(arg2,arg3,arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Texture_change__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Texture *arg1 = (Texture *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  std::vector< unsigned char,std::allocator< unsigned char > > *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Texture > tempshared1 ;
  std::tr1::shared_ptr< Texture > *smartarg1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int res5 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Texture_change",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Texture_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Texture_change" "', argument " "1"" of type '" "Texture *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Texture > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Texture > * >(argp1);
      arg1 = const_cast< Texture * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Texture > * >(argp1);
      arg1 = const_cast< Texture * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Texture_change" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Texture_change" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Texture_change" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    std::vector<unsigned char,std::allocator< unsigned char > > *ptr = (std::vector<unsigned char,std::allocator< unsigned char > > *)0;
    res5 = swig::asptr(obj4, &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Texture_change" "', argument " "5"" of type '" "std::vector< unsigned char,std::allocator< unsigned char > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Texture_change" "', argument " "5"" of type '" "std::vector< unsigned char,std::allocator< unsigned char > > const &""'"); 
    }
    arg5 = ptr;
  }
  (arg1)->change(arg2,arg3,arg4,(std::vector< unsigned char,std::allocator< unsigned char > > const &)*arg5);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res5)) delete arg5;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res5)) delete arg5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Texture_change(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 5); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Texture_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Texture_change__SWIG_0(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Texture_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_unsigned_char, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_Texture_change__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Texture_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = swig::asptr(argv[4], (std::vector<unsigned char,std::allocator< unsigned char > >**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_Texture_change__SWIG_2(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Texture_change'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    change(Texture *,int,int,int)\n"
    "    change(Texture *,int,int,int,unsigned char *)\n"
    "    change(Texture *,int,int,int,std::vector< unsigned char,std::allocator< unsigned char > > const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Texture_getPixel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Texture *arg1 = (Texture *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Texture > tempshared1 ;
  std::tr1::shared_ptr< Texture > *smartarg1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  unsigned char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Texture_getPixel",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Texture_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Texture_getPixel" "', argument " "1"" of type '" "Texture *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Texture > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Texture > * >(argp1);
      arg1 = const_cast< Texture * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Texture > * >(argp1);
      arg1 = const_cast< Texture * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Texture_getPixel" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Texture_getPixel" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (unsigned char *)(arg1)->getPixel(arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Texture_goodPixel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Texture *arg1 = (Texture *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Texture > tempshared1 ;
  std::tr1::shared_ptr< Texture > *smartarg1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Texture_goodPixel",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Texture_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Texture_goodPixel" "', argument " "1"" of type '" "Texture *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Texture > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Texture > * >(argp1);
      arg1 = const_cast< Texture * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Texture > * >(argp1);
      arg1 = const_cast< Texture * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Texture_goodPixel" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Texture_goodPixel" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (bool)(arg1)->goodPixel(arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Texture_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Texture *arg1 = (Texture *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Texture const > tempshared1 ;
  std::tr1::shared_ptr< Texture const > *smartarg1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  unsigned char result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Texture_get",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Texture_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Texture_get" "', argument " "1"" of type '" "Texture const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr< const Texture > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr< const Texture > * >(argp1);
      arg1 = const_cast< Texture * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr< const Texture > * >(argp1);
      arg1 = const_cast< Texture * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Texture_get" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (unsigned char)((Texture const *)arg1)->get(arg2);
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Texture_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Texture *arg1 = (Texture *) 0 ;
  int arg2 ;
  unsigned char arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Texture > tempshared1 ;
  std::tr1::shared_ptr< Texture > *smartarg1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned char val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Texture_set",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Texture_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Texture_set" "', argument " "1"" of type '" "Texture *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Texture > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Texture > * >(argp1);
      arg1 = const_cast< Texture * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Texture > * >(argp1);
      arg1 = const_cast< Texture * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Texture_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_char(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Texture_set" "', argument " "3"" of type '" "unsigned char""'");
  } 
  arg3 = static_cast< unsigned char >(val3);
  (arg1)->set(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Texture_flipVertical(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Texture *arg1 = (Texture *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Texture > tempshared1 ;
  std::tr1::shared_ptr< Texture > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Texture_flipVertical",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Texture_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Texture_flipVertical" "', argument " "1"" of type '" "Texture *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Texture > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Texture > * >(argp1);
      arg1 = const_cast< Texture * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Texture > * >(argp1);
      arg1 = const_cast< Texture * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (arg1)->flipVertical();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Texture___repr__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Texture *arg1 = (Texture *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Texture const > tempshared1 ;
  std::tr1::shared_ptr< Texture const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Texture___repr__",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Texture_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Texture___repr__" "', argument " "1"" of type '" "Texture const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr< const Texture > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr< const Texture > * >(argp1);
      arg1 = const_cast< Texture * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr< const Texture > * >(argp1);
      arg1 = const_cast< Texture * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((Texture const *)arg1)->repr();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Texture___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Texture *arg1 = (Texture *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Texture const > tempshared1 ;
  std::tr1::shared_ptr< Texture const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Texture___str__",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Texture_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Texture___str__" "', argument " "1"" of type '" "Texture const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr< const Texture > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr< const Texture > * >(argp1);
      arg1 = const_cast< Texture * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr< const Texture > * >(argp1);
      arg1 = const_cast< Texture * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((Texture const *)arg1)->str();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Texture_SelfTest(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":Texture_SelfTest")) SWIG_fail;
  result = (int)Texture::SelfTest();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Texture_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__tr1__shared_ptrT_Texture_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_Manipulator_EPSILON_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Manipulator *arg1 = (Manipulator *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Manipulator_EPSILON_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Manipulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Manipulator_EPSILON_set" "', argument " "1"" of type '" "Manipulator *""'"); 
  }
  arg1 = reinterpret_cast< Manipulator * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Manipulator_EPSILON_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->EPSILON = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Manipulator_EPSILON_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Manipulator *arg1 = (Manipulator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Manipulator_EPSILON_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Manipulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Manipulator_EPSILON_get" "', argument " "1"" of type '" "Manipulator *""'"); 
  }
  arg1 = reinterpret_cast< Manipulator * >(argp1);
  result = (float) ((arg1)->EPSILON);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Manipulator_freeze_x_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Manipulator *arg1 = (Manipulator *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Manipulator_freeze_x_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Manipulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Manipulator_freeze_x_set" "', argument " "1"" of type '" "Manipulator *""'"); 
  }
  arg1 = reinterpret_cast< Manipulator * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Manipulator_freeze_x_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->freeze_x = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Manipulator_freeze_x_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Manipulator *arg1 = (Manipulator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Manipulator_freeze_x_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Manipulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Manipulator_freeze_x_get" "', argument " "1"" of type '" "Manipulator *""'"); 
  }
  arg1 = reinterpret_cast< Manipulator * >(argp1);
  result = (bool) ((arg1)->freeze_x);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Manipulator_freeze_y_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Manipulator *arg1 = (Manipulator *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Manipulator_freeze_y_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Manipulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Manipulator_freeze_y_set" "', argument " "1"" of type '" "Manipulator *""'"); 
  }
  arg1 = reinterpret_cast< Manipulator * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Manipulator_freeze_y_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->freeze_y = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Manipulator_freeze_y_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Manipulator *arg1 = (Manipulator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Manipulator_freeze_y_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Manipulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Manipulator_freeze_y_get" "', argument " "1"" of type '" "Manipulator *""'"); 
  }
  arg1 = reinterpret_cast< Manipulator * >(argp1);
  result = (bool) ((arg1)->freeze_y);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Manipulator_freeze_z_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Manipulator *arg1 = (Manipulator *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Manipulator_freeze_z_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Manipulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Manipulator_freeze_z_set" "', argument " "1"" of type '" "Manipulator *""'"); 
  }
  arg1 = reinterpret_cast< Manipulator * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Manipulator_freeze_z_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->freeze_z = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Manipulator_freeze_z_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Manipulator *arg1 = (Manipulator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Manipulator_freeze_z_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Manipulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Manipulator_freeze_z_get" "', argument " "1"" of type '" "Manipulator *""'"); 
  }
  arg1 = reinterpret_cast< Manipulator * >(argp1);
  result = (bool) ((arg1)->freeze_z);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Manipulator__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  float arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  Manipulator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Manipulator",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Manipulator" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  result = (Manipulator *)new Manipulator(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Manipulator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Manipulator__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Manipulator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Manipulator")) SWIG_fail;
  result = (Manipulator *)new Manipulator();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Manipulator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Manipulator(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Manipulator__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Manipulator__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Manipulator'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Manipulator(float)\n"
    "    Manipulator()\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Manipulator_setObject(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Manipulator *arg1 = (Manipulator *) 0 ;
  Box3f arg2 ;
  Mat4f *arg3 = (Mat4f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Manipulator_setObject",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Manipulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Manipulator_setObject" "', argument " "1"" of type '" "Manipulator *""'"); 
  }
  arg1 = reinterpret_cast< Manipulator * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Box3f,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Manipulator_setObject" "', argument " "2"" of type '" "Box3f""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Manipulator_setObject" "', argument " "2"" of type '" "Box3f""'");
    } else {
      Box3f * temp = reinterpret_cast< Box3f * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_Mat4f, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Manipulator_setObject" "', argument " "3"" of type '" "Mat4f *""'"); 
  }
  arg3 = reinterpret_cast< Mat4f * >(argp3);
  (arg1)->setObject(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Manipulator_isRunning(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Manipulator *arg1 = (Manipulator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Manipulator_isRunning",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Manipulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Manipulator_isRunning" "', argument " "1"" of type '" "Manipulator *""'"); 
  }
  arg1 = reinterpret_cast< Manipulator * >(argp1);
  result = (bool)(arg1)->isRunning();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Manipulator_canManipulate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Ray3f arg1 ;
  Box3f arg2 ;
  Mat4f *arg3 = (Mat4f *) 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Manipulator_canManipulate",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Ray3f,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Manipulator_canManipulate" "', argument " "1"" of type '" "Ray3f""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Manipulator_canManipulate" "', argument " "1"" of type '" "Ray3f""'");
    } else {
      Ray3f * temp = reinterpret_cast< Ray3f * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Box3f,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Manipulator_canManipulate" "', argument " "2"" of type '" "Box3f""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Manipulator_canManipulate" "', argument " "2"" of type '" "Box3f""'");
    } else {
      Box3f * temp = reinterpret_cast< Box3f * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_Mat4f, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Manipulator_canManipulate" "', argument " "3"" of type '" "Mat4f *""'"); 
  }
  arg3 = reinterpret_cast< Mat4f * >(argp3);
  result = (bool)Manipulator::canManipulate(arg1,arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Manipulator_Mouse(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Manipulator *arg1 = (Manipulator *) 0 ;
  MouseEvent arg2 ;
  Ray3f arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Manipulator_Mouse",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Manipulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Manipulator_Mouse" "', argument " "1"" of type '" "Manipulator *""'"); 
  }
  arg1 = reinterpret_cast< Manipulator * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_MouseEvent,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Manipulator_Mouse" "', argument " "2"" of type '" "MouseEvent""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Manipulator_Mouse" "', argument " "2"" of type '" "MouseEvent""'");
    } else {
      MouseEvent * temp = reinterpret_cast< MouseEvent * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Ray3f,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Manipulator_Mouse" "', argument " "3"" of type '" "Ray3f""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Manipulator_Mouse" "', argument " "3"" of type '" "Ray3f""'");
    } else {
      Ray3f * temp = reinterpret_cast< Ray3f * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  (arg1)->Mouse(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Manipulator_Render(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Manipulator *arg1 = (Manipulator *) 0 ;
  Engine *arg2 = (Engine *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Manipulator_Render",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Manipulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Manipulator_Render" "', argument " "1"" of type '" "Manipulator *""'"); 
  }
  arg1 = reinterpret_cast< Manipulator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Engine, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Manipulator_Render" "', argument " "2"" of type '" "Engine *""'"); 
  }
  arg2 = reinterpret_cast< Engine * >(argp2);
  (arg1)->Render(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Manipulator_setOperation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Manipulator *arg1 = (Manipulator *) 0 ;
  Manipulator::Operation arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Manipulator_setOperation",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Manipulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Manipulator_setOperation" "', argument " "1"" of type '" "Manipulator *""'"); 
  }
  arg1 = reinterpret_cast< Manipulator * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Manipulator_setOperation" "', argument " "2"" of type '" "Manipulator::Operation""'");
  } 
  arg2 = static_cast< Manipulator::Operation >(val2);
  (arg1)->setOperation(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Manipulator_getOperation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Manipulator *arg1 = (Manipulator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Manipulator::Operation result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Manipulator_getOperation",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Manipulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Manipulator_getOperation" "', argument " "1"" of type '" "Manipulator *""'"); 
  }
  arg1 = reinterpret_cast< Manipulator * >(argp1);
  result = (Manipulator::Operation)(arg1)->getOperation();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Manipulator_SelfTest(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":Manipulator_SelfTest")) SWIG_fail;
  Manipulator::SelfTest();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Manipulator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Manipulator *arg1 = (Manipulator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Manipulator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Manipulator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Manipulator" "', argument " "1"" of type '" "Manipulator *""'"); 
  }
  arg1 = reinterpret_cast< Manipulator * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Manipulator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Manipulator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_Batch_Write(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Batch *arg1 = (Batch *) 0 ;
  Archive *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Batch > tempshared1 ;
  std::tr1::shared_ptr< Batch > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Batch_Write",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Batch_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Batch_Write" "', argument " "1"" of type '" "Batch *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Batch > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Batch > * >(argp1);
      arg1 = const_cast< Batch * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Batch > * >(argp1);
      arg1 = const_cast< Batch * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Archive,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Batch_Write" "', argument " "2"" of type '" "Archive &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Batch_Write" "', argument " "2"" of type '" "Archive &""'"); 
  }
  arg2 = reinterpret_cast< Archive * >(argp2);
  (arg1)->Write(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Batch_Read(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Batch *arg1 = (Batch *) 0 ;
  Archive *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Batch > tempshared1 ;
  std::tr1::shared_ptr< Batch > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Batch_Read",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Batch_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Batch_Read" "', argument " "1"" of type '" "Batch *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Batch > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Batch > * >(argp1);
      arg1 = const_cast< Batch * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Batch > * >(argp1);
      arg1 = const_cast< Batch * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Archive,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Batch_Read" "', argument " "2"" of type '" "Archive &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Batch_Read" "', argument " "2"" of type '" "Archive &""'"); 
  }
  arg2 = reinterpret_cast< Archive * >(argp2);
  (arg1)->Read(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Batch_primitive_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Batch *arg1 = (Batch *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Batch > tempshared1 ;
  std::tr1::shared_ptr< Batch > *smartarg1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Batch_primitive_set",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Batch_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Batch_primitive_set" "', argument " "1"" of type '" "Batch *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Batch > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Batch > * >(argp1);
      arg1 = const_cast< Batch * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Batch > * >(argp1);
      arg1 = const_cast< Batch * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Batch_primitive_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->primitive = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Batch_primitive_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Batch *arg1 = (Batch *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Batch > tempshared1 ;
  std::tr1::shared_ptr< Batch > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Batch_primitive_get",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Batch_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Batch_primitive_get" "', argument " "1"" of type '" "Batch *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Batch > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Batch > * >(argp1);
      arg1 = const_cast< Batch * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Batch > * >(argp1);
      arg1 = const_cast< Batch * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (int) ((arg1)->primitive);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Batch_ambient_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Batch *arg1 = (Batch *) 0 ;
  Color4f *arg2 = (Color4f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Batch > tempshared1 ;
  std::tr1::shared_ptr< Batch > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Batch_ambient_set",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Batch_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Batch_ambient_set" "', argument " "1"" of type '" "Batch *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Batch > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Batch > * >(argp1);
      arg1 = const_cast< Batch * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Batch > * >(argp1);
      arg1 = const_cast< Batch * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Color4f, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Batch_ambient_set" "', argument " "2"" of type '" "Color4f *""'"); 
  }
  arg2 = reinterpret_cast< Color4f * >(argp2);
  if (arg1) (arg1)->ambient = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Batch_ambient_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Batch *arg1 = (Batch *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Batch > tempshared1 ;
  std::tr1::shared_ptr< Batch > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  Color4f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Batch_ambient_get",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Batch_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Batch_ambient_get" "', argument " "1"" of type '" "Batch *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Batch > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Batch > * >(argp1);
      arg1 = const_cast< Batch * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Batch > * >(argp1);
      arg1 = const_cast< Batch * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (Color4f *)& ((arg1)->ambient);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Color4f, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Batch_diffuse_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Batch *arg1 = (Batch *) 0 ;
  Color4f *arg2 = (Color4f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Batch > tempshared1 ;
  std::tr1::shared_ptr< Batch > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Batch_diffuse_set",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Batch_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Batch_diffuse_set" "', argument " "1"" of type '" "Batch *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Batch > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Batch > * >(argp1);
      arg1 = const_cast< Batch * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Batch > * >(argp1);
      arg1 = const_cast< Batch * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Color4f, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Batch_diffuse_set" "', argument " "2"" of type '" "Color4f *""'"); 
  }
  arg2 = reinterpret_cast< Color4f * >(argp2);
  if (arg1) (arg1)->diffuse = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Batch_diffuse_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Batch *arg1 = (Batch *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Batch > tempshared1 ;
  std::tr1::shared_ptr< Batch > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  Color4f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Batch_diffuse_get",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Batch_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Batch_diffuse_get" "', argument " "1"" of type '" "Batch *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Batch > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Batch > * >(argp1);
      arg1 = const_cast< Batch * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Batch > * >(argp1);
      arg1 = const_cast< Batch * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (Color4f *)& ((arg1)->diffuse);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Color4f, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Batch_specular_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Batch *arg1 = (Batch *) 0 ;
  Color4f *arg2 = (Color4f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Batch > tempshared1 ;
  std::tr1::shared_ptr< Batch > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Batch_specular_set",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Batch_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Batch_specular_set" "', argument " "1"" of type '" "Batch *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Batch > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Batch > * >(argp1);
      arg1 = const_cast< Batch * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Batch > * >(argp1);
      arg1 = const_cast< Batch * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Color4f, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Batch_specular_set" "', argument " "2"" of type '" "Color4f *""'"); 
  }
  arg2 = reinterpret_cast< Color4f * >(argp2);
  if (arg1) (arg1)->specular = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Batch_specular_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Batch *arg1 = (Batch *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Batch > tempshared1 ;
  std::tr1::shared_ptr< Batch > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  Color4f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Batch_specular_get",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Batch_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Batch_specular_get" "', argument " "1"" of type '" "Batch *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Batch > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Batch > * >(argp1);
      arg1 = const_cast< Batch * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Batch > * >(argp1);
      arg1 = const_cast< Batch * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (Color4f *)& ((arg1)->specular);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Color4f, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Batch_emission_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Batch *arg1 = (Batch *) 0 ;
  Color4f *arg2 = (Color4f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Batch > tempshared1 ;
  std::tr1::shared_ptr< Batch > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Batch_emission_set",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Batch_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Batch_emission_set" "', argument " "1"" of type '" "Batch *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Batch > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Batch > * >(argp1);
      arg1 = const_cast< Batch * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Batch > * >(argp1);
      arg1 = const_cast< Batch * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Color4f, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Batch_emission_set" "', argument " "2"" of type '" "Color4f *""'"); 
  }
  arg2 = reinterpret_cast< Color4f * >(argp2);
  if (arg1) (arg1)->emission = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Batch_emission_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Batch *arg1 = (Batch *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Batch > tempshared1 ;
  std::tr1::shared_ptr< Batch > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  Color4f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Batch_emission_get",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Batch_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Batch_emission_get" "', argument " "1"" of type '" "Batch *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Batch > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Batch > * >(argp1);
      arg1 = const_cast< Batch * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Batch > * >(argp1);
      arg1 = const_cast< Batch * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (Color4f *)& ((arg1)->emission);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Color4f, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Batch_shininess_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Batch *arg1 = (Batch *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Batch > tempshared1 ;
  std::tr1::shared_ptr< Batch > *smartarg1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Batch_shininess_set",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Batch_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Batch_shininess_set" "', argument " "1"" of type '" "Batch *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Batch > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Batch > * >(argp1);
      arg1 = const_cast< Batch * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Batch > * >(argp1);
      arg1 = const_cast< Batch * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Batch_shininess_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->shininess = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Batch_shininess_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Batch *arg1 = (Batch *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Batch > tempshared1 ;
  std::tr1::shared_ptr< Batch > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Batch_shininess_get",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Batch_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Batch_shininess_get" "', argument " "1"" of type '" "Batch *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Batch > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Batch > * >(argp1);
      arg1 = const_cast< Batch * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Batch > * >(argp1);
      arg1 = const_cast< Batch * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (float) ((arg1)->shininess);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Batch_matrix_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Batch *arg1 = (Batch *) 0 ;
  Mat4f *arg2 = (Mat4f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Batch > tempshared1 ;
  std::tr1::shared_ptr< Batch > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Batch_matrix_set",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Batch_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Batch_matrix_set" "', argument " "1"" of type '" "Batch *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Batch > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Batch > * >(argp1);
      arg1 = const_cast< Batch * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Batch > * >(argp1);
      arg1 = const_cast< Batch * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Mat4f, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Batch_matrix_set" "', argument " "2"" of type '" "Mat4f *""'"); 
  }
  arg2 = reinterpret_cast< Mat4f * >(argp2);
  if (arg1) (arg1)->matrix = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Batch_matrix_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Batch *arg1 = (Batch *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Batch > tempshared1 ;
  std::tr1::shared_ptr< Batch > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  Mat4f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Batch_matrix_get",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Batch_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Batch_matrix_get" "', argument " "1"" of type '" "Batch *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Batch > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Batch > * >(argp1);
      arg1 = const_cast< Batch * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Batch > * >(argp1);
      arg1 = const_cast< Batch * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (Mat4f *)& ((arg1)->matrix);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Mat4f, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Batch_vertices_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Batch *arg1 = (Batch *) 0 ;
  std::tr1::shared_ptr< Vector > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Batch > tempshared1 ;
  std::tr1::shared_ptr< Batch > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::tr1::shared_ptr< Vector > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Batch_vertices_set",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Batch_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Batch_vertices_set" "', argument " "1"" of type '" "Batch *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Batch > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Batch > * >(argp1);
      arg1 = const_cast< Batch * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Batch > * >(argp1);
      arg1 = const_cast< Batch * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_std__tr1__shared_ptrT_Vector_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Batch_vertices_set" "', argument " "2"" of type '" "std::tr1::shared_ptr< Vector > const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< std::tr1::shared_ptr< Vector > * >(argp2);
      delete reinterpret_cast< std::tr1::shared_ptr< Vector > * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< std::tr1::shared_ptr< Vector > * >(argp2) : &tempshared2;
    }
  }
  if (arg1) (arg1)->vertices = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Batch_vertices_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Batch *arg1 = (Batch *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Batch > tempshared1 ;
  std::tr1::shared_ptr< Batch > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  std::tr1::shared_ptr< Vector > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Batch_vertices_get",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Batch_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Batch_vertices_get" "', argument " "1"" of type '" "Batch *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Batch > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Batch > * >(argp1);
      arg1 = const_cast< Batch * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Batch > * >(argp1);
      arg1 = const_cast< Batch * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (std::tr1::shared_ptr< Vector > *) & ((arg1)->vertices);
  {
    std::tr1::shared_ptr<  Vector > *smartresult = *result ? new std::tr1::shared_ptr<  Vector >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Vector_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Batch_normals_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Batch *arg1 = (Batch *) 0 ;
  std::tr1::shared_ptr< Vector > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Batch > tempshared1 ;
  std::tr1::shared_ptr< Batch > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::tr1::shared_ptr< Vector > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Batch_normals_set",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Batch_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Batch_normals_set" "', argument " "1"" of type '" "Batch *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Batch > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Batch > * >(argp1);
      arg1 = const_cast< Batch * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Batch > * >(argp1);
      arg1 = const_cast< Batch * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_std__tr1__shared_ptrT_Vector_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Batch_normals_set" "', argument " "2"" of type '" "std::tr1::shared_ptr< Vector > const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< std::tr1::shared_ptr< Vector > * >(argp2);
      delete reinterpret_cast< std::tr1::shared_ptr< Vector > * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< std::tr1::shared_ptr< Vector > * >(argp2) : &tempshared2;
    }
  }
  if (arg1) (arg1)->normals = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Batch_normals_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Batch *arg1 = (Batch *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Batch > tempshared1 ;
  std::tr1::shared_ptr< Batch > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  std::tr1::shared_ptr< Vector > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Batch_normals_get",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Batch_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Batch_normals_get" "', argument " "1"" of type '" "Batch *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Batch > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Batch > * >(argp1);
      arg1 = const_cast< Batch * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Batch > * >(argp1);
      arg1 = const_cast< Batch * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (std::tr1::shared_ptr< Vector > *) & ((arg1)->normals);
  {
    std::tr1::shared_ptr<  Vector > *smartresult = *result ? new std::tr1::shared_ptr<  Vector >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Vector_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Batch_colors_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Batch *arg1 = (Batch *) 0 ;
  std::tr1::shared_ptr< Vector > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Batch > tempshared1 ;
  std::tr1::shared_ptr< Batch > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::tr1::shared_ptr< Vector > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Batch_colors_set",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Batch_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Batch_colors_set" "', argument " "1"" of type '" "Batch *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Batch > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Batch > * >(argp1);
      arg1 = const_cast< Batch * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Batch > * >(argp1);
      arg1 = const_cast< Batch * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_std__tr1__shared_ptrT_Vector_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Batch_colors_set" "', argument " "2"" of type '" "std::tr1::shared_ptr< Vector > const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< std::tr1::shared_ptr< Vector > * >(argp2);
      delete reinterpret_cast< std::tr1::shared_ptr< Vector > * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< std::tr1::shared_ptr< Vector > * >(argp2) : &tempshared2;
    }
  }
  if (arg1) (arg1)->colors = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Batch_colors_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Batch *arg1 = (Batch *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Batch > tempshared1 ;
  std::tr1::shared_ptr< Batch > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  std::tr1::shared_ptr< Vector > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Batch_colors_get",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Batch_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Batch_colors_get" "', argument " "1"" of type '" "Batch *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Batch > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Batch > * >(argp1);
      arg1 = const_cast< Batch * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Batch > * >(argp1);
      arg1 = const_cast< Batch * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (std::tr1::shared_ptr< Vector > *) & ((arg1)->colors);
  {
    std::tr1::shared_ptr<  Vector > *smartresult = *result ? new std::tr1::shared_ptr<  Vector >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Vector_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Batch_texture0_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Batch *arg1 = (Batch *) 0 ;
  std::tr1::shared_ptr< Texture > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Batch > tempshared1 ;
  std::tr1::shared_ptr< Batch > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::tr1::shared_ptr< Texture > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Batch_texture0_set",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Batch_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Batch_texture0_set" "', argument " "1"" of type '" "Batch *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Batch > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Batch > * >(argp1);
      arg1 = const_cast< Batch * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Batch > * >(argp1);
      arg1 = const_cast< Batch * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_std__tr1__shared_ptrT_Texture_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Batch_texture0_set" "', argument " "2"" of type '" "std::tr1::shared_ptr< Texture > const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< std::tr1::shared_ptr< Texture > * >(argp2);
      delete reinterpret_cast< std::tr1::shared_ptr< Texture > * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< std::tr1::shared_ptr< Texture > * >(argp2) : &tempshared2;
    }
  }
  if (arg1) (arg1)->texture0 = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Batch_texture0_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Batch *arg1 = (Batch *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Batch > tempshared1 ;
  std::tr1::shared_ptr< Batch > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  std::tr1::shared_ptr< Texture > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Batch_texture0_get",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Batch_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Batch_texture0_get" "', argument " "1"" of type '" "Batch *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Batch > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Batch > * >(argp1);
      arg1 = const_cast< Batch * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Batch > * >(argp1);
      arg1 = const_cast< Batch * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (std::tr1::shared_ptr< Texture > *) & ((arg1)->texture0);
  {
    std::tr1::shared_ptr<  Texture > *smartresult = *result ? new std::tr1::shared_ptr<  Texture >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Texture_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Batch_texture0coords_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Batch *arg1 = (Batch *) 0 ;
  std::tr1::shared_ptr< Vector > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Batch > tempshared1 ;
  std::tr1::shared_ptr< Batch > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::tr1::shared_ptr< Vector > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Batch_texture0coords_set",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Batch_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Batch_texture0coords_set" "', argument " "1"" of type '" "Batch *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Batch > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Batch > * >(argp1);
      arg1 = const_cast< Batch * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Batch > * >(argp1);
      arg1 = const_cast< Batch * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_std__tr1__shared_ptrT_Vector_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Batch_texture0coords_set" "', argument " "2"" of type '" "std::tr1::shared_ptr< Vector > const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< std::tr1::shared_ptr< Vector > * >(argp2);
      delete reinterpret_cast< std::tr1::shared_ptr< Vector > * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< std::tr1::shared_ptr< Vector > * >(argp2) : &tempshared2;
    }
  }
  if (arg1) (arg1)->texture0coords = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Batch_texture0coords_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Batch *arg1 = (Batch *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Batch > tempshared1 ;
  std::tr1::shared_ptr< Batch > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  std::tr1::shared_ptr< Vector > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Batch_texture0coords_get",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Batch_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Batch_texture0coords_get" "', argument " "1"" of type '" "Batch *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Batch > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Batch > * >(argp1);
      arg1 = const_cast< Batch * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Batch > * >(argp1);
      arg1 = const_cast< Batch * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (std::tr1::shared_ptr< Vector > *) & ((arg1)->texture0coords);
  {
    std::tr1::shared_ptr<  Vector > *smartresult = *result ? new std::tr1::shared_ptr<  Vector >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Vector_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Batch_texture1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Batch *arg1 = (Batch *) 0 ;
  std::tr1::shared_ptr< Texture > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Batch > tempshared1 ;
  std::tr1::shared_ptr< Batch > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::tr1::shared_ptr< Texture > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Batch_texture1_set",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Batch_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Batch_texture1_set" "', argument " "1"" of type '" "Batch *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Batch > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Batch > * >(argp1);
      arg1 = const_cast< Batch * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Batch > * >(argp1);
      arg1 = const_cast< Batch * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_std__tr1__shared_ptrT_Texture_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Batch_texture1_set" "', argument " "2"" of type '" "std::tr1::shared_ptr< Texture > const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< std::tr1::shared_ptr< Texture > * >(argp2);
      delete reinterpret_cast< std::tr1::shared_ptr< Texture > * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< std::tr1::shared_ptr< Texture > * >(argp2) : &tempshared2;
    }
  }
  if (arg1) (arg1)->texture1 = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Batch_texture1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Batch *arg1 = (Batch *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Batch > tempshared1 ;
  std::tr1::shared_ptr< Batch > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  std::tr1::shared_ptr< Texture > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Batch_texture1_get",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Batch_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Batch_texture1_get" "', argument " "1"" of type '" "Batch *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Batch > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Batch > * >(argp1);
      arg1 = const_cast< Batch * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Batch > * >(argp1);
      arg1 = const_cast< Batch * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (std::tr1::shared_ptr< Texture > *) & ((arg1)->texture1);
  {
    std::tr1::shared_ptr<  Texture > *smartresult = *result ? new std::tr1::shared_ptr<  Texture >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Texture_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Batch_texture1coords_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Batch *arg1 = (Batch *) 0 ;
  std::tr1::shared_ptr< Vector > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Batch > tempshared1 ;
  std::tr1::shared_ptr< Batch > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::tr1::shared_ptr< Vector > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Batch_texture1coords_set",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Batch_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Batch_texture1coords_set" "', argument " "1"" of type '" "Batch *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Batch > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Batch > * >(argp1);
      arg1 = const_cast< Batch * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Batch > * >(argp1);
      arg1 = const_cast< Batch * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_std__tr1__shared_ptrT_Vector_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Batch_texture1coords_set" "', argument " "2"" of type '" "std::tr1::shared_ptr< Vector > const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< std::tr1::shared_ptr< Vector > * >(argp2);
      delete reinterpret_cast< std::tr1::shared_ptr< Vector > * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< std::tr1::shared_ptr< Vector > * >(argp2) : &tempshared2;
    }
  }
  if (arg1) (arg1)->texture1coords = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Batch_texture1coords_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Batch *arg1 = (Batch *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Batch > tempshared1 ;
  std::tr1::shared_ptr< Batch > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  std::tr1::shared_ptr< Vector > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Batch_texture1coords_get",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Batch_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Batch_texture1coords_get" "', argument " "1"" of type '" "Batch *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Batch > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Batch > * >(argp1);
      arg1 = const_cast< Batch * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Batch > * >(argp1);
      arg1 = const_cast< Batch * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (std::tr1::shared_ptr< Vector > *) & ((arg1)->texture1coords);
  {
    std::tr1::shared_ptr<  Vector > *smartresult = *result ? new std::tr1::shared_ptr<  Vector >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Vector_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Batch__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Batch *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Batch")) SWIG_fail;
  result = (Batch *)new Batch();
  {
    std::tr1::shared_ptr<  Batch > *smartresult = result ? new std::tr1::shared_ptr<  Batch >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Batch_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Batch__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Batch *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Batch const > tempshared1 ;
  PyObject * obj0 = 0 ;
  Batch *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Batch",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Batch_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Batch" "', argument " "1"" of type '" "Batch const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Batch" "', argument " "1"" of type '" "Batch const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr< const Batch > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr< const Batch > * >(argp1);
      arg1 = const_cast< Batch * >(tempshared1.get());
    } else {
      arg1 = const_cast< Batch * >(reinterpret_cast< std::tr1::shared_ptr< const Batch > * >(argp1)->get());
    }
  }
  result = (Batch *)new Batch((Batch const &)*arg1);
  {
    std::tr1::shared_ptr<  Batch > *smartresult = result ? new std::tr1::shared_ptr<  Batch >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Batch_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Batch(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Batch__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Batch_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Batch__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Batch'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Batch()\n"
    "    Batch(Batch const &)\n");
  return NULL;
}


SWIGINTERN int Swig_var_Batch_DefaultAmbientColor_set(PyObject *_val) {
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(_val, &argp, SWIGTYPE_p_Color4f,  0  | 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""Batch::DefaultAmbientColor""' of type '""Color4f""'");
    }
    if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""Batch::DefaultAmbientColor""' of type '""Color4f""'");
    } else {
      Color4f * temp;
      temp  = reinterpret_cast< Color4f * >(argp);
      Batch::DefaultAmbientColor = *temp;
      if (SWIG_IsNewObj(res)) delete temp;
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_Batch_DefaultAmbientColor_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&Batch::DefaultAmbientColor), SWIGTYPE_p_Color4f,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_Batch_DefaultAmbientColor_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_Batch_DefaultAmbientColor_get();
}


SWIGINTERN PyObject *_wrap_Batch_DefaultAmbientColor_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *value;
  int res;
  
  if (!PyArg_ParseTuple(args,(char *)"O:set",&value)) return NULL;
  res = Swig_var_Batch_DefaultAmbientColor_set(value);
  return !res ? SWIG_Py_Void() : NULL;
}


SWIGINTERN int Swig_var_Batch_DefaultDiffuseColor_set(PyObject *_val) {
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(_val, &argp, SWIGTYPE_p_Color4f,  0  | 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""Batch::DefaultDiffuseColor""' of type '""Color4f""'");
    }
    if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""Batch::DefaultDiffuseColor""' of type '""Color4f""'");
    } else {
      Color4f * temp;
      temp  = reinterpret_cast< Color4f * >(argp);
      Batch::DefaultDiffuseColor = *temp;
      if (SWIG_IsNewObj(res)) delete temp;
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_Batch_DefaultDiffuseColor_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&Batch::DefaultDiffuseColor), SWIGTYPE_p_Color4f,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_Batch_DefaultDiffuseColor_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_Batch_DefaultDiffuseColor_get();
}


SWIGINTERN PyObject *_wrap_Batch_DefaultDiffuseColor_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *value;
  int res;
  
  if (!PyArg_ParseTuple(args,(char *)"O:set",&value)) return NULL;
  res = Swig_var_Batch_DefaultDiffuseColor_set(value);
  return !res ? SWIG_Py_Void() : NULL;
}


SWIGINTERN int Swig_var_Batch_DefaultSpecularColor_set(PyObject *_val) {
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(_val, &argp, SWIGTYPE_p_Color4f,  0  | 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""Batch::DefaultSpecularColor""' of type '""Color4f""'");
    }
    if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""Batch::DefaultSpecularColor""' of type '""Color4f""'");
    } else {
      Color4f * temp;
      temp  = reinterpret_cast< Color4f * >(argp);
      Batch::DefaultSpecularColor = *temp;
      if (SWIG_IsNewObj(res)) delete temp;
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_Batch_DefaultSpecularColor_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&Batch::DefaultSpecularColor), SWIGTYPE_p_Color4f,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_Batch_DefaultSpecularColor_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_Batch_DefaultSpecularColor_get();
}


SWIGINTERN PyObject *_wrap_Batch_DefaultSpecularColor_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *value;
  int res;
  
  if (!PyArg_ParseTuple(args,(char *)"O:set",&value)) return NULL;
  res = Swig_var_Batch_DefaultSpecularColor_set(value);
  return !res ? SWIG_Py_Void() : NULL;
}


SWIGINTERN int Swig_var_Batch_DefaultEmissionColor_set(PyObject *_val) {
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(_val, &argp, SWIGTYPE_p_Color4f,  0  | 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""Batch::DefaultEmissionColor""' of type '""Color4f""'");
    }
    if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""Batch::DefaultEmissionColor""' of type '""Color4f""'");
    } else {
      Color4f * temp;
      temp  = reinterpret_cast< Color4f * >(argp);
      Batch::DefaultEmissionColor = *temp;
      if (SWIG_IsNewObj(res)) delete temp;
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_Batch_DefaultEmissionColor_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&Batch::DefaultEmissionColor), SWIGTYPE_p_Color4f,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_Batch_DefaultEmissionColor_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_Batch_DefaultEmissionColor_get();
}


SWIGINTERN PyObject *_wrap_Batch_DefaultEmissionColor_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *value;
  int res;
  
  if (!PyArg_ParseTuple(args,(char *)"O:set",&value)) return NULL;
  res = Swig_var_Batch_DefaultEmissionColor_set(value);
  return !res ? SWIG_Py_Void() : NULL;
}


SWIGINTERN int Swig_var_Batch_DefaultShininess_set(PyObject *_val) {
  {
    float val;
    int res = SWIG_AsVal_float(_val, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""Batch::DefaultShininess""' of type '""float""'");
    }
    Batch::DefaultShininess = static_cast< float >(val);
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_Batch_DefaultShininess_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_float(static_cast< float >(Batch::DefaultShininess));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_Batch_DefaultShininess_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_Batch_DefaultShininess_get();
}


SWIGINTERN PyObject *_wrap_Batch_DefaultShininess_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *value;
  int res;
  
  if (!PyArg_ParseTuple(args,(char *)"O:set",&value)) return NULL;
  res = Swig_var_Batch_DefaultShininess_set(value);
  return !res ? SWIG_Py_Void() : NULL;
}


SWIGINTERN PyObject *_wrap_Batch_setColor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Batch *arg1 = (Batch *) 0 ;
  Color4f arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Batch > tempshared1 ;
  std::tr1::shared_ptr< Batch > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Batch_setColor",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Batch_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Batch_setColor" "', argument " "1"" of type '" "Batch *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Batch > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Batch > * >(argp1);
      arg1 = const_cast< Batch * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Batch > * >(argp1);
      arg1 = const_cast< Batch * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Color4f,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Batch_setColor" "', argument " "2"" of type '" "Color4f""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Batch_setColor" "', argument " "2"" of type '" "Color4f""'");
    } else {
      Color4f * temp = reinterpret_cast< Color4f * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  (arg1)->setColor(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Batch_invalidateBox(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Batch *arg1 = (Batch *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Batch > tempshared1 ;
  std::tr1::shared_ptr< Batch > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Batch_invalidateBox",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Batch_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Batch_invalidateBox" "', argument " "1"" of type '" "Batch *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Batch > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Batch > * >(argp1);
      arg1 = const_cast< Batch * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Batch > * >(argp1);
      arg1 = const_cast< Batch * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (arg1)->invalidateBox();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Batch_getTriangles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Batch *arg1 = (Batch *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Batch > tempshared1 ;
  std::tr1::shared_ptr< Batch > *smartarg1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::tr1::shared_ptr< Batch > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Batch_getTriangles",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Batch_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Batch_getTriangles" "', argument " "1"" of type '" "Batch *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Batch > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Batch > * >(argp1);
      arg1 = const_cast< Batch * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Batch > * >(argp1);
      arg1 = const_cast< Batch * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Batch_getTriangles" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Batch_getTriangles" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->getTriangles((std::vector< int,std::allocator< int > > const &)*arg2);
  {
    std::tr1::shared_ptr<  Batch > *smartresult = result ? new std::tr1::shared_ptr<  Batch >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Batch_t, SWIG_POINTER_OWN);
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Batch_getBox(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Batch *arg1 = (Batch *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Batch > tempshared1 ;
  std::tr1::shared_ptr< Batch > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  Box3f result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Batch_getBox",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Batch_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Batch_getBox" "', argument " "1"" of type '" "Batch *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Batch > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Batch > * >(argp1);
      arg1 = const_cast< Batch * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Batch > * >(argp1);
      arg1 = const_cast< Batch * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (arg1)->getBox();
  resultobj = SWIG_NewPointerObj((new Box3f(static_cast< const Box3f& >(result))), SWIGTYPE_p_Box3f, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Batch_getPick(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Batch *arg1 = (Batch *) 0 ;
  Ray3f *arg2 = 0 ;
  Mat4f arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Batch > tempshared1 ;
  std::tr1::shared_ptr< Batch > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Pick result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Batch_getPick",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Batch_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Batch_getPick" "', argument " "1"" of type '" "Batch *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Batch > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Batch > * >(argp1);
      arg1 = const_cast< Batch * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Batch > * >(argp1);
      arg1 = const_cast< Batch * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Ray3f,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Batch_getPick" "', argument " "2"" of type '" "Ray3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Batch_getPick" "', argument " "2"" of type '" "Ray3f const &""'"); 
  }
  arg2 = reinterpret_cast< Ray3f * >(argp2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Mat4f,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Batch_getPick" "', argument " "3"" of type '" "Mat4f""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Batch_getPick" "', argument " "3"" of type '" "Mat4f""'");
    } else {
      Mat4f * temp = reinterpret_cast< Mat4f * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  result = (arg1)->getPick((Ray3f const &)*arg2,arg3);
  resultobj = SWIG_NewPointerObj((new Pick(static_cast< const Pick& >(result))), SWIGTYPE_p_Pick, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Batch_getNormals(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Batch *arg1 = (Batch *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Batch > tempshared1 ;
  std::tr1::shared_ptr< Batch > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  std::tr1::shared_ptr< Batch > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Batch_getNormals",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Batch_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Batch_getNormals" "', argument " "1"" of type '" "Batch *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Batch > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Batch > * >(argp1);
      arg1 = const_cast< Batch * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Batch > * >(argp1);
      arg1 = const_cast< Batch * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (arg1)->getNormals();
  {
    std::tr1::shared_ptr<  Batch > *smartresult = result ? new std::tr1::shared_ptr<  Batch >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Batch_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Batch_Quad__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  std::tr1::shared_ptr< Batch > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Batch_Quad",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Batch_Quad" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Batch_Quad" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Batch_Quad" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Batch_Quad" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Batch_Quad" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  result = Batch::Quad(arg1,arg2,arg3,arg4,arg5);
  {
    std::tr1::shared_ptr<  Batch > *smartresult = result ? new std::tr1::shared_ptr<  Batch >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Batch_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Batch_Quad__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  std::tr1::shared_ptr< Batch > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Batch_Quad",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Batch_Quad" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Batch_Quad" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Batch_Quad" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Batch_Quad" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  result = Batch::Quad(arg1,arg2,arg3,arg4);
  {
    std::tr1::shared_ptr<  Batch > *smartresult = result ? new std::tr1::shared_ptr<  Batch >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Batch_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Batch_Quad(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 5); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Batch_Quad__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_Batch_Quad__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Batch_Quad'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Quad(int,int,int,int,int)\n"
    "    Batch::Quad(int,int,int,int)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Batch_Cube(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box3f *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::tr1::shared_ptr< Batch > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Batch_Cube",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Box3f,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Batch_Cube" "', argument " "1"" of type '" "Box3f const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Batch_Cube" "', argument " "1"" of type '" "Box3f const &""'"); 
  }
  arg1 = reinterpret_cast< Box3f * >(argp1);
  result = Batch::Cube((Box3f const &)*arg1);
  {
    std::tr1::shared_ptr<  Batch > *smartresult = result ? new std::tr1::shared_ptr<  Batch >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Batch_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Batch_Sky(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box3f *arg1 = 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Batch_Sky",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Box3f,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Batch_Sky" "', argument " "1"" of type '" "Box3f const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Batch_Sky" "', argument " "1"" of type '" "Box3f const &""'"); 
  }
  arg1 = reinterpret_cast< Box3f * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Batch_Sky" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = Batch::Sky((Box3f const &)*arg1,arg2);
  resultobj = swig::from(static_cast< std::vector<std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Batch_Circle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  float arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::tr1::shared_ptr< Batch > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Batch_Circle",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Batch_Circle" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  result = Batch::Circle(arg1);
  {
    std::tr1::shared_ptr<  Batch > *smartresult = result ? new std::tr1::shared_ptr<  Batch >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Batch_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Batch_openPly__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  bool arg2 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Batch_openPly",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Batch_openPly" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Batch_openPly" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = Batch::openPly(arg1,arg2);
  resultobj = swig::from(static_cast< std::vector<std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Batch_openPly__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  std::vector< std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Batch_openPly",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Batch_openPly" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = Batch::openPly(arg1);
  resultobj = swig::from(static_cast< std::vector<std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Batch_openPly(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Batch_openPly__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Batch_openPly__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Batch_openPly'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    openPly(std::string,bool)\n"
    "    Batch::openPly(std::string)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Batch_openObj(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  std::vector< std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Batch_openObj",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Batch_openObj" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = Batch::openObj(arg1);
  resultobj = swig::from(static_cast< std::vector<std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Batch_saveObj(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::vector< std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > arg2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Batch_saveObj",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Batch_saveObj" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > *ptr = (std::vector<std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > *)0;
    int res = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Batch_saveObj" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > >""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  Batch::saveObj(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Batch_openPtx__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  bool arg2 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Batch_openPtx",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Batch_openPtx" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Batch_openPtx" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = Batch::openPtx(arg1,arg2);
  resultobj = swig::from(static_cast< std::vector<std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Batch_openPtx__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  std::vector< std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Batch_openPtx",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Batch_openPtx" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = Batch::openPtx(arg1);
  resultobj = swig::from(static_cast< std::vector<std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Batch_openPtx(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Batch_openPtx__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Batch_openPtx__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Batch_openPtx'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    openPtx(std::string,bool)\n"
    "    Batch::openPtx(std::string)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Batch_Save(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::vector< std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > arg2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Batch_Save",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Batch_Save" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > *ptr = (std::vector<std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > *)0;
    int res = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Batch_Save" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > >""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  Batch::Save(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Batch_Open(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  std::vector< std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Batch_Open",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Batch_Open" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = Batch::Open(arg1);
  resultobj = swig::from(static_cast< std::vector<std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Batch_Merge(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::tr1::shared_ptr< Batch > arg1 ;
  std::tr1::shared_ptr< Batch > arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::tr1::shared_ptr< Batch > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Batch_Merge",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Batch_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Batch_Merge" "', argument " "1"" of type '" "std::tr1::shared_ptr< Batch >""'"); 
    }
    if (argp1) arg1 = *(reinterpret_cast< std::tr1::shared_ptr< Batch > * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< std::tr1::shared_ptr< Batch > * >(argp1);
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_std__tr1__shared_ptrT_Batch_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Batch_Merge" "', argument " "2"" of type '" "std::tr1::shared_ptr< Batch >""'"); 
    }
    if (argp2) arg2 = *(reinterpret_cast< std::tr1::shared_ptr< Batch > * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< std::tr1::shared_ptr< Batch > * >(argp2);
  }
  result = Batch::Merge(arg1,arg2);
  {
    std::tr1::shared_ptr<  Batch > *smartresult = result ? new std::tr1::shared_ptr<  Batch >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Batch_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Batch_Optimize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > arg1 ;
  int arg2 ;
  int arg3 ;
  float arg4 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  std::vector< std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Batch_Optimize",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    std::vector<std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > *ptr = (std::vector<std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > *)0;
    int res = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Batch_Optimize" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > >""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Batch_Optimize" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Batch_Optimize" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Batch_Optimize" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  result = Batch::Optimize(arg1,arg2,arg3,arg4);
  resultobj = swig::from(static_cast< std::vector<std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Batch_Optimize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > arg1 ;
  int arg2 ;
  int arg3 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Batch_Optimize",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::vector<std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > *ptr = (std::vector<std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > *)0;
    int res = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Batch_Optimize" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > >""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Batch_Optimize" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Batch_Optimize" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = Batch::Optimize(arg1,arg2,arg3);
  resultobj = swig::from(static_cast< std::vector<std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Batch_Optimize__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > arg1 ;
  int arg2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Batch_Optimize",&obj0,&obj1)) SWIG_fail;
  {
    std::vector<std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > *ptr = (std::vector<std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > *)0;
    int res = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Batch_Optimize" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > >""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Batch_Optimize" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = Batch::Optimize(arg1,arg2);
  resultobj = swig::from(static_cast< std::vector<std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Batch_Optimize__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > arg1 ;
  PyObject * obj0 = 0 ;
  std::vector< std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Batch_Optimize",&obj0)) SWIG_fail;
  {
    std::vector<std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > *ptr = (std::vector<std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > *)0;
    int res = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Batch_Optimize" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > >""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = Batch::Optimize(arg1);
  resultobj = swig::from(static_cast< std::vector<std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Batch_Optimize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Batch_Optimize__SWIG_3(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Batch_Optimize__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Batch_Optimize__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Batch_Optimize__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Batch_Optimize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Optimize(std::vector< std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > >,int,int,float)\n"
    "    Optimize(std::vector< std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > >,int,int)\n"
    "    Optimize(std::vector< std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > >,int)\n"
    "    Batch::Optimize(std::vector< std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > >)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Batch(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Batch *arg1 = (Batch *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Batch > tempshared1 ;
  std::tr1::shared_ptr< Batch > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Batch",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Batch_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Batch" "', argument " "1"" of type '" "Batch *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Batch > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Batch > * >(argp1);
      arg1 = const_cast< Batch * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Batch > * >(argp1);
      arg1 = const_cast< Batch * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (void)arg1; delete smartarg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Batch_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__tr1__shared_ptrT_Batch_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_Pick_valid_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Pick *arg1 = (Pick *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Pick_valid_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Pick, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pick_valid_set" "', argument " "1"" of type '" "Pick *""'"); 
  }
  arg1 = reinterpret_cast< Pick * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Pick_valid_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->valid = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pick_valid_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Pick *arg1 = (Pick *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Pick_valid_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Pick, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pick_valid_get" "', argument " "1"" of type '" "Pick *""'"); 
  }
  arg1 = reinterpret_cast< Pick * >(argp1);
  result = (bool) ((arg1)->valid);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pick_distance_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Pick *arg1 = (Pick *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Pick_distance_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Pick, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pick_distance_set" "', argument " "1"" of type '" "Pick *""'"); 
  }
  arg1 = reinterpret_cast< Pick * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Pick_distance_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->distance = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pick_distance_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Pick *arg1 = (Pick *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Pick_distance_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Pick, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pick_distance_get" "', argument " "1"" of type '" "Pick *""'"); 
  }
  arg1 = reinterpret_cast< Pick * >(argp1);
  result = (float) ((arg1)->distance);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pick_position_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Pick *arg1 = (Pick *) 0 ;
  Vec3f *arg2 = (Vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Pick_position_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Pick, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pick_position_set" "', argument " "1"" of type '" "Pick *""'"); 
  }
  arg1 = reinterpret_cast< Pick * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Vec3f, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Pick_position_set" "', argument " "2"" of type '" "Vec3f *""'"); 
  }
  arg2 = reinterpret_cast< Vec3f * >(argp2);
  if (arg1) (arg1)->position = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pick_position_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Pick *arg1 = (Pick *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Vec3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Pick_position_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Pick, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pick_position_get" "', argument " "1"" of type '" "Pick *""'"); 
  }
  arg1 = reinterpret_cast< Pick * >(argp1);
  result = (Vec3f *)& ((arg1)->position);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vec3f, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pick_normal_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Pick *arg1 = (Pick *) 0 ;
  Vec3f *arg2 = (Vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Pick_normal_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Pick, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pick_normal_set" "', argument " "1"" of type '" "Pick *""'"); 
  }
  arg1 = reinterpret_cast< Pick * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Vec3f, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Pick_normal_set" "', argument " "2"" of type '" "Vec3f *""'"); 
  }
  arg2 = reinterpret_cast< Vec3f * >(argp2);
  if (arg1) (arg1)->normal = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pick_normal_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Pick *arg1 = (Pick *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Vec3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Pick_normal_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Pick, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pick_normal_get" "', argument " "1"" of type '" "Pick *""'"); 
  }
  arg1 = reinterpret_cast< Pick * >(argp1);
  result = (Vec3f *)& ((arg1)->normal);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vec3f, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pick_matrix_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Pick *arg1 = (Pick *) 0 ;
  Mat4f *arg2 = (Mat4f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Pick_matrix_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Pick, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pick_matrix_set" "', argument " "1"" of type '" "Pick *""'"); 
  }
  arg1 = reinterpret_cast< Pick * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Mat4f, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Pick_matrix_set" "', argument " "2"" of type '" "Mat4f *""'"); 
  }
  arg2 = reinterpret_cast< Mat4f * >(argp2);
  if (arg1) (arg1)->matrix = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pick_matrix_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Pick *arg1 = (Pick *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Mat4f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Pick_matrix_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Pick, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pick_matrix_get" "', argument " "1"" of type '" "Pick *""'"); 
  }
  arg1 = reinterpret_cast< Pick * >(argp1);
  result = (Mat4f *)& ((arg1)->matrix);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Mat4f, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pick_path_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Pick *arg1 = (Pick *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = (std::vector< int,std::allocator< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Pick_path_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Pick, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pick_path_set" "', argument " "1"" of type '" "Pick *""'"); 
  }
  arg1 = reinterpret_cast< Pick * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Pick_path_set" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< int,std::allocator< int > > * >(argp2);
  if (arg1) (arg1)->path = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pick_path_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Pick *arg1 = (Pick *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int,std::allocator< int > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Pick_path_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Pick, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pick_path_get" "', argument " "1"" of type '" "Pick *""'"); 
  }
  arg1 = reinterpret_cast< Pick * >(argp1);
  result = (std::vector< int,std::allocator< int > > *)& ((arg1)->path);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Pick__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Pick *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Pick")) SWIG_fail;
  result = (Pick *)new Pick();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Pick, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Pick__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Pick *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Pick *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Pick",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Pick,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Pick" "', argument " "1"" of type '" "Pick const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Pick" "', argument " "1"" of type '" "Pick const &""'"); 
  }
  arg1 = reinterpret_cast< Pick * >(argp1);
  result = (Pick *)new Pick((Pick const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Pick, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Pick(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Pick__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Pick, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Pick__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Pick'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Pick()\n"
    "    Pick(Pick const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pick_isValid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Pick *arg1 = (Pick *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Pick_isValid",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Pick, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pick_isValid" "', argument " "1"" of type '" "Pick *""'"); 
  }
  arg1 = reinterpret_cast< Pick * >(argp1);
  result = (bool)(arg1)->isValid();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pick_guessMatrix(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Pick *arg1 = (Pick *) 0 ;
  Vec3f arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Pick_guessMatrix",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Pick, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pick_guessMatrix" "', argument " "1"" of type '" "Pick *""'"); 
  }
  arg1 = reinterpret_cast< Pick * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vec3f,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Pick_guessMatrix" "', argument " "2"" of type '" "Vec3f""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pick_guessMatrix" "', argument " "2"" of type '" "Vec3f""'");
    } else {
      Vec3f * temp = reinterpret_cast< Vec3f * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  (arg1)->guessMatrix(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pick___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Pick *arg1 = (Pick *) 0 ;
  Pick *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Pick___lt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Pick, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pick___lt__" "', argument " "1"" of type '" "Pick const *""'"); 
  }
  arg1 = reinterpret_cast< Pick * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Pick,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Pick___lt__" "', argument " "2"" of type '" "Pick const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pick___lt__" "', argument " "2"" of type '" "Pick const &""'"); 
  }
  arg2 = reinterpret_cast< Pick * >(argp2);
  result = (bool)((Pick const *)arg1)->operator <((Pick const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Pick(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Pick *arg1 = (Pick *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Pick",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Pick, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Pick" "', argument " "1"" of type '" "Pick *""'"); 
  }
  arg1 = reinterpret_cast< Pick * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Pick_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Pick, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_GraphKMem_Write(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GraphKMem *arg1 = (GraphKMem *) 0 ;
  Archive *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GraphKMem_Write",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GraphKMem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GraphKMem_Write" "', argument " "1"" of type '" "GraphKMem *""'"); 
  }
  arg1 = reinterpret_cast< GraphKMem * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Archive,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GraphKMem_Write" "', argument " "2"" of type '" "Archive &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GraphKMem_Write" "', argument " "2"" of type '" "Archive &""'"); 
  }
  arg2 = reinterpret_cast< Archive * >(argp2);
  (arg1)->Write(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GraphKMem_Read(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GraphKMem *arg1 = (GraphKMem *) 0 ;
  Archive *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GraphKMem_Read",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GraphKMem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GraphKMem_Read" "', argument " "1"" of type '" "GraphKMem *""'"); 
  }
  arg1 = reinterpret_cast< GraphKMem * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Archive,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GraphKMem_Read" "', argument " "2"" of type '" "Archive &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GraphKMem_Read" "', argument " "2"" of type '" "Archive &""'"); 
  }
  arg2 = reinterpret_cast< Archive * >(argp2);
  (arg1)->Read(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GraphKMem__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GraphKMem *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_GraphKMem")) SWIG_fail;
  result = (GraphKMem *)new GraphKMem();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GraphKMem, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GraphKMem__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  GraphKMem *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_GraphKMem",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_GraphKMem" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = (GraphKMem *)new GraphKMem(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GraphKMem, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GraphKMem__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GraphKMem *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GraphKMem *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_GraphKMem",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_GraphKMem,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GraphKMem" "', argument " "1"" of type '" "GraphKMem const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GraphKMem" "', argument " "1"" of type '" "GraphKMem const &""'"); 
  }
  arg1 = reinterpret_cast< GraphKMem * >(argp1);
  result = (GraphKMem *)new GraphKMem((GraphKMem const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GraphKMem, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GraphKMem(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_GraphKMem__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_GraphKMem, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_GraphKMem__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_GraphKMem__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_GraphKMem'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GraphKMem()\n"
    "    GraphKMem(int)\n"
    "    GraphKMem(GraphKMem const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_GraphKMem(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GraphKMem *arg1 = (GraphKMem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_GraphKMem",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GraphKMem, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GraphKMem" "', argument " "1"" of type '" "GraphKMem *""'"); 
  }
  arg1 = reinterpret_cast< GraphKMem * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GraphKMem_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GraphKMem *arg1 = (GraphKMem *) 0 ;
  GraphKMem *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  GraphKMem *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GraphKMem_assign",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GraphKMem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GraphKMem_assign" "', argument " "1"" of type '" "GraphKMem *""'"); 
  }
  arg1 = reinterpret_cast< GraphKMem * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GraphKMem,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GraphKMem_assign" "', argument " "2"" of type '" "GraphKMem const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GraphKMem_assign" "', argument " "2"" of type '" "GraphKMem const &""'"); 
  }
  arg2 = reinterpret_cast< GraphKMem * >(argp2);
  result = (GraphKMem *) &(arg1)->operator =((GraphKMem const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GraphKMem, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GraphKMem_flush(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GraphKMem *arg1 = (GraphKMem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GraphKMem_flush",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GraphKMem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GraphKMem_flush" "', argument " "1"" of type '" "GraphKMem *""'"); 
  }
  arg1 = reinterpret_cast< GraphKMem * >(argp1);
  (arg1)->flush();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GraphKMem_alloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GraphKMem *arg1 = (GraphKMem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GraphKMem_alloc",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GraphKMem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GraphKMem_alloc" "', argument " "1"" of type '" "GraphKMem *""'"); 
  }
  arg1 = reinterpret_cast< GraphKMem * >(argp1);
  result = (unsigned int)(arg1)->alloc();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GraphKMem_free(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GraphKMem *arg1 = (GraphKMem *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GraphKMem_free",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GraphKMem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GraphKMem_free" "', argument " "1"" of type '" "GraphKMem *""'"); 
  }
  arg1 = reinterpret_cast< GraphKMem * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GraphKMem_free" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  (arg1)->free(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GraphKMem_needed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GraphKMem *arg1 = (GraphKMem *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GraphKMem_needed",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GraphKMem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GraphKMem_needed" "', argument " "1"" of type '" "GraphKMem *""'"); 
  }
  arg1 = reinterpret_cast< GraphKMem * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GraphKMem_needed" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  (arg1)->needed(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GraphKMem_getNBlocked(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GraphKMem *arg1 = (GraphKMem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GraphKMem_getNBlocked",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GraphKMem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GraphKMem_getNBlocked" "', argument " "1"" of type '" "GraphKMem *""'"); 
  }
  arg1 = reinterpret_cast< GraphKMem * >(argp1);
  result = (unsigned int)(arg1)->getNBlocked();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GraphKMem_getMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GraphKMem *arg1 = (GraphKMem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GraphKMem_getMax",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GraphKMem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GraphKMem_getMax" "', argument " "1"" of type '" "GraphKMem *""'"); 
  }
  arg1 = reinterpret_cast< GraphKMem * >(argp1);
  result = (unsigned int)(arg1)->getMax();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GraphKMem_itemsize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GraphKMem *arg1 = (GraphKMem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GraphKMem_itemsize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GraphKMem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GraphKMem_itemsize" "', argument " "1"" of type '" "GraphKMem const *""'"); 
  }
  arg1 = reinterpret_cast< GraphKMem * >(argp1);
  result = ((GraphKMem const *)arg1)->itemsize();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GraphKMem_memsize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GraphKMem *arg1 = (GraphKMem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GraphKMem_memsize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GraphKMem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GraphKMem_memsize" "', argument " "1"" of type '" "GraphKMem const *""'"); 
  }
  arg1 = reinterpret_cast< GraphKMem * >(argp1);
  result = ((GraphKMem const *)arg1)->memsize();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GraphKMem_resize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GraphKMem *arg1 = (GraphKMem *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GraphKMem_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GraphKMem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GraphKMem_resize" "', argument " "1"" of type '" "GraphKMem *""'"); 
  }
  arg1 = reinterpret_cast< GraphKMem * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GraphKMem_resize" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GraphKMem_PrintStatistics(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GraphKMem *arg1 = (GraphKMem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GraphKMem_PrintStatistics",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GraphKMem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GraphKMem_PrintStatistics" "', argument " "1"" of type '" "GraphKMem *""'"); 
  }
  arg1 = reinterpret_cast< GraphKMem * >(argp1);
  (arg1)->PrintStatistics();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GraphKMem_SelfTest(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":GraphKMem_SelfTest")) SWIG_fail;
  result = (int)GraphKMem::SelfTest();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *GraphKMem_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_GraphKMem, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_GraphArch_N0_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GraphArch *arg1 = (GraphArch *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GraphArch_N0_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GraphArch, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GraphArch_N0_set" "', argument " "1"" of type '" "GraphArch *""'"); 
  }
  arg1 = reinterpret_cast< GraphArch * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GraphArch_N0_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  if (arg1) (arg1)->N0 = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GraphArch_N0_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GraphArch *arg1 = (GraphArch *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GraphArch_N0_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GraphArch, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GraphArch_N0_get" "', argument " "1"" of type '" "GraphArch *""'"); 
  }
  arg1 = reinterpret_cast< GraphArch * >(argp1);
  result = (unsigned int) ((arg1)->N0);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GraphArch_N1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GraphArch *arg1 = (GraphArch *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GraphArch_N1_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GraphArch, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GraphArch_N1_set" "', argument " "1"" of type '" "GraphArch *""'"); 
  }
  arg1 = reinterpret_cast< GraphArch * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GraphArch_N1_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  if (arg1) (arg1)->N1 = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GraphArch_N1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GraphArch *arg1 = (GraphArch *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GraphArch_N1_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GraphArch, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GraphArch_N1_get" "', argument " "1"" of type '" "GraphArch *""'"); 
  }
  arg1 = reinterpret_cast< GraphArch * >(argp1);
  result = (unsigned int) ((arg1)->N1);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GraphArch_N0_prev_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GraphArch *arg1 = (GraphArch *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GraphArch_N0_prev_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GraphArch, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GraphArch_N0_prev_set" "', argument " "1"" of type '" "GraphArch *""'"); 
  }
  arg1 = reinterpret_cast< GraphArch * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GraphArch_N0_prev_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  if (arg1) (arg1)->N0_prev = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GraphArch_N0_prev_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GraphArch *arg1 = (GraphArch *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GraphArch_N0_prev_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GraphArch, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GraphArch_N0_prev_get" "', argument " "1"" of type '" "GraphArch *""'"); 
  }
  arg1 = reinterpret_cast< GraphArch * >(argp1);
  result = (unsigned int) ((arg1)->N0_prev);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GraphArch_N0_next_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GraphArch *arg1 = (GraphArch *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GraphArch_N0_next_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GraphArch, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GraphArch_N0_next_set" "', argument " "1"" of type '" "GraphArch *""'"); 
  }
  arg1 = reinterpret_cast< GraphArch * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GraphArch_N0_next_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  if (arg1) (arg1)->N0_next = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GraphArch_N0_next_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GraphArch *arg1 = (GraphArch *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GraphArch_N0_next_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GraphArch, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GraphArch_N0_next_get" "', argument " "1"" of type '" "GraphArch *""'"); 
  }
  arg1 = reinterpret_cast< GraphArch * >(argp1);
  result = (unsigned int) ((arg1)->N0_next);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GraphArch_N1_prev_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GraphArch *arg1 = (GraphArch *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GraphArch_N1_prev_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GraphArch, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GraphArch_N1_prev_set" "', argument " "1"" of type '" "GraphArch *""'"); 
  }
  arg1 = reinterpret_cast< GraphArch * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GraphArch_N1_prev_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  if (arg1) (arg1)->N1_prev = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GraphArch_N1_prev_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GraphArch *arg1 = (GraphArch *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GraphArch_N1_prev_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GraphArch, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GraphArch_N1_prev_get" "', argument " "1"" of type '" "GraphArch *""'"); 
  }
  arg1 = reinterpret_cast< GraphArch * >(argp1);
  result = (unsigned int) ((arg1)->N1_prev);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GraphArch_N1_next_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GraphArch *arg1 = (GraphArch *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GraphArch_N1_next_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GraphArch, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GraphArch_N1_next_set" "', argument " "1"" of type '" "GraphArch *""'"); 
  }
  arg1 = reinterpret_cast< GraphArch * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GraphArch_N1_next_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  if (arg1) (arg1)->N1_next = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GraphArch_N1_next_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GraphArch *arg1 = (GraphArch *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GraphArch_N1_next_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GraphArch, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GraphArch_N1_next_get" "', argument " "1"" of type '" "GraphArch *""'"); 
  }
  arg1 = reinterpret_cast< GraphArch * >(argp1);
  result = (unsigned int) ((arg1)->N1_next);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GraphArch_Info_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GraphArch *arg1 = (GraphArch *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GraphArch_Info_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GraphArch, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GraphArch_Info_set" "', argument " "1"" of type '" "GraphArch *""'"); 
  }
  arg1 = reinterpret_cast< GraphArch * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GraphArch_Info_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  if (arg1) (arg1)->Info = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GraphArch_Info_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GraphArch *arg1 = (GraphArch *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GraphArch_Info_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GraphArch, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GraphArch_Info_get" "', argument " "1"" of type '" "GraphArch *""'"); 
  }
  arg1 = reinterpret_cast< GraphArch * >(argp1);
  result = (unsigned int) ((arg1)->Info);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GraphArch(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GraphArch *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_GraphArch")) SWIG_fail;
  result = (GraphArch *)new GraphArch();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GraphArch, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_GraphArch(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GraphArch *arg1 = (GraphArch *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_GraphArch",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GraphArch, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GraphArch" "', argument " "1"" of type '" "GraphArch *""'"); 
  }
  arg1 = reinterpret_cast< GraphArch * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *GraphArch_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_GraphArch, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_GraphNode_Level_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GraphNode *arg1 = (GraphNode *) 0 ;
  unsigned char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GraphNode_Level_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GraphNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GraphNode_Level_set" "', argument " "1"" of type '" "GraphNode *""'"); 
  }
  arg1 = reinterpret_cast< GraphNode * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GraphNode_Level_set" "', argument " "2"" of type '" "unsigned char""'");
  } 
  arg2 = static_cast< unsigned char >(val2);
  if (arg1) (arg1)->Level = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GraphNode_Level_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GraphNode *arg1 = (GraphNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned char result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GraphNode_Level_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GraphNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GraphNode_Level_get" "', argument " "1"" of type '" "GraphNode *""'"); 
  }
  arg1 = reinterpret_cast< GraphNode * >(argp1);
  result = (unsigned char) ((arg1)->Level);
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GraphNode_Sign_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GraphNode *arg1 = (GraphNode *) 0 ;
  unsigned char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GraphNode_Sign_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GraphNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GraphNode_Sign_set" "', argument " "1"" of type '" "GraphNode *""'"); 
  }
  arg1 = reinterpret_cast< GraphNode * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GraphNode_Sign_set" "', argument " "2"" of type '" "unsigned char""'");
  } 
  arg2 = static_cast< unsigned char >(val2);
  if (arg1) (arg1)->Sign = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GraphNode_Sign_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GraphNode *arg1 = (GraphNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned char result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GraphNode_Sign_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GraphNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GraphNode_Sign_get" "', argument " "1"" of type '" "GraphNode *""'"); 
  }
  arg1 = reinterpret_cast< GraphNode * >(argp1);
  result = (unsigned char) ((arg1)->Sign);
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GraphNode_Dw_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GraphNode *arg1 = (GraphNode *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GraphNode_Dw_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GraphNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GraphNode_Dw_set" "', argument " "1"" of type '" "GraphNode *""'"); 
  }
  arg1 = reinterpret_cast< GraphNode * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GraphNode_Dw_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  if (arg1) (arg1)->Dw = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GraphNode_Dw_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GraphNode *arg1 = (GraphNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GraphNode_Dw_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GraphNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GraphNode_Dw_get" "', argument " "1"" of type '" "GraphNode *""'"); 
  }
  arg1 = reinterpret_cast< GraphNode * >(argp1);
  result = (unsigned int) ((arg1)->Dw);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GraphNode_Up_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GraphNode *arg1 = (GraphNode *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GraphNode_Up_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GraphNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GraphNode_Up_set" "', argument " "1"" of type '" "GraphNode *""'"); 
  }
  arg1 = reinterpret_cast< GraphNode * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GraphNode_Up_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  if (arg1) (arg1)->Up = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GraphNode_Up_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GraphNode *arg1 = (GraphNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GraphNode_Up_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GraphNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GraphNode_Up_get" "', argument " "1"" of type '" "GraphNode *""'"); 
  }
  arg1 = reinterpret_cast< GraphNode * >(argp1);
  result = (unsigned int) ((arg1)->Up);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GraphNode_Ndw_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GraphNode *arg1 = (GraphNode *) 0 ;
  unsigned short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GraphNode_Ndw_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GraphNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GraphNode_Ndw_set" "', argument " "1"" of type '" "GraphNode *""'"); 
  }
  arg1 = reinterpret_cast< GraphNode * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GraphNode_Ndw_set" "', argument " "2"" of type '" "unsigned short""'");
  } 
  arg2 = static_cast< unsigned short >(val2);
  if (arg1) (arg1)->Ndw = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GraphNode_Ndw_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GraphNode *arg1 = (GraphNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned short result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GraphNode_Ndw_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GraphNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GraphNode_Ndw_get" "', argument " "1"" of type '" "GraphNode *""'"); 
  }
  arg1 = reinterpret_cast< GraphNode * >(argp1);
  result = (unsigned short) ((arg1)->Ndw);
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GraphNode_Nup_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GraphNode *arg1 = (GraphNode *) 0 ;
  unsigned short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GraphNode_Nup_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GraphNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GraphNode_Nup_set" "', argument " "1"" of type '" "GraphNode *""'"); 
  }
  arg1 = reinterpret_cast< GraphNode * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GraphNode_Nup_set" "', argument " "2"" of type '" "unsigned short""'");
  } 
  arg2 = static_cast< unsigned short >(val2);
  if (arg1) (arg1)->Nup = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GraphNode_Nup_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GraphNode *arg1 = (GraphNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned short result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GraphNode_Nup_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GraphNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GraphNode_Nup_get" "', argument " "1"" of type '" "GraphNode *""'"); 
  }
  arg1 = reinterpret_cast< GraphNode * >(argp1);
  result = (unsigned short) ((arg1)->Nup);
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GraphNode_Prev_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GraphNode *arg1 = (GraphNode *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GraphNode_Prev_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GraphNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GraphNode_Prev_set" "', argument " "1"" of type '" "GraphNode *""'"); 
  }
  arg1 = reinterpret_cast< GraphNode * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GraphNode_Prev_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  if (arg1) (arg1)->Prev = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GraphNode_Prev_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GraphNode *arg1 = (GraphNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GraphNode_Prev_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GraphNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GraphNode_Prev_get" "', argument " "1"" of type '" "GraphNode *""'"); 
  }
  arg1 = reinterpret_cast< GraphNode * >(argp1);
  result = (unsigned int) ((arg1)->Prev);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GraphNode_Next_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GraphNode *arg1 = (GraphNode *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GraphNode_Next_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GraphNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GraphNode_Next_set" "', argument " "1"" of type '" "GraphNode *""'"); 
  }
  arg1 = reinterpret_cast< GraphNode * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GraphNode_Next_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  if (arg1) (arg1)->Next = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GraphNode_Next_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GraphNode *arg1 = (GraphNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GraphNode_Next_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GraphNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GraphNode_Next_get" "', argument " "1"" of type '" "GraphNode *""'"); 
  }
  arg1 = reinterpret_cast< GraphNode * >(argp1);
  result = (unsigned int) ((arg1)->Next);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GraphNode_Id_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GraphNode *arg1 = (GraphNode *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GraphNode_Id_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GraphNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GraphNode_Id_set" "', argument " "1"" of type '" "GraphNode *""'"); 
  }
  arg1 = reinterpret_cast< GraphNode * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GraphNode_Id_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  if (arg1) (arg1)->Id = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GraphNode_Id_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GraphNode *arg1 = (GraphNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GraphNode_Id_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GraphNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GraphNode_Id_get" "', argument " "1"" of type '" "GraphNode *""'"); 
  }
  arg1 = reinterpret_cast< GraphNode * >(argp1);
  result = (unsigned int) ((arg1)->Id);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GraphNode_Info_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GraphNode *arg1 = (GraphNode *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GraphNode_Info_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GraphNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GraphNode_Info_set" "', argument " "1"" of type '" "GraphNode *""'"); 
  }
  arg1 = reinterpret_cast< GraphNode * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GraphNode_Info_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  if (arg1) (arg1)->Info = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GraphNode_Info_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GraphNode *arg1 = (GraphNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GraphNode_Info_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GraphNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GraphNode_Info_get" "', argument " "1"" of type '" "GraphNode *""'"); 
  }
  arg1 = reinterpret_cast< GraphNode * >(argp1);
  result = (unsigned int) ((arg1)->Info);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GraphNode_Tmp_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GraphNode *arg1 = (GraphNode *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GraphNode_Tmp_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GraphNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GraphNode_Tmp_set" "', argument " "1"" of type '" "GraphNode *""'"); 
  }
  arg1 = reinterpret_cast< GraphNode * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GraphNode_Tmp_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  if (arg1) (arg1)->Tmp = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GraphNode_Tmp_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GraphNode *arg1 = (GraphNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GraphNode_Tmp_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GraphNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GraphNode_Tmp_get" "', argument " "1"" of type '" "GraphNode *""'"); 
  }
  arg1 = reinterpret_cast< GraphNode * >(argp1);
  result = (unsigned int) ((arg1)->Tmp);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GraphNode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GraphNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_GraphNode")) SWIG_fail;
  result = (GraphNode *)new GraphNode();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GraphNode, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_GraphNode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GraphNode *arg1 = (GraphNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_GraphNode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GraphNode, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GraphNode" "', argument " "1"" of type '" "GraphNode *""'"); 
  }
  arg1 = reinterpret_cast< GraphNode * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *GraphNode_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_GraphNode, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_GraphIterator__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GraphIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_GraphIterator")) SWIG_fail;
  result = (GraphIterator *)new GraphIterator();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GraphIterator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GraphIterator__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GraphIterator *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GraphIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_GraphIterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_GraphIterator,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GraphIterator" "', argument " "1"" of type '" "GraphIterator const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GraphIterator" "', argument " "1"" of type '" "GraphIterator const &""'"); 
  }
  arg1 = reinterpret_cast< GraphIterator * >(argp1);
  result = (GraphIterator *)new GraphIterator((GraphIterator const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GraphIterator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GraphIterator(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_GraphIterator__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_GraphIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_GraphIterator__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_GraphIterator'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GraphIterator()\n"
    "    GraphIterator(GraphIterator const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_GraphIterator_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GraphIterator *arg1 = (GraphIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GraphIterator_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GraphIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GraphIterator_end" "', argument " "1"" of type '" "GraphIterator *""'"); 
  }
  arg1 = reinterpret_cast< GraphIterator * >(argp1);
  result = (bool)(arg1)->end();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GraphIterator___ref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GraphIterator *arg1 = (GraphIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GraphIterator___ref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GraphIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GraphIterator___ref__" "', argument " "1"" of type '" "GraphIterator *""'"); 
  }
  arg1 = reinterpret_cast< GraphIterator * >(argp1);
  result = (unsigned int)(arg1)->operator *();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GraphIterator_getNode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GraphIterator *arg1 = (GraphIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GraphIterator_getNode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GraphIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GraphIterator_getNode" "', argument " "1"" of type '" "GraphIterator *""'"); 
  }
  arg1 = reinterpret_cast< GraphIterator * >(argp1);
  result = (unsigned int)(arg1)->getNode();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GraphIterator_getArch(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GraphIterator *arg1 = (GraphIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GraphIterator_getArch",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GraphIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GraphIterator_getArch" "', argument " "1"" of type '" "GraphIterator *""'"); 
  }
  arg1 = reinterpret_cast< GraphIterator * >(argp1);
  result = (unsigned int)(arg1)->getArch();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GraphIterator_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GraphIterator *arg1 = (GraphIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GraphIterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GraphIterator_next",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GraphIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GraphIterator_next" "', argument " "1"" of type '" "GraphIterator *""'"); 
  }
  arg1 = reinterpret_cast< GraphIterator * >(argp1);
  result = (arg1)->next();
  resultobj = SWIG_NewPointerObj((new GraphIterator(static_cast< const GraphIterator& >(result))), SWIGTYPE_p_GraphIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GraphIterator_prev(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GraphIterator *arg1 = (GraphIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GraphIterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GraphIterator_prev",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GraphIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GraphIterator_prev" "', argument " "1"" of type '" "GraphIterator *""'"); 
  }
  arg1 = reinterpret_cast< GraphIterator * >(argp1);
  result = (arg1)->prev();
  resultobj = SWIG_NewPointerObj((new GraphIterator(static_cast< const GraphIterator& >(result))), SWIGTYPE_p_GraphIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GraphIterator_goForward(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GraphIterator *arg1 = (GraphIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GraphIterator_goForward",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GraphIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GraphIterator_goForward" "', argument " "1"" of type '" "GraphIterator *""'"); 
  }
  arg1 = reinterpret_cast< GraphIterator * >(argp1);
  (arg1)->goForward();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GraphIterator_goBackward(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GraphIterator *arg1 = (GraphIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GraphIterator_goBackward",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GraphIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GraphIterator_goBackward" "', argument " "1"" of type '" "GraphIterator *""'"); 
  }
  arg1 = reinterpret_cast< GraphIterator * >(argp1);
  (arg1)->goBackward();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_GraphIterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GraphIterator *arg1 = (GraphIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_GraphIterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GraphIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GraphIterator" "', argument " "1"" of type '" "GraphIterator *""'"); 
  }
  arg1 = reinterpret_cast< GraphIterator * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *GraphIterator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_GraphIterator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_GraphListIterator__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GraphListIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_GraphListIterator")) SWIG_fail;
  result = (GraphListIterator *)new GraphListIterator();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GraphListIterator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GraphListIterator__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GraphListIterator *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GraphListIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_GraphListIterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_GraphListIterator,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GraphListIterator" "', argument " "1"" of type '" "GraphListIterator const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GraphListIterator" "', argument " "1"" of type '" "GraphListIterator const &""'"); 
  }
  arg1 = reinterpret_cast< GraphListIterator * >(argp1);
  result = (GraphListIterator *)new GraphListIterator((GraphListIterator const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GraphListIterator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GraphListIterator(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_GraphListIterator__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_GraphListIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_GraphListIterator__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_GraphListIterator'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GraphListIterator()\n"
    "    GraphListIterator(GraphListIterator const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_GraphListIterator_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GraphListIterator *arg1 = (GraphListIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GraphListIterator_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GraphListIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GraphListIterator_end" "', argument " "1"" of type '" "GraphListIterator *""'"); 
  }
  arg1 = reinterpret_cast< GraphListIterator * >(argp1);
  result = (bool)(arg1)->end();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GraphListIterator___ref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GraphListIterator *arg1 = (GraphListIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GraphListIterator___ref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GraphListIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GraphListIterator___ref__" "', argument " "1"" of type '" "GraphListIterator *""'"); 
  }
  arg1 = reinterpret_cast< GraphListIterator * >(argp1);
  result = (unsigned int)(arg1)->operator *();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GraphListIterator_getNode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GraphListIterator *arg1 = (GraphListIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GraphListIterator_getNode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GraphListIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GraphListIterator_getNode" "', argument " "1"" of type '" "GraphListIterator *""'"); 
  }
  arg1 = reinterpret_cast< GraphListIterator * >(argp1);
  result = (unsigned int)(arg1)->getNode();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GraphListIterator_getPrevNode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GraphListIterator *arg1 = (GraphListIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GraphListIterator_getPrevNode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GraphListIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GraphListIterator_getPrevNode" "', argument " "1"" of type '" "GraphListIterator *""'"); 
  }
  arg1 = reinterpret_cast< GraphListIterator * >(argp1);
  result = (unsigned int)(arg1)->getPrevNode();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GraphListIterator_goForward(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GraphListIterator *arg1 = (GraphListIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GraphListIterator_goForward",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GraphListIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GraphListIterator_goForward" "', argument " "1"" of type '" "GraphListIterator *""'"); 
  }
  arg1 = reinterpret_cast< GraphListIterator * >(argp1);
  (arg1)->goForward();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GraphListIterator_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GraphListIterator *arg1 = (GraphListIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GraphListIterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GraphListIterator_next",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GraphListIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GraphListIterator_next" "', argument " "1"" of type '" "GraphListIterator *""'"); 
  }
  arg1 = reinterpret_cast< GraphListIterator * >(argp1);
  result = (arg1)->next();
  resultobj = SWIG_NewPointerObj((new GraphListIterator(static_cast< const GraphListIterator& >(result))), SWIGTYPE_p_GraphListIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_GraphListIterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GraphListIterator *arg1 = (GraphListIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_GraphListIterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GraphListIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GraphListIterator" "', argument " "1"" of type '" "GraphListIterator *""'"); 
  }
  arg1 = reinterpret_cast< GraphListIterator * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *GraphListIterator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_GraphListIterator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_GraphNavigator_nnav_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GraphNavigator *arg1 = (GraphNavigator *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GraphNavigator_nnav_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GraphNavigator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GraphNavigator_nnav_set" "', argument " "1"" of type '" "GraphNavigator *""'"); 
  }
  arg1 = reinterpret_cast< GraphNavigator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_unsigned_int, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GraphNavigator_nnav_set" "', argument " "2"" of type '" "unsigned int *""'"); 
  }
  arg2 = reinterpret_cast< unsigned int * >(argp2);
  if (arg1) (arg1)->nnav = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GraphNavigator_nnav_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GraphNavigator *arg1 = (GraphNavigator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GraphNavigator_nnav_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GraphNavigator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GraphNavigator_nnav_get" "', argument " "1"" of type '" "GraphNavigator *""'"); 
  }
  arg1 = reinterpret_cast< GraphNavigator * >(argp1);
  result = (unsigned int *) ((arg1)->nnav);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_int, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GraphNavigator_nav_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GraphNavigator *arg1 = (GraphNavigator *) 0 ;
  unsigned int **arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GraphNavigator_nav_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GraphNavigator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GraphNavigator_nav_set" "', argument " "1"" of type '" "GraphNavigator *""'"); 
  }
  arg1 = reinterpret_cast< GraphNavigator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_p_unsigned_int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GraphNavigator_nav_set" "', argument " "2"" of type '" "unsigned int *[16+2]""'"); 
  } 
  arg2 = reinterpret_cast< unsigned int ** >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)16+2; ++ii) arg1->nav[ii] = arg2[ii];
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""nav""' of type '""unsigned int *[16+2]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GraphNavigator_nav_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GraphNavigator *arg1 = (GraphNavigator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int **result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GraphNavigator_nav_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GraphNavigator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GraphNavigator_nav_get" "', argument " "1"" of type '" "GraphNavigator *""'"); 
  }
  arg1 = reinterpret_cast< GraphNavigator * >(argp1);
  result = (unsigned int **)(unsigned int **) ((arg1)->nav);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_unsigned_int, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GraphNavigator__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GraphNavigator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_GraphNavigator")) SWIG_fail;
  result = (GraphNavigator *)new GraphNavigator();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GraphNavigator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GraphNavigator(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_GraphNavigator__SWIG_1(self, args);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_GraphNavigator'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GraphNavigator()\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_GraphNavigator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GraphNavigator *arg1 = (GraphNavigator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_GraphNavigator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GraphNavigator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GraphNavigator" "', argument " "1"" of type '" "GraphNavigator *""'"); 
  }
  arg1 = reinterpret_cast< GraphNavigator * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GraphNavigator_getNCells(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GraphNavigator *arg1 = (GraphNavigator *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GraphNavigator_getNCells",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GraphNavigator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GraphNavigator_getNCells" "', argument " "1"" of type '" "GraphNavigator *""'"); 
  }
  arg1 = reinterpret_cast< GraphNavigator * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GraphNavigator_getNCells" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (unsigned int)(arg1)->getNCells(arg2);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GraphNavigator_getCell(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GraphNavigator *arg1 = (GraphNavigator *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:GraphNavigator_getCell",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GraphNavigator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GraphNavigator_getCell" "', argument " "1"" of type '" "GraphNavigator *""'"); 
  }
  arg1 = reinterpret_cast< GraphNavigator * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GraphNavigator_getCell" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GraphNavigator_getCell" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (unsigned int)(arg1)->getCell(arg2,arg3);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *GraphNavigator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_GraphNavigator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_Graph_Write(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Graph *arg1 = (Graph *) 0 ;
  Archive *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Graph > tempshared1 ;
  std::tr1::shared_ptr< Graph > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Graph_Write",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_Write" "', argument " "1"" of type '" "Graph *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Archive,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Graph_Write" "', argument " "2"" of type '" "Archive &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Graph_Write" "', argument " "2"" of type '" "Archive &""'"); 
  }
  arg2 = reinterpret_cast< Archive * >(argp2);
  (arg1)->Write(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_Read(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Graph *arg1 = (Graph *) 0 ;
  Archive *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Graph > tempshared1 ;
  std::tr1::shared_ptr< Graph > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Graph_Read",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_Read" "', argument " "1"" of type '" "Graph *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Archive,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Graph_Read" "', argument " "2"" of type '" "Archive &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Graph_Read" "', argument " "2"" of type '" "Archive &""'"); 
  }
  arg2 = reinterpret_cast< Archive * >(argp2);
  (arg1)->Read(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Graph__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Graph *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Graph")) SWIG_fail;
  result = (Graph *)new Graph();
  {
    std::tr1::shared_ptr<  Graph > *smartresult = result ? new std::tr1::shared_ptr<  Graph >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Graph__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  Graph *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Graph",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Graph" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = (Graph *)new Graph(arg1);
  {
    std::tr1::shared_ptr<  Graph > *smartresult = result ? new std::tr1::shared_ptr<  Graph >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Graph__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Graph *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Graph const > tempshared1 ;
  PyObject * obj0 = 0 ;
  Graph *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Graph",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Graph" "', argument " "1"" of type '" "Graph const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Graph" "', argument " "1"" of type '" "Graph const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr< const Graph > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr< const Graph > * >(argp1);
      arg1 = const_cast< Graph * >(tempshared1.get());
    } else {
      arg1 = const_cast< Graph * >(reinterpret_cast< std::tr1::shared_ptr< const Graph > * >(argp1)->get());
    }
  }
  result = (Graph *)new Graph((Graph const &)*arg1);
  {
    std::tr1::shared_ptr<  Graph > *smartresult = result ? new std::tr1::shared_ptr<  Graph >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Graph(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Graph__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Graph__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Graph__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Graph'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Graph()\n"
    "    Graph(int)\n"
    "    Graph(Graph const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Graph(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Graph *arg1 = (Graph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Graph > tempshared1 ;
  std::tr1::shared_ptr< Graph > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Graph",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Graph" "', argument " "1"" of type '" "Graph *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (void)arg1; delete smartarg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_getPointDim(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Graph *arg1 = (Graph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Graph const > tempshared1 ;
  std::tr1::shared_ptr< Graph const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Graph_getPointDim",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_getPointDim" "', argument " "1"" of type '" "Graph const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr< const Graph > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr< const Graph > * >(argp1);
      arg1 = const_cast< Graph * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr< const Graph > * >(argp1);
      arg1 = const_cast< Graph * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (int)((Graph const *)arg1)->getPointDim();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Graph *arg1 = (Graph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Graph const > tempshared1 ;
  std::tr1::shared_ptr< Graph const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  std::tr1::shared_ptr< Graph > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Graph_clone",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_clone" "', argument " "1"" of type '" "Graph const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr< const Graph > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr< const Graph > * >(argp1);
      arg1 = const_cast< Graph * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr< const Graph > * >(argp1);
      arg1 = const_cast< Graph * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((Graph const *)arg1)->clone();
  {
    std::tr1::shared_ptr<  Graph > *smartresult = result ? new std::tr1::shared_ptr<  Graph >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Graph *arg1 = (Graph *) 0 ;
  Graph *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Graph > tempshared1 ;
  std::tr1::shared_ptr< Graph > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::tr1::shared_ptr< Graph const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Graph *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Graph_assign",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_assign" "', argument " "1"" of type '" "Graph *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Graph_assign" "', argument " "2"" of type '" "Graph const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Graph_assign" "', argument " "2"" of type '" "Graph const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< std::tr1::shared_ptr< const Graph > * >(argp2);
      delete reinterpret_cast< std::tr1::shared_ptr< const Graph > * >(argp2);
      arg2 = const_cast< Graph * >(tempshared2.get());
    } else {
      arg2 = const_cast< Graph * >(reinterpret_cast< std::tr1::shared_ptr< const Graph > * >(argp2)->get());
    }
  }
  result = (Graph *) &(arg1)->operator =((Graph const &)*arg2);
  {
    std::tr1::shared_ptr<  Graph > *smartresult = new std::tr1::shared_ptr<  Graph >(result SWIG_NO_NULL_DELETER_0);
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Graph *arg1 = (Graph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Graph > tempshared1 ;
  std::tr1::shared_ptr< Graph > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Graph_clear",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_clear" "', argument " "1"" of type '" "Graph *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_getArch(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Graph *arg1 = (Graph *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Graph > tempshared1 ;
  std::tr1::shared_ptr< Graph > *smartarg1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  GraphArch *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Graph_getArch",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_getArch" "', argument " "1"" of type '" "Graph *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Graph_getArch" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (GraphArch *) &(arg1)->getArch(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GraphArch, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_getNode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Graph *arg1 = (Graph *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Graph > tempshared1 ;
  std::tr1::shared_ptr< Graph > *smartarg1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  GraphNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Graph_getNode",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_getNode" "', argument " "1"" of type '" "Graph *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Graph_getNode" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (GraphNode *) &(arg1)->getNode(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GraphNode, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_getNDw(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Graph *arg1 = (Graph *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Graph > tempshared1 ;
  std::tr1::shared_ptr< Graph > *smartarg1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  unsigned short result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Graph_getNDw",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_getNDw" "', argument " "1"" of type '" "Graph *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Graph_getNDw" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (unsigned short)(arg1)->getNDw(arg2);
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_getNUp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Graph *arg1 = (Graph *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Graph > tempshared1 ;
  std::tr1::shared_ptr< Graph > *smartarg1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  unsigned short result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Graph_getNUp",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_getNUp" "', argument " "1"" of type '" "Graph *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Graph_getNUp" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (unsigned short)(arg1)->getNUp(arg2);
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_getNumNode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Graph *arg1 = (Graph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Graph > tempshared1 ;
  std::tr1::shared_ptr< Graph > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Graph_getNumNode",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_getNumNode" "', argument " "1"" of type '" "Graph *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (unsigned int)(arg1)->getNumNode();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_getNumArch(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Graph *arg1 = (Graph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Graph > tempshared1 ;
  std::tr1::shared_ptr< Graph > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Graph_getNumArch",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_getNumArch" "', argument " "1"" of type '" "Graph *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (unsigned int)(arg1)->getNumArch();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_getMaxNode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Graph *arg1 = (Graph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Graph > tempshared1 ;
  std::tr1::shared_ptr< Graph > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Graph_getMaxNode",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_getMaxNode" "', argument " "1"" of type '" "Graph *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (unsigned int)(arg1)->getMaxNode();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_getMaxArch(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Graph *arg1 = (Graph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Graph > tempshared1 ;
  std::tr1::shared_ptr< Graph > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Graph_getMaxArch",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_getMaxArch" "', argument " "1"" of type '" "Graph *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (unsigned int)(arg1)->getMaxArch();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_getFirstDwArch(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Graph *arg1 = (Graph *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Graph > tempshared1 ;
  std::tr1::shared_ptr< Graph > *smartarg1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Graph_getFirstDwArch",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_getFirstDwArch" "', argument " "1"" of type '" "Graph *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Graph_getFirstDwArch" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (unsigned int)(arg1)->getFirstDwArch(arg2);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_getFirstUpArch(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Graph *arg1 = (Graph *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Graph > tempshared1 ;
  std::tr1::shared_ptr< Graph > *smartarg1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Graph_getFirstUpArch",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_getFirstUpArch" "', argument " "1"" of type '" "Graph *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Graph_getFirstUpArch" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (unsigned int)(arg1)->getFirstUpArch(arg2);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_getLastDwArch(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Graph *arg1 = (Graph *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Graph > tempshared1 ;
  std::tr1::shared_ptr< Graph > *smartarg1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Graph_getLastDwArch",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_getLastDwArch" "', argument " "1"" of type '" "Graph *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Graph_getLastDwArch" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (unsigned int)(arg1)->getLastDwArch(arg2);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_getLastUpArch(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Graph *arg1 = (Graph *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Graph > tempshared1 ;
  std::tr1::shared_ptr< Graph > *smartarg1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Graph_getLastUpArch",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_getLastUpArch" "', argument " "1"" of type '" "Graph *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Graph_getLastUpArch" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (unsigned int)(arg1)->getLastUpArch(arg2);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_getFirstDwNode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Graph *arg1 = (Graph *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Graph > tempshared1 ;
  std::tr1::shared_ptr< Graph > *smartarg1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Graph_getFirstDwNode",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_getFirstDwNode" "', argument " "1"" of type '" "Graph *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Graph_getFirstDwNode" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (unsigned int)(arg1)->getFirstDwNode(arg2);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_getFirstUpNode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Graph *arg1 = (Graph *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Graph > tempshared1 ;
  std::tr1::shared_ptr< Graph > *smartarg1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Graph_getFirstUpNode",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_getFirstUpNode" "', argument " "1"" of type '" "Graph *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Graph_getFirstUpNode" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (unsigned int)(arg1)->getFirstUpNode(arg2);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_getLastDwNode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Graph *arg1 = (Graph *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Graph > tempshared1 ;
  std::tr1::shared_ptr< Graph > *smartarg1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Graph_getLastDwNode",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_getLastDwNode" "', argument " "1"" of type '" "Graph *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Graph_getLastDwNode" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (unsigned int)(arg1)->getLastDwNode(arg2);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_getLastUpNode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Graph *arg1 = (Graph *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Graph > tempshared1 ;
  std::tr1::shared_ptr< Graph > *smartarg1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Graph_getLastUpNode",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_getLastUpNode" "', argument " "1"" of type '" "Graph *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Graph_getLastUpNode" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (unsigned int)(arg1)->getLastUpNode(arg2);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_getNextDwArch(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Graph *arg1 = (Graph *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Graph > tempshared1 ;
  std::tr1::shared_ptr< Graph > *smartarg1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Graph_getNextDwArch",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_getNextDwArch" "', argument " "1"" of type '" "Graph *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Graph_getNextDwArch" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (unsigned int)(arg1)->getNextDwArch(arg2);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_getPrevDwArch(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Graph *arg1 = (Graph *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Graph > tempshared1 ;
  std::tr1::shared_ptr< Graph > *smartarg1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Graph_getPrevDwArch",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_getPrevDwArch" "', argument " "1"" of type '" "Graph *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Graph_getPrevDwArch" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (unsigned int)(arg1)->getPrevDwArch(arg2);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_getNextUpArch(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Graph *arg1 = (Graph *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Graph > tempshared1 ;
  std::tr1::shared_ptr< Graph > *smartarg1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Graph_getNextUpArch",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_getNextUpArch" "', argument " "1"" of type '" "Graph *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Graph_getNextUpArch" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (unsigned int)(arg1)->getNextUpArch(arg2);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_getPrevUpArch(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Graph *arg1 = (Graph *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Graph > tempshared1 ;
  std::tr1::shared_ptr< Graph > *smartarg1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Graph_getPrevUpArch",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_getPrevUpArch" "', argument " "1"" of type '" "Graph *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Graph_getPrevUpArch" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (unsigned int)(arg1)->getPrevUpArch(arg2);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_getN0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Graph *arg1 = (Graph *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Graph > tempshared1 ;
  std::tr1::shared_ptr< Graph > *smartarg1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Graph_getN0",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_getN0" "', argument " "1"" of type '" "Graph *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Graph_getN0" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (unsigned int)(arg1)->getN0(arg2);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_getN1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Graph *arg1 = (Graph *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Graph > tempshared1 ;
  std::tr1::shared_ptr< Graph > *smartarg1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Graph_getN1",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_getN1" "', argument " "1"" of type '" "Graph *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Graph_getN1" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (unsigned int)(arg1)->getN1(arg2);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_Level(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Graph *arg1 = (Graph *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Graph > tempshared1 ;
  std::tr1::shared_ptr< Graph > *smartarg1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  unsigned char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Graph_Level",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_Level" "', argument " "1"" of type '" "Graph *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Graph_Level" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (unsigned char *) &(arg1)->Level(arg2);
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_Sign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Graph *arg1 = (Graph *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Graph > tempshared1 ;
  std::tr1::shared_ptr< Graph > *smartarg1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  unsigned char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Graph_Sign",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_Sign" "', argument " "1"" of type '" "Graph *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Graph_Sign" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (unsigned char *) &(arg1)->Sign(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_NodeData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Graph *arg1 = (Graph *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Graph > tempshared1 ;
  std::tr1::shared_ptr< Graph > *smartarg1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  unsigned int *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Graph_NodeData",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_NodeData" "', argument " "1"" of type '" "Graph *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Graph_NodeData" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (unsigned int *) &(arg1)->NodeData(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_int, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_ArchData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Graph *arg1 = (Graph *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Graph > tempshared1 ;
  std::tr1::shared_ptr< Graph > *smartarg1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  unsigned int *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Graph_ArchData",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_ArchData" "', argument " "1"" of type '" "Graph *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Graph_ArchData" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (unsigned int *) &(arg1)->ArchData(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_int, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_NodeTmp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Graph *arg1 = (Graph *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Graph > tempshared1 ;
  std::tr1::shared_ptr< Graph > *smartarg1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  unsigned int *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Graph_NodeTmp",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_NodeTmp" "', argument " "1"" of type '" "Graph *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Graph_NodeTmp" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (unsigned int *) &(arg1)->NodeTmp(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_int, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_remArch__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Graph *arg1 = (Graph *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  Graph::Direction arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Graph > tempshared1 ;
  std::tr1::shared_ptr< Graph > *smartarg1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Graph_remArch",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_remArch" "', argument " "1"" of type '" "Graph *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Graph_remArch" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Graph_remArch" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Graph_remArch" "', argument " "4"" of type '" "Graph::Direction""'");
  } 
  arg4 = static_cast< Graph::Direction >(val4);
  (arg1)->remArch(arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_remArch__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Graph *arg1 = (Graph *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Graph > tempshared1 ;
  std::tr1::shared_ptr< Graph > *smartarg1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Graph_remArch",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_remArch" "', argument " "1"" of type '" "Graph *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Graph_remArch" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Graph_remArch" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  (arg1)->remArch(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_getNCells(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Graph *arg1 = (Graph *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Graph > tempshared1 ;
  std::tr1::shared_ptr< Graph > *smartarg1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Graph_getNCells",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_getNCells" "', argument " "1"" of type '" "Graph *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Graph_getNCells" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (int)(arg1)->getNCells(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_getNextUpBrother(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Graph *arg1 = (Graph *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Graph > tempshared1 ;
  std::tr1::shared_ptr< Graph > *smartarg1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Graph_getNextUpBrother",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_getNextUpBrother" "', argument " "1"" of type '" "Graph *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Graph_getNextUpBrother" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (unsigned int)(arg1)->getNextUpBrother(arg2);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_getNextDwBrother(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Graph *arg1 = (Graph *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Graph > tempshared1 ;
  std::tr1::shared_ptr< Graph > *smartarg1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Graph_getNextDwBrother",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_getNextDwBrother" "', argument " "1"" of type '" "Graph *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Graph_getNextDwBrother" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (unsigned int)(arg1)->getNextDwBrother(arg2);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_getPrevUpBrother(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Graph *arg1 = (Graph *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Graph > tempshared1 ;
  std::tr1::shared_ptr< Graph > *smartarg1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Graph_getPrevUpBrother",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_getPrevUpBrother" "', argument " "1"" of type '" "Graph *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Graph_getPrevUpBrother" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (unsigned int)(arg1)->getPrevUpBrother(arg2);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_getPrevDwBrother(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Graph *arg1 = (Graph *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Graph > tempshared1 ;
  std::tr1::shared_ptr< Graph > *smartarg1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Graph_getPrevDwBrother",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_getPrevDwBrother" "', argument " "1"" of type '" "Graph *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Graph_getPrevDwBrother" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (unsigned int)(arg1)->getPrevDwBrother(arg2);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_goDw(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Graph *arg1 = (Graph *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Graph > tempshared1 ;
  std::tr1::shared_ptr< Graph > *smartarg1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  GraphIterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Graph_goDw",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_goDw" "', argument " "1"" of type '" "Graph *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Graph_goDw" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (arg1)->goDw(arg2);
  resultobj = SWIG_NewPointerObj((new GraphIterator(static_cast< const GraphIterator& >(result))), SWIGTYPE_p_GraphIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_goUp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Graph *arg1 = (Graph *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Graph > tempshared1 ;
  std::tr1::shared_ptr< Graph > *smartarg1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  GraphIterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Graph_goUp",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_goUp" "', argument " "1"" of type '" "Graph *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Graph_goUp" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (arg1)->goUp(arg2);
  resultobj = SWIG_NewPointerObj((new GraphIterator(static_cast< const GraphIterator& >(result))), SWIGTYPE_p_GraphIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_each(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Graph *arg1 = (Graph *) 0 ;
  unsigned char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Graph > tempshared1 ;
  std::tr1::shared_ptr< Graph > *smartarg1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  GraphListIterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Graph_each",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_each" "', argument " "1"" of type '" "Graph *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_unsigned_SS_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Graph_each" "', argument " "2"" of type '" "unsigned char""'");
  } 
  arg2 = static_cast< unsigned char >(val2);
  result = (arg1)->each(arg2);
  resultobj = SWIG_NewPointerObj((new GraphListIterator(static_cast< const GraphListIterator& >(result))), SWIGTYPE_p_GraphListIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_addNode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Graph *arg1 = (Graph *) 0 ;
  unsigned char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Graph > tempshared1 ;
  std::tr1::shared_ptr< Graph > *smartarg1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Graph_addNode",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_addNode" "', argument " "1"" of type '" "Graph *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_unsigned_SS_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Graph_addNode" "', argument " "2"" of type '" "unsigned char""'");
  } 
  arg2 = static_cast< unsigned char >(val2);
  result = (unsigned int)(arg1)->addNode(arg2);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_addVertex__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Graph *arg1 = (Graph *) 0 ;
  Vecf *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Graph > tempshared1 ;
  std::tr1::shared_ptr< Graph > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Graph_addVertex",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_addVertex" "', argument " "1"" of type '" "Graph *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vecf,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Graph_addVertex" "', argument " "2"" of type '" "Vecf const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Graph_addVertex" "', argument " "2"" of type '" "Vecf const &""'"); 
  }
  arg2 = reinterpret_cast< Vecf * >(argp2);
  result = (unsigned int)(arg1)->addVertex((Vecf const &)*arg2);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_addVertex__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Graph *arg1 = (Graph *) 0 ;
  float *arg2 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Graph > tempshared1 ;
  std::tr1::shared_ptr< Graph > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Graph_addVertex",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_addVertex" "', argument " "1"" of type '" "Graph *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Graph_addVertex" "', argument " "2"" of type '" "float const *""'"); 
  }
  arg2 = reinterpret_cast< float * >(argp2);
  result = (unsigned int)(arg1)->addVertex((float const *)arg2);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_addVertex(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Vecf, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Graph_addVertex__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_float, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Graph_addVertex__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Graph_addVertex'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    addVertex(Graph *,Vecf const &)\n"
    "    addVertex(Graph *,float const *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_addEdge(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Graph *arg1 = (Graph *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Graph > tempshared1 ;
  std::tr1::shared_ptr< Graph > *smartarg1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Graph_addEdge",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_addEdge" "', argument " "1"" of type '" "Graph *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Graph_addEdge" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Graph_addEdge" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  result = (unsigned int)(arg1)->addEdge(arg2,arg3);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_addFace2d(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Graph *arg1 = (Graph *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Graph > tempshared1 ;
  std::tr1::shared_ptr< Graph > *smartarg1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Graph_addFace2d",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_addFace2d" "', argument " "1"" of type '" "Graph *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Graph_addFace2d" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Graph_addFace2d" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg2 = ptr;
  }
  result = (unsigned int)(arg1)->addFace2d((std::vector< int,std::allocator< int > > const &)*arg2);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_addPlane(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Graph *arg1 = (Graph *) 0 ;
  Vecf *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Graph > tempshared1 ;
  std::tr1::shared_ptr< Graph > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Graph_addPlane",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_addPlane" "', argument " "1"" of type '" "Graph *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vecf,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Graph_addPlane" "', argument " "2"" of type '" "Vecf const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Graph_addPlane" "', argument " "2"" of type '" "Vecf const &""'"); 
  }
  arg2 = reinterpret_cast< Vecf * >(argp2);
  result = (unsigned int)(arg1)->addPlane((Vecf const &)*arg2);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_addArch__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Graph *arg1 = (Graph *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  Graph::Direction arg4 ;
  unsigned int arg5 ;
  unsigned int arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Graph > tempshared1 ;
  std::tr1::shared_ptr< Graph > *smartarg1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  unsigned int val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:Graph_addArch",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_addArch" "', argument " "1"" of type '" "Graph *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Graph_addArch" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Graph_addArch" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Graph_addArch" "', argument " "4"" of type '" "Graph::Direction""'");
  } 
  arg4 = static_cast< Graph::Direction >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Graph_addArch" "', argument " "5"" of type '" "unsigned int""'");
  } 
  arg5 = static_cast< unsigned int >(val5);
  ecode6 = SWIG_AsVal_unsigned_SS_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Graph_addArch" "', argument " "6"" of type '" "unsigned int""'");
  } 
  arg6 = static_cast< unsigned int >(val6);
  result = (unsigned int)(arg1)->addArch(arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_addArch__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Graph *arg1 = (Graph *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  Graph::Direction arg4 ;
  unsigned int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Graph > tempshared1 ;
  std::tr1::shared_ptr< Graph > *smartarg1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Graph_addArch",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_addArch" "', argument " "1"" of type '" "Graph *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Graph_addArch" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Graph_addArch" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Graph_addArch" "', argument " "4"" of type '" "Graph::Direction""'");
  } 
  arg4 = static_cast< Graph::Direction >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Graph_addArch" "', argument " "5"" of type '" "unsigned int""'");
  } 
  arg5 = static_cast< unsigned int >(val5);
  result = (unsigned int)(arg1)->addArch(arg2,arg3,arg4,arg5);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_addArch__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Graph *arg1 = (Graph *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  Graph::Direction arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Graph > tempshared1 ;
  std::tr1::shared_ptr< Graph > *smartarg1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Graph_addArch",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_addArch" "', argument " "1"" of type '" "Graph *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Graph_addArch" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Graph_addArch" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Graph_addArch" "', argument " "4"" of type '" "Graph::Direction""'");
  } 
  arg4 = static_cast< Graph::Direction >(val4);
  result = (unsigned int)(arg1)->addArch(arg2,arg3,arg4);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_addArch__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Graph *arg1 = (Graph *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Graph > tempshared1 ;
  std::tr1::shared_ptr< Graph > *smartarg1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Graph_addArch",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_addArch" "', argument " "1"" of type '" "Graph *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Graph_addArch" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Graph_addArch" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  result = (unsigned int)(arg1)->addArch(arg2,arg3);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_addArch(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[7];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 6); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Graph_addArch__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Graph_addArch__SWIG_2(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_Graph_addArch__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_unsigned_SS_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_Graph_addArch__SWIG_0(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Graph_addArch'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    addArch(Graph *,unsigned int,unsigned int,Graph::Direction,unsigned int,unsigned int)\n"
    "    addArch(Graph *,unsigned int,unsigned int,Graph::Direction,unsigned int)\n"
    "    addArch(Graph *,unsigned int,unsigned int,Graph::Direction)\n"
    "    addArch(Graph *,unsigned int,unsigned int)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_addArchDirection__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Graph *arg1 = (Graph *) 0 ;
  unsigned int arg2 ;
  Graph::Direction arg3 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Graph > tempshared1 ;
  std::tr1::shared_ptr< Graph > *smartarg1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Graph_addArchDirection",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_addArchDirection" "', argument " "1"" of type '" "Graph *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Graph_addArchDirection" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Graph_addArchDirection" "', argument " "3"" of type '" "Graph::Direction""'");
  } 
  arg3 = static_cast< Graph::Direction >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Graph_addArchDirection" "', argument " "4"" of type '" "unsigned int""'");
  } 
  arg4 = static_cast< unsigned int >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Graph_addArchDirection" "', argument " "5"" of type '" "unsigned int""'");
  } 
  arg5 = static_cast< unsigned int >(val5);
  (arg1)->addArchDirection(arg2,arg3,arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_addArchDirection__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Graph *arg1 = (Graph *) 0 ;
  unsigned int arg2 ;
  Graph::Direction arg3 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Graph > tempshared1 ;
  std::tr1::shared_ptr< Graph > *smartarg1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Graph_addArchDirection",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_addArchDirection" "', argument " "1"" of type '" "Graph *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Graph_addArchDirection" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Graph_addArchDirection" "', argument " "3"" of type '" "Graph::Direction""'");
  } 
  arg3 = static_cast< Graph::Direction >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Graph_addArchDirection" "', argument " "4"" of type '" "unsigned int""'");
  } 
  arg4 = static_cast< unsigned int >(val4);
  (arg1)->addArchDirection(arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_addArchDirection__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Graph *arg1 = (Graph *) 0 ;
  unsigned int arg2 ;
  Graph::Direction arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Graph > tempshared1 ;
  std::tr1::shared_ptr< Graph > *smartarg1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Graph_addArchDirection",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_addArchDirection" "', argument " "1"" of type '" "Graph *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Graph_addArchDirection" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Graph_addArchDirection" "', argument " "3"" of type '" "Graph::Direction""'");
  } 
  arg3 = static_cast< Graph::Direction >(val3);
  (arg1)->addArchDirection(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_addArchDirection(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 5); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Graph_addArchDirection__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Graph_addArchDirection__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_Graph_addArchDirection__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Graph_addArchDirection'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    addArchDirection(Graph *,unsigned int,Graph::Direction,unsigned int,unsigned int)\n"
    "    addArchDirection(Graph *,unsigned int,Graph::Direction,unsigned int)\n"
    "    addArchDirection(Graph *,unsigned int,Graph::Direction)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_findArch__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Graph *arg1 = (Graph *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  Graph::Direction arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Graph > tempshared1 ;
  std::tr1::shared_ptr< Graph > *smartarg1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Graph_findArch",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_findArch" "', argument " "1"" of type '" "Graph *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Graph_findArch" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Graph_findArch" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Graph_findArch" "', argument " "4"" of type '" "Graph::Direction""'");
  } 
  arg4 = static_cast< Graph::Direction >(val4);
  result = (unsigned int)(arg1)->findArch(arg2,arg3,arg4);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_findArch__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Graph *arg1 = (Graph *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Graph > tempshared1 ;
  std::tr1::shared_ptr< Graph > *smartarg1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Graph_findArch",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_findArch" "', argument " "1"" of type '" "Graph *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Graph_findArch" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Graph_findArch" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  result = (unsigned int)(arg1)->findArch(arg2,arg3);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_findArch(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Graph_findArch__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Graph_findArch__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Graph_findArch'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    findArch(Graph *,unsigned int,unsigned int,Graph::Direction)\n"
    "    findArch(Graph *,unsigned int,unsigned int)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_findVertex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Graph *arg1 = (Graph *) 0 ;
  Vecf *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Graph > tempshared1 ;
  std::tr1::shared_ptr< Graph > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Graph_findVertex",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_findVertex" "', argument " "1"" of type '" "Graph *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vecf,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Graph_findVertex" "', argument " "2"" of type '" "Vecf const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Graph_findVertex" "', argument " "2"" of type '" "Vecf const &""'"); 
  }
  arg2 = reinterpret_cast< Vecf * >(argp2);
  result = (unsigned int)(arg1)->findVertex((Vecf const &)*arg2);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_findFirstCommonNode__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Graph *arg1 = (Graph *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  Graph::Direction arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Graph > tempshared1 ;
  std::tr1::shared_ptr< Graph > *smartarg1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Graph_findFirstCommonNode",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_findFirstCommonNode" "', argument " "1"" of type '" "Graph *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Graph_findFirstCommonNode" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Graph_findFirstCommonNode" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Graph_findFirstCommonNode" "', argument " "4"" of type '" "Graph::Direction""'");
  } 
  arg4 = static_cast< Graph::Direction >(val4);
  result = (unsigned int)(arg1)->findFirstCommonNode(arg2,arg3,arg4);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_findFirstCommonNode__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Graph *arg1 = (Graph *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Graph > tempshared1 ;
  std::tr1::shared_ptr< Graph > *smartarg1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Graph_findFirstCommonNode",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_findFirstCommonNode" "', argument " "1"" of type '" "Graph *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Graph_findFirstCommonNode" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Graph_findFirstCommonNode" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  result = (unsigned int)(arg1)->findFirstCommonNode(arg2,arg3);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_findFirstCommonNode(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Graph_findFirstCommonNode__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Graph_findFirstCommonNode__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Graph_findFirstCommonNode'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    findFirstCommonNode(Graph *,unsigned int,unsigned int,Graph::Direction)\n"
    "    findFirstCommonNode(Graph *,unsigned int,unsigned int)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_remArch__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Graph *arg1 = (Graph *) 0 ;
  unsigned int arg2 ;
  Graph::Direction arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Graph > tempshared1 ;
  std::tr1::shared_ptr< Graph > *smartarg1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Graph_remArch",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_remArch" "', argument " "1"" of type '" "Graph *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Graph_remArch" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Graph_remArch" "', argument " "3"" of type '" "Graph::Direction""'");
  } 
  arg3 = static_cast< Graph::Direction >(val3);
  (arg1)->remArch(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_remArch__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Graph *arg1 = (Graph *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Graph > tempshared1 ;
  std::tr1::shared_ptr< Graph > *smartarg1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Graph_remArch",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_remArch" "', argument " "1"" of type '" "Graph *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Graph_remArch" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  (arg1)->remArch(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_remArch(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Graph_remArch__SWIG_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Graph_remArch__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Graph_remArch__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Graph_remArch__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Graph_remArch'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    remArch(Graph *,unsigned int,unsigned int,Graph::Direction)\n"
    "    remArch(Graph *,unsigned int,unsigned int)\n"
    "    remArch(Graph *,unsigned int,Graph::Direction)\n"
    "    remArch(Graph *,unsigned int)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_swapDwOrder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Graph *arg1 = (Graph *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Graph > tempshared1 ;
  std::tr1::shared_ptr< Graph > *smartarg1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Graph_swapDwOrder",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_swapDwOrder" "', argument " "1"" of type '" "Graph *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Graph_swapDwOrder" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Graph_swapDwOrder" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  (arg1)->swapDwOrder(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_changeLevel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Graph *arg1 = (Graph *) 0 ;
  unsigned int arg2 ;
  unsigned char arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Graph > tempshared1 ;
  std::tr1::shared_ptr< Graph > *smartarg1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned char val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Graph_changeLevel",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_changeLevel" "', argument " "1"" of type '" "Graph *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Graph_changeLevel" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_char(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Graph_changeLevel" "', argument " "3"" of type '" "unsigned char""'");
  } 
  arg3 = static_cast< unsigned char >(val3);
  (arg1)->changeLevel(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_getMaxDimCells(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Graph *arg1 = (Graph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Graph > tempshared1 ;
  std::tr1::shared_ptr< Graph > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Graph_getMaxDimCells",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_getMaxDimCells" "', argument " "1"" of type '" "Graph *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (int)(arg1)->getMaxDimCells();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_join(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Graph *arg1 = (Graph *) 0 ;
  unsigned int arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Graph > tempshared1 ;
  std::tr1::shared_ptr< Graph > *smartarg1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::tr1::shared_ptr< Graph > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Graph_join",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_join" "', argument " "1"" of type '" "Graph *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Graph_join" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Graph_join" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  result = (arg1)->join(arg2,arg3);
  {
    std::tr1::shared_ptr<  Graph > *smartresult = result ? new std::tr1::shared_ptr<  Graph >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_orderFace2d(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Graph *arg1 = (Graph *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Graph > tempshared1 ;
  std::tr1::shared_ptr< Graph > *smartarg1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Graph_orderFace2d",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_orderFace2d" "', argument " "1"" of type '" "Graph *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Graph_orderFace2d" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (bool)(arg1)->orderFace2d(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_Print__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Graph *arg1 = (Graph *) 0 ;
  unsigned int arg2 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Graph > tempshared1 ;
  std::tr1::shared_ptr< Graph > *smartarg1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Graph_Print",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_Print" "', argument " "1"" of type '" "Graph *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Graph_Print" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Graph_Print" "', argument " "3"" of type '" "char *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  (arg1)->Print(arg2,arg3);
  resultobj = SWIG_Py_Void();
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_Print__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Graph *arg1 = (Graph *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Graph > tempshared1 ;
  std::tr1::shared_ptr< Graph > *smartarg1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Graph_Print",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_Print" "', argument " "1"" of type '" "Graph *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Graph_Print" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  (arg1)->Print(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_Print__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Graph *arg1 = (Graph *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Graph > tempshared1 ;
  std::tr1::shared_ptr< Graph > *smartarg1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Graph_Print",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_Print" "', argument " "1"" of type '" "Graph *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Graph_Print" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  (arg1)->Print(arg2);
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_Print__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Graph *arg1 = (Graph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Graph > tempshared1 ;
  std::tr1::shared_ptr< Graph > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Graph_Print",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_Print" "', argument " "1"" of type '" "Graph *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (arg1)->Print();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_Print(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Graph_Print__SWIG_3(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Graph_Print__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Graph_Print__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Graph_Print__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Graph_Print'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Print(Graph *,unsigned int,char *)\n"
    "    Print(Graph *,unsigned int)\n"
    "    Print(Graph *,char *)\n"
    "    Print(Graph *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_PrintStatistics(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Graph *arg1 = (Graph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Graph > tempshared1 ;
  std::tr1::shared_ptr< Graph > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Graph_PrintStatistics",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_PrintStatistics" "', argument " "1"" of type '" "Graph *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (arg1)->PrintStatistics();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_findCells__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Graph *arg1 = (Graph *) 0 ;
  int arg2 ;
  unsigned int arg3 ;
  GraphNavigator *arg4 = 0 ;
  bool arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Graph > tempshared1 ;
  std::tr1::shared_ptr< Graph > *smartarg1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Graph_findCells",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_findCells" "', argument " "1"" of type '" "Graph *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Graph_findCells" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Graph_findCells" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_GraphNavigator,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Graph_findCells" "', argument " "4"" of type '" "GraphNavigator &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Graph_findCells" "', argument " "4"" of type '" "GraphNavigator &""'"); 
  }
  arg4 = reinterpret_cast< GraphNavigator * >(argp4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Graph_findCells" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  result = (int)(arg1)->findCells(arg2,arg3,*arg4,arg5);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_findCells__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Graph *arg1 = (Graph *) 0 ;
  int arg2 ;
  unsigned int arg3 ;
  GraphNavigator *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Graph > tempshared1 ;
  std::tr1::shared_ptr< Graph > *smartarg1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Graph_findCells",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_findCells" "', argument " "1"" of type '" "Graph *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Graph_findCells" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Graph_findCells" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_GraphNavigator,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Graph_findCells" "', argument " "4"" of type '" "GraphNavigator &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Graph_findCells" "', argument " "4"" of type '" "GraphNavigator &""'"); 
  }
  arg4 = reinterpret_cast< GraphNavigator * >(argp4);
  result = (int)(arg1)->findCells(arg2,arg3,*arg4);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_findCells(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 5); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_GraphNavigator, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_Graph_findCells__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_GraphNavigator, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_Graph_findCells__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Graph_findCells'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    findCells(Graph *,int,unsigned int,GraphNavigator &,bool)\n"
    "    findCells(Graph *,int,unsigned int,GraphNavigator &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_remNode__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Graph *arg1 = (Graph *) 0 ;
  unsigned int arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Graph > tempshared1 ;
  std::tr1::shared_ptr< Graph > *smartarg1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Graph_remNode",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_remNode" "', argument " "1"" of type '" "Graph *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Graph_remNode" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Graph_remNode" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  (arg1)->remNode(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_remNode__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Graph *arg1 = (Graph *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Graph > tempshared1 ;
  std::tr1::shared_ptr< Graph > *smartarg1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Graph_remNode",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_remNode" "', argument " "1"" of type '" "Graph *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Graph_remNode" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  (arg1)->remNode(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_remNode(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Graph_remNode__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Graph_remNode__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Graph_remNode'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    remNode(Graph *,unsigned int,bool)\n"
    "    remNode(Graph *,unsigned int)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_getGeometry__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Graph *arg1 = (Graph *) 0 ;
  unsigned int arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Graph > tempshared1 ;
  std::tr1::shared_ptr< Graph > *smartarg1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  float *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Graph_getGeometry",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_getGeometry" "', argument " "1"" of type '" "Graph *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Graph_getGeometry" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Graph_getGeometry" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (float *)(arg1)->getGeometry(arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_float, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_getGeometry__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Graph *arg1 = (Graph *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Graph > tempshared1 ;
  std::tr1::shared_ptr< Graph > *smartarg1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Graph_getGeometry",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_getGeometry" "', argument " "1"" of type '" "Graph *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Graph_getGeometry" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (float *)(arg1)->getGeometry(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_float, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_getGeometry(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Graph_getGeometry__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Graph_getGeometry__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Graph_getGeometry'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    getGeometry(Graph *,unsigned int,bool)\n"
    "    getGeometry(Graph *,unsigned int)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_getVecf(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Graph *arg1 = (Graph *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Graph > tempshared1 ;
  std::tr1::shared_ptr< Graph > *smartarg1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Vecf result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Graph_getVecf",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_getVecf" "', argument " "1"" of type '" "Graph *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Graph_getVecf" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (arg1)->getVecf(arg2);
  resultobj = SWIG_NewPointerObj((new Vecf(static_cast< const Vecf& >(result))), SWIGTYPE_p_Vecf, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_setVecf(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Graph *arg1 = (Graph *) 0 ;
  unsigned int arg2 ;
  Vecf arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Graph > tempshared1 ;
  std::tr1::shared_ptr< Graph > *smartarg1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Graph_setVecf",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_setVecf" "', argument " "1"" of type '" "Graph *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Graph_setVecf" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Vecf,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Graph_setVecf" "', argument " "3"" of type '" "Vecf""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Graph_setVecf" "', argument " "3"" of type '" "Vecf""'");
    } else {
      Vecf * temp = reinterpret_cast< Vecf * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  (arg1)->setVecf(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_releaseGeom(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Graph *arg1 = (Graph *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Graph > tempshared1 ;
  std::tr1::shared_ptr< Graph > *smartarg1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Graph_releaseGeom",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_releaseGeom" "', argument " "1"" of type '" "Graph *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Graph_releaseGeom" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  (arg1)->releaseGeom(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_cuboid__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  float arg2 ;
  float arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::tr1::shared_ptr< Graph > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Graph_cuboid",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Graph_cuboid" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Graph_cuboid" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Graph_cuboid" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  result = Graph::cuboid(arg1,arg2,arg3);
  {
    std::tr1::shared_ptr<  Graph > *smartresult = result ? new std::tr1::shared_ptr<  Graph >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_cuboid__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  float arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::tr1::shared_ptr< Graph > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Graph_cuboid",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Graph_cuboid" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Graph_cuboid" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  result = Graph::cuboid(arg1,arg2);
  {
    std::tr1::shared_ptr<  Graph > *smartresult = result ? new std::tr1::shared_ptr<  Graph >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_cuboid__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::tr1::shared_ptr< Graph > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Graph_cuboid",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Graph_cuboid" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = Graph::cuboid(arg1);
  {
    std::tr1::shared_ptr<  Graph > *smartresult = result ? new std::tr1::shared_ptr<  Graph >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_cuboid__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  Boxf arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::tr1::shared_ptr< Graph > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Graph_cuboid",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Graph_cuboid" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Boxf,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Graph_cuboid" "', argument " "2"" of type '" "Boxf""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Graph_cuboid" "', argument " "2"" of type '" "Boxf""'");
    } else {
      Boxf * temp = reinterpret_cast< Boxf * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = Graph::cuboid(arg1,arg2);
  {
    std::tr1::shared_ptr<  Graph > *smartresult = result ? new std::tr1::shared_ptr<  Graph >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_cuboid(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Graph_cuboid__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Boxf, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Graph_cuboid__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Graph_cuboid__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Graph_cuboid__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Graph_cuboid'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    cuboid(int,float,float)\n"
    "    cuboid(int,float)\n"
    "    cuboid(int)\n"
    "    Graph::cuboid(int,Boxf)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_simplex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::tr1::shared_ptr< Graph > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Graph_simplex",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Graph_simplex" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = Graph::simplex(arg1);
  {
    std::tr1::shared_ptr<  Graph > *smartresult = result ? new std::tr1::shared_ptr<  Graph >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_getBoundingBox__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Graph *arg1 = (Graph *) 0 ;
  unsigned int arg2 ;
  std::tr1::shared_ptr< Matf > arg3 ;
  std::tr1::shared_ptr< Matf > arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Graph > tempshared1 ;
  std::tr1::shared_ptr< Graph > *smartarg1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Boxf result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Graph_getBoundingBox",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_getBoundingBox" "', argument " "1"" of type '" "Graph *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Graph_getBoundingBox" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Graph_getBoundingBox" "', argument " "3"" of type '" "std::tr1::shared_ptr< Matf >""'"); 
    }
    if (argp3) arg3 = *(reinterpret_cast< std::tr1::shared_ptr< Matf > * >(argp3));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< std::tr1::shared_ptr< Matf > * >(argp3);
  }
  {
    int newmem = 0;
    res4 = SWIG_ConvertPtrAndOwn(obj3, &argp4, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t,  0 , &newmem);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Graph_getBoundingBox" "', argument " "4"" of type '" "std::tr1::shared_ptr< Matf >""'"); 
    }
    if (argp4) arg4 = *(reinterpret_cast< std::tr1::shared_ptr< Matf > * >(argp4));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< std::tr1::shared_ptr< Matf > * >(argp4);
  }
  result = (arg1)->getBoundingBox(arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj((new Boxf(static_cast< const Boxf& >(result))), SWIGTYPE_p_Boxf, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_getBoundingBox__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Graph *arg1 = (Graph *) 0 ;
  unsigned int arg2 ;
  std::tr1::shared_ptr< Matf > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Graph > tempshared1 ;
  std::tr1::shared_ptr< Graph > *smartarg1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Boxf result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Graph_getBoundingBox",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_getBoundingBox" "', argument " "1"" of type '" "Graph *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Graph_getBoundingBox" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Graph_getBoundingBox" "', argument " "3"" of type '" "std::tr1::shared_ptr< Matf >""'"); 
    }
    if (argp3) arg3 = *(reinterpret_cast< std::tr1::shared_ptr< Matf > * >(argp3));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< std::tr1::shared_ptr< Matf > * >(argp3);
  }
  result = (arg1)->getBoundingBox(arg2,arg3);
  resultobj = SWIG_NewPointerObj((new Boxf(static_cast< const Boxf& >(result))), SWIGTYPE_p_Boxf, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_getBoundingBox__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Graph *arg1 = (Graph *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Graph > tempshared1 ;
  std::tr1::shared_ptr< Graph > *smartarg1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Boxf result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Graph_getBoundingBox",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_getBoundingBox" "', argument " "1"" of type '" "Graph *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Graph_getBoundingBox" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (arg1)->getBoundingBox(arg2);
  resultobj = SWIG_NewPointerObj((new Boxf(static_cast< const Boxf& >(result))), SWIGTYPE_p_Boxf, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_getBoundingBox__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Graph *arg1 = (Graph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Graph > tempshared1 ;
  std::tr1::shared_ptr< Graph > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  Boxf result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Graph_getBoundingBox",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_getBoundingBox" "', argument " "1"" of type '" "Graph *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (arg1)->getBoundingBox();
  resultobj = SWIG_NewPointerObj((new Boxf(static_cast< const Boxf& >(result))), SWIGTYPE_p_Boxf, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_getBoundingBox(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Graph_getBoundingBox__SWIG_3(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Graph_getBoundingBox__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Graph_getBoundingBox__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_Graph_getBoundingBox__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Graph_getBoundingBox'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    getBoundingBox(Graph *,unsigned int,std::tr1::shared_ptr< Matf >,std::tr1::shared_ptr< Matf >)\n"
    "    getBoundingBox(Graph *,unsigned int,std::tr1::shared_ptr< Matf >)\n"
    "    getBoundingBox(Graph *,unsigned int)\n"
    "    getBoundingBox(Graph *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_getBoundingBall__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Graph *arg1 = (Graph *) 0 ;
  unsigned int arg2 ;
  std::tr1::shared_ptr< Matf > arg3 ;
  std::tr1::shared_ptr< Matf > arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Graph > tempshared1 ;
  std::tr1::shared_ptr< Graph > *smartarg1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Ballf result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Graph_getBoundingBall",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_getBoundingBall" "', argument " "1"" of type '" "Graph *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Graph_getBoundingBall" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Graph_getBoundingBall" "', argument " "3"" of type '" "std::tr1::shared_ptr< Matf >""'"); 
    }
    if (argp3) arg3 = *(reinterpret_cast< std::tr1::shared_ptr< Matf > * >(argp3));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< std::tr1::shared_ptr< Matf > * >(argp3);
  }
  {
    int newmem = 0;
    res4 = SWIG_ConvertPtrAndOwn(obj3, &argp4, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t,  0 , &newmem);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Graph_getBoundingBall" "', argument " "4"" of type '" "std::tr1::shared_ptr< Matf >""'"); 
    }
    if (argp4) arg4 = *(reinterpret_cast< std::tr1::shared_ptr< Matf > * >(argp4));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< std::tr1::shared_ptr< Matf > * >(argp4);
  }
  result = (arg1)->getBoundingBall(arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj((new Ballf(static_cast< const Ballf& >(result))), SWIGTYPE_p_Ballf, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_getBoundingBall__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Graph *arg1 = (Graph *) 0 ;
  unsigned int arg2 ;
  std::tr1::shared_ptr< Matf > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Graph > tempshared1 ;
  std::tr1::shared_ptr< Graph > *smartarg1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Ballf result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Graph_getBoundingBall",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_getBoundingBall" "', argument " "1"" of type '" "Graph *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Graph_getBoundingBall" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Graph_getBoundingBall" "', argument " "3"" of type '" "std::tr1::shared_ptr< Matf >""'"); 
    }
    if (argp3) arg3 = *(reinterpret_cast< std::tr1::shared_ptr< Matf > * >(argp3));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< std::tr1::shared_ptr< Matf > * >(argp3);
  }
  result = (arg1)->getBoundingBall(arg2,arg3);
  resultobj = SWIG_NewPointerObj((new Ballf(static_cast< const Ballf& >(result))), SWIGTYPE_p_Ballf, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_getBoundingBall__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Graph *arg1 = (Graph *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Graph > tempshared1 ;
  std::tr1::shared_ptr< Graph > *smartarg1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Ballf result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Graph_getBoundingBall",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_getBoundingBall" "', argument " "1"" of type '" "Graph *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Graph_getBoundingBall" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (arg1)->getBoundingBall(arg2);
  resultobj = SWIG_NewPointerObj((new Ballf(static_cast< const Ballf& >(result))), SWIGTYPE_p_Ballf, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_getBoundingBall(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Graph_getBoundingBall__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Graph_getBoundingBall__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_Graph_getBoundingBall__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Graph_getBoundingBall'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    getBoundingBall(Graph *,unsigned int,std::tr1::shared_ptr< Matf >,std::tr1::shared_ptr< Matf >)\n"
    "    getBoundingBall(Graph *,unsigned int,std::tr1::shared_ptr< Matf >)\n"
    "    getBoundingBall(Graph *,unsigned int)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_getFittingPlane__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Graph *arg1 = (Graph *) 0 ;
  unsigned int arg2 ;
  std::tr1::shared_ptr< Matf > arg3 ;
  std::tr1::shared_ptr< Matf > arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Graph > tempshared1 ;
  std::tr1::shared_ptr< Graph > *smartarg1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Planef result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Graph_getFittingPlane",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_getFittingPlane" "', argument " "1"" of type '" "Graph *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Graph_getFittingPlane" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Graph_getFittingPlane" "', argument " "3"" of type '" "std::tr1::shared_ptr< Matf >""'"); 
    }
    if (argp3) arg3 = *(reinterpret_cast< std::tr1::shared_ptr< Matf > * >(argp3));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< std::tr1::shared_ptr< Matf > * >(argp3);
  }
  {
    int newmem = 0;
    res4 = SWIG_ConvertPtrAndOwn(obj3, &argp4, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t,  0 , &newmem);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Graph_getFittingPlane" "', argument " "4"" of type '" "std::tr1::shared_ptr< Matf >""'"); 
    }
    if (argp4) arg4 = *(reinterpret_cast< std::tr1::shared_ptr< Matf > * >(argp4));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< std::tr1::shared_ptr< Matf > * >(argp4);
  }
  result = (arg1)->getFittingPlane(arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj((new Planef(static_cast< const Planef& >(result))), SWIGTYPE_p_Planef, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_getFittingPlane__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Graph *arg1 = (Graph *) 0 ;
  unsigned int arg2 ;
  std::tr1::shared_ptr< Matf > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Graph > tempshared1 ;
  std::tr1::shared_ptr< Graph > *smartarg1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Planef result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Graph_getFittingPlane",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_getFittingPlane" "', argument " "1"" of type '" "Graph *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Graph_getFittingPlane" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Graph_getFittingPlane" "', argument " "3"" of type '" "std::tr1::shared_ptr< Matf >""'"); 
    }
    if (argp3) arg3 = *(reinterpret_cast< std::tr1::shared_ptr< Matf > * >(argp3));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< std::tr1::shared_ptr< Matf > * >(argp3);
  }
  result = (arg1)->getFittingPlane(arg2,arg3);
  resultobj = SWIG_NewPointerObj((new Planef(static_cast< const Planef& >(result))), SWIGTYPE_p_Planef, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_getFittingPlane__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Graph *arg1 = (Graph *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Graph > tempshared1 ;
  std::tr1::shared_ptr< Graph > *smartarg1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Planef result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Graph_getFittingPlane",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_getFittingPlane" "', argument " "1"" of type '" "Graph *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Graph_getFittingPlane" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (arg1)->getFittingPlane(arg2);
  resultobj = SWIG_NewPointerObj((new Planef(static_cast< const Planef& >(result))), SWIGTYPE_p_Planef, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_getFittingPlane(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Graph_getFittingPlane__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Graph_getFittingPlane__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_Graph_getFittingPlane__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Graph_getFittingPlane'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    getFittingPlane(Graph *,unsigned int,std::tr1::shared_ptr< Matf >,std::tr1::shared_ptr< Matf >)\n"
    "    getFittingPlane(Graph *,unsigned int,std::tr1::shared_ptr< Matf >)\n"
    "    getFittingPlane(Graph *,unsigned int)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_toUnitBox(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Graph *arg1 = (Graph *) 0 ;
  Matf *arg2 = 0 ;
  Matf *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Graph > tempshared1 ;
  std::tr1::shared_ptr< Graph > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::tr1::shared_ptr< Matf > tempshared2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  std::tr1::shared_ptr< Matf > tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Graph_toUnitBox",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_toUnitBox" "', argument " "1"" of type '" "Graph *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Graph_toUnitBox" "', argument " "2"" of type '" "Matf &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Graph_toUnitBox" "', argument " "2"" of type '" "Matf &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< std::tr1::shared_ptr<  Matf > * >(argp2);
      delete reinterpret_cast< std::tr1::shared_ptr<  Matf > * >(argp2);
      arg2 = const_cast< Matf * >(tempshared2.get());
    } else {
      arg2 = const_cast< Matf * >(reinterpret_cast< std::tr1::shared_ptr<  Matf > * >(argp2)->get());
    }
  }
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Graph_toUnitBox" "', argument " "3"" of type '" "Matf &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Graph_toUnitBox" "', argument " "3"" of type '" "Matf &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared3 = *reinterpret_cast< std::tr1::shared_ptr<  Matf > * >(argp3);
      delete reinterpret_cast< std::tr1::shared_ptr<  Matf > * >(argp3);
      arg3 = const_cast< Matf * >(tempshared3.get());
    } else {
      arg3 = const_cast< Matf * >(reinterpret_cast< std::tr1::shared_ptr<  Matf > * >(argp3)->get());
    }
  }
  (arg1)->toUnitBox(*arg2,*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_fixBoundaryFaceOrientation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Graph *arg1 = (Graph *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Graph > tempshared1 ;
  std::tr1::shared_ptr< Graph > *smartarg1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Graph_fixBoundaryFaceOrientation",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_fixBoundaryFaceOrientation" "', argument " "1"" of type '" "Graph *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Graph_fixBoundaryFaceOrientation" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  (arg1)->fixBoundaryFaceOrientation(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_translate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Graph *arg1 = (Graph *) 0 ;
  Vecf arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Graph > tempshared1 ;
  std::tr1::shared_ptr< Graph > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Graph_translate",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_translate" "', argument " "1"" of type '" "Graph *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vecf,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Graph_translate" "', argument " "2"" of type '" "Vecf""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Graph_translate" "', argument " "2"" of type '" "Vecf""'");
    } else {
      Vecf * temp = reinterpret_cast< Vecf * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  (arg1)->translate(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_scale(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Graph *arg1 = (Graph *) 0 ;
  Vecf arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Graph > tempshared1 ;
  std::tr1::shared_ptr< Graph > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Graph_scale",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_scale" "', argument " "1"" of type '" "Graph *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vecf,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Graph_scale" "', argument " "2"" of type '" "Vecf""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Graph_scale" "', argument " "2"" of type '" "Vecf""'");
    } else {
      Vecf * temp = reinterpret_cast< Vecf * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  (arg1)->scale(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_rotate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Graph *arg1 = (Graph *) 0 ;
  int arg2 ;
  int arg3 ;
  float arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Graph > tempshared1 ;
  std::tr1::shared_ptr< Graph > *smartarg1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Graph_rotate",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_rotate" "', argument " "1"" of type '" "Graph *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Graph_rotate" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Graph_rotate" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Graph_rotate" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  (arg1)->rotate(arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_transform(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Graph *arg1 = (Graph *) 0 ;
  std::tr1::shared_ptr< Matf > arg2 ;
  std::tr1::shared_ptr< Matf > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Graph > tempshared1 ;
  std::tr1::shared_ptr< Graph > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Graph_transform",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_transform" "', argument " "1"" of type '" "Graph *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Graph_transform" "', argument " "2"" of type '" "std::tr1::shared_ptr< Matf >""'"); 
    }
    if (argp2) arg2 = *(reinterpret_cast< std::tr1::shared_ptr< Matf > * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< std::tr1::shared_ptr< Matf > * >(argp2);
  }
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Graph_transform" "', argument " "3"" of type '" "std::tr1::shared_ptr< Matf >""'"); 
    }
    if (argp3) arg3 = *(reinterpret_cast< std::tr1::shared_ptr< Matf > * >(argp3));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< std::tr1::shared_ptr< Matf > * >(argp3);
  }
  (arg1)->transform(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_permutate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Graph *arg1 = (Graph *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Graph > tempshared1 ;
  std::tr1::shared_ptr< Graph > *smartarg1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Graph_permutate",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_permutate" "', argument " "1"" of type '" "Graph *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Graph_permutate" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Graph_permutate" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->permutate((std::vector< int,std::allocator< int > > const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_triangulate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Graph *arg1 = (Graph *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Graph > tempshared1 ;
  std::tr1::shared_ptr< Graph > *smartarg1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Graph_triangulate",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_triangulate" "', argument " "1"" of type '" "Graph *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Graph_triangulate" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  (arg1)->triangulate(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_embed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Graph *arg1 = (Graph *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Graph > tempshared1 ;
  std::tr1::shared_ptr< Graph > *smartarg1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Graph_embed",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_embed" "', argument " "1"" of type '" "Graph *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Graph_embed" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->embed(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_extrude(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Graph *arg1 = (Graph *) 0 ;
  float arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Graph > tempshared1 ;
  std::tr1::shared_ptr< Graph > *smartarg1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::tr1::shared_ptr< Graph > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Graph_extrude",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_extrude" "', argument " "1"" of type '" "Graph *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Graph_extrude" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Graph_extrude" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  result = (arg1)->extrude(arg2,arg3);
  {
    std::tr1::shared_ptr<  Graph > *smartresult = result ? new std::tr1::shared_ptr<  Graph >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_mkpol__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Matf *arg1 = 0 ;
  Matf *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  float *arg5 = (float *) 0 ;
  float arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Matf > tempshared1 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::tr1::shared_ptr< Matf > tempshared2 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  std::tr1::shared_ptr< Graph > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:Graph_mkpol",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_mkpol" "', argument " "1"" of type '" "Matf &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Graph_mkpol" "', argument " "1"" of type '" "Matf &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Matf > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Matf > * >(argp1);
      arg1 = const_cast< Matf * >(tempshared1.get());
    } else {
      arg1 = const_cast< Matf * >(reinterpret_cast< std::tr1::shared_ptr<  Matf > * >(argp1)->get());
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Graph_mkpol" "', argument " "2"" of type '" "Matf &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Graph_mkpol" "', argument " "2"" of type '" "Matf &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< std::tr1::shared_ptr<  Matf > * >(argp2);
      delete reinterpret_cast< std::tr1::shared_ptr<  Matf > * >(argp2);
      arg2 = const_cast< Matf * >(tempshared2.get());
    } else {
      arg2 = const_cast< Matf * >(reinterpret_cast< std::tr1::shared_ptr<  Matf > * >(argp2)->get());
    }
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Graph_mkpol" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Graph_mkpol" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Graph_mkpol" "', argument " "5"" of type '" "float const *""'"); 
  }
  arg5 = reinterpret_cast< float * >(argp5);
  ecode6 = SWIG_AsVal_float(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Graph_mkpol" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = static_cast< float >(val6);
  result = Graph::mkpol(*arg1,*arg2,arg3,arg4,(float const *)arg5,arg6);
  {
    std::tr1::shared_ptr<  Graph > *smartresult = result ? new std::tr1::shared_ptr<  Graph >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_qhull(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  std::vector< float,std::allocator< float > > *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  float arg4 ;
  bool arg5 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  float val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Graph_qhull",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Graph_qhull" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    std::vector<float,std::allocator< float > > *ptr = (std::vector<float,std::allocator< float > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Graph_qhull" "', argument " "2"" of type '" "std::vector< float,std::allocator< float > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Graph_qhull" "', argument " "2"" of type '" "std::vector< float,std::allocator< float > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Graph_qhull" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Graph_qhull" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Graph_qhull" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Graph_qhull" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  result = Graph::qhull(arg1,(std::vector< float,std::allocator< float > > const &)*arg2,(std::vector< int,std::allocator< int > > const &)*arg3,arg4,arg5);
  resultobj = swig::from(static_cast< std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_mkpol__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Matf *arg1 = 0 ;
  Matf *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  std::vector< float,std::allocator< float > > arg5 ;
  float arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Matf > tempshared1 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::tr1::shared_ptr< Matf > tempshared2 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  std::tr1::shared_ptr< Graph > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:Graph_mkpol",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_mkpol" "', argument " "1"" of type '" "Matf &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Graph_mkpol" "', argument " "1"" of type '" "Matf &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Matf > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Matf > * >(argp1);
      arg1 = const_cast< Matf * >(tempshared1.get());
    } else {
      arg1 = const_cast< Matf * >(reinterpret_cast< std::tr1::shared_ptr<  Matf > * >(argp1)->get());
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Graph_mkpol" "', argument " "2"" of type '" "Matf &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Graph_mkpol" "', argument " "2"" of type '" "Matf &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< std::tr1::shared_ptr<  Matf > * >(argp2);
      delete reinterpret_cast< std::tr1::shared_ptr<  Matf > * >(argp2);
      arg2 = const_cast< Matf * >(tempshared2.get());
    } else {
      arg2 = const_cast< Matf * >(reinterpret_cast< std::tr1::shared_ptr<  Matf > * >(argp2)->get());
    }
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Graph_mkpol" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Graph_mkpol" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    std::vector<float,std::allocator< float > > *ptr = (std::vector<float,std::allocator< float > > *)0;
    int res = swig::asptr(obj4, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Graph_mkpol" "', argument " "5"" of type '" "std::vector< float,std::allocator< float > >""'"); 
    }
    arg5 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode6 = SWIG_AsVal_float(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Graph_mkpol" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = static_cast< float >(val6);
  result = Graph::mkpol(*arg1,*arg2,arg3,arg4,arg5,arg6);
  {
    std::tr1::shared_ptr<  Graph > *smartresult = result ? new std::tr1::shared_ptr<  Graph >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_mkpol(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[7];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 6); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 6) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_float, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              {
                int res = SWIG_AsVal_float(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_Graph_mkpol__SWIG_0(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = swig::asptr(argv[4], (std::vector<float,std::allocator< float > >**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              {
                int res = SWIG_AsVal_float(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_Graph_mkpol__SWIG_1(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Graph_mkpol'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mkpol(Matf &,Matf &,int,int,float const *,float)\n"
    "    Graph::mkpol(Matf &,Matf &,int,int,std::vector< float,std::allocator< float > >,float)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_power(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Matf *arg1 = 0 ;
  Matf *arg2 = 0 ;
  std::tr1::shared_ptr< Graph > arg3 ;
  std::tr1::shared_ptr< Matf > arg4 ;
  std::tr1::shared_ptr< Matf > arg5 ;
  std::tr1::shared_ptr< Graph > arg6 ;
  std::tr1::shared_ptr< Matf > arg7 ;
  std::tr1::shared_ptr< Matf > arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Matf > tempshared1 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::tr1::shared_ptr< Matf > tempshared2 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  void *argp7 ;
  int res7 = 0 ;
  void *argp8 ;
  int res8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  std::tr1::shared_ptr< Graph > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:Graph_power",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_power" "', argument " "1"" of type '" "Matf &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Graph_power" "', argument " "1"" of type '" "Matf &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Matf > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Matf > * >(argp1);
      arg1 = const_cast< Matf * >(tempshared1.get());
    } else {
      arg1 = const_cast< Matf * >(reinterpret_cast< std::tr1::shared_ptr<  Matf > * >(argp1)->get());
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Graph_power" "', argument " "2"" of type '" "Matf &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Graph_power" "', argument " "2"" of type '" "Matf &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< std::tr1::shared_ptr<  Matf > * >(argp2);
      delete reinterpret_cast< std::tr1::shared_ptr<  Matf > * >(argp2);
      arg2 = const_cast< Matf * >(tempshared2.get());
    } else {
      arg2 = const_cast< Matf * >(reinterpret_cast< std::tr1::shared_ptr<  Matf > * >(argp2)->get());
    }
  }
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Graph_power" "', argument " "3"" of type '" "std::tr1::shared_ptr< Graph > const""'"); 
    }
    if (argp3) arg3 = *(reinterpret_cast< std::tr1::shared_ptr< Graph > * >(argp3));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< std::tr1::shared_ptr< Graph > * >(argp3);
  }
  {
    int newmem = 0;
    res4 = SWIG_ConvertPtrAndOwn(obj3, &argp4, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t,  0 , &newmem);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Graph_power" "', argument " "4"" of type '" "std::tr1::shared_ptr< Matf >""'"); 
    }
    if (argp4) arg4 = *(reinterpret_cast< std::tr1::shared_ptr< Matf > * >(argp4));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< std::tr1::shared_ptr< Matf > * >(argp4);
  }
  {
    int newmem = 0;
    res5 = SWIG_ConvertPtrAndOwn(obj4, &argp5, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t,  0 , &newmem);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Graph_power" "', argument " "5"" of type '" "std::tr1::shared_ptr< Matf >""'"); 
    }
    if (argp5) arg5 = *(reinterpret_cast< std::tr1::shared_ptr< Matf > * >(argp5));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< std::tr1::shared_ptr< Matf > * >(argp5);
  }
  {
    int newmem = 0;
    res6 = SWIG_ConvertPtrAndOwn(obj5, &argp6, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t,  0 , &newmem);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "Graph_power" "', argument " "6"" of type '" "std::tr1::shared_ptr< Graph > const""'"); 
    }
    if (argp6) arg6 = *(reinterpret_cast< std::tr1::shared_ptr< Graph > * >(argp6));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< std::tr1::shared_ptr< Graph > * >(argp6);
  }
  {
    int newmem = 0;
    res7 = SWIG_ConvertPtrAndOwn(obj6, &argp7, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t,  0 , &newmem);
    if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "Graph_power" "', argument " "7"" of type '" "std::tr1::shared_ptr< Matf >""'"); 
    }
    if (argp7) arg7 = *(reinterpret_cast< std::tr1::shared_ptr< Matf > * >(argp7));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< std::tr1::shared_ptr< Matf > * >(argp7);
  }
  {
    int newmem = 0;
    res8 = SWIG_ConvertPtrAndOwn(obj7, &argp8, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t,  0 , &newmem);
    if (!SWIG_IsOK(res8)) {
      SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "Graph_power" "', argument " "8"" of type '" "std::tr1::shared_ptr< Matf >""'"); 
    }
    if (argp8) arg8 = *(reinterpret_cast< std::tr1::shared_ptr< Matf > * >(argp8));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< std::tr1::shared_ptr< Matf > * >(argp8);
  }
  result = Graph::power(*arg1,*arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  {
    std::tr1::shared_ptr<  Graph > *smartresult = result ? new std::tr1::shared_ptr<  Graph >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_split__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Graph *arg1 = (Graph *) 0 ;
  GraphNavigator *arg2 = 0 ;
  unsigned int arg3 ;
  Planef *arg4 = 0 ;
  float arg5 ;
  int arg6 ;
  unsigned int *arg7 = 0 ;
  unsigned int *arg8 = 0 ;
  unsigned int *arg9 = 0 ;
  unsigned int arg10 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Graph > tempshared1 ;
  std::tr1::shared_ptr< Graph > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  void *argp9 = 0 ;
  int res9 = 0 ;
  unsigned int val10 ;
  int ecode10 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  Graph::SplitResult result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOO:Graph_split",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_split" "', argument " "1"" of type '" "Graph *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GraphNavigator,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Graph_split" "', argument " "2"" of type '" "GraphNavigator &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Graph_split" "', argument " "2"" of type '" "GraphNavigator &""'"); 
  }
  arg2 = reinterpret_cast< GraphNavigator * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Graph_split" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_Planef,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Graph_split" "', argument " "4"" of type '" "Planef const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Graph_split" "', argument " "4"" of type '" "Planef const &""'"); 
  }
  arg4 = reinterpret_cast< Planef * >(argp4);
  ecode5 = SWIG_AsVal_float(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Graph_split" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = static_cast< float >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Graph_split" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  res7 = SWIG_ConvertPtr(obj6, &argp7, SWIGTYPE_p_unsigned_int,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "Graph_split" "', argument " "7"" of type '" "unsigned int &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Graph_split" "', argument " "7"" of type '" "unsigned int &""'"); 
  }
  arg7 = reinterpret_cast< unsigned int * >(argp7);
  res8 = SWIG_ConvertPtr(obj7, &argp8, SWIGTYPE_p_unsigned_int,  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "Graph_split" "', argument " "8"" of type '" "unsigned int &""'"); 
  }
  if (!argp8) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Graph_split" "', argument " "8"" of type '" "unsigned int &""'"); 
  }
  arg8 = reinterpret_cast< unsigned int * >(argp8);
  res9 = SWIG_ConvertPtr(obj8, &argp9, SWIGTYPE_p_unsigned_int,  0 );
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "Graph_split" "', argument " "9"" of type '" "unsigned int &""'"); 
  }
  if (!argp9) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Graph_split" "', argument " "9"" of type '" "unsigned int &""'"); 
  }
  arg9 = reinterpret_cast< unsigned int * >(argp9);
  ecode10 = SWIG_AsVal_unsigned_SS_int(obj9, &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "Graph_split" "', argument " "10"" of type '" "unsigned int""'");
  } 
  arg10 = static_cast< unsigned int >(val10);
  result = (Graph::SplitResult)(arg1)->split(*arg2,arg3,(Planef const &)*arg4,arg5,arg6,*arg7,*arg8,*arg9,arg10);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_split__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Graph *arg1 = (Graph *) 0 ;
  GraphNavigator *arg2 = 0 ;
  int arg3 ;
  Planef *arg4 = 0 ;
  float arg5 ;
  int arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Graph > tempshared1 ;
  std::tr1::shared_ptr< Graph > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  std::vector< int,std::allocator< int > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:Graph_split",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_split" "', argument " "1"" of type '" "Graph *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GraphNavigator,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Graph_split" "', argument " "2"" of type '" "GraphNavigator &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Graph_split" "', argument " "2"" of type '" "GraphNavigator &""'"); 
  }
  arg2 = reinterpret_cast< GraphNavigator * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Graph_split" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_Planef,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Graph_split" "', argument " "4"" of type '" "Planef const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Graph_split" "', argument " "4"" of type '" "Planef const &""'"); 
  }
  arg4 = reinterpret_cast< Planef * >(argp4);
  ecode5 = SWIG_AsVal_float(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Graph_split" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = static_cast< float >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Graph_split" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  result = (arg1)->split(*arg2,arg3,(Planef const &)*arg4,arg5,arg6);
  resultobj = swig::from(static_cast< std::vector<int,std::allocator< int > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_split(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[11];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 10); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 6) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GraphNavigator, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_Planef, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_float(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_Graph_split__SWIG_1(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 10) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GraphNavigator, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_Planef, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_float(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_unsigned_int, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[7], &vptr, SWIGTYPE_p_unsigned_int, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    void *vptr = 0;
                    int res = SWIG_ConvertPtr(argv[8], &vptr, SWIGTYPE_p_unsigned_int, 0);
                    _v = SWIG_CheckState(res);
                    if (_v) {
                      {
                        int res = SWIG_AsVal_unsigned_SS_int(argv[9], NULL);
                        _v = SWIG_CheckState(res);
                      }
                      if (_v) {
                        return _wrap_Graph_split__SWIG_0(self, args);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Graph_split'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    split(Graph *,GraphNavigator &,unsigned int const,Planef const &,float,int const,unsigned int &,unsigned int &,unsigned int &,unsigned int)\n"
    "    split(Graph *,GraphNavigator &,int,Planef const &,float,int const)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_check__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Graph *arg1 = (Graph *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Graph > tempshared1 ;
  std::tr1::shared_ptr< Graph > *smartarg1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Graph_check",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_check" "', argument " "1"" of type '" "Graph *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Graph_check" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  (arg1)->check(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_check__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Graph *arg1 = (Graph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Graph > tempshared1 ;
  std::tr1::shared_ptr< Graph > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Graph_check",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_check" "', argument " "1"" of type '" "Graph *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (arg1)->check();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_check(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Graph_check__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Graph_check__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Graph_check'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    check(Graph *,unsigned int)\n"
    "    check(Graph *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_contains(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Graph *arg1 = (Graph *) 0 ;
  unsigned int arg2 ;
  Vecf *arg3 = 0 ;
  float arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Graph > tempshared1 ;
  std::tr1::shared_ptr< Graph > *smartarg1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Graph_contains",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_contains" "', argument " "1"" of type '" "Graph *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Graph_contains" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Vecf,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Graph_contains" "', argument " "3"" of type '" "Vecf const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Graph_contains" "', argument " "3"" of type '" "Vecf const &""'"); 
  }
  arg3 = reinterpret_cast< Vecf * >(argp3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Graph_contains" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  result = (bool)(arg1)->contains(arg2,(Vecf const &)*arg3,arg4);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_open_svg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  bool arg2 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::tr1::shared_ptr< Graph > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Graph_open_svg",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Graph_open_svg" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Graph_open_svg" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = Graph::open_svg(arg1,arg2);
  {
    std::tr1::shared_ptr<  Graph > *smartresult = result ? new std::tr1::shared_ptr<  Graph >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_SelfTest(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":Graph_SelfTest")) SWIG_fail;
  result = (int)Graph::SelfTest();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_getBatch(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Graph *arg1 = (Graph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Graph > tempshared1 ;
  std::tr1::shared_ptr< Graph > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  std::tr1::shared_ptr< Batch > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Graph_getBatch",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_getBatch" "', argument " "1"" of type '" "Graph *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Graph > * >(argp1);
      arg1 = const_cast< Graph * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (arg1)->getBatch();
  {
    std::tr1::shared_ptr<  Batch > *smartresult = result ? new std::tr1::shared_ptr<  Batch >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Batch_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Graph_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_Engine(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Engine *arg1 = (Engine *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Engine",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Engine, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Engine" "', argument " "1"" of type '" "Engine *""'"); 
  }
  arg1 = reinterpret_cast< Engine * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Engine_Destroy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Engine *arg1 = (Engine *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Engine_Destroy",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Engine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Engine_Destroy" "', argument " "1"" of type '" "Engine *""'"); 
  }
  arg1 = reinterpret_cast< Engine * >(argp1);
  (arg1)->Destroy();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Engine_GetDC(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Engine *arg1 = (Engine *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int64 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Engine_GetDC",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Engine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Engine_GetDC" "', argument " "1"" of type '" "Engine *""'"); 
  }
  arg1 = reinterpret_cast< Engine * >(argp1);
  result = (int64)(arg1)->GetDC();
  resultobj = SWIG_From_long_SS_long(static_cast< long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Engine_Bind(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Engine *arg1 = (Engine *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Engine_Bind",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Engine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Engine_Bind" "', argument " "1"" of type '" "Engine *""'"); 
  }
  arg1 = reinterpret_cast< Engine * >(argp1);
  result = (bool)(arg1)->Bind();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Engine_Unbind(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Engine *arg1 = (Engine *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Engine_Unbind",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Engine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Engine_Unbind" "', argument " "1"" of type '" "Engine *""'"); 
  }
  arg1 = reinterpret_cast< Engine * >(argp1);
  result = (bool)(arg1)->Unbind();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Engine_PrintStatistics(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":Engine_PrintStatistics")) SWIG_fail;
  Engine::PrintStatistics();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Engine_Shutdown(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":Engine_Shutdown")) SWIG_fail;
  Engine::Shutdown();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Engine_ClearScreen__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Engine *arg1 = (Engine *) 0 ;
  bool arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Engine_ClearScreen",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Engine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Engine_ClearScreen" "', argument " "1"" of type '" "Engine *""'"); 
  }
  arg1 = reinterpret_cast< Engine * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Engine_ClearScreen" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Engine_ClearScreen" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  (arg1)->ClearScreen(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Engine_ClearScreen__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Engine *arg1 = (Engine *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Engine_ClearScreen",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Engine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Engine_ClearScreen" "', argument " "1"" of type '" "Engine *""'"); 
  }
  arg1 = reinterpret_cast< Engine * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Engine_ClearScreen" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->ClearScreen(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Engine_ClearScreen__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Engine *arg1 = (Engine *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Engine_ClearScreen",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Engine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Engine_ClearScreen" "', argument " "1"" of type '" "Engine *""'"); 
  }
  arg1 = reinterpret_cast< Engine * >(argp1);
  (arg1)->ClearScreen();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Engine_ClearScreen(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Engine, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Engine_ClearScreen__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Engine, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Engine_ClearScreen__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Engine, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Engine_ClearScreen__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Engine_ClearScreen'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ClearScreen(Engine *,bool,bool)\n"
    "    ClearScreen(Engine *,bool)\n"
    "    ClearScreen(Engine *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Engine_SetViewport(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Engine *arg1 = (Engine *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Engine_SetViewport",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Engine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Engine_SetViewport" "', argument " "1"" of type '" "Engine *""'"); 
  }
  arg1 = reinterpret_cast< Engine * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Engine_SetViewport" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Engine_SetViewport" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Engine_SetViewport" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Engine_SetViewport" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  (arg1)->SetViewport(arg2,arg3,arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Engine_SetProjectionMatrix(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Engine *arg1 = (Engine *) 0 ;
  Mat4f arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Engine_SetProjectionMatrix",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Engine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Engine_SetProjectionMatrix" "', argument " "1"" of type '" "Engine *""'"); 
  }
  arg1 = reinterpret_cast< Engine * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Mat4f,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Engine_SetProjectionMatrix" "', argument " "2"" of type '" "Mat4f""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Engine_SetProjectionMatrix" "', argument " "2"" of type '" "Mat4f""'");
    } else {
      Mat4f * temp = reinterpret_cast< Mat4f * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  (arg1)->SetProjectionMatrix(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Engine_SetModelviewMatrix(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Engine *arg1 = (Engine *) 0 ;
  Mat4f arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Engine_SetModelviewMatrix",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Engine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Engine_SetModelviewMatrix" "', argument " "1"" of type '" "Engine *""'"); 
  }
  arg1 = reinterpret_cast< Engine * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Mat4f,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Engine_SetModelviewMatrix" "', argument " "2"" of type '" "Mat4f""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Engine_SetModelviewMatrix" "', argument " "2"" of type '" "Mat4f""'");
    } else {
      Mat4f * temp = reinterpret_cast< Mat4f * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  (arg1)->SetModelviewMatrix(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Engine_SetDefaultLight(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Engine *arg1 = (Engine *) 0 ;
  Vec3f arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Engine_SetDefaultLight",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Engine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Engine_SetDefaultLight" "', argument " "1"" of type '" "Engine *""'"); 
  }
  arg1 = reinterpret_cast< Engine * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vec3f,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Engine_SetDefaultLight" "', argument " "2"" of type '" "Vec3f""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Engine_SetDefaultLight" "', argument " "2"" of type '" "Vec3f""'");
    } else {
      Vec3f * temp = reinterpret_cast< Vec3f * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  (arg1)->SetDefaultLight(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Engine_FlushScreen(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Engine *arg1 = (Engine *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Engine_FlushScreen",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Engine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Engine_FlushScreen" "', argument " "1"" of type '" "Engine *""'"); 
  }
  arg1 = reinterpret_cast< Engine * >(argp1);
  (arg1)->FlushScreen();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Engine_PushModelviewMatrix__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Engine *arg1 = (Engine *) 0 ;
  Mat4f arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Engine_PushModelviewMatrix",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Engine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Engine_PushModelviewMatrix" "', argument " "1"" of type '" "Engine *""'"); 
  }
  arg1 = reinterpret_cast< Engine * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Mat4f,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Engine_PushModelviewMatrix" "', argument " "2"" of type '" "Mat4f""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Engine_PushModelviewMatrix" "', argument " "2"" of type '" "Mat4f""'");
    } else {
      Mat4f * temp = reinterpret_cast< Mat4f * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Engine_PushModelviewMatrix" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  (arg1)->PushModelviewMatrix(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Engine_PushModelviewMatrix__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Engine *arg1 = (Engine *) 0 ;
  Mat4f arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Engine_PushModelviewMatrix",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Engine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Engine_PushModelviewMatrix" "', argument " "1"" of type '" "Engine *""'"); 
  }
  arg1 = reinterpret_cast< Engine * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Mat4f,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Engine_PushModelviewMatrix" "', argument " "2"" of type '" "Mat4f""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Engine_PushModelviewMatrix" "', argument " "2"" of type '" "Mat4f""'");
    } else {
      Mat4f * temp = reinterpret_cast< Mat4f * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  (arg1)->PushModelviewMatrix(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Engine_PushModelviewMatrix(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Engine, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Mat4f, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Engine_PushModelviewMatrix__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Engine, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Mat4f, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Engine_PushModelviewMatrix__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Engine_PushModelviewMatrix'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    PushModelviewMatrix(Engine *,Mat4f,bool)\n"
    "    PushModelviewMatrix(Engine *,Mat4f)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Engine_PopModelviewMatrix(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Engine *arg1 = (Engine *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Engine_PopModelviewMatrix",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Engine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Engine_PopModelviewMatrix" "', argument " "1"" of type '" "Engine *""'"); 
  }
  arg1 = reinterpret_cast< Engine * >(argp1);
  (arg1)->PopModelviewMatrix();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Engine_PushProjectionMatrix__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Engine *arg1 = (Engine *) 0 ;
  Mat4f arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Engine_PushProjectionMatrix",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Engine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Engine_PushProjectionMatrix" "', argument " "1"" of type '" "Engine *""'"); 
  }
  arg1 = reinterpret_cast< Engine * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Mat4f,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Engine_PushProjectionMatrix" "', argument " "2"" of type '" "Mat4f""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Engine_PushProjectionMatrix" "', argument " "2"" of type '" "Mat4f""'");
    } else {
      Mat4f * temp = reinterpret_cast< Mat4f * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Engine_PushProjectionMatrix" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  (arg1)->PushProjectionMatrix(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Engine_PushProjectionMatrix__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Engine *arg1 = (Engine *) 0 ;
  Mat4f arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Engine_PushProjectionMatrix",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Engine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Engine_PushProjectionMatrix" "', argument " "1"" of type '" "Engine *""'"); 
  }
  arg1 = reinterpret_cast< Engine * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Mat4f,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Engine_PushProjectionMatrix" "', argument " "2"" of type '" "Mat4f""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Engine_PushProjectionMatrix" "', argument " "2"" of type '" "Mat4f""'");
    } else {
      Mat4f * temp = reinterpret_cast< Mat4f * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  (arg1)->PushProjectionMatrix(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Engine_PushProjectionMatrix(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Engine, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Mat4f, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Engine_PushProjectionMatrix__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Engine, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Mat4f, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Engine_PushProjectionMatrix__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Engine_PushProjectionMatrix'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    PushProjectionMatrix(Engine *,Mat4f,bool)\n"
    "    PushProjectionMatrix(Engine *,Mat4f)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Engine_PopProjectionMatrix(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Engine *arg1 = (Engine *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Engine_PopProjectionMatrix",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Engine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Engine_PopProjectionMatrix" "', argument " "1"" of type '" "Engine *""'"); 
  }
  arg1 = reinterpret_cast< Engine * >(argp1);
  (arg1)->PopProjectionMatrix();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Engine_SetDepthTest(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Engine *arg1 = (Engine *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Engine_SetDepthTest",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Engine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Engine_SetDepthTest" "', argument " "1"" of type '" "Engine *""'"); 
  }
  arg1 = reinterpret_cast< Engine * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Engine_SetDepthTest" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->SetDepthTest(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Engine_SetDepthWrite(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Engine *arg1 = (Engine *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Engine_SetDepthWrite",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Engine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Engine_SetDepthWrite" "', argument " "1"" of type '" "Engine *""'"); 
  }
  arg1 = reinterpret_cast< Engine * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Engine_SetDepthWrite" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->SetDepthWrite(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Engine_SetCulling(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Engine *arg1 = (Engine *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Engine_SetCulling",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Engine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Engine_SetCulling" "', argument " "1"" of type '" "Engine *""'"); 
  }
  arg1 = reinterpret_cast< Engine * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Engine_SetCulling" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->SetCulling(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Engine_SetPolygonMode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Engine *arg1 = (Engine *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Engine_SetPolygonMode",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Engine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Engine_SetPolygonMode" "', argument " "1"" of type '" "Engine *""'"); 
  }
  arg1 = reinterpret_cast< Engine * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Engine_SetPolygonMode" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->SetPolygonMode(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Engine_SetPointSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Engine *arg1 = (Engine *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Engine_SetPointSize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Engine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Engine_SetPointSize" "', argument " "1"" of type '" "Engine *""'"); 
  }
  arg1 = reinterpret_cast< Engine * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Engine_SetPointSize" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  (arg1)->SetPointSize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Engine_SetLineWidth(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Engine *arg1 = (Engine *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Engine_SetLineWidth",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Engine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Engine_SetLineWidth" "', argument " "1"" of type '" "Engine *""'"); 
  }
  arg1 = reinterpret_cast< Engine * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Engine_SetLineWidth" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  (arg1)->SetLineWidth(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Engine_SetPolygonOffset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Engine *arg1 = (Engine *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Engine_SetPolygonOffset",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Engine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Engine_SetPolygonOffset" "', argument " "1"" of type '" "Engine *""'"); 
  }
  arg1 = reinterpret_cast< Engine * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Engine_SetPolygonOffset" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  (arg1)->SetPolygonOffset(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Engine_Render__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Engine *arg1 = (Engine *) 0 ;
  std::string arg2 ;
  Vec3f arg3 ;
  Color4f arg4 ;
  bool arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Engine_Render",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Engine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Engine_Render" "', argument " "1"" of type '" "Engine *""'"); 
  }
  arg1 = reinterpret_cast< Engine * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine_Render" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Vec3f,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Engine_Render" "', argument " "3"" of type '" "Vec3f""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Engine_Render" "', argument " "3"" of type '" "Vec3f""'");
    } else {
      Vec3f * temp = reinterpret_cast< Vec3f * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_Color4f,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Engine_Render" "', argument " "4"" of type '" "Color4f""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Engine_Render" "', argument " "4"" of type '" "Color4f""'");
    } else {
      Color4f * temp = reinterpret_cast< Color4f * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Engine_Render" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  (arg1)->Render(arg2,arg3,arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Engine_Render__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Engine *arg1 = (Engine *) 0 ;
  std::tr1::shared_ptr< Batch > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Engine_Render",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Engine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Engine_Render" "', argument " "1"" of type '" "Engine *""'"); 
  }
  arg1 = reinterpret_cast< Engine * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_std__tr1__shared_ptrT_Batch_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Engine_Render" "', argument " "2"" of type '" "std::tr1::shared_ptr< Batch >""'"); 
    }
    if (argp2) arg2 = *(reinterpret_cast< std::tr1::shared_ptr< Batch > * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< std::tr1::shared_ptr< Batch > * >(argp2);
  }
  (arg1)->Render(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Engine_Render(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 5); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Engine, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Batch_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Engine_Render__SWIG_1(self, args);
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Engine, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_Vec3f, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_Color4f, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_Engine_Render__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Engine_Render'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Render(Engine *,std::string,Vec3f,Color4f,bool)\n"
    "    Render(Engine *,std::tr1::shared_ptr< Batch >)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Engine_getCurrentContext(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int64 result;
  
  if (!PyArg_ParseTuple(args,(char *)":Engine_getCurrentContext")) SWIG_fail;
  result = (int64)Engine::getCurrentContext();
  resultobj = SWIG_From_long_SS_long(static_cast< long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Engine(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Engine *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Engine")) SWIG_fail;
  result = (Engine *)new Engine();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Engine, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Engine_DC_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Engine *arg1 = (Engine *) 0 ;
  int64 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Engine_DC_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Engine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Engine_DC_set" "', argument " "1"" of type '" "Engine *""'"); 
  }
  arg1 = reinterpret_cast< Engine * >(argp1);
  ecode2 = SWIG_AsVal_long_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Engine_DC_set" "', argument " "2"" of type '" "int64""'");
  } 
  arg2 = static_cast< int64 >(val2);
  if (arg1) (arg1)->DC = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Engine_DC_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Engine *arg1 = (Engine *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int64 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Engine_DC_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Engine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Engine_DC_get" "', argument " "1"" of type '" "Engine *""'"); 
  }
  arg1 = reinterpret_cast< Engine * >(argp1);
  result = (int64) ((arg1)->DC);
  resultobj = SWIG_From_long_SS_long(static_cast< long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Engine_RC_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Engine *arg1 = (Engine *) 0 ;
  int64 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Engine_RC_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Engine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Engine_RC_set" "', argument " "1"" of type '" "Engine *""'"); 
  }
  arg1 = reinterpret_cast< Engine * >(argp1);
  ecode2 = SWIG_AsVal_long_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Engine_RC_set" "', argument " "2"" of type '" "int64""'");
  } 
  arg2 = static_cast< int64 >(val2);
  if (arg1) (arg1)->RC = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Engine_RC_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Engine *arg1 = (Engine *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int64 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Engine_RC_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Engine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Engine_RC_get" "', argument " "1"" of type '" "Engine *""'"); 
  }
  arg1 = reinterpret_cast< Engine * >(argp1);
  result = (int64) ((arg1)->RC);
  resultobj = SWIG_From_long_SS_long(static_cast< long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Engine_WC_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Engine *arg1 = (Engine *) 0 ;
  int64 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Engine_WC_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Engine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Engine_WC_set" "', argument " "1"" of type '" "Engine *""'"); 
  }
  arg1 = reinterpret_cast< Engine * >(argp1);
  ecode2 = SWIG_AsVal_long_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Engine_WC_set" "', argument " "2"" of type '" "int64""'");
  } 
  arg2 = static_cast< int64 >(val2);
  if (arg1) (arg1)->WC = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Engine_WC_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Engine *arg1 = (Engine *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int64 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Engine_WC_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Engine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Engine_WC_get" "', argument " "1"" of type '" "Engine *""'"); 
  }
  arg1 = reinterpret_cast< Engine * >(argp1);
  result = (int64) ((arg1)->WC);
  resultobj = SWIG_From_long_SS_long(static_cast< long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_Engine_wcs_set(PyObject *_val) {
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(_val, &argp, SWIGTYPE_p_std__mapT_long_long_long_long_std__lessT_long_long_t_std__allocatorT_std__pairT_long_long_const_long_long_t_t_t,  0  | 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""Engine::wcs""' of type '""std::map< int64,int64,std::less< int64 >,std::allocator< std::pair< int64 const,int64 > > >""'");
    }
    if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""Engine::wcs""' of type '""std::map< int64,int64,std::less< int64 >,std::allocator< std::pair< int64 const,int64 > > >""'");
    } else {
      std::map< int64,int64,std::less< int64 >,std::allocator< std::pair< int64 const,int64 > > > * temp;
      temp  = reinterpret_cast< std::map< int64,int64,std::less< int64 >,std::allocator< std::pair< int64 const,int64 > > > * >(argp);
      Engine::wcs = *temp;
      if (SWIG_IsNewObj(res)) delete temp;
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_Engine_wcs_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&Engine::wcs), SWIGTYPE_p_std__mapT_long_long_long_long_std__lessT_long_long_t_std__allocatorT_std__pairT_long_long_const_long_long_t_t_t,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_Engine_wcs_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_Engine_wcs_get();
}


SWIGINTERN PyObject *_wrap_Engine_wcs_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *value;
  int res;
  
  if (!PyArg_ParseTuple(args,(char *)"O:set",&value)) return NULL;
  res = Swig_var_Engine_wcs_set(value);
  return !res ? SWIG_Py_Void() : NULL;
}


SWIGINTERN PyObject *Engine_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Engine, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_EngineResource_type_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EngineResource *arg1 = (EngineResource *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< EngineResource > tempshared1 ;
  std::tr1::shared_ptr< EngineResource > *smartarg1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EngineResource_type_set",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_EngineResource_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EngineResource_type_set" "', argument " "1"" of type '" "EngineResource *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  EngineResource > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  EngineResource > * >(argp1);
      arg1 = const_cast< EngineResource * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  EngineResource > * >(argp1);
      arg1 = const_cast< EngineResource * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EngineResource_type_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->type = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EngineResource_type_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EngineResource *arg1 = (EngineResource *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< EngineResource > tempshared1 ;
  std::tr1::shared_ptr< EngineResource > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EngineResource_type_get",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_EngineResource_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EngineResource_type_get" "', argument " "1"" of type '" "EngineResource *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  EngineResource > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  EngineResource > * >(argp1);
      arg1 = const_cast< EngineResource * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  EngineResource > * >(argp1);
      arg1 = const_cast< EngineResource * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (int) ((arg1)->type);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EngineResource_id_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EngineResource *arg1 = (EngineResource *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< EngineResource > tempshared1 ;
  std::tr1::shared_ptr< EngineResource > *smartarg1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EngineResource_id_set",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_EngineResource_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EngineResource_id_set" "', argument " "1"" of type '" "EngineResource *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  EngineResource > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  EngineResource > * >(argp1);
      arg1 = const_cast< EngineResource * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  EngineResource > * >(argp1);
      arg1 = const_cast< EngineResource * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EngineResource_id_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  if (arg1) (arg1)->id = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EngineResource_id_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EngineResource *arg1 = (EngineResource *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< EngineResource > tempshared1 ;
  std::tr1::shared_ptr< EngineResource > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EngineResource_id_get",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_EngineResource_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EngineResource_id_get" "', argument " "1"" of type '" "EngineResource *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  EngineResource > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  EngineResource > * >(argp1);
      arg1 = const_cast< EngineResource * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  EngineResource > * >(argp1);
      arg1 = const_cast< EngineResource * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (unsigned int) ((arg1)->id);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EngineResource_size_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EngineResource *arg1 = (EngineResource *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< EngineResource > tempshared1 ;
  std::tr1::shared_ptr< EngineResource > *smartarg1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EngineResource_size_set",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_EngineResource_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EngineResource_size_set" "', argument " "1"" of type '" "EngineResource *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  EngineResource > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  EngineResource > * >(argp1);
      arg1 = const_cast< EngineResource * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  EngineResource > * >(argp1);
      arg1 = const_cast< EngineResource * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EngineResource_size_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->size = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EngineResource_size_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EngineResource *arg1 = (EngineResource *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< EngineResource > tempshared1 ;
  std::tr1::shared_ptr< EngineResource > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EngineResource_size_get",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_EngineResource_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EngineResource_size_get" "', argument " "1"" of type '" "EngineResource *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  EngineResource > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  EngineResource > * >(argp1);
      arg1 = const_cast< EngineResource * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  EngineResource > * >(argp1);
      arg1 = const_cast< EngineResource * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (int) ((arg1)->size);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_EngineResource(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  unsigned int arg2 ;
  int arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  EngineResource *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_EngineResource",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_EngineResource" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_EngineResource" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_EngineResource" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (EngineResource *)new EngineResource(arg1,arg2,arg3);
  {
    std::tr1::shared_ptr<  EngineResource > *smartresult = result ? new std::tr1::shared_ptr<  EngineResource >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_EngineResource_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_EngineResource(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EngineResource *arg1 = (EngineResource *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< EngineResource > tempshared1 ;
  std::tr1::shared_ptr< EngineResource > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_EngineResource",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_EngineResource_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_EngineResource" "', argument " "1"" of type '" "EngineResource *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  EngineResource > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  EngineResource > * >(argp1);
      arg1 = const_cast< EngineResource * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  EngineResource > * >(argp1);
      arg1 = const_cast< EngineResource * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (void)arg1; delete smartarg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *EngineResource_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__tr1__shared_ptrT_EngineResource_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_EngineTessellator_current_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EngineTessellator *arg1 = (EngineTessellator *) 0 ;
  EngineTessellator::polygon_t *arg2 = (EngineTessellator::polygon_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EngineTessellator_current_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EngineTessellator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EngineTessellator_current_set" "', argument " "1"" of type '" "EngineTessellator *""'"); 
  }
  arg1 = reinterpret_cast< EngineTessellator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t_std__allocatorT_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EngineTessellator_current_set" "', argument " "2"" of type '" "EngineTessellator::polygon_t *""'"); 
  }
  arg2 = reinterpret_cast< EngineTessellator::polygon_t * >(argp2);
  if (arg1) (arg1)->current = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EngineTessellator_current_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EngineTessellator *arg1 = (EngineTessellator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  EngineTessellator::polygon_t *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EngineTessellator_current_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EngineTessellator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EngineTessellator_current_get" "', argument " "1"" of type '" "EngineTessellator *""'"); 
  }
  arg1 = reinterpret_cast< EngineTessellator * >(argp1);
  result = (EngineTessellator::polygon_t *)& ((arg1)->current);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t_std__allocatorT_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EngineTessellator_polygons_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EngineTessellator *arg1 = (EngineTessellator *) 0 ;
  EngineTessellator::polygon_set_t *arg2 = (EngineTessellator::polygon_set_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EngineTessellator_polygons_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EngineTessellator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EngineTessellator_polygons_set" "', argument " "1"" of type '" "EngineTessellator *""'"); 
  }
  arg1 = reinterpret_cast< EngineTessellator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t_std__allocatorT_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t_std__allocatorT_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EngineTessellator_polygons_set" "', argument " "2"" of type '" "EngineTessellator::polygon_set_t *""'"); 
  }
  arg2 = reinterpret_cast< EngineTessellator::polygon_set_t * >(argp2);
  if (arg1) (arg1)->polygons = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EngineTessellator_polygons_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EngineTessellator *arg1 = (EngineTessellator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  EngineTessellator::polygon_set_t *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EngineTessellator_polygons_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EngineTessellator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EngineTessellator_polygons_get" "', argument " "1"" of type '" "EngineTessellator *""'"); 
  }
  arg1 = reinterpret_cast< EngineTessellator * >(argp1);
  result = (EngineTessellator::polygon_set_t *)& ((arg1)->polygons);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t_std__allocatorT_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t_std__allocatorT_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t_t_t_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EngineTessellator_AddPolygon(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EngineTessellator *arg1 = (EngineTessellator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EngineTessellator_AddPolygon",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EngineTessellator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EngineTessellator_AddPolygon" "', argument " "1"" of type '" "EngineTessellator *""'"); 
  }
  arg1 = reinterpret_cast< EngineTessellator * >(argp1);
  (arg1)->AddPolygon();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EngineTessellator_AddContour(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EngineTessellator *arg1 = (EngineTessellator *) 0 ;
  std::vector< Vec3f,std::allocator< Vec3f > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EngineTessellator_AddContour",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EngineTessellator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EngineTessellator_AddContour" "', argument " "1"" of type '" "EngineTessellator *""'"); 
  }
  arg1 = reinterpret_cast< EngineTessellator * >(argp1);
  {
    std::vector<Vec3f,std::allocator< Vec3f > > *ptr = (std::vector<Vec3f,std::allocator< Vec3f > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EngineTessellator_AddContour" "', argument " "2"" of type '" "std::vector< Vec3f,std::allocator< Vec3f > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EngineTessellator_AddContour" "', argument " "2"" of type '" "std::vector< Vec3f,std::allocator< Vec3f > > const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->AddContour((std::vector< Vec3f,std::allocator< Vec3f > > const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_EngineTessellator_Run__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EngineTessellator *arg1 = (EngineTessellator *) 0 ;
  double arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:EngineTessellator_Run",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EngineTessellator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EngineTessellator_Run" "', argument " "1"" of type '" "EngineTessellator *""'"); 
  }
  arg1 = reinterpret_cast< EngineTessellator * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EngineTessellator_Run" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "EngineTessellator_Run" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  (arg1)->Run(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EngineTessellator_Run__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EngineTessellator *arg1 = (EngineTessellator *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EngineTessellator_Run",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EngineTessellator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EngineTessellator_Run" "', argument " "1"" of type '" "EngineTessellator *""'"); 
  }
  arg1 = reinterpret_cast< EngineTessellator * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EngineTessellator_Run" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->Run(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EngineTessellator_Run__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EngineTessellator *arg1 = (EngineTessellator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EngineTessellator_Run",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EngineTessellator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EngineTessellator_Run" "', argument " "1"" of type '" "EngineTessellator *""'"); 
  }
  arg1 = reinterpret_cast< EngineTessellator * >(argp1);
  (arg1)->Run();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EngineTessellator_Run(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_EngineTessellator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_EngineTessellator_Run__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_EngineTessellator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_EngineTessellator_Run__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_EngineTessellator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_EngineTessellator_Run__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'EngineTessellator_Run'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Run(EngineTessellator *,double,bool)\n"
    "    Run(EngineTessellator *,double)\n"
    "    Run(EngineTessellator *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_EngineTessellator_GetTriangles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EngineTessellator *arg1 = (EngineTessellator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Vec3f,std::allocator< Vec3f > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EngineTessellator_GetTriangles",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EngineTessellator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EngineTessellator_GetTriangles" "', argument " "1"" of type '" "EngineTessellator *""'"); 
  }
  arg1 = reinterpret_cast< EngineTessellator * >(argp1);
  result = (arg1)->GetTriangles();
  resultobj = swig::from(static_cast< std::vector<Vec3f,std::allocator< Vec3f > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EngineTessellator_GetMatrix(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EngineTessellator *arg1 = (EngineTessellator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Mat4f result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EngineTessellator_GetMatrix",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EngineTessellator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EngineTessellator_GetMatrix" "', argument " "1"" of type '" "EngineTessellator *""'"); 
  }
  arg1 = reinterpret_cast< EngineTessellator * >(argp1);
  result = (arg1)->GetMatrix();
  resultobj = SWIG_NewPointerObj((new Mat4f(static_cast< const Mat4f& >(result))), SWIGTYPE_p_Mat4f, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EngineTessellator_GetGraph(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EngineTessellator *arg1 = (EngineTessellator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::tr1::shared_ptr< Graph > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EngineTessellator_GetGraph",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EngineTessellator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EngineTessellator_GetGraph" "', argument " "1"" of type '" "EngineTessellator *""'"); 
  }
  arg1 = reinterpret_cast< EngineTessellator * >(argp1);
  result = (arg1)->GetGraph();
  {
    std::tr1::shared_ptr<  Graph > *smartresult = result ? new std::tr1::shared_ptr<  Graph >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_EngineTessellator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EngineTessellator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_EngineTessellator")) SWIG_fail;
  result = (EngineTessellator *)new EngineTessellator();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_EngineTessellator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_EngineTessellator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EngineTessellator *arg1 = (EngineTessellator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_EngineTessellator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EngineTessellator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_EngineTessellator" "', argument " "1"" of type '" "EngineTessellator *""'"); 
  }
  arg1 = reinterpret_cast< EngineTessellator * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *EngineTessellator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_EngineTessellator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_Viewer_engine_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Viewer *arg1 = (Viewer *) 0 ;
  Engine *arg2 = (Engine *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Viewer_engine_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Viewer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Viewer_engine_set" "', argument " "1"" of type '" "Viewer *""'"); 
  }
  arg1 = reinterpret_cast< Viewer * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Engine, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Viewer_engine_set" "', argument " "2"" of type '" "Engine *""'"); 
  }
  arg2 = reinterpret_cast< Engine * >(argp2);
  if (arg1) (arg1)->engine = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Viewer_engine_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Viewer *arg1 = (Viewer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Engine *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Viewer_engine_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Viewer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Viewer_engine_get" "', argument " "1"" of type '" "Viewer *""'"); 
  }
  arg1 = reinterpret_cast< Viewer * >(argp1);
  result = (Engine *) ((arg1)->engine);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Engine, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Viewer_window_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Viewer *arg1 = (Viewer *) 0 ;
  int64 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Viewer_window_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Viewer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Viewer_window_set" "', argument " "1"" of type '" "Viewer *""'"); 
  }
  arg1 = reinterpret_cast< Viewer * >(argp1);
  ecode2 = SWIG_AsVal_long_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Viewer_window_set" "', argument " "2"" of type '" "int64""'");
  } 
  arg2 = static_cast< int64 >(val2);
  if (arg1) (arg1)->window = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Viewer_window_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Viewer *arg1 = (Viewer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int64 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Viewer_window_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Viewer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Viewer_window_get" "', argument " "1"" of type '" "Viewer *""'"); 
  }
  arg1 = reinterpret_cast< Viewer * >(argp1);
  result = (int64) ((arg1)->window);
  resultobj = SWIG_From_long_SS_long(static_cast< long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Viewer_trackball_mode_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Viewer *arg1 = (Viewer *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Viewer_trackball_mode_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Viewer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Viewer_trackball_mode_set" "', argument " "1"" of type '" "Viewer *""'"); 
  }
  arg1 = reinterpret_cast< Viewer * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Viewer_trackball_mode_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->trackball_mode = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Viewer_trackball_mode_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Viewer *arg1 = (Viewer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Viewer_trackball_mode_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Viewer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Viewer_trackball_mode_get" "', argument " "1"" of type '" "Viewer *""'"); 
  }
  arg1 = reinterpret_cast< Viewer * >(argp1);
  result = (bool) ((arg1)->trackball_mode);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Viewer_trackball_center_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Viewer *arg1 = (Viewer *) 0 ;
  Vec3f *arg2 = (Vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Viewer_trackball_center_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Viewer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Viewer_trackball_center_set" "', argument " "1"" of type '" "Viewer *""'"); 
  }
  arg1 = reinterpret_cast< Viewer * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Vec3f, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Viewer_trackball_center_set" "', argument " "2"" of type '" "Vec3f *""'"); 
  }
  arg2 = reinterpret_cast< Vec3f * >(argp2);
  if (arg1) (arg1)->trackball_center = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Viewer_trackball_center_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Viewer *arg1 = (Viewer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Vec3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Viewer_trackball_center_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Viewer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Viewer_trackball_center_get" "', argument " "1"" of type '" "Viewer *""'"); 
  }
  arg1 = reinterpret_cast< Viewer * >(argp1);
  result = (Vec3f *)& ((arg1)->trackball_center);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vec3f, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Viewer_mouse_beginx_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Viewer *arg1 = (Viewer *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Viewer_mouse_beginx_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Viewer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Viewer_mouse_beginx_set" "', argument " "1"" of type '" "Viewer *""'"); 
  }
  arg1 = reinterpret_cast< Viewer * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Viewer_mouse_beginx_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->mouse_beginx = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Viewer_mouse_beginx_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Viewer *arg1 = (Viewer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Viewer_mouse_beginx_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Viewer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Viewer_mouse_beginx_get" "', argument " "1"" of type '" "Viewer *""'"); 
  }
  arg1 = reinterpret_cast< Viewer * >(argp1);
  result = (int) ((arg1)->mouse_beginx);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Viewer_mouse_beginy_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Viewer *arg1 = (Viewer *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Viewer_mouse_beginy_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Viewer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Viewer_mouse_beginy_set" "', argument " "1"" of type '" "Viewer *""'"); 
  }
  arg1 = reinterpret_cast< Viewer * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Viewer_mouse_beginy_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->mouse_beginy = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Viewer_mouse_beginy_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Viewer *arg1 = (Viewer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Viewer_mouse_beginy_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Viewer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Viewer_mouse_beginy_get" "', argument " "1"" of type '" "Viewer *""'"); 
  }
  arg1 = reinterpret_cast< Viewer * >(argp1);
  result = (int) ((arg1)->mouse_beginy);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Viewer_DrawLines_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Viewer *arg1 = (Viewer *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Viewer_DrawLines_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Viewer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Viewer_DrawLines_set" "', argument " "1"" of type '" "Viewer *""'"); 
  }
  arg1 = reinterpret_cast< Viewer * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Viewer_DrawLines_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->DrawLines = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Viewer_DrawLines_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Viewer *arg1 = (Viewer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Viewer_DrawLines_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Viewer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Viewer_DrawLines_get" "', argument " "1"" of type '" "Viewer *""'"); 
  }
  arg1 = reinterpret_cast< Viewer * >(argp1);
  result = (bool) ((arg1)->DrawLines);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Viewer_DrawAxis_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Viewer *arg1 = (Viewer *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Viewer_DrawAxis_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Viewer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Viewer_DrawAxis_set" "', argument " "1"" of type '" "Viewer *""'"); 
  }
  arg1 = reinterpret_cast< Viewer * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Viewer_DrawAxis_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->DrawAxis = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Viewer_DrawAxis_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Viewer *arg1 = (Viewer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Viewer_DrawAxis_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Viewer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Viewer_DrawAxis_get" "', argument " "1"" of type '" "Viewer *""'"); 
  }
  arg1 = reinterpret_cast< Viewer * >(argp1);
  result = (bool) ((arg1)->DrawAxis);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Viewer_frustum_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Viewer *arg1 = (Viewer *) 0 ;
  Frustum *arg2 = (Frustum *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Viewer_frustum_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Viewer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Viewer_frustum_set" "', argument " "1"" of type '" "Viewer *""'"); 
  }
  arg1 = reinterpret_cast< Viewer * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Frustum, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Viewer_frustum_set" "', argument " "2"" of type '" "Frustum *""'"); 
  }
  arg2 = reinterpret_cast< Frustum * >(argp2);
  if (arg1) (arg1)->frustum = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Viewer_frustum_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Viewer *arg1 = (Viewer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Frustum *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Viewer_frustum_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Viewer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Viewer_frustum_get" "', argument " "1"" of type '" "Viewer *""'"); 
  }
  arg1 = reinterpret_cast< Viewer * >(argp1);
  result = (Frustum *)& ((arg1)->frustum);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Frustum, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Viewer_debug_frustum_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Viewer *arg1 = (Viewer *) 0 ;
  Frustum *arg2 = (Frustum *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Viewer_debug_frustum_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Viewer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Viewer_debug_frustum_set" "', argument " "1"" of type '" "Viewer *""'"); 
  }
  arg1 = reinterpret_cast< Viewer * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Frustum, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Viewer_debug_frustum_set" "', argument " "2"" of type '" "Frustum *""'"); 
  }
  arg2 = reinterpret_cast< Frustum * >(argp2);
  if (arg1) (arg1)->debug_frustum = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Viewer_debug_frustum_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Viewer *arg1 = (Viewer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Frustum *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Viewer_debug_frustum_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Viewer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Viewer_debug_frustum_get" "', argument " "1"" of type '" "Viewer *""'"); 
  }
  arg1 = reinterpret_cast< Viewer * >(argp1);
  result = (Frustum *) ((arg1)->debug_frustum);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Frustum, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Viewer_octree_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Viewer *arg1 = (Viewer *) 0 ;
  std::tr1::shared_ptr< Octree > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::tr1::shared_ptr< Octree > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Viewer_octree_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Viewer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Viewer_octree_set" "', argument " "1"" of type '" "Viewer *""'"); 
  }
  arg1 = reinterpret_cast< Viewer * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_std__tr1__shared_ptrT_Octree_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Viewer_octree_set" "', argument " "2"" of type '" "std::tr1::shared_ptr< Octree > const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< std::tr1::shared_ptr< Octree > * >(argp2);
      delete reinterpret_cast< std::tr1::shared_ptr< Octree > * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< std::tr1::shared_ptr< Octree > * >(argp2) : &tempshared2;
    }
  }
  if (arg1) (arg1)->octree = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Viewer_octree_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Viewer *arg1 = (Viewer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::tr1::shared_ptr< Octree > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Viewer_octree_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Viewer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Viewer_octree_get" "', argument " "1"" of type '" "Viewer *""'"); 
  }
  arg1 = reinterpret_cast< Viewer * >(argp1);
  result = (std::tr1::shared_ptr< Octree > *) & ((arg1)->octree);
  {
    std::tr1::shared_ptr<  Octree > *smartresult = *result ? new std::tr1::shared_ptr<  Octree >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Octree_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Viewer_bProgressiveRendering_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Viewer *arg1 = (Viewer *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Viewer_bProgressiveRendering_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Viewer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Viewer_bProgressiveRendering_set" "', argument " "1"" of type '" "Viewer *""'"); 
  }
  arg1 = reinterpret_cast< Viewer * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Viewer_bProgressiveRendering_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->bProgressiveRendering = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Viewer_bProgressiveRendering_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Viewer *arg1 = (Viewer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Viewer_bProgressiveRendering_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Viewer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Viewer_bProgressiveRendering_get" "', argument " "1"" of type '" "Viewer *""'"); 
  }
  arg1 = reinterpret_cast< Viewer * >(argp1);
  result = (bool) ((arg1)->bProgressiveRendering);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Viewer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  PyObject * obj0 = 0 ;
  Viewer *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Viewer",&obj0)) SWIG_fail;
  arg1 = obj0;
  if ( arg1 != Py_None ) {
    /* subclassed */
    result = (Viewer *)new SwigDirector_Viewer(arg1); 
  } else {
    result = (Viewer *)new Viewer(); 
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Viewer, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Viewer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  std::tr1::shared_ptr< Octree > arg2 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Viewer *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Viewer",&obj0,&obj1)) SWIG_fail;
  arg1 = obj0;
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_std__tr1__shared_ptrT_Octree_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Viewer" "', argument " "2"" of type '" "std::tr1::shared_ptr< Octree >""'"); 
    }
    if (argp2) arg2 = *(reinterpret_cast< std::tr1::shared_ptr< Octree > * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< std::tr1::shared_ptr< Octree > * >(argp2);
  }
  if ( arg1 != Py_None ) {
    /* subclassed */
    result = (Viewer *)new SwigDirector_Viewer(arg1,arg2); 
  } else {
    result = (Viewer *)new Viewer(arg2); 
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Viewer, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Viewer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    _v = (argv[0] != 0);
    if (_v) {
      return _wrap_new_Viewer__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    _v = (argv[0] != 0);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Octree_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_Viewer__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Viewer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Viewer(PyObject *)\n"
    "    Viewer(PyObject *,std::tr1::shared_ptr< Octree >)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Viewer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Viewer *arg1 = (Viewer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Viewer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Viewer, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Viewer" "', argument " "1"" of type '" "Viewer *""'"); 
  }
  arg1 = reinterpret_cast< Viewer * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Viewer_Render(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Viewer *arg1 = (Viewer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Viewer_Render",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Viewer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Viewer_Render" "', argument " "1"" of type '" "Viewer *""'"); 
  }
  arg1 = reinterpret_cast< Viewer * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    if (upcall) {
      (arg1)->Viewer::Render();
    } else {
      (arg1)->Render();
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Viewer_Redisplay(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Viewer *arg1 = (Viewer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Viewer_Redisplay",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Viewer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Viewer_Redisplay" "', argument " "1"" of type '" "Viewer *""'"); 
  }
  arg1 = reinterpret_cast< Viewer * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    if (upcall) {
      (arg1)->Viewer::Redisplay();
    } else {
      (arg1)->Redisplay();
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Viewer_Keyboard(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Viewer *arg1 = (Viewer *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Viewer_Keyboard",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Viewer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Viewer_Keyboard" "', argument " "1"" of type '" "Viewer *""'"); 
  }
  arg1 = reinterpret_cast< Viewer * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Viewer_Keyboard" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Viewer_Keyboard" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Viewer_Keyboard" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    if (upcall) {
      (arg1)->Viewer::Keyboard(arg2,arg3,arg4);
    } else {
      (arg1)->Keyboard(arg2,arg3,arg4);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Viewer_Mouse(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Viewer *arg1 = (Viewer *) 0 ;
  MouseEvent arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Viewer_Mouse",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Viewer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Viewer_Mouse" "', argument " "1"" of type '" "Viewer *""'"); 
  }
  arg1 = reinterpret_cast< Viewer * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_MouseEvent,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Viewer_Mouse" "', argument " "2"" of type '" "MouseEvent""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Viewer_Mouse" "', argument " "2"" of type '" "MouseEvent""'");
    } else {
      MouseEvent * temp = reinterpret_cast< MouseEvent * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    if (upcall) {
      (arg1)->Viewer::Mouse(arg2);
    } else {
      (arg1)->Mouse(arg2);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Viewer_Resize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Viewer *arg1 = (Viewer *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Viewer_Resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Viewer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Viewer_Resize" "', argument " "1"" of type '" "Viewer *""'"); 
  }
  arg1 = reinterpret_cast< Viewer * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Viewer_Resize" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Viewer_Resize" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    if (upcall) {
      (arg1)->Viewer::Resize(arg2,arg3);
    } else {
      (arg1)->Resize(arg2,arg3);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Viewer_Close(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Viewer *arg1 = (Viewer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Viewer_Close",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Viewer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Viewer_Close" "', argument " "1"" of type '" "Viewer *""'"); 
  }
  arg1 = reinterpret_cast< Viewer * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    if (upcall) {
      (arg1)->Viewer::Close();
    } else {
      (arg1)->Close();
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Viewer_Run(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Viewer *arg1 = (Viewer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Viewer_Run",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Viewer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Viewer_Run" "', argument " "1"" of type '" "Viewer *""'"); 
  }
  arg1 = reinterpret_cast< Viewer * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    if (upcall) {
      (arg1)->Viewer::Run();
    } else {
      (arg1)->Run();
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Viewer_Wait(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Viewer *arg1 = (Viewer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Viewer_Wait",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Viewer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Viewer_Wait" "', argument " "1"" of type '" "Viewer *""'"); 
  }
  arg1 = reinterpret_cast< Viewer * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    if (upcall) {
      (arg1)->Viewer::Wait();
    } else {
      (arg1)->Wait();
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Viewer_SelfTest__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Viewer_SelfTest",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Viewer_SelfTest" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Viewer_SelfTest" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Viewer_SelfTest" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  Viewer::SelfTest(arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Viewer_SelfTest__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Viewer_SelfTest",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Viewer_SelfTest" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Viewer_SelfTest" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  Viewer::SelfTest(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Viewer_SelfTest__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Viewer_SelfTest",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Viewer_SelfTest" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  Viewer::SelfTest(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Viewer_SelfTest__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":Viewer_SelfTest")) SWIG_fail;
  Viewer::SelfTest();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Viewer_SelfTest(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_Viewer_SelfTest__SWIG_3(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Viewer_SelfTest__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Viewer_SelfTest__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Viewer_SelfTest__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Viewer_SelfTest'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    SelfTest(int,int,int)\n"
    "    SelfTest(int,int)\n"
    "    SelfTest(int)\n"
    "    Viewer::SelfTest()\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Viewer_m_close_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Viewer *arg1 = (Viewer *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Viewer_m_close_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Viewer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Viewer_m_close_set" "', argument " "1"" of type '" "Viewer *""'"); 
  }
  arg1 = reinterpret_cast< Viewer * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Viewer_m_close_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->m_close = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Viewer_m_close_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Viewer *arg1 = (Viewer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Viewer_m_close_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Viewer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Viewer_m_close_get" "', argument " "1"" of type '" "Viewer *""'"); 
  }
  arg1 = reinterpret_cast< Viewer * >(argp1);
  result = (bool) ((arg1)->m_close);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Viewer_doJob(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Viewer *arg1 = (Viewer *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  SwigDirector_Viewer *darg = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Viewer_doJob",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Viewer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Viewer_doJob" "', argument " "1"" of type '" "Viewer *""'"); 
  }
  arg1 = reinterpret_cast< Viewer * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Viewer_doJob" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (!director || !(director->swig_get_inner("doJob"))) {
    SWIG_SetErrorMsg(PyExc_RuntimeError,"accessing protected member doJob");
    SWIG_fail;
  }
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    darg = dynamic_cast<SwigDirector_Viewer *>(arg1);
    if (upcall) {
      (darg)->doJobSwigPublic(arg2);
    } else {
      (darg)->doJob(arg2);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_disown_Viewer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Viewer *arg1 = (Viewer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:disown_Viewer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Viewer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disown_Viewer" "', argument " "1"" of type '" "Viewer *""'"); 
  }
  arg1 = reinterpret_cast< Viewer * >(argp1);
  {
    Swig::Director *director = SWIG_DIRECTOR_CAST(arg1);
    if (director) director->swig_disown();
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Viewer_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Viewer, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_OctreeNode__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box3f arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  OctreeNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_OctreeNode",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Box3f,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_OctreeNode" "', argument " "1"" of type '" "Box3f""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_OctreeNode" "', argument " "1"" of type '" "Box3f""'");
    } else {
      Box3f * temp = reinterpret_cast< Box3f * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  result = (OctreeNode *)new OctreeNode(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OctreeNode, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_OctreeNode__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OctreeNode *arg1 = (OctreeNode *) 0 ;
  int arg2 ;
  Box3f arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  OctreeNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_OctreeNode",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OctreeNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_OctreeNode" "', argument " "1"" of type '" "OctreeNode *""'"); 
  }
  arg1 = reinterpret_cast< OctreeNode * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_OctreeNode" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Box3f,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_OctreeNode" "', argument " "3"" of type '" "Box3f""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_OctreeNode" "', argument " "3"" of type '" "Box3f""'");
    } else {
      Box3f * temp = reinterpret_cast< Box3f * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  result = (OctreeNode *)new OctreeNode(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OctreeNode, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_OctreeNode(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Box3f, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_OctreeNode__SWIG_0(self, args);
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OctreeNode, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_Box3f, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_OctreeNode__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_OctreeNode'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    OctreeNode(Box3f)\n"
    "    OctreeNode(OctreeNode *,int,Box3f)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_OctreeNode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OctreeNode *arg1 = (OctreeNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_OctreeNode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OctreeNode, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_OctreeNode" "', argument " "1"" of type '" "OctreeNode *""'"); 
  }
  arg1 = reinterpret_cast< OctreeNode * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OctreeNode_getId(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OctreeNode *arg1 = (OctreeNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint64 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:OctreeNode_getId",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OctreeNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OctreeNode_getId" "', argument " "1"" of type '" "OctreeNode *""'"); 
  }
  arg1 = reinterpret_cast< OctreeNode * >(argp1);
  result = (uint64)(arg1)->getId();
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OctreeNode_getNode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OctreeNode *arg1 = (OctreeNode *) 0 ;
  uint64 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  OctreeNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:OctreeNode_getNode",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OctreeNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OctreeNode_getNode" "', argument " "1"" of type '" "OctreeNode *""'"); 
  }
  arg1 = reinterpret_cast< OctreeNode * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "OctreeNode_getNode" "', argument " "2"" of type '" "uint64""'");
  } 
  arg2 = static_cast< uint64 >(val2);
  result = (OctreeNode *)(arg1)->getNode(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OctreeNode, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OctreeNode_depth_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OctreeNode *arg1 = (OctreeNode *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:OctreeNode_depth_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OctreeNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OctreeNode_depth_set" "', argument " "1"" of type '" "OctreeNode *""'"); 
  }
  arg1 = reinterpret_cast< OctreeNode * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "OctreeNode_depth_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->depth = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OctreeNode_depth_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OctreeNode *arg1 = (OctreeNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:OctreeNode_depth_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OctreeNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OctreeNode_depth_get" "', argument " "1"" of type '" "OctreeNode *""'"); 
  }
  arg1 = reinterpret_cast< OctreeNode * >(argp1);
  result = (int) ((arg1)->depth);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OctreeNode_parent_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OctreeNode *arg1 = (OctreeNode *) 0 ;
  OctreeNode *arg2 = (OctreeNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:OctreeNode_parent_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OctreeNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OctreeNode_parent_set" "', argument " "1"" of type '" "OctreeNode *""'"); 
  }
  arg1 = reinterpret_cast< OctreeNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_OctreeNode, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OctreeNode_parent_set" "', argument " "2"" of type '" "OctreeNode *""'"); 
  }
  arg2 = reinterpret_cast< OctreeNode * >(argp2);
  if (arg1) (arg1)->parent = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OctreeNode_parent_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OctreeNode *arg1 = (OctreeNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  OctreeNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:OctreeNode_parent_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OctreeNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OctreeNode_parent_get" "', argument " "1"" of type '" "OctreeNode *""'"); 
  }
  arg1 = reinterpret_cast< OctreeNode * >(argp1);
  result = (OctreeNode *) ((arg1)->parent);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OctreeNode, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OctreeNode_getChild(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OctreeNode *arg1 = (OctreeNode *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  OctreeNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:OctreeNode_getChild",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OctreeNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OctreeNode_getChild" "', argument " "1"" of type '" "OctreeNode *""'"); 
  }
  arg1 = reinterpret_cast< OctreeNode * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "OctreeNode_getChild" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (OctreeNode *)(arg1)->getChild(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OctreeNode, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OctreeNode_box_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OctreeNode *arg1 = (OctreeNode *) 0 ;
  Box3f *arg2 = (Box3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:OctreeNode_box_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OctreeNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OctreeNode_box_set" "', argument " "1"" of type '" "OctreeNode *""'"); 
  }
  arg1 = reinterpret_cast< OctreeNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box3f, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OctreeNode_box_set" "', argument " "2"" of type '" "Box3f *""'"); 
  }
  arg2 = reinterpret_cast< Box3f * >(argp2);
  if (arg1) (arg1)->box = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OctreeNode_box_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OctreeNode *arg1 = (OctreeNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Box3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:OctreeNode_box_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OctreeNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OctreeNode_box_get" "', argument " "1"" of type '" "OctreeNode *""'"); 
  }
  arg1 = reinterpret_cast< OctreeNode * >(argp1);
  result = (Box3f *)& ((arg1)->box);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Box3f, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OctreeNode_batches_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OctreeNode *arg1 = (OctreeNode *) 0 ;
  std::vector< std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > *arg2 = (std::vector< std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:OctreeNode_batches_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OctreeNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OctreeNode_batches_set" "', argument " "1"" of type '" "OctreeNode *""'"); 
  }
  arg1 = reinterpret_cast< OctreeNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Batch_t_std__allocatorT_std__tr1__shared_ptrT_Batch_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OctreeNode_batches_set" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > * >(argp2);
  if (arg1) (arg1)->batches = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OctreeNode_batches_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OctreeNode *arg1 = (OctreeNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:OctreeNode_batches_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OctreeNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OctreeNode_batches_get" "', argument " "1"" of type '" "OctreeNode *""'"); 
  }
  arg1 = reinterpret_cast< OctreeNode * >(argp1);
  result = (std::vector< std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > *)& ((arg1)->batches);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Batch_t_std__allocatorT_std__tr1__shared_ptrT_Batch_t_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *OctreeNode_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_OctreeNode, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_FrustumIterator__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FrustumIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_FrustumIterator")) SWIG_fail;
  result = (FrustumIterator *)new FrustumIterator();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FrustumIterator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FrustumIterator__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OctreeNode *arg1 = (OctreeNode *) 0 ;
  Frustum *arg2 = (Frustum *) 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  FrustumIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_FrustumIterator",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OctreeNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_FrustumIterator" "', argument " "1"" of type '" "OctreeNode *""'"); 
  }
  arg1 = reinterpret_cast< OctreeNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Frustum, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_FrustumIterator" "', argument " "2"" of type '" "Frustum *""'"); 
  }
  arg2 = reinterpret_cast< Frustum * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_FrustumIterator" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (FrustumIterator *)new FrustumIterator(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FrustumIterator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FrustumIterator__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OctreeNode *arg1 = (OctreeNode *) 0 ;
  Frustum *arg2 = (Frustum *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FrustumIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_FrustumIterator",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OctreeNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_FrustumIterator" "', argument " "1"" of type '" "OctreeNode *""'"); 
  }
  arg1 = reinterpret_cast< OctreeNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Frustum, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_FrustumIterator" "', argument " "2"" of type '" "Frustum *""'"); 
  }
  arg2 = reinterpret_cast< Frustum * >(argp2);
  result = (FrustumIterator *)new FrustumIterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FrustumIterator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FrustumIterator(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_FrustumIterator__SWIG_0(self, args);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OctreeNode, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Frustum, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_FrustumIterator__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OctreeNode, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Frustum, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_FrustumIterator__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_FrustumIterator'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FrustumIterator()\n"
    "    FrustumIterator(OctreeNode *,Frustum *,bool)\n"
    "    FrustumIterator(OctreeNode *,Frustum *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_FrustumIterator_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FrustumIterator *arg1 = (FrustumIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FrustumIterator_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FrustumIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FrustumIterator_end" "', argument " "1"" of type '" "FrustumIterator *""'"); 
  }
  arg1 = reinterpret_cast< FrustumIterator * >(argp1);
  result = (bool)(arg1)->end();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FrustumIterator_getNode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FrustumIterator *arg1 = (FrustumIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  OctreeNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FrustumIterator_getNode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FrustumIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FrustumIterator_getNode" "', argument " "1"" of type '" "FrustumIterator *""'"); 
  }
  arg1 = reinterpret_cast< FrustumIterator * >(argp1);
  result = (OctreeNode *)(arg1)->getNode();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OctreeNode, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FrustumIterator_getDistance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FrustumIterator *arg1 = (FrustumIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FrustumIterator_getDistance",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FrustumIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FrustumIterator_getDistance" "', argument " "1"" of type '" "FrustumIterator *""'"); 
  }
  arg1 = reinterpret_cast< FrustumIterator * >(argp1);
  result = (float)(arg1)->getDistance();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FrustumIterator_moveNext(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FrustumIterator *arg1 = (FrustumIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FrustumIterator_moveNext",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FrustumIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FrustumIterator_moveNext" "', argument " "1"" of type '" "FrustumIterator *""'"); 
  }
  arg1 = reinterpret_cast< FrustumIterator * >(argp1);
  (arg1)->moveNext();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_FrustumIterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FrustumIterator *arg1 = (FrustumIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_FrustumIterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FrustumIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FrustumIterator" "', argument " "1"" of type '" "FrustumIterator *""'"); 
  }
  arg1 = reinterpret_cast< FrustumIterator * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *FrustumIterator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FrustumIterator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_RayIterator__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OctreeNode *arg1 = (OctreeNode *) 0 ;
  Ray3f arg2 ;
  float arg3 ;
  float arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  RayIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_RayIterator",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OctreeNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_RayIterator" "', argument " "1"" of type '" "OctreeNode *""'"); 
  }
  arg1 = reinterpret_cast< OctreeNode * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Ray3f,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_RayIterator" "', argument " "2"" of type '" "Ray3f""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RayIterator" "', argument " "2"" of type '" "Ray3f""'");
    } else {
      Ray3f * temp = reinterpret_cast< Ray3f * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_RayIterator" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_RayIterator" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  result = (RayIterator *)new RayIterator(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_RayIterator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RayIterator__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OctreeNode *arg1 = (OctreeNode *) 0 ;
  Ray3f arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  RayIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_RayIterator",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OctreeNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_RayIterator" "', argument " "1"" of type '" "OctreeNode *""'"); 
  }
  arg1 = reinterpret_cast< OctreeNode * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Ray3f,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_RayIterator" "', argument " "2"" of type '" "Ray3f""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RayIterator" "', argument " "2"" of type '" "Ray3f""'");
    } else {
      Ray3f * temp = reinterpret_cast< Ray3f * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_RayIterator" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  result = (RayIterator *)new RayIterator(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_RayIterator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RayIterator__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OctreeNode *arg1 = (OctreeNode *) 0 ;
  Ray3f arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  RayIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_RayIterator",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OctreeNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_RayIterator" "', argument " "1"" of type '" "OctreeNode *""'"); 
  }
  arg1 = reinterpret_cast< OctreeNode * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Ray3f,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_RayIterator" "', argument " "2"" of type '" "Ray3f""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RayIterator" "', argument " "2"" of type '" "Ray3f""'");
    } else {
      Ray3f * temp = reinterpret_cast< Ray3f * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (RayIterator *)new RayIterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_RayIterator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RayIterator(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OctreeNode, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Ray3f, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_RayIterator__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OctreeNode, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Ray3f, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_RayIterator__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OctreeNode, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Ray3f, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_RayIterator__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_RayIterator'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    RayIterator(OctreeNode *,Ray3f,float,float)\n"
    "    RayIterator(OctreeNode *,Ray3f,float)\n"
    "    RayIterator(OctreeNode *,Ray3f)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_RayIterator_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RayIterator *arg1 = (RayIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RayIterator_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RayIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RayIterator_end" "', argument " "1"" of type '" "RayIterator *""'"); 
  }
  arg1 = reinterpret_cast< RayIterator * >(argp1);
  result = (bool)(arg1)->end();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RayIterator_getNode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RayIterator *arg1 = (RayIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  OctreeNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RayIterator_getNode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RayIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RayIterator_getNode" "', argument " "1"" of type '" "RayIterator *""'"); 
  }
  arg1 = reinterpret_cast< RayIterator * >(argp1);
  result = (OctreeNode *)(arg1)->getNode();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OctreeNode, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RayIterator_getMinDistance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RayIterator *arg1 = (RayIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RayIterator_getMinDistance",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RayIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RayIterator_getMinDistance" "', argument " "1"" of type '" "RayIterator *""'"); 
  }
  arg1 = reinterpret_cast< RayIterator * >(argp1);
  result = (float)(arg1)->getMinDistance();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RayIterator_moveNext(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RayIterator *arg1 = (RayIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RayIterator_moveNext",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RayIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RayIterator_moveNext" "', argument " "1"" of type '" "RayIterator *""'"); 
  }
  arg1 = reinterpret_cast< RayIterator * >(argp1);
  (arg1)->moveNext();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_RayIterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RayIterator *arg1 = (RayIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_RayIterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RayIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RayIterator" "', argument " "1"" of type '" "RayIterator *""'"); 
  }
  arg1 = reinterpret_cast< RayIterator * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *RayIterator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_RayIterator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_Octree_world_box_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Octree *arg1 = (Octree *) 0 ;
  Box3f *arg2 = (Box3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Octree > tempshared1 ;
  std::tr1::shared_ptr< Octree > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Octree_world_box_set",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Octree_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Octree_world_box_set" "', argument " "1"" of type '" "Octree *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Octree > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Octree > * >(argp1);
      arg1 = const_cast< Octree * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Octree > * >(argp1);
      arg1 = const_cast< Octree * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box3f, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Octree_world_box_set" "', argument " "2"" of type '" "Box3f *""'"); 
  }
  arg2 = reinterpret_cast< Box3f * >(argp2);
  if (arg1) (arg1)->world_box = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Octree_world_box_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Octree *arg1 = (Octree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Octree > tempshared1 ;
  std::tr1::shared_ptr< Octree > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  Box3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Octree_world_box_get",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Octree_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Octree_world_box_get" "', argument " "1"" of type '" "Octree *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Octree > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Octree > * >(argp1);
      arg1 = const_cast< Octree * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Octree > * >(argp1);
      arg1 = const_cast< Octree * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (Box3f *)& ((arg1)->world_box);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Box3f, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Octree_root_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Octree *arg1 = (Octree *) 0 ;
  OctreeNode *arg2 = (OctreeNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Octree > tempshared1 ;
  std::tr1::shared_ptr< Octree > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Octree_root_set",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Octree_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Octree_root_set" "', argument " "1"" of type '" "Octree *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Octree > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Octree > * >(argp1);
      arg1 = const_cast< Octree * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Octree > * >(argp1);
      arg1 = const_cast< Octree * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_OctreeNode, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Octree_root_set" "', argument " "2"" of type '" "OctreeNode *""'"); 
  }
  arg2 = reinterpret_cast< OctreeNode * >(argp2);
  if (arg1) (arg1)->root = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Octree_root_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Octree *arg1 = (Octree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Octree > tempshared1 ;
  std::tr1::shared_ptr< Octree > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  OctreeNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Octree_root_get",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Octree_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Octree_root_get" "', argument " "1"" of type '" "Octree *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Octree > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Octree > * >(argp1);
      arg1 = const_cast< Octree * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Octree > * >(argp1);
      arg1 = const_cast< Octree * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (OctreeNode *) ((arg1)->root);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OctreeNode, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Octree_world_center_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Octree *arg1 = (Octree *) 0 ;
  Vec3f *arg2 = (Vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Octree > tempshared1 ;
  std::tr1::shared_ptr< Octree > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Octree_world_center_set",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Octree_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Octree_world_center_set" "', argument " "1"" of type '" "Octree *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Octree > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Octree > * >(argp1);
      arg1 = const_cast< Octree * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Octree > * >(argp1);
      arg1 = const_cast< Octree * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Vec3f, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Octree_world_center_set" "', argument " "2"" of type '" "Vec3f *""'"); 
  }
  arg2 = reinterpret_cast< Vec3f * >(argp2);
  if (arg1) (arg1)->world_center = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Octree_world_center_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Octree *arg1 = (Octree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Octree > tempshared1 ;
  std::tr1::shared_ptr< Octree > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  Vec3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Octree_world_center_get",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Octree_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Octree_world_center_get" "', argument " "1"" of type '" "Octree *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Octree > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Octree > * >(argp1);
      arg1 = const_cast< Octree * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Octree > * >(argp1);
      arg1 = const_cast< Octree * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (Vec3f *)& ((arg1)->world_center);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vec3f, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Octree_world_W_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Octree *arg1 = (Octree *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Octree > tempshared1 ;
  std::tr1::shared_ptr< Octree > *smartarg1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Octree_world_W_set",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Octree_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Octree_world_W_set" "', argument " "1"" of type '" "Octree *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Octree > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Octree > * >(argp1);
      arg1 = const_cast< Octree * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Octree > * >(argp1);
      arg1 = const_cast< Octree * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Octree_world_W_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->world_W = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Octree_world_W_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Octree *arg1 = (Octree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Octree > tempshared1 ;
  std::tr1::shared_ptr< Octree > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Octree_world_W_get",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Octree_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Octree_world_W_get" "', argument " "1"" of type '" "Octree *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Octree > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Octree > * >(argp1);
      arg1 = const_cast< Octree * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Octree > * >(argp1);
      arg1 = const_cast< Octree * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (float) ((arg1)->world_W);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Octree_max_depth_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Octree *arg1 = (Octree *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Octree > tempshared1 ;
  std::tr1::shared_ptr< Octree > *smartarg1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Octree_max_depth_set",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Octree_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Octree_max_depth_set" "', argument " "1"" of type '" "Octree *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Octree > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Octree > * >(argp1);
      arg1 = const_cast< Octree * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Octree > * >(argp1);
      arg1 = const_cast< Octree * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Octree_max_depth_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->max_depth = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Octree_max_depth_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Octree *arg1 = (Octree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Octree > tempshared1 ;
  std::tr1::shared_ptr< Octree > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Octree_max_depth_get",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Octree_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Octree_max_depth_get" "', argument " "1"" of type '" "Octree *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Octree > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Octree > * >(argp1);
      arg1 = const_cast< Octree * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Octree > * >(argp1);
      arg1 = const_cast< Octree * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (int) ((arg1)->max_depth);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Octree_LOOSE_K_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Octree *arg1 = (Octree *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Octree > tempshared1 ;
  std::tr1::shared_ptr< Octree > *smartarg1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Octree_LOOSE_K_set",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Octree_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Octree_LOOSE_K_set" "', argument " "1"" of type '" "Octree *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Octree > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Octree > * >(argp1);
      arg1 = const_cast< Octree * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Octree > * >(argp1);
      arg1 = const_cast< Octree * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Octree_LOOSE_K_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->LOOSE_K = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Octree_LOOSE_K_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Octree *arg1 = (Octree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Octree > tempshared1 ;
  std::tr1::shared_ptr< Octree > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Octree_LOOSE_K_get",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Octree_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Octree_LOOSE_K_get" "', argument " "1"" of type '" "Octree *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Octree > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Octree > * >(argp1);
      arg1 = const_cast< Octree * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Octree > * >(argp1);
      arg1 = const_cast< Octree * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (float) ((arg1)->LOOSE_K);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Octree__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box3f arg1 ;
  int arg2 ;
  float arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Octree *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_Octree",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Box3f,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Octree" "', argument " "1"" of type '" "Box3f""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Octree" "', argument " "1"" of type '" "Box3f""'");
    } else {
      Box3f * temp = reinterpret_cast< Box3f * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Octree" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Octree" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  result = (Octree *)new Octree(arg1,arg2,arg3);
  {
    std::tr1::shared_ptr<  Octree > *smartresult = result ? new std::tr1::shared_ptr<  Octree >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Octree_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Octree__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box3f arg1 ;
  int arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Octree *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Octree",&obj0,&obj1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Box3f,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Octree" "', argument " "1"" of type '" "Box3f""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Octree" "', argument " "1"" of type '" "Box3f""'");
    } else {
      Box3f * temp = reinterpret_cast< Box3f * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Octree" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (Octree *)new Octree(arg1,arg2);
  {
    std::tr1::shared_ptr<  Octree > *smartresult = result ? new std::tr1::shared_ptr<  Octree >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Octree_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Octree__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box3f arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Octree *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Octree",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Box3f,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Octree" "', argument " "1"" of type '" "Box3f""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Octree" "', argument " "1"" of type '" "Box3f""'");
    } else {
      Box3f * temp = reinterpret_cast< Box3f * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  result = (Octree *)new Octree(arg1);
  {
    std::tr1::shared_ptr<  Octree > *smartresult = result ? new std::tr1::shared_ptr<  Octree >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Octree_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Octree__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > *arg1 = 0 ;
  int arg2 ;
  float arg3 ;
  int res1 = SWIG_OLDOBJ ;
  int val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Octree *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_Octree",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::vector<std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > *ptr = (std::vector<std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Octree" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Octree" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Octree" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Octree" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  result = (Octree *)new Octree((std::vector< std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > const &)*arg1,arg2,arg3);
  {
    std::tr1::shared_ptr<  Octree > *smartresult = result ? new std::tr1::shared_ptr<  Octree >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Octree_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Octree__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > *arg1 = 0 ;
  int arg2 ;
  int res1 = SWIG_OLDOBJ ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Octree *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Octree",&obj0,&obj1)) SWIG_fail;
  {
    std::vector<std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > *ptr = (std::vector<std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Octree" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Octree" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Octree" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (Octree *)new Octree((std::vector< std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > const &)*arg1,arg2);
  {
    std::tr1::shared_ptr<  Octree > *smartresult = result ? new std::tr1::shared_ptr<  Octree >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Octree_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Octree__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  Octree *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Octree",&obj0)) SWIG_fail;
  {
    std::vector<std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > *ptr = (std::vector<std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Octree" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Octree" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (Octree *)new Octree((std::vector< std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > const &)*arg1);
  {
    std::tr1::shared_ptr<  Octree > *smartresult = result ? new std::tr1::shared_ptr<  Octree >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Octree_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Octree(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Box3f, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Octree__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Octree__SWIG_5(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Box3f, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Octree__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Octree__SWIG_4(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Box3f, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_Octree__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_Octree__SWIG_3(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Octree'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Octree(Box3f,int,float)\n"
    "    Octree(Box3f,int)\n"
    "    Octree(Box3f)\n"
    "    Octree(std::vector< std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > const &,int,float)\n"
    "    Octree(std::vector< std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > const &,int)\n"
    "    Octree(std::vector< std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Octree(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Octree *arg1 = (Octree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Octree > tempshared1 ;
  std::tr1::shared_ptr< Octree > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Octree",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Octree_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Octree" "', argument " "1"" of type '" "Octree *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Octree > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Octree > * >(argp1);
      arg1 = const_cast< Octree * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Octree > * >(argp1);
      arg1 = const_cast< Octree * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (void)arg1; delete smartarg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Octree_Lock(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Octree *arg1 = (Octree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Octree > tempshared1 ;
  std::tr1::shared_ptr< Octree > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Octree_Lock",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Octree_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Octree_Lock" "', argument " "1"" of type '" "Octree *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Octree > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Octree > * >(argp1);
      arg1 = const_cast< Octree * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Octree > * >(argp1);
      arg1 = const_cast< Octree * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (arg1)->Lock();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Octree_Unlock(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Octree *arg1 = (Octree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Octree > tempshared1 ;
  std::tr1::shared_ptr< Octree > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Octree_Unlock",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Octree_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Octree_Unlock" "', argument " "1"" of type '" "Octree *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Octree > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Octree > * >(argp1);
      arg1 = const_cast< Octree * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Octree > * >(argp1);
      arg1 = const_cast< Octree * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (arg1)->Unlock();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Octree_getBox(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Octree *arg1 = (Octree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Octree > tempshared1 ;
  std::tr1::shared_ptr< Octree > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  Box3f result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Octree_getBox",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Octree_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Octree_getBox" "', argument " "1"" of type '" "Octree *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Octree > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Octree > * >(argp1);
      arg1 = const_cast< Octree * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Octree > * >(argp1);
      arg1 = const_cast< Octree * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (arg1)->getBox();
  resultobj = SWIG_NewPointerObj((new Box3f(static_cast< const Box3f& >(result))), SWIGTYPE_p_Box3f, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Octree_getNumNodes__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Octree *arg1 = (Octree *) 0 ;
  OctreeNode *arg2 = (OctreeNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Octree > tempshared1 ;
  std::tr1::shared_ptr< Octree > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Octree_getNumNodes",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Octree_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Octree_getNumNodes" "', argument " "1"" of type '" "Octree *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Octree > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Octree > * >(argp1);
      arg1 = const_cast< Octree * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Octree > * >(argp1);
      arg1 = const_cast< Octree * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_OctreeNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Octree_getNumNodes" "', argument " "2"" of type '" "OctreeNode *""'"); 
  }
  arg2 = reinterpret_cast< OctreeNode * >(argp2);
  result = (int)(arg1)->getNumNodes(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Octree_getNumNodes__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Octree *arg1 = (Octree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Octree > tempshared1 ;
  std::tr1::shared_ptr< Octree > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Octree_getNumNodes",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Octree_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Octree_getNumNodes" "', argument " "1"" of type '" "Octree *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Octree > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Octree > * >(argp1);
      arg1 = const_cast< Octree * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Octree > * >(argp1);
      arg1 = const_cast< Octree * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (int)(arg1)->getNumNodes();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Octree_getNumNodes(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Octree_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Octree_getNumNodes__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Octree_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_OctreeNode, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Octree_getNumNodes__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Octree_getNumNodes'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    getNumNodes(Octree *,OctreeNode *)\n"
    "    getNumNodes(Octree *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Octree_getMaxDepth__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Octree *arg1 = (Octree *) 0 ;
  OctreeNode *arg2 = (OctreeNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Octree > tempshared1 ;
  std::tr1::shared_ptr< Octree > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Octree_getMaxDepth",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Octree_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Octree_getMaxDepth" "', argument " "1"" of type '" "Octree *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Octree > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Octree > * >(argp1);
      arg1 = const_cast< Octree * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Octree > * >(argp1);
      arg1 = const_cast< Octree * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_OctreeNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Octree_getMaxDepth" "', argument " "2"" of type '" "OctreeNode *""'"); 
  }
  arg2 = reinterpret_cast< OctreeNode * >(argp2);
  result = (int)(arg1)->getMaxDepth(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Octree_getMaxDepth__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Octree *arg1 = (Octree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Octree > tempshared1 ;
  std::tr1::shared_ptr< Octree > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Octree_getMaxDepth",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Octree_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Octree_getMaxDepth" "', argument " "1"" of type '" "Octree *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Octree > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Octree > * >(argp1);
      arg1 = const_cast< Octree * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Octree > * >(argp1);
      arg1 = const_cast< Octree * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (int)(arg1)->getMaxDepth();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Octree_getMaxDepth(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Octree_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Octree_getMaxDepth__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Octree_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_OctreeNode, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Octree_getMaxDepth__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Octree_getMaxDepth'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    getMaxDepth(Octree *,OctreeNode *)\n"
    "    getMaxDepth(Octree *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Octree_getNumBatches__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Octree *arg1 = (Octree *) 0 ;
  OctreeNode *arg2 = (OctreeNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Octree > tempshared1 ;
  std::tr1::shared_ptr< Octree > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Octree_getNumBatches",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Octree_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Octree_getNumBatches" "', argument " "1"" of type '" "Octree *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Octree > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Octree > * >(argp1);
      arg1 = const_cast< Octree * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Octree > * >(argp1);
      arg1 = const_cast< Octree * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_OctreeNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Octree_getNumBatches" "', argument " "2"" of type '" "OctreeNode *""'"); 
  }
  arg2 = reinterpret_cast< OctreeNode * >(argp2);
  result = (int)(arg1)->getNumBatches(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Octree_getNumBatches__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Octree *arg1 = (Octree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Octree > tempshared1 ;
  std::tr1::shared_ptr< Octree > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Octree_getNumBatches",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Octree_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Octree_getNumBatches" "', argument " "1"" of type '" "Octree *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Octree > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Octree > * >(argp1);
      arg1 = const_cast< Octree * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Octree > * >(argp1);
      arg1 = const_cast< Octree * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (int)(arg1)->getNumBatches();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Octree_getNumBatches(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Octree_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Octree_getNumBatches__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Octree_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_OctreeNode, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Octree_getNumBatches__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Octree_getNumBatches'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    getNumBatches(Octree *,OctreeNode *)\n"
    "    getNumBatches(Octree *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Octree_printStatistics(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Octree *arg1 = (Octree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Octree > tempshared1 ;
  std::tr1::shared_ptr< Octree > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Octree_printStatistics",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Octree_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Octree_printStatistics" "', argument " "1"" of type '" "Octree *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Octree > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Octree > * >(argp1);
      arg1 = const_cast< Octree * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Octree > * >(argp1);
      arg1 = const_cast< Octree * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (arg1)->printStatistics();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Octree_getNode__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Octree *arg1 = (Octree *) 0 ;
  Box3f *arg2 = 0 ;
  OctreeNode *arg3 = (OctreeNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Octree > tempshared1 ;
  std::tr1::shared_ptr< Octree > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  OctreeNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Octree_getNode",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Octree_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Octree_getNode" "', argument " "1"" of type '" "Octree *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Octree > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Octree > * >(argp1);
      arg1 = const_cast< Octree * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Octree > * >(argp1);
      arg1 = const_cast< Octree * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Box3f,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Octree_getNode" "', argument " "2"" of type '" "Box3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Octree_getNode" "', argument " "2"" of type '" "Box3f const &""'"); 
  }
  arg2 = reinterpret_cast< Box3f * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_OctreeNode, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Octree_getNode" "', argument " "3"" of type '" "OctreeNode *""'"); 
  }
  arg3 = reinterpret_cast< OctreeNode * >(argp3);
  result = (OctreeNode *)(arg1)->getNode((Box3f const &)*arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OctreeNode, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Octree_getNode__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Octree *arg1 = (Octree *) 0 ;
  Box3f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Octree > tempshared1 ;
  std::tr1::shared_ptr< Octree > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  OctreeNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Octree_getNode",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Octree_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Octree_getNode" "', argument " "1"" of type '" "Octree *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Octree > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Octree > * >(argp1);
      arg1 = const_cast< Octree * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Octree > * >(argp1);
      arg1 = const_cast< Octree * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Box3f,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Octree_getNode" "', argument " "2"" of type '" "Box3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Octree_getNode" "', argument " "2"" of type '" "Box3f const &""'"); 
  }
  arg2 = reinterpret_cast< Box3f * >(argp2);
  result = (OctreeNode *)(arg1)->getNode((Box3f const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OctreeNode, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Octree_getNode(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Octree_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Box3f, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Octree_getNode__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Octree_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Box3f, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_OctreeNode, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Octree_getNode__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Octree_getNode'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    getNode(Octree *,Box3f const &,OctreeNode *)\n"
    "    getNode(Octree *,Box3f const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Octree_find__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Octree *arg1 = (Octree *) 0 ;
  Frustum *arg2 = (Frustum *) 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Octree > tempshared1 ;
  std::tr1::shared_ptr< Octree > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  FrustumIterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Octree_find",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Octree_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Octree_find" "', argument " "1"" of type '" "Octree *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Octree > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Octree > * >(argp1);
      arg1 = const_cast< Octree * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Octree > * >(argp1);
      arg1 = const_cast< Octree * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Frustum, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Octree_find" "', argument " "2"" of type '" "Frustum *""'"); 
  }
  arg2 = reinterpret_cast< Frustum * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Octree_find" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (arg1)->find(arg2,arg3);
  resultobj = SWIG_NewPointerObj((new FrustumIterator(static_cast< const FrustumIterator& >(result))), SWIGTYPE_p_FrustumIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Octree_find__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Octree *arg1 = (Octree *) 0 ;
  Frustum *arg2 = (Frustum *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Octree > tempshared1 ;
  std::tr1::shared_ptr< Octree > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FrustumIterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Octree_find",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Octree_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Octree_find" "', argument " "1"" of type '" "Octree *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Octree > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Octree > * >(argp1);
      arg1 = const_cast< Octree * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Octree > * >(argp1);
      arg1 = const_cast< Octree * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Frustum, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Octree_find" "', argument " "2"" of type '" "Frustum *""'"); 
  }
  arg2 = reinterpret_cast< Frustum * >(argp2);
  result = (arg1)->find(arg2);
  resultobj = SWIG_NewPointerObj((new FrustumIterator(static_cast< const FrustumIterator& >(result))), SWIGTYPE_p_FrustumIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Octree_find__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Octree *arg1 = (Octree *) 0 ;
  Ray3f *arg2 = 0 ;
  float arg3 ;
  float arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Octree > tempshared1 ;
  std::tr1::shared_ptr< Octree > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  SwigValueWrapper< RayIterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Octree_find",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Octree_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Octree_find" "', argument " "1"" of type '" "Octree *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Octree > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Octree > * >(argp1);
      arg1 = const_cast< Octree * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Octree > * >(argp1);
      arg1 = const_cast< Octree * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Ray3f,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Octree_find" "', argument " "2"" of type '" "Ray3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Octree_find" "', argument " "2"" of type '" "Ray3f const &""'"); 
  }
  arg2 = reinterpret_cast< Ray3f * >(argp2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Octree_find" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Octree_find" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  result = (arg1)->find((Ray3f const &)*arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj((new RayIterator(static_cast< const RayIterator& >(result))), SWIGTYPE_p_RayIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Octree_find__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Octree *arg1 = (Octree *) 0 ;
  Ray3f *arg2 = 0 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Octree > tempshared1 ;
  std::tr1::shared_ptr< Octree > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< RayIterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Octree_find",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Octree_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Octree_find" "', argument " "1"" of type '" "Octree *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Octree > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Octree > * >(argp1);
      arg1 = const_cast< Octree * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Octree > * >(argp1);
      arg1 = const_cast< Octree * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Ray3f,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Octree_find" "', argument " "2"" of type '" "Ray3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Octree_find" "', argument " "2"" of type '" "Ray3f const &""'"); 
  }
  arg2 = reinterpret_cast< Ray3f * >(argp2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Octree_find" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  result = (arg1)->find((Ray3f const &)*arg2,arg3);
  resultobj = SWIG_NewPointerObj((new RayIterator(static_cast< const RayIterator& >(result))), SWIGTYPE_p_RayIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Octree_find__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Octree *arg1 = (Octree *) 0 ;
  Ray3f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Octree > tempshared1 ;
  std::tr1::shared_ptr< Octree > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< RayIterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Octree_find",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Octree_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Octree_find" "', argument " "1"" of type '" "Octree *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Octree > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Octree > * >(argp1);
      arg1 = const_cast< Octree * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Octree > * >(argp1);
      arg1 = const_cast< Octree * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Ray3f,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Octree_find" "', argument " "2"" of type '" "Ray3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Octree_find" "', argument " "2"" of type '" "Ray3f const &""'"); 
  }
  arg2 = reinterpret_cast< Ray3f * >(argp2);
  result = (arg1)->find((Ray3f const &)*arg2);
  resultobj = SWIG_NewPointerObj((new RayIterator(static_cast< const RayIterator& >(result))), SWIGTYPE_p_RayIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Octree_find(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Octree_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Frustum, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Octree_find__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Octree_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Ray3f, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Octree_find__SWIG_4(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Octree_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Ray3f, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Octree_find__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Octree_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Frustum, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Octree_find__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Octree_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Ray3f, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Octree_find__SWIG_2(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Octree_find'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    find(Octree *,Frustum *,bool)\n"
    "    find(Octree *,Frustum *)\n"
    "    find(Octree *,Ray3f const &,float,float)\n"
    "    find(Octree *,Ray3f const &,float)\n"
    "    find(Octree *,Ray3f const &)\n");
  return NULL;
}


SWIGINTERN PyObject *Octree_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__tr1__shared_ptrT_Octree_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_Unwrapper_texture_template_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Unwrapper *arg1 = (Unwrapper *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Unwrapper_texture_template_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Unwrapper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unwrapper_texture_template_set" "', argument " "1"" of type '" "Unwrapper *""'"); 
  }
  arg1 = reinterpret_cast< Unwrapper * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Unwrapper_texture_template_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Unwrapper_texture_template_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->texture_template = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unwrapper_texture_template_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Unwrapper *arg1 = (Unwrapper *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unwrapper_texture_template_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Unwrapper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unwrapper_texture_template_get" "', argument " "1"" of type '" "Unwrapper *""'"); 
  }
  arg1 = reinterpret_cast< Unwrapper * >(argp1);
  result = (std::string *) & ((arg1)->texture_template);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unwrapper_texturedim_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Unwrapper *arg1 = (Unwrapper *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Unwrapper_texturedim_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Unwrapper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unwrapper_texturedim_set" "', argument " "1"" of type '" "Unwrapper *""'"); 
  }
  arg1 = reinterpret_cast< Unwrapper * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Unwrapper_texturedim_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  if (arg1) (arg1)->texturedim = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unwrapper_texturedim_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Unwrapper *arg1 = (Unwrapper *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unwrapper_texturedim_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Unwrapper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unwrapper_texturedim_get" "', argument " "1"" of type '" "Unwrapper *""'"); 
  }
  arg1 = reinterpret_cast< Unwrapper * >(argp1);
  result = (unsigned int) ((arg1)->texturedim);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unwrapper_factor_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Unwrapper *arg1 = (Unwrapper *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Unwrapper_factor_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Unwrapper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unwrapper_factor_set" "', argument " "1"" of type '" "Unwrapper *""'"); 
  }
  arg1 = reinterpret_cast< Unwrapper * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Unwrapper_factor_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->factor = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unwrapper_factor_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Unwrapper *arg1 = (Unwrapper *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unwrapper_factor_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Unwrapper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unwrapper_factor_get" "', argument " "1"" of type '" "Unwrapper *""'"); 
  }
  arg1 = reinterpret_cast< Unwrapper * >(argp1);
  result = (float) ((arg1)->factor);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Unwrapper(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Unwrapper *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Unwrapper")) SWIG_fail;
  result = (Unwrapper *)new Unwrapper();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Unwrapper, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unwrapper_Unwrap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Unwrapper *arg1 = (Unwrapper *) 0 ;
  Mat4f arg2 ;
  std::tr1::shared_ptr< Batch > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Unwrapper_Unwrap",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Unwrapper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unwrapper_Unwrap" "', argument " "1"" of type '" "Unwrapper *""'"); 
  }
  arg1 = reinterpret_cast< Unwrapper * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Mat4f,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Unwrapper_Unwrap" "', argument " "2"" of type '" "Mat4f""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Unwrapper_Unwrap" "', argument " "2"" of type '" "Mat4f""'");
    } else {
      Mat4f * temp = reinterpret_cast< Mat4f * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_std__tr1__shared_ptrT_Batch_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Unwrapper_Unwrap" "', argument " "3"" of type '" "std::tr1::shared_ptr< Batch >""'"); 
    }
    if (argp3) arg3 = *(reinterpret_cast< std::tr1::shared_ptr< Batch > * >(argp3));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< std::tr1::shared_ptr< Batch > * >(argp3);
  }
  result = (arg1)->Unwrap(arg2,arg3);
  resultobj = swig::from(static_cast< std::vector<std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unwrapper_getNewLightTextures(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Unwrapper *arg1 = (Unwrapper *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::tr1::shared_ptr< Texture >,std::allocator< std::tr1::shared_ptr< Texture > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unwrapper_getNewLightTextures",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Unwrapper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unwrapper_getNewLightTextures" "', argument " "1"" of type '" "Unwrapper *""'"); 
  }
  arg1 = reinterpret_cast< Unwrapper * >(argp1);
  result = (arg1)->getNewLightTextures();
  resultobj = swig::from(static_cast< std::vector<std::tr1::shared_ptr< Texture >,std::allocator< std::tr1::shared_ptr< Texture > > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Unwrapper(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Unwrapper *arg1 = (Unwrapper *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Unwrapper",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Unwrapper, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Unwrapper" "', argument " "1"" of type '" "Unwrapper *""'"); 
  }
  arg1 = reinterpret_cast< Unwrapper * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Unwrapper_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Unwrapper, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_Bake_DebugMode_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Bake *arg1 = (Bake *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Bake_DebugMode_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Bake, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bake_DebugMode_set" "', argument " "1"" of type '" "Bake *""'"); 
  }
  arg1 = reinterpret_cast< Bake * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Bake_DebugMode_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->DebugMode = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Bake_DebugMode_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Bake *arg1 = (Bake *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Bake_DebugMode_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Bake, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bake_DebugMode_get" "', argument " "1"" of type '" "Bake *""'"); 
  }
  arg1 = reinterpret_cast< Bake * >(argp1);
  result = (bool) ((arg1)->DebugMode);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Bake_PointOcclusion_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Bake *arg1 = (Bake *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Bake_PointOcclusion_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Bake, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bake_PointOcclusion_set" "', argument " "1"" of type '" "Bake *""'"); 
  }
  arg1 = reinterpret_cast< Bake * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Bake_PointOcclusion_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->PointOcclusion = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Bake_PointOcclusion_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Bake *arg1 = (Bake *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Bake_PointOcclusion_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Bake, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bake_PointOcclusion_get" "', argument " "1"" of type '" "Bake *""'"); 
  }
  arg1 = reinterpret_cast< Bake * >(argp1);
  result = (bool) ((arg1)->PointOcclusion);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Bake(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Bake *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Bake")) SWIG_fail;
  result = (Bake *)new Bake();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Bake, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Bake_Unwrap__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Bake *arg1 = (Bake *) 0 ;
  std::vector< std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > arg2 ;
  float arg3 ;
  std::string arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  std::vector< std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Bake_Unwrap",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Bake, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bake_Unwrap" "', argument " "1"" of type '" "Bake *""'"); 
  }
  arg1 = reinterpret_cast< Bake * >(argp1);
  {
    std::vector<std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > *ptr = (std::vector<std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > *)0;
    int res = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Bake_Unwrap" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > >""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Bake_Unwrap" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Bake_Unwrap" "', argument " "4"" of type '" "std::string""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Bake_Unwrap" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  result = (arg1)->Unwrap(arg2,arg3,arg4,arg5);
  resultobj = swig::from(static_cast< std::vector<std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Bake_Unwrap__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Bake *arg1 = (Bake *) 0 ;
  std::vector< std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > arg2 ;
  float arg3 ;
  std::string arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  std::vector< std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Bake_Unwrap",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Bake, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bake_Unwrap" "', argument " "1"" of type '" "Bake *""'"); 
  }
  arg1 = reinterpret_cast< Bake * >(argp1);
  {
    std::vector<std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > *ptr = (std::vector<std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > *)0;
    int res = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Bake_Unwrap" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > >""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Bake_Unwrap" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Bake_Unwrap" "', argument " "4"" of type '" "std::string""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (arg1)->Unwrap(arg2,arg3,arg4);
  resultobj = swig::from(static_cast< std::vector<std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Bake_Unwrap(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 5); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Bake, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector<std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_Bake_Unwrap__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Bake, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector<std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_Bake_Unwrap__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Bake_Unwrap'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Unwrap(Bake *,std::vector< std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > >,float,std::string,int)\n"
    "    Unwrap(Bake *,std::vector< std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > >,float,std::string)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Bake_Add__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Bake *arg1 = (Bake *) 0 ;
  Mat4f arg2 ;
  std::tr1::shared_ptr< Batch > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Bake_Add",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Bake, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bake_Add" "', argument " "1"" of type '" "Bake *""'"); 
  }
  arg1 = reinterpret_cast< Bake * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Mat4f,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Bake_Add" "', argument " "2"" of type '" "Mat4f""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Bake_Add" "', argument " "2"" of type '" "Mat4f""'");
    } else {
      Mat4f * temp = reinterpret_cast< Mat4f * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_std__tr1__shared_ptrT_Batch_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Bake_Add" "', argument " "3"" of type '" "std::tr1::shared_ptr< Batch >""'"); 
    }
    if (argp3) arg3 = *(reinterpret_cast< std::tr1::shared_ptr< Batch > * >(argp3));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< std::tr1::shared_ptr< Batch > * >(argp3);
  }
  (arg1)->Add(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Bake_Add__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Bake *arg1 = (Bake *) 0 ;
  std::vector< std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Bake_Add",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Bake, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bake_Add" "', argument " "1"" of type '" "Bake *""'"); 
  }
  arg1 = reinterpret_cast< Bake * >(argp1);
  {
    std::vector<std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > *ptr = (std::vector<std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > *)0;
    int res = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Bake_Add" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > >""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  (arg1)->Add(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Bake_Add(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Bake, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector<std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Bake_Add__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Bake, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Mat4f, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Batch_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Bake_Add__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Bake_Add'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Add(Bake *,Mat4f,std::tr1::shared_ptr< Batch >)\n"
    "    Add(Bake *,std::vector< std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > >)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Bake_Export(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Bake *arg1 = (Bake *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Bake_Export",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Bake, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bake_Export" "', argument " "1"" of type '" "Bake *""'"); 
  }
  arg1 = reinterpret_cast< Bake * >(argp1);
  result = (bool)(arg1)->Export();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Bake_Run(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Bake *arg1 = (Bake *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Bake_Run",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Bake, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bake_Run" "', argument " "1"" of type '" "Bake *""'"); 
  }
  arg1 = reinterpret_cast< Bake * >(argp1);
  result = (bool)(arg1)->Run();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Bake_PostProcess(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Bake *arg1 = (Bake *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Bake_PostProcess",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Bake, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bake_PostProcess" "', argument " "1"" of type '" "Bake *""'"); 
  }
  arg1 = reinterpret_cast< Bake * >(argp1);
  result = (bool)(arg1)->PostProcess();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Bake_SelfTest(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":Bake_SelfTest")) SWIG_fail;
  result = (int)Bake::SelfTest();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Bake(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Bake *arg1 = (Bake *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Bake",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Bake, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Bake" "', argument " "1"" of type '" "Bake *""'"); 
  }
  arg1 = reinterpret_cast< Bake * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Bake_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Bake, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_xge_total_hpc_set(PyObject *_val) {
  {
    unsigned long val;
    int res = SWIG_AsVal_unsigned_SS_long(_val, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""xge_total_hpc""' of type '""unsigned long""'");
    }
    xge_total_hpc = static_cast< unsigned long >(val);
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_xge_total_hpc_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(xge_total_hpc));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_Hpc_Write(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Hpc *arg1 = (Hpc *) 0 ;
  Archive *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Hpc > tempshared1 ;
  std::tr1::shared_ptr< Hpc > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Hpc_Write",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hpc_Write" "', argument " "1"" of type '" "Hpc *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Hpc > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Hpc > * >(argp1);
      arg1 = const_cast< Hpc * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Hpc > * >(argp1);
      arg1 = const_cast< Hpc * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Archive,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Hpc_Write" "', argument " "2"" of type '" "Archive &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Hpc_Write" "', argument " "2"" of type '" "Archive &""'"); 
  }
  arg2 = reinterpret_cast< Archive * >(argp2);
  (arg1)->Write(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hpc_Read(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Hpc *arg1 = (Hpc *) 0 ;
  Archive *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Hpc > tempshared1 ;
  std::tr1::shared_ptr< Hpc > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Hpc_Read",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hpc_Read" "', argument " "1"" of type '" "Hpc *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Hpc > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Hpc > * >(argp1);
      arg1 = const_cast< Hpc * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Hpc > * >(argp1);
      arg1 = const_cast< Hpc * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Archive,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Hpc_Read" "', argument " "2"" of type '" "Archive &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Hpc_Read" "', argument " "2"" of type '" "Archive &""'"); 
  }
  arg2 = reinterpret_cast< Archive * >(argp2);
  (arg1)->Read(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hpc_spacedim_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Hpc *arg1 = (Hpc *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Hpc > tempshared1 ;
  std::tr1::shared_ptr< Hpc > *smartarg1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Hpc_spacedim_set",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hpc_spacedim_set" "', argument " "1"" of type '" "Hpc *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Hpc > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Hpc > * >(argp1);
      arg1 = const_cast< Hpc * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Hpc > * >(argp1);
      arg1 = const_cast< Hpc * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Hpc_spacedim_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->spacedim = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hpc_spacedim_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Hpc *arg1 = (Hpc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Hpc > tempshared1 ;
  std::tr1::shared_ptr< Hpc > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Hpc_spacedim_get",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hpc_spacedim_get" "', argument " "1"" of type '" "Hpc *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Hpc > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Hpc > * >(argp1);
      arg1 = const_cast< Hpc * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Hpc > * >(argp1);
      arg1 = const_cast< Hpc * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (int) ((arg1)->spacedim);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hpc_pointdim_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Hpc *arg1 = (Hpc *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Hpc > tempshared1 ;
  std::tr1::shared_ptr< Hpc > *smartarg1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Hpc_pointdim_set",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hpc_pointdim_set" "', argument " "1"" of type '" "Hpc *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Hpc > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Hpc > * >(argp1);
      arg1 = const_cast< Hpc * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Hpc > * >(argp1);
      arg1 = const_cast< Hpc * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Hpc_pointdim_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->pointdim = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hpc_pointdim_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Hpc *arg1 = (Hpc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Hpc > tempshared1 ;
  std::tr1::shared_ptr< Hpc > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Hpc_pointdim_get",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hpc_pointdim_get" "', argument " "1"" of type '" "Hpc *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Hpc > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Hpc > * >(argp1);
      arg1 = const_cast< Hpc * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Hpc > * >(argp1);
      arg1 = const_cast< Hpc * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (int) ((arg1)->pointdim);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hpc_vmat_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Hpc *arg1 = (Hpc *) 0 ;
  std::tr1::shared_ptr< Matf > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Hpc > tempshared1 ;
  std::tr1::shared_ptr< Hpc > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::tr1::shared_ptr< Matf > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Hpc_vmat_set",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hpc_vmat_set" "', argument " "1"" of type '" "Hpc *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Hpc > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Hpc > * >(argp1);
      arg1 = const_cast< Hpc * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Hpc > * >(argp1);
      arg1 = const_cast< Hpc * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Hpc_vmat_set" "', argument " "2"" of type '" "std::tr1::shared_ptr< Matf > const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< std::tr1::shared_ptr< Matf > * >(argp2);
      delete reinterpret_cast< std::tr1::shared_ptr< Matf > * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< std::tr1::shared_ptr< Matf > * >(argp2) : &tempshared2;
    }
  }
  if (arg1) (arg1)->vmat = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hpc_vmat_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Hpc *arg1 = (Hpc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Hpc > tempshared1 ;
  std::tr1::shared_ptr< Hpc > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  std::tr1::shared_ptr< Matf > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Hpc_vmat_get",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hpc_vmat_get" "', argument " "1"" of type '" "Hpc *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Hpc > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Hpc > * >(argp1);
      arg1 = const_cast< Hpc * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Hpc > * >(argp1);
      arg1 = const_cast< Hpc * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (std::tr1::shared_ptr< Matf > *) & ((arg1)->vmat);
  {
    std::tr1::shared_ptr<  Matf > *smartresult = *result ? new std::tr1::shared_ptr<  Matf >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hpc_hmat_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Hpc *arg1 = (Hpc *) 0 ;
  std::tr1::shared_ptr< Matf > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Hpc > tempshared1 ;
  std::tr1::shared_ptr< Hpc > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::tr1::shared_ptr< Matf > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Hpc_hmat_set",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hpc_hmat_set" "', argument " "1"" of type '" "Hpc *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Hpc > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Hpc > * >(argp1);
      arg1 = const_cast< Hpc * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Hpc > * >(argp1);
      arg1 = const_cast< Hpc * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Hpc_hmat_set" "', argument " "2"" of type '" "std::tr1::shared_ptr< Matf > const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< std::tr1::shared_ptr< Matf > * >(argp2);
      delete reinterpret_cast< std::tr1::shared_ptr< Matf > * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< std::tr1::shared_ptr< Matf > * >(argp2) : &tempshared2;
    }
  }
  if (arg1) (arg1)->hmat = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hpc_hmat_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Hpc *arg1 = (Hpc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Hpc > tempshared1 ;
  std::tr1::shared_ptr< Hpc > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  std::tr1::shared_ptr< Matf > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Hpc_hmat_get",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hpc_hmat_get" "', argument " "1"" of type '" "Hpc *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Hpc > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Hpc > * >(argp1);
      arg1 = const_cast< Hpc * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Hpc > * >(argp1);
      arg1 = const_cast< Hpc * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (std::tr1::shared_ptr< Matf > *) & ((arg1)->hmat);
  {
    std::tr1::shared_ptr<  Matf > *smartresult = *result ? new std::tr1::shared_ptr<  Matf >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hpc_prop_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Hpc *arg1 = (Hpc *) 0 ;
  std::tr1::shared_ptr< PropertySet > *arg2 = (std::tr1::shared_ptr< PropertySet > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Hpc > tempshared1 ;
  std::tr1::shared_ptr< Hpc > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Hpc_prop_set",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hpc_prop_set" "', argument " "1"" of type '" "Hpc *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Hpc > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Hpc > * >(argp1);
      arg1 = const_cast< Hpc * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Hpc > * >(argp1);
      arg1 = const_cast< Hpc * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__tr1__shared_ptrT_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Hpc_prop_set" "', argument " "2"" of type '" "std::tr1::shared_ptr< PropertySet > *""'"); 
  }
  arg2 = reinterpret_cast< std::tr1::shared_ptr< PropertySet > * >(argp2);
  if (arg1) (arg1)->prop = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hpc_prop_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Hpc *arg1 = (Hpc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Hpc > tempshared1 ;
  std::tr1::shared_ptr< Hpc > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  std::tr1::shared_ptr< PropertySet > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Hpc_prop_get",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hpc_prop_get" "', argument " "1"" of type '" "Hpc *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Hpc > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Hpc > * >(argp1);
      arg1 = const_cast< Hpc * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Hpc > * >(argp1);
      arg1 = const_cast< Hpc * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (std::tr1::shared_ptr< PropertySet > *)& ((arg1)->prop);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__tr1__shared_ptrT_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hpc_childs_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Hpc *arg1 = (Hpc *) 0 ;
  std::vector< std::tr1::shared_ptr< Hpc >,std::allocator< std::tr1::shared_ptr< Hpc > > > *arg2 = (std::vector< std::tr1::shared_ptr< Hpc >,std::allocator< std::tr1::shared_ptr< Hpc > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Hpc > tempshared1 ;
  std::tr1::shared_ptr< Hpc > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Hpc_childs_set",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hpc_childs_set" "', argument " "1"" of type '" "Hpc *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Hpc > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Hpc > * >(argp1);
      arg1 = const_cast< Hpc * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Hpc > * >(argp1);
      arg1 = const_cast< Hpc * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Hpc_t_std__allocatorT_std__tr1__shared_ptrT_Hpc_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Hpc_childs_set" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< Hpc >,std::allocator< std::tr1::shared_ptr< Hpc > > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Hpc >,std::allocator< std::tr1::shared_ptr< Hpc > > > * >(argp2);
  if (arg1) (arg1)->childs = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hpc_childs_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Hpc *arg1 = (Hpc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Hpc > tempshared1 ;
  std::tr1::shared_ptr< Hpc > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::tr1::shared_ptr< Hpc >,std::allocator< std::tr1::shared_ptr< Hpc > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Hpc_childs_get",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hpc_childs_get" "', argument " "1"" of type '" "Hpc *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Hpc > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Hpc > * >(argp1);
      arg1 = const_cast< Hpc * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Hpc > * >(argp1);
      arg1 = const_cast< Hpc * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (std::vector< std::tr1::shared_ptr< Hpc >,std::allocator< std::tr1::shared_ptr< Hpc > > > *)& ((arg1)->childs);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Hpc_t_std__allocatorT_std__tr1__shared_ptrT_Hpc_t_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hpc_g_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Hpc *arg1 = (Hpc *) 0 ;
  std::tr1::shared_ptr< Graph > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Hpc > tempshared1 ;
  std::tr1::shared_ptr< Hpc > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::tr1::shared_ptr< Graph > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Hpc_g_set",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hpc_g_set" "', argument " "1"" of type '" "Hpc *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Hpc > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Hpc > * >(argp1);
      arg1 = const_cast< Hpc * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Hpc > * >(argp1);
      arg1 = const_cast< Hpc * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Hpc_g_set" "', argument " "2"" of type '" "std::tr1::shared_ptr< Graph > const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< std::tr1::shared_ptr< Graph > * >(argp2);
      delete reinterpret_cast< std::tr1::shared_ptr< Graph > * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< std::tr1::shared_ptr< Graph > * >(argp2) : &tempshared2;
    }
  }
  if (arg1) (arg1)->g = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hpc_g_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Hpc *arg1 = (Hpc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Hpc > tempshared1 ;
  std::tr1::shared_ptr< Hpc > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  std::tr1::shared_ptr< Graph > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Hpc_g_get",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hpc_g_get" "', argument " "1"" of type '" "Hpc *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Hpc > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Hpc > * >(argp1);
      arg1 = const_cast< Hpc * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Hpc > * >(argp1);
      arg1 = const_cast< Hpc * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (std::tr1::shared_ptr< Graph > *) & ((arg1)->g);
  {
    std::tr1::shared_ptr<  Graph > *smartresult = *result ? new std::tr1::shared_ptr<  Graph >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hpc_batches_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Hpc *arg1 = (Hpc *) 0 ;
  std::vector< std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > *arg2 = (std::vector< std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Hpc > tempshared1 ;
  std::tr1::shared_ptr< Hpc > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Hpc_batches_set",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hpc_batches_set" "', argument " "1"" of type '" "Hpc *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Hpc > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Hpc > * >(argp1);
      arg1 = const_cast< Hpc * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Hpc > * >(argp1);
      arg1 = const_cast< Hpc * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Batch_t_std__allocatorT_std__tr1__shared_ptrT_Batch_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Hpc_batches_set" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > * >(argp2);
  if (arg1) (arg1)->batches = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hpc_batches_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Hpc *arg1 = (Hpc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Hpc > tempshared1 ;
  std::tr1::shared_ptr< Hpc > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Hpc_batches_get",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hpc_batches_get" "', argument " "1"" of type '" "Hpc *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Hpc > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Hpc > * >(argp1);
      arg1 = const_cast< Hpc * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Hpc > * >(argp1);
      arg1 = const_cast< Hpc * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (std::vector< std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > *)& ((arg1)->batches);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__tr1__shared_ptrT_Batch_t_std__allocatorT_std__tr1__shared_ptrT_Batch_t_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Hpc__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Hpc *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Hpc")) SWIG_fail;
  result = (Hpc *)new Hpc();
  {
    std::tr1::shared_ptr<  Hpc > *smartresult = result ? new std::tr1::shared_ptr<  Hpc >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Hpc__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Hpc *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Hpc const > tempshared1 ;
  PyObject * obj0 = 0 ;
  Hpc *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Hpc",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Hpc" "', argument " "1"" of type '" "Hpc const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Hpc" "', argument " "1"" of type '" "Hpc const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr< const Hpc > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr< const Hpc > * >(argp1);
      arg1 = const_cast< Hpc * >(tempshared1.get());
    } else {
      arg1 = const_cast< Hpc * >(reinterpret_cast< std::tr1::shared_ptr< const Hpc > * >(argp1)->get());
    }
  }
  result = (Hpc *)new Hpc((Hpc const &)*arg1);
  {
    std::tr1::shared_ptr<  Hpc > *smartresult = result ? new std::tr1::shared_ptr<  Hpc >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Hpc__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::tr1::shared_ptr< Graph > arg1 ;
  std::tr1::shared_ptr< Matf > arg2 ;
  std::tr1::shared_ptr< Matf > arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Hpc *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_Hpc",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Hpc" "', argument " "1"" of type '" "std::tr1::shared_ptr< Graph >""'"); 
    }
    if (argp1) arg1 = *(reinterpret_cast< std::tr1::shared_ptr< Graph > * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< std::tr1::shared_ptr< Graph > * >(argp1);
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Hpc" "', argument " "2"" of type '" "std::tr1::shared_ptr< Matf >""'"); 
    }
    if (argp2) arg2 = *(reinterpret_cast< std::tr1::shared_ptr< Matf > * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< std::tr1::shared_ptr< Matf > * >(argp2);
  }
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_Hpc" "', argument " "3"" of type '" "std::tr1::shared_ptr< Matf >""'"); 
    }
    if (argp3) arg3 = *(reinterpret_cast< std::tr1::shared_ptr< Matf > * >(argp3));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< std::tr1::shared_ptr< Matf > * >(argp3);
  }
  result = (Hpc *)new Hpc(arg1,arg2,arg3);
  {
    std::tr1::shared_ptr<  Hpc > *smartresult = result ? new std::tr1::shared_ptr<  Hpc >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Hpc__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::tr1::shared_ptr< Graph > arg1 ;
  std::tr1::shared_ptr< Matf > arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Hpc *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Hpc",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Hpc" "', argument " "1"" of type '" "std::tr1::shared_ptr< Graph >""'"); 
    }
    if (argp1) arg1 = *(reinterpret_cast< std::tr1::shared_ptr< Graph > * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< std::tr1::shared_ptr< Graph > * >(argp1);
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Hpc" "', argument " "2"" of type '" "std::tr1::shared_ptr< Matf >""'"); 
    }
    if (argp2) arg2 = *(reinterpret_cast< std::tr1::shared_ptr< Matf > * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< std::tr1::shared_ptr< Matf > * >(argp2);
  }
  result = (Hpc *)new Hpc(arg1,arg2);
  {
    std::tr1::shared_ptr<  Hpc > *smartresult = result ? new std::tr1::shared_ptr<  Hpc >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Hpc__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::tr1::shared_ptr< Graph > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Hpc *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Hpc",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Hpc" "', argument " "1"" of type '" "std::tr1::shared_ptr< Graph >""'"); 
    }
    if (argp1) arg1 = *(reinterpret_cast< std::tr1::shared_ptr< Graph > * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< std::tr1::shared_ptr< Graph > * >(argp1);
  }
  result = (Hpc *)new Hpc(arg1);
  {
    std::tr1::shared_ptr<  Hpc > *smartresult = result ? new std::tr1::shared_ptr<  Hpc >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Hpc__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  std::tr1::shared_ptr< Matf > arg3 ;
  std::tr1::shared_ptr< Matf > arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Hpc *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_Hpc",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Hpc" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Hpc" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_Hpc" "', argument " "3"" of type '" "std::tr1::shared_ptr< Matf >""'"); 
    }
    if (argp3) arg3 = *(reinterpret_cast< std::tr1::shared_ptr< Matf > * >(argp3));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< std::tr1::shared_ptr< Matf > * >(argp3);
  }
  {
    int newmem = 0;
    res4 = SWIG_ConvertPtrAndOwn(obj3, &argp4, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t,  0 , &newmem);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_Hpc" "', argument " "4"" of type '" "std::tr1::shared_ptr< Matf >""'"); 
    }
    if (argp4) arg4 = *(reinterpret_cast< std::tr1::shared_ptr< Matf > * >(argp4));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< std::tr1::shared_ptr< Matf > * >(argp4);
  }
  result = (Hpc *)new Hpc(arg1,arg2,arg3,arg4);
  {
    std::tr1::shared_ptr<  Hpc > *smartresult = result ? new std::tr1::shared_ptr<  Hpc >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Hpc__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  std::tr1::shared_ptr< Matf > arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Hpc *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_Hpc",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Hpc" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Hpc" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_Hpc" "', argument " "3"" of type '" "std::tr1::shared_ptr< Matf >""'"); 
    }
    if (argp3) arg3 = *(reinterpret_cast< std::tr1::shared_ptr< Matf > * >(argp3));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< std::tr1::shared_ptr< Matf > * >(argp3);
  }
  result = (Hpc *)new Hpc(arg1,arg2,arg3);
  {
    std::tr1::shared_ptr<  Hpc > *smartresult = result ? new std::tr1::shared_ptr<  Hpc >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Hpc__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Hpc *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Hpc",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Hpc" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Hpc" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (Hpc *)new Hpc(arg1,arg2);
  {
    std::tr1::shared_ptr<  Hpc > *smartresult = result ? new std::tr1::shared_ptr<  Hpc >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Hpc(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Hpc__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Hpc__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Hpc__SWIG_4(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_Hpc__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Hpc__SWIG_7(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Graph_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_Hpc__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_Hpc__SWIG_6(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_new_Hpc__SWIG_5(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Hpc'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Hpc()\n"
    "    Hpc(Hpc const &)\n"
    "    Hpc(std::tr1::shared_ptr< Graph >,std::tr1::shared_ptr< Matf >,std::tr1::shared_ptr< Matf >)\n"
    "    Hpc(std::tr1::shared_ptr< Graph >,std::tr1::shared_ptr< Matf >)\n"
    "    Hpc(std::tr1::shared_ptr< Graph >)\n"
    "    Hpc(int,int,std::tr1::shared_ptr< Matf >,std::tr1::shared_ptr< Matf >)\n"
    "    Hpc(int,int,std::tr1::shared_ptr< Matf >)\n"
    "    Hpc(int,int)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Hpc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Hpc *arg1 = (Hpc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Hpc > tempshared1 ;
  std::tr1::shared_ptr< Hpc > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Hpc",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Hpc" "', argument " "1"" of type '" "Hpc *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Hpc > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Hpc > * >(argp1);
      arg1 = const_cast< Hpc * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Hpc > * >(argp1);
      arg1 = const_cast< Hpc * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (void)arg1; delete smartarg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hpc_getNumberOfChilds(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Hpc *arg1 = (Hpc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Hpc const > tempshared1 ;
  std::tr1::shared_ptr< Hpc const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Hpc_getNumberOfChilds",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hpc_getNumberOfChilds" "', argument " "1"" of type '" "Hpc const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr< const Hpc > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr< const Hpc > * >(argp1);
      arg1 = const_cast< Hpc * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr< const Hpc > * >(argp1);
      arg1 = const_cast< Hpc * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (int)((Hpc const *)arg1)->getNumberOfChilds();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hpc_add(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Hpc *arg1 = (Hpc *) 0 ;
  std::tr1::shared_ptr< Hpc > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Hpc > tempshared1 ;
  std::tr1::shared_ptr< Hpc > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Hpc_add",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hpc_add" "', argument " "1"" of type '" "Hpc *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Hpc > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Hpc > * >(argp1);
      arg1 = const_cast< Hpc * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Hpc > * >(argp1);
      arg1 = const_cast< Hpc * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Hpc_add" "', argument " "2"" of type '" "std::tr1::shared_ptr< Hpc >""'"); 
    }
    if (argp2) arg2 = *(reinterpret_cast< std::tr1::shared_ptr< Hpc > * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< std::tr1::shared_ptr< Hpc > * >(argp2);
  }
  (arg1)->add(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hpc_fixDimensions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Hpc *arg1 = (Hpc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Hpc > tempshared1 ;
  std::tr1::shared_ptr< Hpc > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Hpc_fixDimensions",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hpc_fixDimensions" "', argument " "1"" of type '" "Hpc *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::tr1::shared_ptr<  Hpc > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr<  Hpc > * >(argp1);
      arg1 = const_cast< Hpc * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::tr1::shared_ptr<  Hpc > * >(argp1);
      arg1 = const_cast< Hpc * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (arg1)->fixDimensions();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Hpc_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_Plasm_dereference(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::tr1::shared_ptr< Hpc > *arg1 = (std::tr1::shared_ptr< Hpc > *) 0 ;
  void *argp1 ;
  int res1 = 0 ;
  std::tr1::shared_ptr< Hpc > tempshared1 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Plasm_dereference",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plasm_dereference" "', argument " "1"" of type '" "std::tr1::shared_ptr< Hpc > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp1) tempshared1 = *reinterpret_cast< std::tr1::shared_ptr< Hpc > * >(argp1);
      delete reinterpret_cast< std::tr1::shared_ptr< Hpc > * >(argp1);
      arg1 = &tempshared1;
    } else {
      arg1 = (argp1) ? reinterpret_cast< std::tr1::shared_ptr< Hpc > * >(argp1) : &tempshared1;
    }
  }
  Plasm::dereference(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plasm_cube__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  float arg2 ;
  float arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::tr1::shared_ptr< Hpc > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Plasm_cube",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Plasm_cube" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Plasm_cube" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Plasm_cube" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  result = Plasm::cube(arg1,arg2,arg3);
  {
    std::tr1::shared_ptr<  Hpc > *smartresult = result ? new std::tr1::shared_ptr<  Hpc >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plasm_cube__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  float arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::tr1::shared_ptr< Hpc > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Plasm_cube",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Plasm_cube" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Plasm_cube" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  result = Plasm::cube(arg1,arg2);
  {
    std::tr1::shared_ptr<  Hpc > *smartresult = result ? new std::tr1::shared_ptr<  Hpc >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plasm_cube__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::tr1::shared_ptr< Hpc > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Plasm_cube",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Plasm_cube" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = Plasm::cube(arg1);
  {
    std::tr1::shared_ptr<  Hpc > *smartresult = result ? new std::tr1::shared_ptr<  Hpc >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plasm_cube(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Plasm_cube__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Plasm_cube__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Plasm_cube__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Plasm_cube'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    cube(int,float,float)\n"
    "    cube(int,float)\n"
    "    Plasm::cube(int)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plasm_simplex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::tr1::shared_ptr< Hpc > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Plasm_simplex",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Plasm_simplex" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = Plasm::simplex(arg1);
  {
    std::tr1::shared_ptr<  Hpc > *smartresult = result ? new std::tr1::shared_ptr<  Hpc >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plasm_mkpol__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  std::vector< float,std::allocator< float > > *arg2 = 0 ;
  std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *arg3 = 0 ;
  float arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  float val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  std::tr1::shared_ptr< Hpc > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Plasm_mkpol",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Plasm_mkpol" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    std::vector<float,std::allocator< float > > *ptr = (std::vector<float,std::allocator< float > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Plasm_mkpol" "', argument " "2"" of type '" "std::vector< float,std::allocator< float > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Plasm_mkpol" "', argument " "2"" of type '" "std::vector< float,std::allocator< float > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *ptr = (std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Plasm_mkpol" "', argument " "3"" of type '" "std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Plasm_mkpol" "', argument " "3"" of type '" "std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const &""'"); 
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Plasm_mkpol" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  result = Plasm::mkpol(arg1,(std::vector< float,std::allocator< float > > const &)*arg2,(std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const &)*arg3,arg4);
  {
    std::tr1::shared_ptr<  Hpc > *smartresult = result ? new std::tr1::shared_ptr<  Hpc >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t, SWIG_POINTER_OWN);
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plasm_mkpol__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  std::vector< float,std::allocator< float > > *arg2 = 0 ;
  std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *arg3 = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::tr1::shared_ptr< Hpc > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Plasm_mkpol",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Plasm_mkpol" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    std::vector<float,std::allocator< float > > *ptr = (std::vector<float,std::allocator< float > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Plasm_mkpol" "', argument " "2"" of type '" "std::vector< float,std::allocator< float > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Plasm_mkpol" "', argument " "2"" of type '" "std::vector< float,std::allocator< float > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *ptr = (std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Plasm_mkpol" "', argument " "3"" of type '" "std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Plasm_mkpol" "', argument " "3"" of type '" "std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = Plasm::mkpol(arg1,(std::vector< float,std::allocator< float > > const &)*arg2,(std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const &)*arg3);
  {
    std::tr1::shared_ptr<  Hpc > *smartresult = result ? new std::tr1::shared_ptr<  Hpc >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t, SWIG_POINTER_OWN);
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plasm_mkpol(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector<float,std::allocator< float > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Plasm_mkpol__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector<float,std::allocator< float > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Plasm_mkpol__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Plasm_mkpol'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mkpol(int,std::vector< float,std::allocator< float > > const &,std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const &,float)\n"
    "    Plasm::mkpol(int,std::vector< float,std::allocator< float > > const &,std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plasm_ukpol(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::tr1::shared_ptr< Hpc > arg1 ;
  std::vector< float,std::allocator< float > > *arg2 = 0 ;
  std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *arg3 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Plasm_ukpol",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plasm_ukpol" "', argument " "1"" of type '" "std::tr1::shared_ptr< Hpc >""'"); 
    }
    if (argp1) arg1 = *(reinterpret_cast< std::tr1::shared_ptr< Hpc > * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< std::tr1::shared_ptr< Hpc > * >(argp1);
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Plasm_ukpol" "', argument " "2"" of type '" "std::vector< float,std::allocator< float > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Plasm_ukpol" "', argument " "2"" of type '" "std::vector< float,std::allocator< float > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< float,std::allocator< float > > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Plasm_ukpol" "', argument " "3"" of type '" "std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Plasm_ukpol" "', argument " "3"" of type '" "std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > * >(argp3);
  result = (int)Plasm::ukpol(arg1,*arg2,*arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plasm_ukpolf(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::tr1::shared_ptr< Hpc > arg1 ;
  std::vector< float,std::allocator< float > > *arg2 = 0 ;
  std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *arg3 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Plasm_ukpolf",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plasm_ukpolf" "', argument " "1"" of type '" "std::tr1::shared_ptr< Hpc >""'"); 
    }
    if (argp1) arg1 = *(reinterpret_cast< std::tr1::shared_ptr< Hpc > * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< std::tr1::shared_ptr< Hpc > * >(argp1);
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Plasm_ukpolf" "', argument " "2"" of type '" "std::vector< float,std::allocator< float > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Plasm_ukpolf" "', argument " "2"" of type '" "std::vector< float,std::allocator< float > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< float,std::allocator< float > > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Plasm_ukpolf" "', argument " "3"" of type '" "std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Plasm_ukpolf" "', argument " "3"" of type '" "std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > * >(argp3);
  result = (int)Plasm::ukpolf(arg1,*arg2,*arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plasm_getSpaceDim(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::tr1::shared_ptr< Hpc > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Plasm_getSpaceDim",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plasm_getSpaceDim" "', argument " "1"" of type '" "std::tr1::shared_ptr< Hpc >""'"); 
    }
    if (argp1) arg1 = *(reinterpret_cast< std::tr1::shared_ptr< Hpc > * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< std::tr1::shared_ptr< Hpc > * >(argp1);
  }
  result = (int)Plasm::getSpaceDim(arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plasm_getPointDim(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::tr1::shared_ptr< Hpc > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Plasm_getPointDim",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plasm_getPointDim" "', argument " "1"" of type '" "std::tr1::shared_ptr< Hpc >""'"); 
    }
    if (argp1) arg1 = *(reinterpret_cast< std::tr1::shared_ptr< Hpc > * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< std::tr1::shared_ptr< Hpc > * >(argp1);
  }
  result = (int)Plasm::getPointDim(arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plasm_limits(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::tr1::shared_ptr< Hpc > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Boxf result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Plasm_limits",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plasm_limits" "', argument " "1"" of type '" "std::tr1::shared_ptr< Hpc >""'"); 
    }
    if (argp1) arg1 = *(reinterpret_cast< std::tr1::shared_ptr< Hpc > * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< std::tr1::shared_ptr< Hpc > * >(argp1);
  }
  result = Plasm::limits(arg1);
  resultobj = SWIG_NewPointerObj((new Boxf(static_cast< const Boxf& >(result))), SWIGTYPE_p_Boxf, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plasm_Print__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::tr1::shared_ptr< Hpc > arg1 ;
  int arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Plasm_Print",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plasm_Print" "', argument " "1"" of type '" "std::tr1::shared_ptr< Hpc >""'"); 
    }
    if (argp1) arg1 = *(reinterpret_cast< std::tr1::shared_ptr< Hpc > * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< std::tr1::shared_ptr< Hpc > * >(argp1);
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Plasm_Print" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  Plasm::Print(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plasm_Print__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::tr1::shared_ptr< Hpc > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Plasm_Print",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plasm_Print" "', argument " "1"" of type '" "std::tr1::shared_ptr< Hpc >""'"); 
    }
    if (argp1) arg1 = *(reinterpret_cast< std::tr1::shared_ptr< Hpc > * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< std::tr1::shared_ptr< Hpc > * >(argp1);
  }
  Plasm::Print(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plasm_Print(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Plasm_Print__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Plasm_Print__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Plasm_Print'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Print(std::tr1::shared_ptr< Hpc >,int)\n"
    "    Plasm::Print(std::tr1::shared_ptr< Hpc >)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plasm_addProperty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::tr1::shared_ptr< Hpc > arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::tr1::shared_ptr< Hpc > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Plasm_addProperty",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plasm_addProperty" "', argument " "1"" of type '" "std::tr1::shared_ptr< Hpc >""'"); 
    }
    if (argp1) arg1 = *(reinterpret_cast< std::tr1::shared_ptr< Hpc > * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< std::tr1::shared_ptr< Hpc > * >(argp1);
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Plasm_addProperty" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Plasm_addProperty" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = Plasm::addProperty(arg1,arg2,arg3);
  {
    std::tr1::shared_ptr<  Hpc > *smartresult = result ? new std::tr1::shared_ptr<  Hpc >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plasm_getProperty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::tr1::shared_ptr< Hpc > arg1 ;
  std::string arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Plasm_getProperty",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plasm_getProperty" "', argument " "1"" of type '" "std::tr1::shared_ptr< Hpc >""'"); 
    }
    if (argp1) arg1 = *(reinterpret_cast< std::tr1::shared_ptr< Hpc > * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< std::tr1::shared_ptr< Hpc > * >(argp1);
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Plasm_getProperty" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = Plasm::getProperty(arg1,arg2);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plasm_statistics(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bool arg1 ;
  bool val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Plasm_statistics",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_bool(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Plasm_statistics" "', argument " "1"" of type '" "bool""'");
  } 
  arg1 = static_cast< bool >(val1);
  Plasm::statistics(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plasm_shrink(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::tr1::shared_ptr< Hpc > arg1 ;
  bool arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::tr1::shared_ptr< Hpc > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Plasm_shrink",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plasm_shrink" "', argument " "1"" of type '" "std::tr1::shared_ptr< Hpc >""'"); 
    }
    if (argp1) arg1 = *(reinterpret_cast< std::tr1::shared_ptr< Hpc > * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< std::tr1::shared_ptr< Hpc > * >(argp1);
  }
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Plasm_shrink" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = Plasm::shrink(arg1,arg2);
  {
    std::tr1::shared_ptr<  Hpc > *smartresult = result ? new std::tr1::shared_ptr<  Hpc >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plasm_open(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  std::tr1::shared_ptr< Hpc > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Plasm_open",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Plasm_open" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = Plasm::open(arg1);
  {
    std::tr1::shared_ptr<  Hpc > *smartresult = result ? new std::tr1::shared_ptr<  Hpc >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plasm_save(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::tr1::shared_ptr< Hpc > arg1 ;
  std::string arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Plasm_save",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plasm_save" "', argument " "1"" of type '" "std::tr1::shared_ptr< Hpc >""'"); 
    }
    if (argp1) arg1 = *(reinterpret_cast< std::tr1::shared_ptr< Hpc > * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< std::tr1::shared_ptr< Hpc > * >(argp1);
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Plasm_save" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (bool)Plasm::save(arg1,arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plasm_Struct(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Hpc >,std::allocator< std::tr1::shared_ptr< Hpc > > > arg1 ;
  PyObject * obj0 = 0 ;
  std::tr1::shared_ptr< Hpc > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Plasm_Struct",&obj0)) SWIG_fail;
  {
    std::vector<std::tr1::shared_ptr< Hpc >,std::allocator< std::tr1::shared_ptr< Hpc > > > *ptr = (std::vector<std::tr1::shared_ptr< Hpc >,std::allocator< std::tr1::shared_ptr< Hpc > > > *)0;
    int res = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Plasm_Struct" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Hpc >,std::allocator< std::tr1::shared_ptr< Hpc > > >""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = Plasm::Struct(arg1);
  {
    std::tr1::shared_ptr<  Hpc > *smartresult = result ? new std::tr1::shared_ptr<  Hpc >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plasm_copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::tr1::shared_ptr< Hpc > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::tr1::shared_ptr< Hpc > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Plasm_copy",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plasm_copy" "', argument " "1"" of type '" "std::tr1::shared_ptr< Hpc >""'"); 
    }
    if (argp1) arg1 = *(reinterpret_cast< std::tr1::shared_ptr< Hpc > * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< std::tr1::shared_ptr< Hpc > * >(argp1);
  }
  result = Plasm::copy(arg1);
  {
    std::tr1::shared_ptr<  Hpc > *smartresult = result ? new std::tr1::shared_ptr<  Hpc >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plasm_join__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Hpc >,std::allocator< std::tr1::shared_ptr< Hpc > > > arg1 ;
  float arg2 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::tr1::shared_ptr< Hpc > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Plasm_join",&obj0,&obj1)) SWIG_fail;
  {
    std::vector<std::tr1::shared_ptr< Hpc >,std::allocator< std::tr1::shared_ptr< Hpc > > > *ptr = (std::vector<std::tr1::shared_ptr< Hpc >,std::allocator< std::tr1::shared_ptr< Hpc > > > *)0;
    int res = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Plasm_join" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Hpc >,std::allocator< std::tr1::shared_ptr< Hpc > > >""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Plasm_join" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  result = Plasm::join(arg1,arg2);
  {
    std::tr1::shared_ptr<  Hpc > *smartresult = result ? new std::tr1::shared_ptr<  Hpc >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plasm_join__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::tr1::shared_ptr< Hpc >,std::allocator< std::tr1::shared_ptr< Hpc > > > arg1 ;
  PyObject * obj0 = 0 ;
  std::tr1::shared_ptr< Hpc > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Plasm_join",&obj0)) SWIG_fail;
  {
    std::vector<std::tr1::shared_ptr< Hpc >,std::allocator< std::tr1::shared_ptr< Hpc > > > *ptr = (std::vector<std::tr1::shared_ptr< Hpc >,std::allocator< std::tr1::shared_ptr< Hpc > > > *)0;
    int res = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Plasm_join" "', argument " "1"" of type '" "std::vector< std::tr1::shared_ptr< Hpc >,std::allocator< std::tr1::shared_ptr< Hpc > > >""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = Plasm::join(arg1);
  {
    std::tr1::shared_ptr<  Hpc > *smartresult = result ? new std::tr1::shared_ptr<  Hpc >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plasm_join(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::tr1::shared_ptr< Hpc >,std::allocator< std::tr1::shared_ptr< Hpc > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Plasm_join__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::tr1::shared_ptr< Hpc >,std::allocator< std::tr1::shared_ptr< Hpc > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Plasm_join__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Plasm_join'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    join(std::vector< std::tr1::shared_ptr< Hpc >,std::allocator< std::tr1::shared_ptr< Hpc > > >,float)\n"
    "    Plasm::join(std::vector< std::tr1::shared_ptr< Hpc >,std::allocator< std::tr1::shared_ptr< Hpc > > >)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plasm_transform(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::tr1::shared_ptr< Hpc > arg1 ;
  std::tr1::shared_ptr< Matf > arg2 ;
  std::tr1::shared_ptr< Matf > arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::tr1::shared_ptr< Hpc > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Plasm_transform",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plasm_transform" "', argument " "1"" of type '" "std::tr1::shared_ptr< Hpc >""'"); 
    }
    if (argp1) arg1 = *(reinterpret_cast< std::tr1::shared_ptr< Hpc > * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< std::tr1::shared_ptr< Hpc > * >(argp1);
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Plasm_transform" "', argument " "2"" of type '" "std::tr1::shared_ptr< Matf >""'"); 
    }
    if (argp2) arg2 = *(reinterpret_cast< std::tr1::shared_ptr< Matf > * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< std::tr1::shared_ptr< Matf > * >(argp2);
  }
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Plasm_transform" "', argument " "3"" of type '" "std::tr1::shared_ptr< Matf >""'"); 
    }
    if (argp3) arg3 = *(reinterpret_cast< std::tr1::shared_ptr< Matf > * >(argp3));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< std::tr1::shared_ptr< Matf > * >(argp3);
  }
  result = Plasm::transform(arg1,arg2,arg3);
  {
    std::tr1::shared_ptr<  Hpc > *smartresult = result ? new std::tr1::shared_ptr<  Hpc >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plasm_scale__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::tr1::shared_ptr< Hpc > arg1 ;
  Vecf arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::tr1::shared_ptr< Hpc > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Plasm_scale",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plasm_scale" "', argument " "1"" of type '" "std::tr1::shared_ptr< Hpc >""'"); 
    }
    if (argp1) arg1 = *(reinterpret_cast< std::tr1::shared_ptr< Hpc > * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< std::tr1::shared_ptr< Hpc > * >(argp1);
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vecf,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Plasm_scale" "', argument " "2"" of type '" "Vecf""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Plasm_scale" "', argument " "2"" of type '" "Vecf""'");
    } else {
      Vecf * temp = reinterpret_cast< Vecf * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = Plasm::scale(arg1,arg2);
  {
    std::tr1::shared_ptr<  Hpc > *smartresult = result ? new std::tr1::shared_ptr<  Hpc >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plasm_scale__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::tr1::shared_ptr< Hpc > arg1 ;
  int arg2 ;
  int arg3 ;
  float arg4 ;
  void *argp1 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  std::tr1::shared_ptr< Hpc > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Plasm_scale",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plasm_scale" "', argument " "1"" of type '" "std::tr1::shared_ptr< Hpc >""'"); 
    }
    if (argp1) arg1 = *(reinterpret_cast< std::tr1::shared_ptr< Hpc > * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< std::tr1::shared_ptr< Hpc > * >(argp1);
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Plasm_scale" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Plasm_scale" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Plasm_scale" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  result = Plasm::scale(arg1,arg2,arg3,arg4);
  {
    std::tr1::shared_ptr<  Hpc > *smartresult = result ? new std::tr1::shared_ptr<  Hpc >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plasm_scale(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Vecf, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Plasm_scale__SWIG_0(self, args);
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Plasm_scale__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Plasm_scale'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    scale(std::tr1::shared_ptr< Hpc >,Vecf)\n"
    "    Plasm::scale(std::tr1::shared_ptr< Hpc >,int,int,float)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plasm_translate__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::tr1::shared_ptr< Hpc > arg1 ;
  Vecf arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::tr1::shared_ptr< Hpc > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Plasm_translate",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plasm_translate" "', argument " "1"" of type '" "std::tr1::shared_ptr< Hpc >""'"); 
    }
    if (argp1) arg1 = *(reinterpret_cast< std::tr1::shared_ptr< Hpc > * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< std::tr1::shared_ptr< Hpc > * >(argp1);
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vecf,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Plasm_translate" "', argument " "2"" of type '" "Vecf""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Plasm_translate" "', argument " "2"" of type '" "Vecf""'");
    } else {
      Vecf * temp = reinterpret_cast< Vecf * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = Plasm::translate(arg1,arg2);
  {
    std::tr1::shared_ptr<  Hpc > *smartresult = result ? new std::tr1::shared_ptr<  Hpc >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plasm_translate__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::tr1::shared_ptr< Hpc > arg1 ;
  int arg2 ;
  int arg3 ;
  float arg4 ;
  void *argp1 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  std::tr1::shared_ptr< Hpc > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Plasm_translate",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plasm_translate" "', argument " "1"" of type '" "std::tr1::shared_ptr< Hpc >""'"); 
    }
    if (argp1) arg1 = *(reinterpret_cast< std::tr1::shared_ptr< Hpc > * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< std::tr1::shared_ptr< Hpc > * >(argp1);
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Plasm_translate" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Plasm_translate" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Plasm_translate" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  result = Plasm::translate(arg1,arg2,arg3,arg4);
  {
    std::tr1::shared_ptr<  Hpc > *smartresult = result ? new std::tr1::shared_ptr<  Hpc >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plasm_translate(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Vecf, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Plasm_translate__SWIG_0(self, args);
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Plasm_translate__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Plasm_translate'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    translate(std::tr1::shared_ptr< Hpc >,Vecf)\n"
    "    Plasm::translate(std::tr1::shared_ptr< Hpc >,int,int,float)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plasm_rotate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::tr1::shared_ptr< Hpc > arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  float arg5 ;
  void *argp1 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  std::tr1::shared_ptr< Hpc > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Plasm_rotate",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plasm_rotate" "', argument " "1"" of type '" "std::tr1::shared_ptr< Hpc >""'"); 
    }
    if (argp1) arg1 = *(reinterpret_cast< std::tr1::shared_ptr< Hpc > * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< std::tr1::shared_ptr< Hpc > * >(argp1);
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Plasm_rotate" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Plasm_rotate" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Plasm_rotate" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_float(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Plasm_rotate" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = static_cast< float >(val5);
  result = Plasm::rotate(arg1,arg2,arg3,arg4,arg5);
  {
    std::tr1::shared_ptr<  Hpc > *smartresult = result ? new std::tr1::shared_ptr<  Hpc >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plasm_embed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::tr1::shared_ptr< Hpc > arg1 ;
  int arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::tr1::shared_ptr< Hpc > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Plasm_embed",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plasm_embed" "', argument " "1"" of type '" "std::tr1::shared_ptr< Hpc >""'"); 
    }
    if (argp1) arg1 = *(reinterpret_cast< std::tr1::shared_ptr< Hpc > * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< std::tr1::shared_ptr< Hpc > * >(argp1);
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Plasm_embed" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = Plasm::embed(arg1,arg2);
  {
    std::tr1::shared_ptr<  Hpc > *smartresult = result ? new std::tr1::shared_ptr<  Hpc >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plasm_power(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::tr1::shared_ptr< Hpc > arg1 ;
  std::tr1::shared_ptr< Hpc > arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::tr1::shared_ptr< Hpc > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Plasm_power",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plasm_power" "', argument " "1"" of type '" "std::tr1::shared_ptr< Hpc >""'"); 
    }
    if (argp1) arg1 = *(reinterpret_cast< std::tr1::shared_ptr< Hpc > * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< std::tr1::shared_ptr< Hpc > * >(argp1);
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Plasm_power" "', argument " "2"" of type '" "std::tr1::shared_ptr< Hpc >""'"); 
    }
    if (argp2) arg2 = *(reinterpret_cast< std::tr1::shared_ptr< Hpc > * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< std::tr1::shared_ptr< Hpc > * >(argp2);
  }
  result = Plasm::power(arg1,arg2);
  {
    std::tr1::shared_ptr<  Hpc > *smartresult = result ? new std::tr1::shared_ptr<  Hpc >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plasm_skeleton__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::tr1::shared_ptr< Hpc > arg1 ;
  int arg2 ;
  float arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::tr1::shared_ptr< Hpc > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Plasm_skeleton",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plasm_skeleton" "', argument " "1"" of type '" "std::tr1::shared_ptr< Hpc >""'"); 
    }
    if (argp1) arg1 = *(reinterpret_cast< std::tr1::shared_ptr< Hpc > * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< std::tr1::shared_ptr< Hpc > * >(argp1);
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Plasm_skeleton" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Plasm_skeleton" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  result = Plasm::skeleton(arg1,arg2,arg3);
  {
    std::tr1::shared_ptr<  Hpc > *smartresult = result ? new std::tr1::shared_ptr<  Hpc >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plasm_skeleton__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::tr1::shared_ptr< Hpc > arg1 ;
  int arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::tr1::shared_ptr< Hpc > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Plasm_skeleton",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plasm_skeleton" "', argument " "1"" of type '" "std::tr1::shared_ptr< Hpc >""'"); 
    }
    if (argp1) arg1 = *(reinterpret_cast< std::tr1::shared_ptr< Hpc > * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< std::tr1::shared_ptr< Hpc > * >(argp1);
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Plasm_skeleton" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = Plasm::skeleton(arg1,arg2);
  {
    std::tr1::shared_ptr<  Hpc > *smartresult = result ? new std::tr1::shared_ptr<  Hpc >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plasm_skeleton(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Plasm_skeleton__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Plasm_skeleton__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Plasm_skeleton'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    skeleton(std::tr1::shared_ptr< Hpc >,int,float)\n"
    "    Plasm::skeleton(std::tr1::shared_ptr< Hpc >,int)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plasm_boolop__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Plasm::BoolOpCode arg1 ;
  std::vector< std::tr1::shared_ptr< Hpc >,std::allocator< std::tr1::shared_ptr< Hpc > > > arg2 ;
  float arg3 ;
  int arg4 ;
  bool arg5 ;
  int val1 ;
  int ecode1 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  std::tr1::shared_ptr< Hpc > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Plasm_boolop",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Plasm_boolop" "', argument " "1"" of type '" "Plasm::BoolOpCode""'");
  } 
  arg1 = static_cast< Plasm::BoolOpCode >(val1);
  {
    std::vector<std::tr1::shared_ptr< Hpc >,std::allocator< std::tr1::shared_ptr< Hpc > > > *ptr = (std::vector<std::tr1::shared_ptr< Hpc >,std::allocator< std::tr1::shared_ptr< Hpc > > > *)0;
    int res = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Plasm_boolop" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< Hpc >,std::allocator< std::tr1::shared_ptr< Hpc > > >""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Plasm_boolop" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Plasm_boolop" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Plasm_boolop" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  result = Plasm::boolop(arg1,arg2,arg3,arg4,arg5);
  {
    std::tr1::shared_ptr<  Hpc > *smartresult = result ? new std::tr1::shared_ptr<  Hpc >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plasm_boolop__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Plasm::BoolOpCode arg1 ;
  std::vector< std::tr1::shared_ptr< Hpc >,std::allocator< std::tr1::shared_ptr< Hpc > > > arg2 ;
  float arg3 ;
  int arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  std::tr1::shared_ptr< Hpc > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Plasm_boolop",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Plasm_boolop" "', argument " "1"" of type '" "Plasm::BoolOpCode""'");
  } 
  arg1 = static_cast< Plasm::BoolOpCode >(val1);
  {
    std::vector<std::tr1::shared_ptr< Hpc >,std::allocator< std::tr1::shared_ptr< Hpc > > > *ptr = (std::vector<std::tr1::shared_ptr< Hpc >,std::allocator< std::tr1::shared_ptr< Hpc > > > *)0;
    int res = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Plasm_boolop" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< Hpc >,std::allocator< std::tr1::shared_ptr< Hpc > > >""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Plasm_boolop" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Plasm_boolop" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  result = Plasm::boolop(arg1,arg2,arg3,arg4);
  {
    std::tr1::shared_ptr<  Hpc > *smartresult = result ? new std::tr1::shared_ptr<  Hpc >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plasm_boolop__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Plasm::BoolOpCode arg1 ;
  std::vector< std::tr1::shared_ptr< Hpc >,std::allocator< std::tr1::shared_ptr< Hpc > > > arg2 ;
  float arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::tr1::shared_ptr< Hpc > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Plasm_boolop",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Plasm_boolop" "', argument " "1"" of type '" "Plasm::BoolOpCode""'");
  } 
  arg1 = static_cast< Plasm::BoolOpCode >(val1);
  {
    std::vector<std::tr1::shared_ptr< Hpc >,std::allocator< std::tr1::shared_ptr< Hpc > > > *ptr = (std::vector<std::tr1::shared_ptr< Hpc >,std::allocator< std::tr1::shared_ptr< Hpc > > > *)0;
    int res = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Plasm_boolop" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< Hpc >,std::allocator< std::tr1::shared_ptr< Hpc > > >""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Plasm_boolop" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  result = Plasm::boolop(arg1,arg2,arg3);
  {
    std::tr1::shared_ptr<  Hpc > *smartresult = result ? new std::tr1::shared_ptr<  Hpc >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plasm_boolop__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Plasm::BoolOpCode arg1 ;
  std::vector< std::tr1::shared_ptr< Hpc >,std::allocator< std::tr1::shared_ptr< Hpc > > > arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::tr1::shared_ptr< Hpc > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Plasm_boolop",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Plasm_boolop" "', argument " "1"" of type '" "Plasm::BoolOpCode""'");
  } 
  arg1 = static_cast< Plasm::BoolOpCode >(val1);
  {
    std::vector<std::tr1::shared_ptr< Hpc >,std::allocator< std::tr1::shared_ptr< Hpc > > > *ptr = (std::vector<std::tr1::shared_ptr< Hpc >,std::allocator< std::tr1::shared_ptr< Hpc > > > *)0;
    int res = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Plasm_boolop" "', argument " "2"" of type '" "std::vector< std::tr1::shared_ptr< Hpc >,std::allocator< std::tr1::shared_ptr< Hpc > > >""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = Plasm::boolop(arg1,arg2);
  {
    std::tr1::shared_ptr<  Hpc > *smartresult = result ? new std::tr1::shared_ptr<  Hpc >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plasm_boolop(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 5); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector<std::tr1::shared_ptr< Hpc >,std::allocator< std::tr1::shared_ptr< Hpc > > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Plasm_boolop__SWIG_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector<std::tr1::shared_ptr< Hpc >,std::allocator< std::tr1::shared_ptr< Hpc > > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Plasm_boolop__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector<std::tr1::shared_ptr< Hpc >,std::allocator< std::tr1::shared_ptr< Hpc > > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Plasm_boolop__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector<std::tr1::shared_ptr< Hpc >,std::allocator< std::tr1::shared_ptr< Hpc > > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_Plasm_boolop__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Plasm_boolop'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    boolop(Plasm::BoolOpCode,std::vector< std::tr1::shared_ptr< Hpc >,std::allocator< std::tr1::shared_ptr< Hpc > > >,float,int,bool)\n"
    "    boolop(Plasm::BoolOpCode,std::vector< std::tr1::shared_ptr< Hpc >,std::allocator< std::tr1::shared_ptr< Hpc > > >,float,int)\n"
    "    boolop(Plasm::BoolOpCode,std::vector< std::tr1::shared_ptr< Hpc >,std::allocator< std::tr1::shared_ptr< Hpc > > >,float)\n"
    "    Plasm::boolop(Plasm::BoolOpCode,std::vector< std::tr1::shared_ptr< Hpc >,std::allocator< std::tr1::shared_ptr< Hpc > > >)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plasm_Skin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::tr1::shared_ptr< Hpc > arg1 ;
  std::string arg2 ;
  std::tr1::shared_ptr< Matf > arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::tr1::shared_ptr< Hpc > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Plasm_Skin",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plasm_Skin" "', argument " "1"" of type '" "std::tr1::shared_ptr< Hpc >""'"); 
    }
    if (argp1) arg1 = *(reinterpret_cast< std::tr1::shared_ptr< Hpc > * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< std::tr1::shared_ptr< Hpc > * >(argp1);
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Plasm_Skin" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_std__tr1__shared_ptrT_Matf_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Plasm_Skin" "', argument " "3"" of type '" "std::tr1::shared_ptr< Matf >""'"); 
    }
    if (argp3) arg3 = *(reinterpret_cast< std::tr1::shared_ptr< Matf > * >(argp3));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< std::tr1::shared_ptr< Matf > * >(argp3);
  }
  result = Plasm::Skin(arg1,arg2,arg3);
  {
    std::tr1::shared_ptr<  Hpc > *smartresult = result ? new std::tr1::shared_ptr<  Hpc >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plasm_getTriangles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::tr1::shared_ptr< Hpc > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::tr1::shared_ptr< Vector > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Plasm_getTriangles",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plasm_getTriangles" "', argument " "1"" of type '" "std::tr1::shared_ptr< Hpc >""'"); 
    }
    if (argp1) arg1 = *(reinterpret_cast< std::tr1::shared_ptr< Hpc > * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< std::tr1::shared_ptr< Hpc > * >(argp1);
  }
  result = Plasm::getTriangles(arg1);
  {
    std::tr1::shared_ptr<  Vector > *smartresult = result ? new std::tr1::shared_ptr<  Vector >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__tr1__shared_ptrT_Vector_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plasm_getBatches__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::tr1::shared_ptr< Hpc > arg1 ;
  bool arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Plasm_getBatches",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plasm_getBatches" "', argument " "1"" of type '" "std::tr1::shared_ptr< Hpc >""'"); 
    }
    if (argp1) arg1 = *(reinterpret_cast< std::tr1::shared_ptr< Hpc > * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< std::tr1::shared_ptr< Hpc > * >(argp1);
  }
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Plasm_getBatches" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = Plasm::getBatches(arg1,arg2);
  resultobj = swig::from(static_cast< std::vector<std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plasm_getBatches__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::tr1::shared_ptr< Hpc > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Plasm_getBatches",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plasm_getBatches" "', argument " "1"" of type '" "std::tr1::shared_ptr< Hpc >""'"); 
    }
    if (argp1) arg1 = *(reinterpret_cast< std::tr1::shared_ptr< Hpc > * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< std::tr1::shared_ptr< Hpc > * >(argp1);
  }
  result = Plasm::getBatches(arg1);
  resultobj = swig::from(static_cast< std::vector<std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plasm_getBatches(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Plasm_getBatches__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Plasm_getBatches__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Plasm_getBatches'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    getBatches(std::tr1::shared_ptr< Hpc >,bool)\n"
    "    Plasm::getBatches(std::tr1::shared_ptr< Hpc >)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plasm_View__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::tr1::shared_ptr< Hpc > arg1 ;
  bool arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Plasm_View",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plasm_View" "', argument " "1"" of type '" "std::tr1::shared_ptr< Hpc >""'"); 
    }
    if (argp1) arg1 = *(reinterpret_cast< std::tr1::shared_ptr< Hpc > * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< std::tr1::shared_ptr< Hpc > * >(argp1);
  }
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Plasm_View" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  Plasm::View(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plasm_View__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::tr1::shared_ptr< Hpc > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Plasm_View",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plasm_View" "', argument " "1"" of type '" "std::tr1::shared_ptr< Hpc >""'"); 
    }
    if (argp1) arg1 = *(reinterpret_cast< std::tr1::shared_ptr< Hpc > * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< std::tr1::shared_ptr< Hpc > * >(argp1);
  }
  Plasm::View(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plasm_View(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Plasm_View__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__tr1__shared_ptrT_Hpc_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Plasm_View__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Plasm_View'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    View(std::tr1::shared_ptr< Hpc >,bool)\n"
    "    Plasm::View(std::tr1::shared_ptr< Hpc >)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plasm_SelfTest(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":Plasm_SelfTest")) SWIG_fail;
  result = (int)Plasm::SelfTest();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plasm_boolop_selftest(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":Plasm_boolop_selftest")) SWIG_fail;
  result = (int)Plasm::boolop_selftest();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plasm_convertOldXml(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Plasm_convertOldXml",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plasm_convertOldXml" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Plasm_convertOldXml" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Plasm_convertOldXml" "', argument " "3"" of type '" "char *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  Plasm::convertOldXml(arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Plasm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Plasm *arg1 = (Plasm *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Plasm",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Plasm, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Plasm" "', argument " "1"" of type '" "Plasm *""'"); 
  }
  arg1 = reinterpret_cast< Plasm * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Plasm_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Plasm, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

static PyMethodDef SwigMethods[] = {
	 { (char *)"SWIG_PyInstanceMethod_New", (PyCFunction)SWIG_PyInstanceMethod_New, METH_O, NULL},
	 { (char *)"delete_SwigPyIterator", _wrap_delete_SwigPyIterator, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_value", _wrap_SwigPyIterator_value, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_incr", _wrap_SwigPyIterator_incr, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_decr", _wrap_SwigPyIterator_decr, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_distance", _wrap_SwigPyIterator_distance, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_equal", _wrap_SwigPyIterator_equal, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_copy", _wrap_SwigPyIterator_copy, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_next", _wrap_SwigPyIterator_next, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator___next__", _wrap_SwigPyIterator___next__, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_previous", _wrap_SwigPyIterator_previous, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_advance", _wrap_SwigPyIterator_advance, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator___eq__", _wrap_SwigPyIterator___eq__, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator___ne__", _wrap_SwigPyIterator___ne__, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator___iadd__", _wrap_SwigPyIterator___iadd__, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator___isub__", _wrap_SwigPyIterator___isub__, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator___add__", _wrap_SwigPyIterator___add__, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator___sub__", _wrap_SwigPyIterator___sub__, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_swigregister", SwigPyIterator_swigregister, METH_VARARGS, NULL},
	 { (char *)"StdVectorUnsignedChar_iterator", _wrap_StdVectorUnsignedChar_iterator, METH_VARARGS, NULL},
	 { (char *)"StdVectorUnsignedChar___nonzero__", _wrap_StdVectorUnsignedChar___nonzero__, METH_VARARGS, NULL},
	 { (char *)"StdVectorUnsignedChar___bool__", _wrap_StdVectorUnsignedChar___bool__, METH_VARARGS, NULL},
	 { (char *)"StdVectorUnsignedChar___len__", _wrap_StdVectorUnsignedChar___len__, METH_VARARGS, NULL},
	 { (char *)"StdVectorUnsignedChar_pop", _wrap_StdVectorUnsignedChar_pop, METH_VARARGS, NULL},
	 { (char *)"StdVectorUnsignedChar___getslice__", _wrap_StdVectorUnsignedChar___getslice__, METH_VARARGS, NULL},
	 { (char *)"StdVectorUnsignedChar___setslice__", _wrap_StdVectorUnsignedChar___setslice__, METH_VARARGS, NULL},
	 { (char *)"StdVectorUnsignedChar___delslice__", _wrap_StdVectorUnsignedChar___delslice__, METH_VARARGS, NULL},
	 { (char *)"StdVectorUnsignedChar___delitem__", _wrap_StdVectorUnsignedChar___delitem__, METH_VARARGS, NULL},
	 { (char *)"StdVectorUnsignedChar___getitem__", _wrap_StdVectorUnsignedChar___getitem__, METH_VARARGS, NULL},
	 { (char *)"StdVectorUnsignedChar___setitem__", _wrap_StdVectorUnsignedChar___setitem__, METH_VARARGS, NULL},
	 { (char *)"StdVectorUnsignedChar_append", _wrap_StdVectorUnsignedChar_append, METH_VARARGS, NULL},
	 { (char *)"StdVectorUnsignedChar_empty", _wrap_StdVectorUnsignedChar_empty, METH_VARARGS, NULL},
	 { (char *)"StdVectorUnsignedChar_size", _wrap_StdVectorUnsignedChar_size, METH_VARARGS, NULL},
	 { (char *)"StdVectorUnsignedChar_clear", _wrap_StdVectorUnsignedChar_clear, METH_VARARGS, NULL},
	 { (char *)"StdVectorUnsignedChar_swap", _wrap_StdVectorUnsignedChar_swap, METH_VARARGS, NULL},
	 { (char *)"StdVectorUnsignedChar_get_allocator", _wrap_StdVectorUnsignedChar_get_allocator, METH_VARARGS, NULL},
	 { (char *)"StdVectorUnsignedChar_begin", _wrap_StdVectorUnsignedChar_begin, METH_VARARGS, NULL},
	 { (char *)"StdVectorUnsignedChar_end", _wrap_StdVectorUnsignedChar_end, METH_VARARGS, NULL},
	 { (char *)"StdVectorUnsignedChar_rbegin", _wrap_StdVectorUnsignedChar_rbegin, METH_VARARGS, NULL},
	 { (char *)"StdVectorUnsignedChar_rend", _wrap_StdVectorUnsignedChar_rend, METH_VARARGS, NULL},
	 { (char *)"StdVectorUnsignedChar_pop_back", _wrap_StdVectorUnsignedChar_pop_back, METH_VARARGS, NULL},
	 { (char *)"StdVectorUnsignedChar_erase", _wrap_StdVectorUnsignedChar_erase, METH_VARARGS, NULL},
	 { (char *)"new_StdVectorUnsignedChar", _wrap_new_StdVectorUnsignedChar, METH_VARARGS, NULL},
	 { (char *)"StdVectorUnsignedChar_push_back", _wrap_StdVectorUnsignedChar_push_back, METH_VARARGS, NULL},
	 { (char *)"StdVectorUnsignedChar_front", _wrap_StdVectorUnsignedChar_front, METH_VARARGS, NULL},
	 { (char *)"StdVectorUnsignedChar_back", _wrap_StdVectorUnsignedChar_back, METH_VARARGS, NULL},
	 { (char *)"StdVectorUnsignedChar_assign", _wrap_StdVectorUnsignedChar_assign, METH_VARARGS, NULL},
	 { (char *)"StdVectorUnsignedChar_resize", _wrap_StdVectorUnsignedChar_resize, METH_VARARGS, NULL},
	 { (char *)"StdVectorUnsignedChar_insert", _wrap_StdVectorUnsignedChar_insert, METH_VARARGS, NULL},
	 { (char *)"StdVectorUnsignedChar_reserve", _wrap_StdVectorUnsignedChar_reserve, METH_VARARGS, NULL},
	 { (char *)"StdVectorUnsignedChar_capacity", _wrap_StdVectorUnsignedChar_capacity, METH_VARARGS, NULL},
	 { (char *)"delete_StdVectorUnsignedChar", _wrap_delete_StdVectorUnsignedChar, METH_VARARGS, NULL},
	 { (char *)"StdVectorUnsignedChar_swigregister", StdVectorUnsignedChar_swigregister, METH_VARARGS, NULL},
	 { (char *)"StdVectorInt_iterator", _wrap_StdVectorInt_iterator, METH_VARARGS, NULL},
	 { (char *)"StdVectorInt___nonzero__", _wrap_StdVectorInt___nonzero__, METH_VARARGS, NULL},
	 { (char *)"StdVectorInt___bool__", _wrap_StdVectorInt___bool__, METH_VARARGS, NULL},
	 { (char *)"StdVectorInt___len__", _wrap_StdVectorInt___len__, METH_VARARGS, NULL},
	 { (char *)"StdVectorInt_pop", _wrap_StdVectorInt_pop, METH_VARARGS, NULL},
	 { (char *)"StdVectorInt___getslice__", _wrap_StdVectorInt___getslice__, METH_VARARGS, NULL},
	 { (char *)"StdVectorInt___setslice__", _wrap_StdVectorInt___setslice__, METH_VARARGS, NULL},
	 { (char *)"StdVectorInt___delslice__", _wrap_StdVectorInt___delslice__, METH_VARARGS, NULL},
	 { (char *)"StdVectorInt___delitem__", _wrap_StdVectorInt___delitem__, METH_VARARGS, NULL},
	 { (char *)"StdVectorInt___getitem__", _wrap_StdVectorInt___getitem__, METH_VARARGS, NULL},
	 { (char *)"StdVectorInt___setitem__", _wrap_StdVectorInt___setitem__, METH_VARARGS, NULL},
	 { (char *)"StdVectorInt_append", _wrap_StdVectorInt_append, METH_VARARGS, NULL},
	 { (char *)"StdVectorInt_empty", _wrap_StdVectorInt_empty, METH_VARARGS, NULL},
	 { (char *)"StdVectorInt_size", _wrap_StdVectorInt_size, METH_VARARGS, NULL},
	 { (char *)"StdVectorInt_clear", _wrap_StdVectorInt_clear, METH_VARARGS, NULL},
	 { (char *)"StdVectorInt_swap", _wrap_StdVectorInt_swap, METH_VARARGS, NULL},
	 { (char *)"StdVectorInt_get_allocator", _wrap_StdVectorInt_get_allocator, METH_VARARGS, NULL},
	 { (char *)"StdVectorInt_begin", _wrap_StdVectorInt_begin, METH_VARARGS, NULL},
	 { (char *)"StdVectorInt_end", _wrap_StdVectorInt_end, METH_VARARGS, NULL},
	 { (char *)"StdVectorInt_rbegin", _wrap_StdVectorInt_rbegin, METH_VARARGS, NULL},
	 { (char *)"StdVectorInt_rend", _wrap_StdVectorInt_rend, METH_VARARGS, NULL},
	 { (char *)"StdVectorInt_pop_back", _wrap_StdVectorInt_pop_back, METH_VARARGS, NULL},
	 { (char *)"StdVectorInt_erase", _wrap_StdVectorInt_erase, METH_VARARGS, NULL},
	 { (char *)"new_StdVectorInt", _wrap_new_StdVectorInt, METH_VARARGS, NULL},
	 { (char *)"StdVectorInt_push_back", _wrap_StdVectorInt_push_back, METH_VARARGS, NULL},
	 { (char *)"StdVectorInt_front", _wrap_StdVectorInt_front, METH_VARARGS, NULL},
	 { (char *)"StdVectorInt_back", _wrap_StdVectorInt_back, METH_VARARGS, NULL},
	 { (char *)"StdVectorInt_assign", _wrap_StdVectorInt_assign, METH_VARARGS, NULL},
	 { (char *)"StdVectorInt_resize", _wrap_StdVectorInt_resize, METH_VARARGS, NULL},
	 { (char *)"StdVectorInt_insert", _wrap_StdVectorInt_insert, METH_VARARGS, NULL},
	 { (char *)"StdVectorInt_reserve", _wrap_StdVectorInt_reserve, METH_VARARGS, NULL},
	 { (char *)"StdVectorInt_capacity", _wrap_StdVectorInt_capacity, METH_VARARGS, NULL},
	 { (char *)"delete_StdVectorInt", _wrap_delete_StdVectorInt, METH_VARARGS, NULL},
	 { (char *)"StdVectorInt_swigregister", StdVectorInt_swigregister, METH_VARARGS, NULL},
	 { (char *)"StdVectorStdVectorInt_iterator", _wrap_StdVectorStdVectorInt_iterator, METH_VARARGS, NULL},
	 { (char *)"StdVectorStdVectorInt___nonzero__", _wrap_StdVectorStdVectorInt___nonzero__, METH_VARARGS, NULL},
	 { (char *)"StdVectorStdVectorInt___bool__", _wrap_StdVectorStdVectorInt___bool__, METH_VARARGS, NULL},
	 { (char *)"StdVectorStdVectorInt___len__", _wrap_StdVectorStdVectorInt___len__, METH_VARARGS, NULL},
	 { (char *)"StdVectorStdVectorInt_pop", _wrap_StdVectorStdVectorInt_pop, METH_VARARGS, NULL},
	 { (char *)"StdVectorStdVectorInt___getslice__", _wrap_StdVectorStdVectorInt___getslice__, METH_VARARGS, NULL},
	 { (char *)"StdVectorStdVectorInt___setslice__", _wrap_StdVectorStdVectorInt___setslice__, METH_VARARGS, NULL},
	 { (char *)"StdVectorStdVectorInt___delslice__", _wrap_StdVectorStdVectorInt___delslice__, METH_VARARGS, NULL},
	 { (char *)"StdVectorStdVectorInt___delitem__", _wrap_StdVectorStdVectorInt___delitem__, METH_VARARGS, NULL},
	 { (char *)"StdVectorStdVectorInt___getitem__", _wrap_StdVectorStdVectorInt___getitem__, METH_VARARGS, NULL},
	 { (char *)"StdVectorStdVectorInt___setitem__", _wrap_StdVectorStdVectorInt___setitem__, METH_VARARGS, NULL},
	 { (char *)"StdVectorStdVectorInt_append", _wrap_StdVectorStdVectorInt_append, METH_VARARGS, NULL},
	 { (char *)"StdVectorStdVectorInt_empty", _wrap_StdVectorStdVectorInt_empty, METH_VARARGS, NULL},
	 { (char *)"StdVectorStdVectorInt_size", _wrap_StdVectorStdVectorInt_size, METH_VARARGS, NULL},
	 { (char *)"StdVectorStdVectorInt_clear", _wrap_StdVectorStdVectorInt_clear, METH_VARARGS, NULL},
	 { (char *)"StdVectorStdVectorInt_swap", _wrap_StdVectorStdVectorInt_swap, METH_VARARGS, NULL},
	 { (char *)"StdVectorStdVectorInt_get_allocator", _wrap_StdVectorStdVectorInt_get_allocator, METH_VARARGS, NULL},
	 { (char *)"StdVectorStdVectorInt_begin", _wrap_StdVectorStdVectorInt_begin, METH_VARARGS, NULL},
	 { (char *)"StdVectorStdVectorInt_end", _wrap_StdVectorStdVectorInt_end, METH_VARARGS, NULL},
	 { (char *)"StdVectorStdVectorInt_rbegin", _wrap_StdVectorStdVectorInt_rbegin, METH_VARARGS, NULL},
	 { (char *)"StdVectorStdVectorInt_rend", _wrap_StdVectorStdVectorInt_rend, METH_VARARGS, NULL},
	 { (char *)"StdVectorStdVectorInt_pop_back", _wrap_StdVectorStdVectorInt_pop_back, METH_VARARGS, NULL},
	 { (char *)"StdVectorStdVectorInt_erase", _wrap_StdVectorStdVectorInt_erase, METH_VARARGS, NULL},
	 { (char *)"new_StdVectorStdVectorInt", _wrap_new_StdVectorStdVectorInt, METH_VARARGS, NULL},
	 { (char *)"StdVectorStdVectorInt_push_back", _wrap_StdVectorStdVectorInt_push_back, METH_VARARGS, NULL},
	 { (char *)"StdVectorStdVectorInt_front", _wrap_StdVectorStdVectorInt_front, METH_VARARGS, NULL},
	 { (char *)"StdVectorStdVectorInt_back", _wrap_StdVectorStdVectorInt_back, METH_VARARGS, NULL},
	 { (char *)"StdVectorStdVectorInt_assign", _wrap_StdVectorStdVectorInt_assign, METH_VARARGS, NULL},
	 { (char *)"StdVectorStdVectorInt_resize", _wrap_StdVectorStdVectorInt_resize, METH_VARARGS, NULL},
	 { (char *)"StdVectorStdVectorInt_insert", _wrap_StdVectorStdVectorInt_insert, METH_VARARGS, NULL},
	 { (char *)"StdVectorStdVectorInt_reserve", _wrap_StdVectorStdVectorInt_reserve, METH_VARARGS, NULL},
	 { (char *)"StdVectorStdVectorInt_capacity", _wrap_StdVectorStdVectorInt_capacity, METH_VARARGS, NULL},
	 { (char *)"delete_StdVectorStdVectorInt", _wrap_delete_StdVectorStdVectorInt, METH_VARARGS, NULL},
	 { (char *)"StdVectorStdVectorInt_swigregister", StdVectorStdVectorInt_swigregister, METH_VARARGS, NULL},
	 { (char *)"StdVectorFloat_iterator", _wrap_StdVectorFloat_iterator, METH_VARARGS, NULL},
	 { (char *)"StdVectorFloat___nonzero__", _wrap_StdVectorFloat___nonzero__, METH_VARARGS, NULL},
	 { (char *)"StdVectorFloat___bool__", _wrap_StdVectorFloat___bool__, METH_VARARGS, NULL},
	 { (char *)"StdVectorFloat___len__", _wrap_StdVectorFloat___len__, METH_VARARGS, NULL},
	 { (char *)"StdVectorFloat_pop", _wrap_StdVectorFloat_pop, METH_VARARGS, NULL},
	 { (char *)"StdVectorFloat___getslice__", _wrap_StdVectorFloat___getslice__, METH_VARARGS, NULL},
	 { (char *)"StdVectorFloat___setslice__", _wrap_StdVectorFloat___setslice__, METH_VARARGS, NULL},
	 { (char *)"StdVectorFloat___delslice__", _wrap_StdVectorFloat___delslice__, METH_VARARGS, NULL},
	 { (char *)"StdVectorFloat___delitem__", _wrap_StdVectorFloat___delitem__, METH_VARARGS, NULL},
	 { (char *)"StdVectorFloat___getitem__", _wrap_StdVectorFloat___getitem__, METH_VARARGS, NULL},
	 { (char *)"StdVectorFloat___setitem__", _wrap_StdVectorFloat___setitem__, METH_VARARGS, NULL},
	 { (char *)"StdVectorFloat_append", _wrap_StdVectorFloat_append, METH_VARARGS, NULL},
	 { (char *)"StdVectorFloat_empty", _wrap_StdVectorFloat_empty, METH_VARARGS, NULL},
	 { (char *)"StdVectorFloat_size", _wrap_StdVectorFloat_size, METH_VARARGS, NULL},
	 { (char *)"StdVectorFloat_clear", _wrap_StdVectorFloat_clear, METH_VARARGS, NULL},
	 { (char *)"StdVectorFloat_swap", _wrap_StdVectorFloat_swap, METH_VARARGS, NULL},
	 { (char *)"StdVectorFloat_get_allocator", _wrap_StdVectorFloat_get_allocator, METH_VARARGS, NULL},
	 { (char *)"StdVectorFloat_begin", _wrap_StdVectorFloat_begin, METH_VARARGS, NULL},
	 { (char *)"StdVectorFloat_end", _wrap_StdVectorFloat_end, METH_VARARGS, NULL},
	 { (char *)"StdVectorFloat_rbegin", _wrap_StdVectorFloat_rbegin, METH_VARARGS, NULL},
	 { (char *)"StdVectorFloat_rend", _wrap_StdVectorFloat_rend, METH_VARARGS, NULL},
	 { (char *)"StdVectorFloat_pop_back", _wrap_StdVectorFloat_pop_back, METH_VARARGS, NULL},
	 { (char *)"StdVectorFloat_erase", _wrap_StdVectorFloat_erase, METH_VARARGS, NULL},
	 { (char *)"new_StdVectorFloat", _wrap_new_StdVectorFloat, METH_VARARGS, NULL},
	 { (char *)"StdVectorFloat_push_back", _wrap_StdVectorFloat_push_back, METH_VARARGS, NULL},
	 { (char *)"StdVectorFloat_front", _wrap_StdVectorFloat_front, METH_VARARGS, NULL},
	 { (char *)"StdVectorFloat_back", _wrap_StdVectorFloat_back, METH_VARARGS, NULL},
	 { (char *)"StdVectorFloat_assign", _wrap_StdVectorFloat_assign, METH_VARARGS, NULL},
	 { (char *)"StdVectorFloat_resize", _wrap_StdVectorFloat_resize, METH_VARARGS, NULL},
	 { (char *)"StdVectorFloat_insert", _wrap_StdVectorFloat_insert, METH_VARARGS, NULL},
	 { (char *)"StdVectorFloat_reserve", _wrap_StdVectorFloat_reserve, METH_VARARGS, NULL},
	 { (char *)"StdVectorFloat_capacity", _wrap_StdVectorFloat_capacity, METH_VARARGS, NULL},
	 { (char *)"delete_StdVectorFloat", _wrap_delete_StdVectorFloat, METH_VARARGS, NULL},
	 { (char *)"StdVectorFloat_swigregister", StdVectorFloat_swigregister, METH_VARARGS, NULL},
	 { (char *)"StdVectorString_iterator", _wrap_StdVectorString_iterator, METH_VARARGS, NULL},
	 { (char *)"StdVectorString___nonzero__", _wrap_StdVectorString___nonzero__, METH_VARARGS, NULL},
	 { (char *)"StdVectorString___bool__", _wrap_StdVectorString___bool__, METH_VARARGS, NULL},
	 { (char *)"StdVectorString___len__", _wrap_StdVectorString___len__, METH_VARARGS, NULL},
	 { (char *)"StdVectorString_pop", _wrap_StdVectorString_pop, METH_VARARGS, NULL},
	 { (char *)"StdVectorString___getslice__", _wrap_StdVectorString___getslice__, METH_VARARGS, NULL},
	 { (char *)"StdVectorString___setslice__", _wrap_StdVectorString___setslice__, METH_VARARGS, NULL},
	 { (char *)"StdVectorString___delslice__", _wrap_StdVectorString___delslice__, METH_VARARGS, NULL},
	 { (char *)"StdVectorString___delitem__", _wrap_StdVectorString___delitem__, METH_VARARGS, NULL},
	 { (char *)"StdVectorString___getitem__", _wrap_StdVectorString___getitem__, METH_VARARGS, NULL},
	 { (char *)"StdVectorString___setitem__", _wrap_StdVectorString___setitem__, METH_VARARGS, NULL},
	 { (char *)"StdVectorString_append", _wrap_StdVectorString_append, METH_VARARGS, NULL},
	 { (char *)"StdVectorString_empty", _wrap_StdVectorString_empty, METH_VARARGS, NULL},
	 { (char *)"StdVectorString_size", _wrap_StdVectorString_size, METH_VARARGS, NULL},
	 { (char *)"StdVectorString_clear", _wrap_StdVectorString_clear, METH_VARARGS, NULL},
	 { (char *)"StdVectorString_swap", _wrap_StdVectorString_swap, METH_VARARGS, NULL},
	 { (char *)"StdVectorString_get_allocator", _wrap_StdVectorString_get_allocator, METH_VARARGS, NULL},
	 { (char *)"StdVectorString_begin", _wrap_StdVectorString_begin, METH_VARARGS, NULL},
	 { (char *)"StdVectorString_end", _wrap_StdVectorString_end, METH_VARARGS, NULL},
	 { (char *)"StdVectorString_rbegin", _wrap_StdVectorString_rbegin, METH_VARARGS, NULL},
	 { (char *)"StdVectorString_rend", _wrap_StdVectorString_rend, METH_VARARGS, NULL},
	 { (char *)"StdVectorString_pop_back", _wrap_StdVectorString_pop_back, METH_VARARGS, NULL},
	 { (char *)"StdVectorString_erase", _wrap_StdVectorString_erase, METH_VARARGS, NULL},
	 { (char *)"new_StdVectorString", _wrap_new_StdVectorString, METH_VARARGS, NULL},
	 { (char *)"StdVectorString_push_back", _wrap_StdVectorString_push_back, METH_VARARGS, NULL},
	 { (char *)"StdVectorString_front", _wrap_StdVectorString_front, METH_VARARGS, NULL},
	 { (char *)"StdVectorString_back", _wrap_StdVectorString_back, METH_VARARGS, NULL},
	 { (char *)"StdVectorString_assign", _wrap_StdVectorString_assign, METH_VARARGS, NULL},
	 { (char *)"StdVectorString_resize", _wrap_StdVectorString_resize, METH_VARARGS, NULL},
	 { (char *)"StdVectorString_insert", _wrap_StdVectorString_insert, METH_VARARGS, NULL},
	 { (char *)"StdVectorString_reserve", _wrap_StdVectorString_reserve, METH_VARARGS, NULL},
	 { (char *)"StdVectorString_capacity", _wrap_StdVectorString_capacity, METH_VARARGS, NULL},
	 { (char *)"delete_StdVectorString", _wrap_delete_StdVectorString, METH_VARARGS, NULL},
	 { (char *)"StdVectorString_swigregister", StdVectorString_swigregister, METH_VARARGS, NULL},
	 { (char *)"StdVectorVec3f_iterator", _wrap_StdVectorVec3f_iterator, METH_VARARGS, NULL},
	 { (char *)"StdVectorVec3f___nonzero__", _wrap_StdVectorVec3f___nonzero__, METH_VARARGS, NULL},
	 { (char *)"StdVectorVec3f___bool__", _wrap_StdVectorVec3f___bool__, METH_VARARGS, NULL},
	 { (char *)"StdVectorVec3f___len__", _wrap_StdVectorVec3f___len__, METH_VARARGS, NULL},
	 { (char *)"StdVectorVec3f_pop", _wrap_StdVectorVec3f_pop, METH_VARARGS, NULL},
	 { (char *)"StdVectorVec3f___getslice__", _wrap_StdVectorVec3f___getslice__, METH_VARARGS, NULL},
	 { (char *)"StdVectorVec3f___setslice__", _wrap_StdVectorVec3f___setslice__, METH_VARARGS, NULL},
	 { (char *)"StdVectorVec3f___delslice__", _wrap_StdVectorVec3f___delslice__, METH_VARARGS, NULL},
	 { (char *)"StdVectorVec3f___delitem__", _wrap_StdVectorVec3f___delitem__, METH_VARARGS, NULL},
	 { (char *)"StdVectorVec3f___getitem__", _wrap_StdVectorVec3f___getitem__, METH_VARARGS, NULL},
	 { (char *)"StdVectorVec3f___setitem__", _wrap_StdVectorVec3f___setitem__, METH_VARARGS, NULL},
	 { (char *)"StdVectorVec3f_append", _wrap_StdVectorVec3f_append, METH_VARARGS, NULL},
	 { (char *)"StdVectorVec3f_empty", _wrap_StdVectorVec3f_empty, METH_VARARGS, NULL},
	 { (char *)"StdVectorVec3f_size", _wrap_StdVectorVec3f_size, METH_VARARGS, NULL},
	 { (char *)"StdVectorVec3f_clear", _wrap_StdVectorVec3f_clear, METH_VARARGS, NULL},
	 { (char *)"StdVectorVec3f_swap", _wrap_StdVectorVec3f_swap, METH_VARARGS, NULL},
	 { (char *)"StdVectorVec3f_get_allocator", _wrap_StdVectorVec3f_get_allocator, METH_VARARGS, NULL},
	 { (char *)"StdVectorVec3f_begin", _wrap_StdVectorVec3f_begin, METH_VARARGS, NULL},
	 { (char *)"StdVectorVec3f_end", _wrap_StdVectorVec3f_end, METH_VARARGS, NULL},
	 { (char *)"StdVectorVec3f_rbegin", _wrap_StdVectorVec3f_rbegin, METH_VARARGS, NULL},
	 { (char *)"StdVectorVec3f_rend", _wrap_StdVectorVec3f_rend, METH_VARARGS, NULL},
	 { (char *)"StdVectorVec3f_pop_back", _wrap_StdVectorVec3f_pop_back, METH_VARARGS, NULL},
	 { (char *)"StdVectorVec3f_erase", _wrap_StdVectorVec3f_erase, METH_VARARGS, NULL},
	 { (char *)"new_StdVectorVec3f", _wrap_new_StdVectorVec3f, METH_VARARGS, NULL},
	 { (char *)"StdVectorVec3f_push_back", _wrap_StdVectorVec3f_push_back, METH_VARARGS, NULL},
	 { (char *)"StdVectorVec3f_front", _wrap_StdVectorVec3f_front, METH_VARARGS, NULL},
	 { (char *)"StdVectorVec3f_back", _wrap_StdVectorVec3f_back, METH_VARARGS, NULL},
	 { (char *)"StdVectorVec3f_assign", _wrap_StdVectorVec3f_assign, METH_VARARGS, NULL},
	 { (char *)"StdVectorVec3f_resize", _wrap_StdVectorVec3f_resize, METH_VARARGS, NULL},
	 { (char *)"StdVectorVec3f_insert", _wrap_StdVectorVec3f_insert, METH_VARARGS, NULL},
	 { (char *)"StdVectorVec3f_reserve", _wrap_StdVectorVec3f_reserve, METH_VARARGS, NULL},
	 { (char *)"StdVectorVec3f_capacity", _wrap_StdVectorVec3f_capacity, METH_VARARGS, NULL},
	 { (char *)"delete_StdVectorVec3f", _wrap_delete_StdVectorVec3f, METH_VARARGS, NULL},
	 { (char *)"StdVectorVec3f_swigregister", StdVectorVec3f_swigregister, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerHpc_iterator", _wrap_StdVectorSmartPointerHpc_iterator, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerHpc___nonzero__", _wrap_StdVectorSmartPointerHpc___nonzero__, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerHpc___bool__", _wrap_StdVectorSmartPointerHpc___bool__, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerHpc___len__", _wrap_StdVectorSmartPointerHpc___len__, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerHpc_pop", _wrap_StdVectorSmartPointerHpc_pop, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerHpc___getslice__", _wrap_StdVectorSmartPointerHpc___getslice__, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerHpc___setslice__", _wrap_StdVectorSmartPointerHpc___setslice__, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerHpc___delslice__", _wrap_StdVectorSmartPointerHpc___delslice__, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerHpc___delitem__", _wrap_StdVectorSmartPointerHpc___delitem__, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerHpc___getitem__", _wrap_StdVectorSmartPointerHpc___getitem__, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerHpc___setitem__", _wrap_StdVectorSmartPointerHpc___setitem__, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerHpc_append", _wrap_StdVectorSmartPointerHpc_append, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerHpc_empty", _wrap_StdVectorSmartPointerHpc_empty, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerHpc_size", _wrap_StdVectorSmartPointerHpc_size, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerHpc_clear", _wrap_StdVectorSmartPointerHpc_clear, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerHpc_swap", _wrap_StdVectorSmartPointerHpc_swap, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerHpc_get_allocator", _wrap_StdVectorSmartPointerHpc_get_allocator, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerHpc_begin", _wrap_StdVectorSmartPointerHpc_begin, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerHpc_end", _wrap_StdVectorSmartPointerHpc_end, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerHpc_rbegin", _wrap_StdVectorSmartPointerHpc_rbegin, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerHpc_rend", _wrap_StdVectorSmartPointerHpc_rend, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerHpc_pop_back", _wrap_StdVectorSmartPointerHpc_pop_back, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerHpc_erase", _wrap_StdVectorSmartPointerHpc_erase, METH_VARARGS, NULL},
	 { (char *)"new_StdVectorSmartPointerHpc", _wrap_new_StdVectorSmartPointerHpc, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerHpc_push_back", _wrap_StdVectorSmartPointerHpc_push_back, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerHpc_front", _wrap_StdVectorSmartPointerHpc_front, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerHpc_back", _wrap_StdVectorSmartPointerHpc_back, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerHpc_assign", _wrap_StdVectorSmartPointerHpc_assign, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerHpc_resize", _wrap_StdVectorSmartPointerHpc_resize, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerHpc_insert", _wrap_StdVectorSmartPointerHpc_insert, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerHpc_reserve", _wrap_StdVectorSmartPointerHpc_reserve, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerHpc_capacity", _wrap_StdVectorSmartPointerHpc_capacity, METH_VARARGS, NULL},
	 { (char *)"delete_StdVectorSmartPointerHpc", _wrap_delete_StdVectorSmartPointerHpc, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerHpc_swigregister", StdVectorSmartPointerHpc_swigregister, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerBatch_iterator", _wrap_StdVectorSmartPointerBatch_iterator, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerBatch___nonzero__", _wrap_StdVectorSmartPointerBatch___nonzero__, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerBatch___bool__", _wrap_StdVectorSmartPointerBatch___bool__, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerBatch___len__", _wrap_StdVectorSmartPointerBatch___len__, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerBatch_pop", _wrap_StdVectorSmartPointerBatch_pop, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerBatch___getslice__", _wrap_StdVectorSmartPointerBatch___getslice__, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerBatch___setslice__", _wrap_StdVectorSmartPointerBatch___setslice__, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerBatch___delslice__", _wrap_StdVectorSmartPointerBatch___delslice__, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerBatch___delitem__", _wrap_StdVectorSmartPointerBatch___delitem__, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerBatch___getitem__", _wrap_StdVectorSmartPointerBatch___getitem__, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerBatch___setitem__", _wrap_StdVectorSmartPointerBatch___setitem__, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerBatch_append", _wrap_StdVectorSmartPointerBatch_append, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerBatch_empty", _wrap_StdVectorSmartPointerBatch_empty, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerBatch_size", _wrap_StdVectorSmartPointerBatch_size, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerBatch_clear", _wrap_StdVectorSmartPointerBatch_clear, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerBatch_swap", _wrap_StdVectorSmartPointerBatch_swap, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerBatch_get_allocator", _wrap_StdVectorSmartPointerBatch_get_allocator, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerBatch_begin", _wrap_StdVectorSmartPointerBatch_begin, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerBatch_end", _wrap_StdVectorSmartPointerBatch_end, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerBatch_rbegin", _wrap_StdVectorSmartPointerBatch_rbegin, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerBatch_rend", _wrap_StdVectorSmartPointerBatch_rend, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerBatch_pop_back", _wrap_StdVectorSmartPointerBatch_pop_back, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerBatch_erase", _wrap_StdVectorSmartPointerBatch_erase, METH_VARARGS, NULL},
	 { (char *)"new_StdVectorSmartPointerBatch", _wrap_new_StdVectorSmartPointerBatch, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerBatch_push_back", _wrap_StdVectorSmartPointerBatch_push_back, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerBatch_front", _wrap_StdVectorSmartPointerBatch_front, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerBatch_back", _wrap_StdVectorSmartPointerBatch_back, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerBatch_assign", _wrap_StdVectorSmartPointerBatch_assign, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerBatch_resize", _wrap_StdVectorSmartPointerBatch_resize, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerBatch_insert", _wrap_StdVectorSmartPointerBatch_insert, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerBatch_reserve", _wrap_StdVectorSmartPointerBatch_reserve, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerBatch_capacity", _wrap_StdVectorSmartPointerBatch_capacity, METH_VARARGS, NULL},
	 { (char *)"delete_StdVectorSmartPointerBatch", _wrap_delete_StdVectorSmartPointerBatch, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerBatch_swigregister", StdVectorSmartPointerBatch_swigregister, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerTexture_iterator", _wrap_StdVectorSmartPointerTexture_iterator, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerTexture___nonzero__", _wrap_StdVectorSmartPointerTexture___nonzero__, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerTexture___bool__", _wrap_StdVectorSmartPointerTexture___bool__, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerTexture___len__", _wrap_StdVectorSmartPointerTexture___len__, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerTexture_pop", _wrap_StdVectorSmartPointerTexture_pop, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerTexture___getslice__", _wrap_StdVectorSmartPointerTexture___getslice__, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerTexture___setslice__", _wrap_StdVectorSmartPointerTexture___setslice__, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerTexture___delslice__", _wrap_StdVectorSmartPointerTexture___delslice__, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerTexture___delitem__", _wrap_StdVectorSmartPointerTexture___delitem__, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerTexture___getitem__", _wrap_StdVectorSmartPointerTexture___getitem__, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerTexture___setitem__", _wrap_StdVectorSmartPointerTexture___setitem__, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerTexture_append", _wrap_StdVectorSmartPointerTexture_append, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerTexture_empty", _wrap_StdVectorSmartPointerTexture_empty, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerTexture_size", _wrap_StdVectorSmartPointerTexture_size, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerTexture_clear", _wrap_StdVectorSmartPointerTexture_clear, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerTexture_swap", _wrap_StdVectorSmartPointerTexture_swap, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerTexture_get_allocator", _wrap_StdVectorSmartPointerTexture_get_allocator, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerTexture_begin", _wrap_StdVectorSmartPointerTexture_begin, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerTexture_end", _wrap_StdVectorSmartPointerTexture_end, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerTexture_rbegin", _wrap_StdVectorSmartPointerTexture_rbegin, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerTexture_rend", _wrap_StdVectorSmartPointerTexture_rend, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerTexture_pop_back", _wrap_StdVectorSmartPointerTexture_pop_back, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerTexture_erase", _wrap_StdVectorSmartPointerTexture_erase, METH_VARARGS, NULL},
	 { (char *)"new_StdVectorSmartPointerTexture", _wrap_new_StdVectorSmartPointerTexture, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerTexture_push_back", _wrap_StdVectorSmartPointerTexture_push_back, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerTexture_front", _wrap_StdVectorSmartPointerTexture_front, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerTexture_back", _wrap_StdVectorSmartPointerTexture_back, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerTexture_assign", _wrap_StdVectorSmartPointerTexture_assign, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerTexture_resize", _wrap_StdVectorSmartPointerTexture_resize, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerTexture_insert", _wrap_StdVectorSmartPointerTexture_insert, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerTexture_reserve", _wrap_StdVectorSmartPointerTexture_reserve, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerTexture_capacity", _wrap_StdVectorSmartPointerTexture_capacity, METH_VARARGS, NULL},
	 { (char *)"delete_StdVectorSmartPointerTexture", _wrap_delete_StdVectorSmartPointerTexture, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerTexture_swigregister", StdVectorSmartPointerTexture_swigregister, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerEngineResource_iterator", _wrap_StdVectorSmartPointerEngineResource_iterator, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerEngineResource___nonzero__", _wrap_StdVectorSmartPointerEngineResource___nonzero__, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerEngineResource___bool__", _wrap_StdVectorSmartPointerEngineResource___bool__, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerEngineResource___len__", _wrap_StdVectorSmartPointerEngineResource___len__, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerEngineResource_pop", _wrap_StdVectorSmartPointerEngineResource_pop, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerEngineResource___getslice__", _wrap_StdVectorSmartPointerEngineResource___getslice__, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerEngineResource___setslice__", _wrap_StdVectorSmartPointerEngineResource___setslice__, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerEngineResource___delslice__", _wrap_StdVectorSmartPointerEngineResource___delslice__, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerEngineResource___delitem__", _wrap_StdVectorSmartPointerEngineResource___delitem__, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerEngineResource___getitem__", _wrap_StdVectorSmartPointerEngineResource___getitem__, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerEngineResource___setitem__", _wrap_StdVectorSmartPointerEngineResource___setitem__, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerEngineResource_append", _wrap_StdVectorSmartPointerEngineResource_append, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerEngineResource_empty", _wrap_StdVectorSmartPointerEngineResource_empty, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerEngineResource_size", _wrap_StdVectorSmartPointerEngineResource_size, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerEngineResource_clear", _wrap_StdVectorSmartPointerEngineResource_clear, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerEngineResource_swap", _wrap_StdVectorSmartPointerEngineResource_swap, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerEngineResource_get_allocator", _wrap_StdVectorSmartPointerEngineResource_get_allocator, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerEngineResource_begin", _wrap_StdVectorSmartPointerEngineResource_begin, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerEngineResource_end", _wrap_StdVectorSmartPointerEngineResource_end, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerEngineResource_rbegin", _wrap_StdVectorSmartPointerEngineResource_rbegin, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerEngineResource_rend", _wrap_StdVectorSmartPointerEngineResource_rend, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerEngineResource_pop_back", _wrap_StdVectorSmartPointerEngineResource_pop_back, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerEngineResource_erase", _wrap_StdVectorSmartPointerEngineResource_erase, METH_VARARGS, NULL},
	 { (char *)"new_StdVectorSmartPointerEngineResource", _wrap_new_StdVectorSmartPointerEngineResource, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerEngineResource_push_back", _wrap_StdVectorSmartPointerEngineResource_push_back, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerEngineResource_front", _wrap_StdVectorSmartPointerEngineResource_front, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerEngineResource_back", _wrap_StdVectorSmartPointerEngineResource_back, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerEngineResource_assign", _wrap_StdVectorSmartPointerEngineResource_assign, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerEngineResource_resize", _wrap_StdVectorSmartPointerEngineResource_resize, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerEngineResource_insert", _wrap_StdVectorSmartPointerEngineResource_insert, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerEngineResource_reserve", _wrap_StdVectorSmartPointerEngineResource_reserve, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerEngineResource_capacity", _wrap_StdVectorSmartPointerEngineResource_capacity, METH_VARARGS, NULL},
	 { (char *)"delete_StdVectorSmartPointerEngineResource", _wrap_delete_StdVectorSmartPointerEngineResource, METH_VARARGS, NULL},
	 { (char *)"StdVectorSmartPointerEngineResource_swigregister", StdVectorSmartPointerEngineResource_swigregister, METH_VARARGS, NULL},
	 { (char *)"Utils_IsPower2", _wrap_Utils_IsPower2, METH_VARARGS, NULL},
	 { (char *)"Utils_Degree2Rad", _wrap_Utils_Degree2Rad, METH_VARARGS, NULL},
	 { (char *)"Utils_Rad2Degree", _wrap_Utils_Rad2Degree, METH_VARARGS, NULL},
	 { (char *)"Utils_Clampf", _wrap_Utils_Clampf, METH_VARARGS, NULL},
	 { (char *)"Utils_Clampi", _wrap_Utils_Clampi, METH_VARARGS, NULL},
	 { (char *)"Utils_Overlap1d", _wrap_Utils_Overlap1d, METH_VARARGS, NULL},
	 { (char *)"Utils_Mapf2i", _wrap_Utils_Mapf2i, METH_VARARGS, NULL},
	 { (char *)"Utils_Mapi2f", _wrap_Utils_Mapi2f, METH_VARARGS, NULL},
	 { (char *)"Utils_Error", _wrap_Utils_Error, METH_VARARGS, NULL},
	 { (char *)"Utils_Format", _wrap_Utils_Format, METH_VARARGS, NULL},
	 { (char *)"Utils_ParseInts", _wrap_Utils_ParseInts, METH_VARARGS, NULL},
	 { (char *)"Utils_ParseFloats", _wrap_Utils_ParseFloats, METH_VARARGS, NULL},
	 { (char *)"Utils_FloatRand", _wrap_Utils_FloatRand, METH_VARARGS, NULL},
	 { (char *)"Utils_IntRand", _wrap_Utils_IntRand, METH_VARARGS, NULL},
	 { (char *)"Utils_FuzzyEqual", _wrap_Utils_FuzzyEqual, METH_VARARGS, NULL},
	 { (char *)"Utils_Log2i", _wrap_Utils_Log2i, METH_VARARGS, NULL},
	 { (char *)"Utils_Pow2i", _wrap_Utils_Pow2i, METH_VARARGS, NULL},
	 { (char *)"Utils_Replace", _wrap_Utils_Replace, METH_VARARGS, NULL},
	 { (char *)"Utils_StartsWith", _wrap_Utils_StartsWith, METH_VARARGS, NULL},
	 { (char *)"Utils_ToLower", _wrap_Utils_ToLower, METH_VARARGS, NULL},
	 { (char *)"Utils_RTrim", _wrap_Utils_RTrim, METH_VARARGS, NULL},
	 { (char *)"Utils_LTrim", _wrap_Utils_LTrim, METH_VARARGS, NULL},
	 { (char *)"Utils_Trim", _wrap_Utils_Trim, METH_VARARGS, NULL},
	 { (char *)"Utils_SelfTest", _wrap_Utils_SelfTest, METH_VARARGS, NULL},
	 { (char *)"new_Utils", _wrap_new_Utils, METH_VARARGS, NULL},
	 { (char *)"delete_Utils", _wrap_delete_Utils, METH_VARARGS, NULL},
	 { (char *)"Utils_swigregister", Utils_swigregister, METH_VARARGS, NULL},
	 { (char *)"Log_redirect", _wrap_Log_redirect, METH_VARARGS, NULL},
	 { (char *)"Log_printf", _wrap_Log_printf, METH_VARARGS, NULL},
	 { (char *)"new_Log", _wrap_new_Log, METH_VARARGS, NULL},
	 { (char *)"delete_Log", _wrap_delete_Log, METH_VARARGS, NULL},
	 { (char *)"Log_swigregister", Log_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Clock", _wrap_new_Clock, METH_VARARGS, NULL},
	 { (char *)"Clock___sub__", _wrap_Clock___sub__, METH_VARARGS, NULL},
	 { (char *)"Clock_assign", _wrap_Clock_assign, METH_VARARGS, NULL},
	 { (char *)"Clock_reset", _wrap_Clock_reset, METH_VARARGS, NULL},
	 { (char *)"Clock_sec", _wrap_Clock_sec, METH_VARARGS, NULL},
	 { (char *)"Clock_msec", _wrap_Clock_msec, METH_VARARGS, NULL},
	 { (char *)"delete_Clock", _wrap_delete_Clock, METH_VARARGS, NULL},
	 { (char *)"Clock_swigregister", Clock_swigregister, METH_VARARGS, NULL},
	 { (char *)"Keyboard_isShiftPressed", _wrap_Keyboard_isShiftPressed, METH_VARARGS, NULL},
	 { (char *)"Keyboard_isAltPressed", _wrap_Keyboard_isAltPressed, METH_VARARGS, NULL},
	 { (char *)"Keyboard_isControlPressed", _wrap_Keyboard_isControlPressed, METH_VARARGS, NULL},
	 { (char *)"new_Keyboard", _wrap_new_Keyboard, METH_VARARGS, NULL},
	 { (char *)"delete_Keyboard", _wrap_delete_Keyboard, METH_VARARGS, NULL},
	 { (char *)"Keyboard_swigregister", Keyboard_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_SpinLock", _wrap_new_SpinLock, METH_VARARGS, NULL},
	 { (char *)"SpinLock_Lock", _wrap_SpinLock_Lock, METH_VARARGS, NULL},
	 { (char *)"SpinLock_Unlock", _wrap_SpinLock_Unlock, METH_VARARGS, NULL},
	 { (char *)"delete_SpinLock", _wrap_delete_SpinLock, METH_VARARGS, NULL},
	 { (char *)"SpinLock_swigregister", SpinLock_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Archive", _wrap_new_Archive, METH_VARARGS, NULL},
	 { (char *)"delete_Archive", _wrap_delete_Archive, METH_VARARGS, NULL},
	 { (char *)"Archive_Open", _wrap_Archive_Open, METH_VARARGS, NULL},
	 { (char *)"Archive_Close", _wrap_Archive_Close, METH_VARARGS, NULL},
	 { (char *)"Archive_Saving", _wrap_Archive_Saving, METH_VARARGS, NULL},
	 { (char *)"Archive_Loading", _wrap_Archive_Loading, METH_VARARGS, NULL},
	 { (char *)"Archive_TextMode", _wrap_Archive_TextMode, METH_VARARGS, NULL},
	 { (char *)"Archive_BinaryMode", _wrap_Archive_BinaryMode, METH_VARARGS, NULL},
	 { (char *)"Archive_Push", _wrap_Archive_Push, METH_VARARGS, NULL},
	 { (char *)"Archive_Pop", _wrap_Archive_Pop, METH_VARARGS, NULL},
	 { (char *)"Archive_WriteString", _wrap_Archive_WriteString, METH_VARARGS, NULL},
	 { (char *)"Archive_WriteInt", _wrap_Archive_WriteInt, METH_VARARGS, NULL},
	 { (char *)"Archive_WriteUint", _wrap_Archive_WriteUint, METH_VARARGS, NULL},
	 { (char *)"Archive_WriteUint64", _wrap_Archive_WriteUint64, METH_VARARGS, NULL},
	 { (char *)"Archive_WriteFloat", _wrap_Archive_WriteFloat, METH_VARARGS, NULL},
	 { (char *)"Archive_WriteVectorInt", _wrap_Archive_WriteVectorInt, METH_VARARGS, NULL},
	 { (char *)"Archive_WriteVectorFloat", _wrap_Archive_WriteVectorFloat, METH_VARARGS, NULL},
	 { (char *)"Archive_ReadString", _wrap_Archive_ReadString, METH_VARARGS, NULL},
	 { (char *)"Archive_ReadInt", _wrap_Archive_ReadInt, METH_VARARGS, NULL},
	 { (char *)"Archive_ReadUint", _wrap_Archive_ReadUint, METH_VARARGS, NULL},
	 { (char *)"Archive_ReadUint64", _wrap_Archive_ReadUint64, METH_VARARGS, NULL},
	 { (char *)"Archive_ReadFloat", _wrap_Archive_ReadFloat, METH_VARARGS, NULL},
	 { (char *)"Archive_ReadVectorInt", _wrap_Archive_ReadVectorInt, METH_VARARGS, NULL},
	 { (char *)"Archive_ReadVectorFloat", _wrap_Archive_ReadVectorFloat, METH_VARARGS, NULL},
	 { (char *)"Archive_WriteRaw", _wrap_Archive_WriteRaw, METH_VARARGS, NULL},
	 { (char *)"Archive_ReadRaw", _wrap_Archive_ReadRaw, METH_VARARGS, NULL},
	 { (char *)"Archive_ExistsNode", _wrap_Archive_ExistsNode, METH_VARARGS, NULL},
	 { (char *)"Archive_SelfTest", _wrap_Archive_SelfTest, METH_VARARGS, NULL},
	 { (char *)"Archive_swigregister", Archive_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Encoder", _wrap_new_Encoder, METH_VARARGS, NULL},
	 { (char *)"delete_Encoder", _wrap_delete_Encoder, METH_VARARGS, NULL},
	 { (char *)"Encoder_WriteRaw", _wrap_Encoder_WriteRaw, METH_VARARGS, NULL},
	 { (char *)"Encoder_WriteChar", _wrap_Encoder_WriteChar, METH_VARARGS, NULL},
	 { (char *)"Encoder_WriteUchar", _wrap_Encoder_WriteUchar, METH_VARARGS, NULL},
	 { (char *)"Encoder_WriteShort", _wrap_Encoder_WriteShort, METH_VARARGS, NULL},
	 { (char *)"Encoder_WriteUshort", _wrap_Encoder_WriteUshort, METH_VARARGS, NULL},
	 { (char *)"Encoder_WriteInt", _wrap_Encoder_WriteInt, METH_VARARGS, NULL},
	 { (char *)"Encoder_WriteUint", _wrap_Encoder_WriteUint, METH_VARARGS, NULL},
	 { (char *)"Encoder_WriteInt64", _wrap_Encoder_WriteInt64, METH_VARARGS, NULL},
	 { (char *)"Encoder_WriteUint64", _wrap_Encoder_WriteUint64, METH_VARARGS, NULL},
	 { (char *)"Encoder_WriteFloat", _wrap_Encoder_WriteFloat, METH_VARARGS, NULL},
	 { (char *)"Encoder_WriteDouble", _wrap_Encoder_WriteDouble, METH_VARARGS, NULL},
	 { (char *)"Encoder_WriteString", _wrap_Encoder_WriteString, METH_VARARGS, NULL},
	 { (char *)"Encoder_c_str", _wrap_Encoder_c_str, METH_VARARGS, NULL},
	 { (char *)"Encoder___str__", _wrap_Encoder___str__, METH_VARARGS, NULL},
	 { (char *)"Encoder_SelfTest", _wrap_Encoder_SelfTest, METH_VARARGS, NULL},
	 { (char *)"Encoder_swigregister", Encoder_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Decoder", _wrap_new_Decoder, METH_VARARGS, NULL},
	 { (char *)"delete_Decoder", _wrap_delete_Decoder, METH_VARARGS, NULL},
	 { (char *)"Decoder_ReadRaw", _wrap_Decoder_ReadRaw, METH_VARARGS, NULL},
	 { (char *)"Decoder_ReadChar", _wrap_Decoder_ReadChar, METH_VARARGS, NULL},
	 { (char *)"Decoder_ReadUchar", _wrap_Decoder_ReadUchar, METH_VARARGS, NULL},
	 { (char *)"Decoder_ReadShort", _wrap_Decoder_ReadShort, METH_VARARGS, NULL},
	 { (char *)"Decoder_ReadUshort", _wrap_Decoder_ReadUshort, METH_VARARGS, NULL},
	 { (char *)"Decoder_ReadInt", _wrap_Decoder_ReadInt, METH_VARARGS, NULL},
	 { (char *)"Decoder_ReadUint", _wrap_Decoder_ReadUint, METH_VARARGS, NULL},
	 { (char *)"Decoder_ReadInt64", _wrap_Decoder_ReadInt64, METH_VARARGS, NULL},
	 { (char *)"Decoder_ReadUint64", _wrap_Decoder_ReadUint64, METH_VARARGS, NULL},
	 { (char *)"Decoder_ReadFloat", _wrap_Decoder_ReadFloat, METH_VARARGS, NULL},
	 { (char *)"Decoder_ReadDouble", _wrap_Decoder_ReadDouble, METH_VARARGS, NULL},
	 { (char *)"Decoder_ReadString", _wrap_Decoder_ReadString, METH_VARARGS, NULL},
	 { (char *)"Decoder_SelfTest", _wrap_Decoder_SelfTest, METH_VARARGS, NULL},
	 { (char *)"Decoder_swigregister", Decoder_swigregister, METH_VARARGS, NULL},
	 { (char *)"FileSystem_ResourcesDir_get", _wrap_FileSystem_ResourcesDir_get, METH_VARARGS, NULL},
	 { (char *)"FileSystem_ResourcesDir_set", _wrap_FileSystem_ResourcesDir_set, METH_VARARGS, NULL},
	 { (char *)"FileSystem_FullPath", _wrap_FileSystem_FullPath, METH_VARARGS, NULL},
	 { (char *)"FileSystem_ShortPath", _wrap_FileSystem_ShortPath, METH_VARARGS, NULL},
	 { (char *)"FileSystem_Extension", _wrap_FileSystem_Extension, METH_VARARGS, NULL},
	 { (char *)"FileSystem_ReadFile", _wrap_FileSystem_ReadFile, METH_VARARGS, NULL},
	 { (char *)"FileSystem_FileSize", _wrap_FileSystem_FileSize, METH_VARARGS, NULL},
	 { (char *)"FileSystem_FileExists", _wrap_FileSystem_FileExists, METH_VARARGS, NULL},
	 { (char *)"new_FileSystem", _wrap_new_FileSystem, METH_VARARGS, NULL},
	 { (char *)"delete_FileSystem", _wrap_delete_FileSystem, METH_VARARGS, NULL},
	 { (char *)"FileSystem_swigregister", FileSystem_swigregister, METH_VARARGS, NULL},
	 { (char *)"MouseEvent_type_set", _wrap_MouseEvent_type_set, METH_VARARGS, NULL},
	 { (char *)"MouseEvent_type_get", _wrap_MouseEvent_type_get, METH_VARARGS, NULL},
	 { (char *)"MouseEvent_button_set", _wrap_MouseEvent_button_set, METH_VARARGS, NULL},
	 { (char *)"MouseEvent_button_get", _wrap_MouseEvent_button_get, METH_VARARGS, NULL},
	 { (char *)"MouseEvent_x_set", _wrap_MouseEvent_x_set, METH_VARARGS, NULL},
	 { (char *)"MouseEvent_x_get", _wrap_MouseEvent_x_get, METH_VARARGS, NULL},
	 { (char *)"MouseEvent_y_set", _wrap_MouseEvent_y_set, METH_VARARGS, NULL},
	 { (char *)"MouseEvent_y_get", _wrap_MouseEvent_y_get, METH_VARARGS, NULL},
	 { (char *)"MouseEvent_delta_set", _wrap_MouseEvent_delta_set, METH_VARARGS, NULL},
	 { (char *)"MouseEvent_delta_get", _wrap_MouseEvent_delta_get, METH_VARARGS, NULL},
	 { (char *)"new_MouseEvent", _wrap_new_MouseEvent, METH_VARARGS, NULL},
	 { (char *)"delete_MouseEvent", _wrap_delete_MouseEvent, METH_VARARGS, NULL},
	 { (char *)"MouseEvent_swigregister", MouseEvent_swigregister, METH_VARARGS, NULL},
	 { (char *)"Vec2i_x_set", _wrap_Vec2i_x_set, METH_VARARGS, NULL},
	 { (char *)"Vec2i_x_get", _wrap_Vec2i_x_get, METH_VARARGS, NULL},
	 { (char *)"Vec2i_y_set", _wrap_Vec2i_y_set, METH_VARARGS, NULL},
	 { (char *)"Vec2i_y_get", _wrap_Vec2i_y_get, METH_VARARGS, NULL},
	 { (char *)"new_Vec2i", _wrap_new_Vec2i, METH_VARARGS, NULL},
	 { (char *)"Vec2i_assign", _wrap_Vec2i_assign, METH_VARARGS, NULL},
	 { (char *)"Vec2i_scale", _wrap_Vec2i_scale, METH_VARARGS, NULL},
	 { (char *)"Vec2i_translate", _wrap_Vec2i_translate, METH_VARARGS, NULL},
	 { (char *)"Vec2i___eq__", _wrap_Vec2i___eq__, METH_VARARGS, NULL},
	 { (char *)"Vec2i_get", _wrap_Vec2i_get, METH_VARARGS, NULL},
	 { (char *)"Vec2i_set", _wrap_Vec2i_set, METH_VARARGS, NULL},
	 { (char *)"Vec2i___getitem_ref__", _wrap_Vec2i___getitem_ref__, METH_VARARGS, NULL},
	 { (char *)"Vec2i___getitem__", _wrap_Vec2i___getitem__, METH_VARARGS, NULL},
	 { (char *)"delete_Vec2i", _wrap_delete_Vec2i, METH_VARARGS, NULL},
	 { (char *)"Vec2i_swigregister", Vec2i_swigregister, METH_VARARGS, NULL},
	 { (char *)"Vec2f_x_set", _wrap_Vec2f_x_set, METH_VARARGS, NULL},
	 { (char *)"Vec2f_x_get", _wrap_Vec2f_x_get, METH_VARARGS, NULL},
	 { (char *)"Vec2f_y_set", _wrap_Vec2f_y_set, METH_VARARGS, NULL},
	 { (char *)"Vec2f_y_get", _wrap_Vec2f_y_get, METH_VARARGS, NULL},
	 { (char *)"new_Vec2f", _wrap_new_Vec2f, METH_VARARGS, NULL},
	 { (char *)"Vec2f_assign", _wrap_Vec2f_assign, METH_VARARGS, NULL},
	 { (char *)"Vec2f___eq__", _wrap_Vec2f___eq__, METH_VARARGS, NULL},
	 { (char *)"Vec2f_get", _wrap_Vec2f_get, METH_VARARGS, NULL},
	 { (char *)"Vec2f_set", _wrap_Vec2f_set, METH_VARARGS, NULL},
	 { (char *)"Vec2f___getitem_ref__", _wrap_Vec2f___getitem_ref__, METH_VARARGS, NULL},
	 { (char *)"Vec2f___getitem__", _wrap_Vec2f___getitem__, METH_VARARGS, NULL},
	 { (char *)"Vec2f___str__", _wrap_Vec2f___str__, METH_VARARGS, NULL},
	 { (char *)"Vec2f___repr__", _wrap_Vec2f___repr__, METH_VARARGS, NULL},
	 { (char *)"delete_Vec2f", _wrap_delete_Vec2f, METH_VARARGS, NULL},
	 { (char *)"Vec2f_swigregister", Vec2f_swigregister, METH_VARARGS, NULL},
	 { (char *)"Vec3f_Write", _wrap_Vec3f_Write, METH_VARARGS, NULL},
	 { (char *)"Vec3f_Read", _wrap_Vec3f_Read, METH_VARARGS, NULL},
	 { (char *)"Vec3f_x_set", _wrap_Vec3f_x_set, METH_VARARGS, NULL},
	 { (char *)"Vec3f_x_get", _wrap_Vec3f_x_get, METH_VARARGS, NULL},
	 { (char *)"Vec3f_y_set", _wrap_Vec3f_y_set, METH_VARARGS, NULL},
	 { (char *)"Vec3f_y_get", _wrap_Vec3f_y_get, METH_VARARGS, NULL},
	 { (char *)"Vec3f_z_set", _wrap_Vec3f_z_set, METH_VARARGS, NULL},
	 { (char *)"Vec3f_z_get", _wrap_Vec3f_z_get, METH_VARARGS, NULL},
	 { (char *)"new_Vec3f", _wrap_new_Vec3f, METH_VARARGS, NULL},
	 { (char *)"Vec3f_assign", _wrap_Vec3f_assign, METH_VARARGS, NULL},
	 { (char *)"Vec3f_store", _wrap_Vec3f_store, METH_VARARGS, NULL},
	 { (char *)"Vec3f_module2", _wrap_Vec3f_module2, METH_VARARGS, NULL},
	 { (char *)"Vec3f_module", _wrap_Vec3f_module, METH_VARARGS, NULL},
	 { (char *)"Vec3f_distance", _wrap_Vec3f_distance, METH_VARARGS, NULL},
	 { (char *)"Vec3f_normalize", _wrap_Vec3f_normalize, METH_VARARGS, NULL},
	 { (char *)"Vec3f___imul__", _wrap_Vec3f___imul__, METH_VARARGS, NULL},
	 { (char *)"Vec3f___idiv__", _wrap_Vec3f___idiv__, METH_VARARGS, NULL},
	 { (char *)"Vec3f___iadd__", _wrap_Vec3f___iadd__, METH_VARARGS, NULL},
	 { (char *)"Vec3f___isub__", _wrap_Vec3f___isub__, METH_VARARGS, NULL},
	 { (char *)"Vec3f_cross", _wrap_Vec3f_cross, METH_VARARGS, NULL},
	 { (char *)"Vec3f_isValid", _wrap_Vec3f_isValid, METH_VARARGS, NULL},
	 { (char *)"Vec3f_fuzzyEqual", _wrap_Vec3f_fuzzyEqual, METH_VARARGS, NULL},
	 { (char *)"Vec3f___add__", _wrap_Vec3f___add__, METH_VARARGS, NULL},
	 { (char *)"Vec3f___sub__", _wrap_Vec3f___sub__, METH_VARARGS, NULL},
	 { (char *)"Vec3f___mul__", _wrap_Vec3f___mul__, METH_VARARGS, NULL},
	 { (char *)"Vec3f___div__", _wrap_Vec3f___div__, METH_VARARGS, NULL},
	 { (char *)"Vec3f___eq__", _wrap_Vec3f___eq__, METH_VARARGS, NULL},
	 { (char *)"Vec3f___ne__", _wrap_Vec3f___ne__, METH_VARARGS, NULL},
	 { (char *)"Vec3f_Abs", _wrap_Vec3f_Abs, METH_VARARGS, NULL},
	 { (char *)"Vec3f_Max", _wrap_Vec3f_Max, METH_VARARGS, NULL},
	 { (char *)"Vec3f_Min", _wrap_Vec3f_Min, METH_VARARGS, NULL},
	 { (char *)"Vec3f_maxidx", _wrap_Vec3f_maxidx, METH_VARARGS, NULL},
	 { (char *)"Vec3f_minidx", _wrap_Vec3f_minidx, METH_VARARGS, NULL},
	 { (char *)"Vec3f_get", _wrap_Vec3f_get, METH_VARARGS, NULL},
	 { (char *)"Vec3f_set", _wrap_Vec3f_set, METH_VARARGS, NULL},
	 { (char *)"Vec3f___getitem_ref__", _wrap_Vec3f___getitem_ref__, METH_VARARGS, NULL},
	 { (char *)"Vec3f___getitem__", _wrap_Vec3f___getitem__, METH_VARARGS, NULL},
	 { (char *)"Vec3f_rotate", _wrap_Vec3f_rotate, METH_VARARGS, NULL},
	 { (char *)"Vec3f___repr__", _wrap_Vec3f___repr__, METH_VARARGS, NULL},
	 { (char *)"Vec3f___str__", _wrap_Vec3f___str__, METH_VARARGS, NULL},
	 { (char *)"Vec3f_SelfTest", _wrap_Vec3f_SelfTest, METH_VARARGS, NULL},
	 { (char *)"delete_Vec3f", _wrap_delete_Vec3f, METH_VARARGS, NULL},
	 { (char *)"Vec3f_swigregister", Vec3f_swigregister, METH_VARARGS, NULL},
	 { (char *)"Vec4f_x_set", _wrap_Vec4f_x_set, METH_VARARGS, NULL},
	 { (char *)"Vec4f_x_get", _wrap_Vec4f_x_get, METH_VARARGS, NULL},
	 { (char *)"Vec4f_y_set", _wrap_Vec4f_y_set, METH_VARARGS, NULL},
	 { (char *)"Vec4f_y_get", _wrap_Vec4f_y_get, METH_VARARGS, NULL},
	 { (char *)"Vec4f_z_set", _wrap_Vec4f_z_set, METH_VARARGS, NULL},
	 { (char *)"Vec4f_z_get", _wrap_Vec4f_z_get, METH_VARARGS, NULL},
	 { (char *)"Vec4f_w_set", _wrap_Vec4f_w_set, METH_VARARGS, NULL},
	 { (char *)"Vec4f_w_get", _wrap_Vec4f_w_get, METH_VARARGS, NULL},
	 { (char *)"new_Vec4f", _wrap_new_Vec4f, METH_VARARGS, NULL},
	 { (char *)"Vec4f_module2", _wrap_Vec4f_module2, METH_VARARGS, NULL},
	 { (char *)"Vec4f_module", _wrap_Vec4f_module, METH_VARARGS, NULL},
	 { (char *)"Vec4f_normalize", _wrap_Vec4f_normalize, METH_VARARGS, NULL},
	 { (char *)"Vec4f_get", _wrap_Vec4f_get, METH_VARARGS, NULL},
	 { (char *)"Vec4f_set", _wrap_Vec4f_set, METH_VARARGS, NULL},
	 { (char *)"Vec4f___getitem_ref__", _wrap_Vec4f___getitem_ref__, METH_VARARGS, NULL},
	 { (char *)"Vec4f___getitem__", _wrap_Vec4f___getitem__, METH_VARARGS, NULL},
	 { (char *)"Vec4f___imul__", _wrap_Vec4f___imul__, METH_VARARGS, NULL},
	 { (char *)"Vec4f___idiv__", _wrap_Vec4f___idiv__, METH_VARARGS, NULL},
	 { (char *)"Vec4f___iadd__", _wrap_Vec4f___iadd__, METH_VARARGS, NULL},
	 { (char *)"Vec4f___isub__", _wrap_Vec4f___isub__, METH_VARARGS, NULL},
	 { (char *)"Vec4f_assign", _wrap_Vec4f_assign, METH_VARARGS, NULL},
	 { (char *)"Vec4f_Min", _wrap_Vec4f_Min, METH_VARARGS, NULL},
	 { (char *)"Vec4f_Max", _wrap_Vec4f_Max, METH_VARARGS, NULL},
	 { (char *)"Vec4f___add__", _wrap_Vec4f___add__, METH_VARARGS, NULL},
	 { (char *)"Vec4f___sub__", _wrap_Vec4f___sub__, METH_VARARGS, NULL},
	 { (char *)"Vec4f___div__", _wrap_Vec4f___div__, METH_VARARGS, NULL},
	 { (char *)"Vec4f___eq__", _wrap_Vec4f___eq__, METH_VARARGS, NULL},
	 { (char *)"Vec4f___ne__", _wrap_Vec4f___ne__, METH_VARARGS, NULL},
	 { (char *)"Vec4f___mul__", _wrap_Vec4f___mul__, METH_VARARGS, NULL},
	 { (char *)"Vec4f_fuzzyEqual", _wrap_Vec4f_fuzzyEqual, METH_VARARGS, NULL},
	 { (char *)"Vec4f___repr__", _wrap_Vec4f___repr__, METH_VARARGS, NULL},
	 { (char *)"Vec4f___str__", _wrap_Vec4f___str__, METH_VARARGS, NULL},
	 { (char *)"Vec4f_SelfTest", _wrap_Vec4f_SelfTest, METH_VARARGS, NULL},
	 { (char *)"delete_Vec4f", _wrap_delete_Vec4f, METH_VARARGS, NULL},
	 { (char *)"Vec4f_swigregister", Vec4f_swigregister, METH_VARARGS, NULL},
	 { (char *)"Vecf_mem_set", _wrap_Vecf_mem_set, METH_VARARGS, NULL},
	 { (char *)"Vecf_mem_get", _wrap_Vecf_mem_get, METH_VARARGS, NULL},
	 { (char *)"Vecf_dim_set", _wrap_Vecf_dim_set, METH_VARARGS, NULL},
	 { (char *)"Vecf_dim_get", _wrap_Vecf_dim_get, METH_VARARGS, NULL},
	 { (char *)"new_Vecf", _wrap_new_Vecf, METH_VARARGS, NULL},
	 { (char *)"delete_Vecf", _wrap_delete_Vecf, METH_VARARGS, NULL},
	 { (char *)"Vecf_get", _wrap_Vecf_get, METH_VARARGS, NULL},
	 { (char *)"Vecf_set", _wrap_Vecf_set, METH_VARARGS, NULL},
	 { (char *)"Vecf___getitem_ref__", _wrap_Vecf___getitem_ref__, METH_VARARGS, NULL},
	 { (char *)"Vecf___getitem__", _wrap_Vecf___getitem__, METH_VARARGS, NULL},
	 { (char *)"Vecf___imul__", _wrap_Vecf___imul__, METH_VARARGS, NULL},
	 { (char *)"Vecf___idiv__", _wrap_Vecf___idiv__, METH_VARARGS, NULL},
	 { (char *)"Vecf___iadd__", _wrap_Vecf___iadd__, METH_VARARGS, NULL},
	 { (char *)"Vecf___isub__", _wrap_Vecf___isub__, METH_VARARGS, NULL},
	 { (char *)"Vecf_assign", _wrap_Vecf_assign, METH_VARARGS, NULL},
	 { (char *)"Vecf___add__", _wrap_Vecf___add__, METH_VARARGS, NULL},
	 { (char *)"Vecf___sub__", _wrap_Vecf___sub__, METH_VARARGS, NULL},
	 { (char *)"Vecf___div__", _wrap_Vecf___div__, METH_VARARGS, NULL},
	 { (char *)"Vecf___eq__", _wrap_Vecf___eq__, METH_VARARGS, NULL},
	 { (char *)"Vecf___ne__", _wrap_Vecf___ne__, METH_VARARGS, NULL},
	 { (char *)"Vecf_Min", _wrap_Vecf_Min, METH_VARARGS, NULL},
	 { (char *)"Vecf_Max", _wrap_Vecf_Max, METH_VARARGS, NULL},
	 { (char *)"Vecf_module2", _wrap_Vecf_module2, METH_VARARGS, NULL},
	 { (char *)"Vecf_module", _wrap_Vecf_module, METH_VARARGS, NULL},
	 { (char *)"Vecf_normalize", _wrap_Vecf_normalize, METH_VARARGS, NULL},
	 { (char *)"Vecf_fuzzyEqual", _wrap_Vecf_fuzzyEqual, METH_VARARGS, NULL},
	 { (char *)"Vecf_permutate", _wrap_Vecf_permutate, METH_VARARGS, NULL},
	 { (char *)"Vecf___mul__", _wrap_Vecf___mul__, METH_VARARGS, NULL},
	 { (char *)"Vecf___repr__", _wrap_Vecf___repr__, METH_VARARGS, NULL},
	 { (char *)"Vecf___str__", _wrap_Vecf___str__, METH_VARARGS, NULL},
	 { (char *)"Vecf_SelfTest", _wrap_Vecf_SelfTest, METH_VARARGS, NULL},
	 { (char *)"Vecf_swigregister", Vecf_swigregister, METH_VARARGS, NULL},
	 { (char *)"Triangle2i_p0_set", _wrap_Triangle2i_p0_set, METH_VARARGS, NULL},
	 { (char *)"Triangle2i_p0_get", _wrap_Triangle2i_p0_get, METH_VARARGS, NULL},
	 { (char *)"Triangle2i_p1_set", _wrap_Triangle2i_p1_set, METH_VARARGS, NULL},
	 { (char *)"Triangle2i_p1_get", _wrap_Triangle2i_p1_get, METH_VARARGS, NULL},
	 { (char *)"Triangle2i_p2_set", _wrap_Triangle2i_p2_set, METH_VARARGS, NULL},
	 { (char *)"Triangle2i_p2_get", _wrap_Triangle2i_p2_get, METH_VARARGS, NULL},
	 { (char *)"new_Triangle2i", _wrap_new_Triangle2i, METH_VARARGS, NULL},
	 { (char *)"Triangle2i_getPoint", _wrap_Triangle2i_getPoint, METH_VARARGS, NULL},
	 { (char *)"Triangle2i_getRefPoint", _wrap_Triangle2i_getRefPoint, METH_VARARGS, NULL},
	 { (char *)"Triangle2i_left", _wrap_Triangle2i_left, METH_VARARGS, NULL},
	 { (char *)"Triangle2i_right", _wrap_Triangle2i_right, METH_VARARGS, NULL},
	 { (char *)"Triangle2i_bottom", _wrap_Triangle2i_bottom, METH_VARARGS, NULL},
	 { (char *)"Triangle2i_top", _wrap_Triangle2i_top, METH_VARARGS, NULL},
	 { (char *)"Triangle2i___eq__", _wrap_Triangle2i___eq__, METH_VARARGS, NULL},
	 { (char *)"Triangle2i_scale", _wrap_Triangle2i_scale, METH_VARARGS, NULL},
	 { (char *)"Triangle2i_translate", _wrap_Triangle2i_translate, METH_VARARGS, NULL},
	 { (char *)"Triangle2i_centerx", _wrap_Triangle2i_centerx, METH_VARARGS, NULL},
	 { (char *)"Triangle2i_centery", _wrap_Triangle2i_centery, METH_VARARGS, NULL},
	 { (char *)"delete_Triangle2i", _wrap_delete_Triangle2i, METH_VARARGS, NULL},
	 { (char *)"Triangle2i_swigregister", Triangle2i_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Plane4f", _wrap_new_Plane4f, METH_VARARGS, NULL},
	 { (char *)"Plane4f_set", _wrap_Plane4f_set, METH_VARARGS, NULL},
	 { (char *)"Plane4f_normalize", _wrap_Plane4f_normalize, METH_VARARGS, NULL},
	 { (char *)"Plane4f_getProjectionMatrix", _wrap_Plane4f_getProjectionMatrix, METH_VARARGS, NULL},
	 { (char *)"Plane4f_projectPoint", _wrap_Plane4f_projectPoint, METH_VARARGS, NULL},
	 { (char *)"Plane4f_projectVector", _wrap_Plane4f_projectVector, METH_VARARGS, NULL},
	 { (char *)"Plane4f_bestFittingPlane", _wrap_Plane4f_bestFittingPlane, METH_VARARGS, NULL},
	 { (char *)"Plane4f_getNormal", _wrap_Plane4f_getNormal, METH_VARARGS, NULL},
	 { (char *)"Plane4f_getDistance", _wrap_Plane4f_getDistance, METH_VARARGS, NULL},
	 { (char *)"Plane4f_reverse", _wrap_Plane4f_reverse, METH_VARARGS, NULL},
	 { (char *)"Plane4f_forceBelow", _wrap_Plane4f_forceBelow, METH_VARARGS, NULL},
	 { (char *)"Plane4f_forceAbove", _wrap_Plane4f_forceAbove, METH_VARARGS, NULL},
	 { (char *)"Plane4f___repr__", _wrap_Plane4f___repr__, METH_VARARGS, NULL},
	 { (char *)"Plane4f___str__", _wrap_Plane4f___str__, METH_VARARGS, NULL},
	 { (char *)"Plane4f_SelfTest", _wrap_Plane4f_SelfTest, METH_VARARGS, NULL},
	 { (char *)"delete_Plane4f", _wrap_delete_Plane4f, METH_VARARGS, NULL},
	 { (char *)"Plane4f_swigregister", Plane4f_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Planef", _wrap_new_Planef, METH_VARARGS, NULL},
	 { (char *)"Planef_normalize", _wrap_Planef_normalize, METH_VARARGS, NULL},
	 { (char *)"Planef_bestFittingPlane", _wrap_Planef_bestFittingPlane, METH_VARARGS, NULL},
	 { (char *)"Planef_getNormal", _wrap_Planef_getNormal, METH_VARARGS, NULL},
	 { (char *)"Planef_getDistance", _wrap_Planef_getDistance, METH_VARARGS, NULL},
	 { (char *)"Planef_reverse", _wrap_Planef_reverse, METH_VARARGS, NULL},
	 { (char *)"Planef_forceBelow", _wrap_Planef_forceBelow, METH_VARARGS, NULL},
	 { (char *)"Planef_forceAbove", _wrap_Planef_forceAbove, METH_VARARGS, NULL},
	 { (char *)"Planef_getProjectionMatrix", _wrap_Planef_getProjectionMatrix, METH_VARARGS, NULL},
	 { (char *)"Planef_projectPoint", _wrap_Planef_projectPoint, METH_VARARGS, NULL},
	 { (char *)"Planef_getRandomPlane", _wrap_Planef_getRandomPlane, METH_VARARGS, NULL},
	 { (char *)"Planef_getRandomPoint", _wrap_Planef_getRandomPoint, METH_VARARGS, NULL},
	 { (char *)"Planef_getMainDirection", _wrap_Planef_getMainDirection, METH_VARARGS, NULL},
	 { (char *)"Planef___repr__", _wrap_Planef___repr__, METH_VARARGS, NULL},
	 { (char *)"Planef___str__", _wrap_Planef___str__, METH_VARARGS, NULL},
	 { (char *)"Planef_SelfTest", _wrap_Planef_SelfTest, METH_VARARGS, NULL},
	 { (char *)"delete_Planef", _wrap_delete_Planef, METH_VARARGS, NULL},
	 { (char *)"Planef_swigregister", Planef_swigregister, METH_VARARGS, NULL},
	 { (char *)"Mat4f_Write", _wrap_Mat4f_Write, METH_VARARGS, NULL},
	 { (char *)"Mat4f_Read", _wrap_Mat4f_Read, METH_VARARGS, NULL},
	 { (char *)"Mat4f_mat_set", _wrap_Mat4f_mat_set, METH_VARARGS, NULL},
	 { (char *)"Mat4f_mat_get", _wrap_Mat4f_mat_get, METH_VARARGS, NULL},
	 { (char *)"new_Mat4f", _wrap_new_Mat4f, METH_VARARGS, NULL},
	 { (char *)"Mat4f_assign", _wrap_Mat4f_assign, METH_VARARGS, NULL},
	 { (char *)"Mat4f_c_vector", _wrap_Mat4f_c_vector, METH_VARARGS, NULL},
	 { (char *)"Mat4f___call__", _wrap_Mat4f___call__, METH_VARARGS, NULL},
	 { (char *)"Mat4f_get", _wrap_Mat4f_get, METH_VARARGS, NULL},
	 { (char *)"Mat4f_set", _wrap_Mat4f_set, METH_VARARGS, NULL},
	 { (char *)"Mat4f_a11", _wrap_Mat4f_a11, METH_VARARGS, NULL},
	 { (char *)"Mat4f_a12", _wrap_Mat4f_a12, METH_VARARGS, NULL},
	 { (char *)"Mat4f_a13", _wrap_Mat4f_a13, METH_VARARGS, NULL},
	 { (char *)"Mat4f_a14", _wrap_Mat4f_a14, METH_VARARGS, NULL},
	 { (char *)"Mat4f_a21", _wrap_Mat4f_a21, METH_VARARGS, NULL},
	 { (char *)"Mat4f_a22", _wrap_Mat4f_a22, METH_VARARGS, NULL},
	 { (char *)"Mat4f_a23", _wrap_Mat4f_a23, METH_VARARGS, NULL},
	 { (char *)"Mat4f_a24", _wrap_Mat4f_a24, METH_VARARGS, NULL},
	 { (char *)"Mat4f_a31", _wrap_Mat4f_a31, METH_VARARGS, NULL},
	 { (char *)"Mat4f_a32", _wrap_Mat4f_a32, METH_VARARGS, NULL},
	 { (char *)"Mat4f_a33", _wrap_Mat4f_a33, METH_VARARGS, NULL},
	 { (char *)"Mat4f_a34", _wrap_Mat4f_a34, METH_VARARGS, NULL},
	 { (char *)"Mat4f_a41", _wrap_Mat4f_a41, METH_VARARGS, NULL},
	 { (char *)"Mat4f_a42", _wrap_Mat4f_a42, METH_VARARGS, NULL},
	 { (char *)"Mat4f_a43", _wrap_Mat4f_a43, METH_VARARGS, NULL},
	 { (char *)"Mat4f_a44", _wrap_Mat4f_a44, METH_VARARGS, NULL},
	 { (char *)"Mat4f___getitem_ref__", _wrap_Mat4f___getitem_ref__, METH_VARARGS, NULL},
	 { (char *)"Mat4f___getitem__", _wrap_Mat4f___getitem__, METH_VARARGS, NULL},
	 { (char *)"Mat4f___eq__", _wrap_Mat4f___eq__, METH_VARARGS, NULL},
	 { (char *)"Mat4f_transpose", _wrap_Mat4f_transpose, METH_VARARGS, NULL},
	 { (char *)"Mat4f_zero", _wrap_Mat4f_zero, METH_VARARGS, NULL},
	 { (char *)"Mat4f_determinant", _wrap_Mat4f_determinant, METH_VARARGS, NULL},
	 { (char *)"Mat4f_invert", _wrap_Mat4f_invert, METH_VARARGS, NULL},
	 { (char *)"Mat4f_scale", _wrap_Mat4f_scale, METH_VARARGS, NULL},
	 { (char *)"Mat4f_translate", _wrap_Mat4f_translate, METH_VARARGS, NULL},
	 { (char *)"Mat4f_rotate", _wrap_Mat4f_rotate, METH_VARARGS, NULL},
	 { (char *)"Mat4f_rotatex", _wrap_Mat4f_rotatex, METH_VARARGS, NULL},
	 { (char *)"Mat4f_rotatey", _wrap_Mat4f_rotatey, METH_VARARGS, NULL},
	 { (char *)"Mat4f_rotatez", _wrap_Mat4f_rotatez, METH_VARARGS, NULL},
	 { (char *)"Mat4f_ortho", _wrap_Mat4f_ortho, METH_VARARGS, NULL},
	 { (char *)"Mat4f_perspective", _wrap_Mat4f_perspective, METH_VARARGS, NULL},
	 { (char *)"Mat4f_frustum", _wrap_Mat4f_frustum, METH_VARARGS, NULL},
	 { (char *)"Mat4f_lookat", _wrap_Mat4f_lookat, METH_VARARGS, NULL},
	 { (char *)"Mat4f_fuzzyEqual", _wrap_Mat4f_fuzzyEqual, METH_VARARGS, NULL},
	 { (char *)"Mat4f_almostZero", _wrap_Mat4f_almostZero, METH_VARARGS, NULL},
	 { (char *)"Mat4f_almostIdentity", _wrap_Mat4f_almostIdentity, METH_VARARGS, NULL},
	 { (char *)"Mat4f_row", _wrap_Mat4f_row, METH_VARARGS, NULL},
	 { (char *)"Mat4f_col", _wrap_Mat4f_col, METH_VARARGS, NULL},
	 { (char *)"Mat4f___add__", _wrap_Mat4f___add__, METH_VARARGS, NULL},
	 { (char *)"Mat4f___sub__", _wrap_Mat4f___sub__, METH_VARARGS, NULL},
	 { (char *)"Mat4f___mul__", _wrap_Mat4f___mul__, METH_VARARGS, NULL},
	 { (char *)"Mat4f_decompose", _wrap_Mat4f_decompose, METH_VARARGS, NULL},
	 { (char *)"Mat4f_getProjectionMatrix", _wrap_Mat4f_getProjectionMatrix, METH_VARARGS, NULL},
	 { (char *)"Mat4f___str__", _wrap_Mat4f___str__, METH_VARARGS, NULL},
	 { (char *)"Mat4f___repr__", _wrap_Mat4f___repr__, METH_VARARGS, NULL},
	 { (char *)"Mat4f_SelfTest", _wrap_Mat4f_SelfTest, METH_VARARGS, NULL},
	 { (char *)"delete_Mat4f", _wrap_delete_Mat4f, METH_VARARGS, NULL},
	 { (char *)"Mat4f_swigregister", Mat4f_swigregister, METH_VARARGS, NULL},
	 { (char *)"Matf_Write", _wrap_Matf_Write, METH_VARARGS, NULL},
	 { (char *)"Matf_Read", _wrap_Matf_Read, METH_VARARGS, NULL},
	 { (char *)"Matf_mem_set", _wrap_Matf_mem_set, METH_VARARGS, NULL},
	 { (char *)"Matf_mem_get", _wrap_Matf_mem_get, METH_VARARGS, NULL},
	 { (char *)"Matf_dim_set", _wrap_Matf_dim_set, METH_VARARGS, NULL},
	 { (char *)"Matf_dim_get", _wrap_Matf_dim_get, METH_VARARGS, NULL},
	 { (char *)"new_Matf", _wrap_new_Matf, METH_VARARGS, NULL},
	 { (char *)"delete_Matf", _wrap_delete_Matf, METH_VARARGS, NULL},
	 { (char *)"Matf_c_vector", _wrap_Matf_c_vector, METH_VARARGS, NULL},
	 { (char *)"Matf_get", _wrap_Matf_get, METH_VARARGS, NULL},
	 { (char *)"Matf_set", _wrap_Matf_set, METH_VARARGS, NULL},
	 { (char *)"Matf___call__", _wrap_Matf___call__, METH_VARARGS, NULL},
	 { (char *)"Matf___getitem_ref__", _wrap_Matf___getitem_ref__, METH_VARARGS, NULL},
	 { (char *)"Matf___getitem__", _wrap_Matf___getitem__, METH_VARARGS, NULL},
	 { (char *)"Matf_row", _wrap_Matf_row, METH_VARARGS, NULL},
	 { (char *)"Matf_col", _wrap_Matf_col, METH_VARARGS, NULL},
	 { (char *)"Matf_swapRows", _wrap_Matf_swapRows, METH_VARARGS, NULL},
	 { (char *)"Matf_swapCols", _wrap_Matf_swapCols, METH_VARARGS, NULL},
	 { (char *)"Matf_toMat4f", _wrap_Matf_toMat4f, METH_VARARGS, NULL},
	 { (char *)"Matf_transpose", _wrap_Matf_transpose, METH_VARARGS, NULL},
	 { (char *)"Matf_assign", _wrap_Matf_assign, METH_VARARGS, NULL},
	 { (char *)"Matf___eq__", _wrap_Matf___eq__, METH_VARARGS, NULL},
	 { (char *)"Matf_fuzzyEqual", _wrap_Matf_fuzzyEqual, METH_VARARGS, NULL},
	 { (char *)"Matf_zero", _wrap_Matf_zero, METH_VARARGS, NULL},
	 { (char *)"Matf_almostZero", _wrap_Matf_almostZero, METH_VARARGS, NULL},
	 { (char *)"Matf_almostIdentity", _wrap_Matf_almostIdentity, METH_VARARGS, NULL},
	 { (char *)"Matf_extract", _wrap_Matf_extract, METH_VARARGS, NULL},
	 { (char *)"Matf___add__", _wrap_Matf___add__, METH_VARARGS, NULL},
	 { (char *)"Matf___sub__", _wrap_Matf___sub__, METH_VARARGS, NULL},
	 { (char *)"Matf_scaleV", _wrap_Matf_scaleV, METH_VARARGS, NULL},
	 { (char *)"Matf_scaleH", _wrap_Matf_scaleH, METH_VARARGS, NULL},
	 { (char *)"Matf_translateV", _wrap_Matf_translateV, METH_VARARGS, NULL},
	 { (char *)"Matf_translateH", _wrap_Matf_translateH, METH_VARARGS, NULL},
	 { (char *)"Matf_rotateV", _wrap_Matf_rotateV, METH_VARARGS, NULL},
	 { (char *)"Matf_rotateH", _wrap_Matf_rotateH, METH_VARARGS, NULL},
	 { (char *)"Matf___mul__", _wrap_Matf___mul__, METH_VARARGS, NULL},
	 { (char *)"Matf_invert", _wrap_Matf_invert, METH_VARARGS, NULL},
	 { (char *)"Matf_getProjectionMatrix", _wrap_Matf_getProjectionMatrix, METH_VARARGS, NULL},
	 { (char *)"Matf___str__", _wrap_Matf___str__, METH_VARARGS, NULL},
	 { (char *)"Matf___repr__", _wrap_Matf___repr__, METH_VARARGS, NULL},
	 { (char *)"Matf_SelfTest", _wrap_Matf_SelfTest, METH_VARARGS, NULL},
	 { (char *)"Matf_swigregister", Matf_swigregister, METH_VARARGS, NULL},
	 { (char *)"Ball3f_center_set", _wrap_Ball3f_center_set, METH_VARARGS, NULL},
	 { (char *)"Ball3f_center_get", _wrap_Ball3f_center_get, METH_VARARGS, NULL},
	 { (char *)"Ball3f_radius_set", _wrap_Ball3f_radius_set, METH_VARARGS, NULL},
	 { (char *)"Ball3f_radius_get", _wrap_Ball3f_radius_get, METH_VARARGS, NULL},
	 { (char *)"new_Ball3f", _wrap_new_Ball3f, METH_VARARGS, NULL},
	 { (char *)"Ball3f_bestFittingBall", _wrap_Ball3f_bestFittingBall, METH_VARARGS, NULL},
	 { (char *)"Ball3f_isValid", _wrap_Ball3f_isValid, METH_VARARGS, NULL},
	 { (char *)"Ball3f_assign", _wrap_Ball3f_assign, METH_VARARGS, NULL},
	 { (char *)"Ball3f___eq__", _wrap_Ball3f___eq__, METH_VARARGS, NULL},
	 { (char *)"Ball3f_fuzzyEqual", _wrap_Ball3f_fuzzyEqual, METH_VARARGS, NULL},
	 { (char *)"Ball3f_surface", _wrap_Ball3f_surface, METH_VARARGS, NULL},
	 { (char *)"Ball3f_volume", _wrap_Ball3f_volume, METH_VARARGS, NULL},
	 { (char *)"Ball3f___str__", _wrap_Ball3f___str__, METH_VARARGS, NULL},
	 { (char *)"Ball3f___repr__", _wrap_Ball3f___repr__, METH_VARARGS, NULL},
	 { (char *)"Ball3f_SelfTest", _wrap_Ball3f_SelfTest, METH_VARARGS, NULL},
	 { (char *)"delete_Ball3f", _wrap_delete_Ball3f, METH_VARARGS, NULL},
	 { (char *)"Ball3f_swigregister", Ball3f_swigregister, METH_VARARGS, NULL},
	 { (char *)"Ballf_center_set", _wrap_Ballf_center_set, METH_VARARGS, NULL},
	 { (char *)"Ballf_center_get", _wrap_Ballf_center_get, METH_VARARGS, NULL},
	 { (char *)"Ballf_radius_set", _wrap_Ballf_radius_set, METH_VARARGS, NULL},
	 { (char *)"Ballf_radius_get", _wrap_Ballf_radius_get, METH_VARARGS, NULL},
	 { (char *)"new_Ballf", _wrap_new_Ballf, METH_VARARGS, NULL},
	 { (char *)"Ballf_dim", _wrap_Ballf_dim, METH_VARARGS, NULL},
	 { (char *)"Ballf_bestFittingBall", _wrap_Ballf_bestFittingBall, METH_VARARGS, NULL},
	 { (char *)"Ballf_isValid", _wrap_Ballf_isValid, METH_VARARGS, NULL},
	 { (char *)"Ballf_assign", _wrap_Ballf_assign, METH_VARARGS, NULL},
	 { (char *)"Ballf___eq__", _wrap_Ballf___eq__, METH_VARARGS, NULL},
	 { (char *)"Ballf_fuzzyEqual", _wrap_Ballf_fuzzyEqual, METH_VARARGS, NULL},
	 { (char *)"Ballf___str__", _wrap_Ballf___str__, METH_VARARGS, NULL},
	 { (char *)"Ballf___repr__", _wrap_Ballf___repr__, METH_VARARGS, NULL},
	 { (char *)"Ballf_SelfTest", _wrap_Ballf_SelfTest, METH_VARARGS, NULL},
	 { (char *)"delete_Ballf", _wrap_delete_Ballf, METH_VARARGS, NULL},
	 { (char *)"Ballf_swigregister", Ballf_swigregister, METH_VARARGS, NULL},
	 { (char *)"Box2i_p1_set", _wrap_Box2i_p1_set, METH_VARARGS, NULL},
	 { (char *)"Box2i_p1_get", _wrap_Box2i_p1_get, METH_VARARGS, NULL},
	 { (char *)"Box2i_p2_set", _wrap_Box2i_p2_set, METH_VARARGS, NULL},
	 { (char *)"Box2i_p2_get", _wrap_Box2i_p2_get, METH_VARARGS, NULL},
	 { (char *)"Box2i_align_set", _wrap_Box2i_align_set, METH_VARARGS, NULL},
	 { (char *)"Box2i_align_get", _wrap_Box2i_align_get, METH_VARARGS, NULL},
	 { (char *)"new_Box2i", _wrap_new_Box2i, METH_VARARGS, NULL},
	 { (char *)"Box2i_left", _wrap_Box2i_left, METH_VARARGS, NULL},
	 { (char *)"Box2i_right", _wrap_Box2i_right, METH_VARARGS, NULL},
	 { (char *)"Box2i_bottom", _wrap_Box2i_bottom, METH_VARARGS, NULL},
	 { (char *)"Box2i_top", _wrap_Box2i_top, METH_VARARGS, NULL},
	 { (char *)"Box2i_width", _wrap_Box2i_width, METH_VARARGS, NULL},
	 { (char *)"Box2i_height", _wrap_Box2i_height, METH_VARARGS, NULL},
	 { (char *)"Box2i_area", _wrap_Box2i_area, METH_VARARGS, NULL},
	 { (char *)"Box2i_isValid", _wrap_Box2i_isValid, METH_VARARGS, NULL},
	 { (char *)"Box2i_contains", _wrap_Box2i_contains, METH_VARARGS, NULL},
	 { (char *)"Box2i___lt__", _wrap_Box2i___lt__, METH_VARARGS, NULL},
	 { (char *)"delete_Box2i", _wrap_delete_Box2i, METH_VARARGS, NULL},
	 { (char *)"Box2i_swigregister", Box2i_swigregister, METH_VARARGS, NULL},
	 { (char *)"Box3f_Write", _wrap_Box3f_Write, METH_VARARGS, NULL},
	 { (char *)"Box3f_Read", _wrap_Box3f_Read, METH_VARARGS, NULL},
	 { (char *)"Box3f_p1_set", _wrap_Box3f_p1_set, METH_VARARGS, NULL},
	 { (char *)"Box3f_p1_get", _wrap_Box3f_p1_get, METH_VARARGS, NULL},
	 { (char *)"Box3f_p2_set", _wrap_Box3f_p2_set, METH_VARARGS, NULL},
	 { (char *)"Box3f_p2_get", _wrap_Box3f_p2_get, METH_VARARGS, NULL},
	 { (char *)"new_Box3f", _wrap_new_Box3f, METH_VARARGS, NULL},
	 { (char *)"Box3f_buildFromCenter", _wrap_Box3f_buildFromCenter, METH_VARARGS, NULL},
	 { (char *)"Box3f_reset", _wrap_Box3f_reset, METH_VARARGS, NULL},
	 { (char *)"Box3f_getPoint", _wrap_Box3f_getPoint, METH_VARARGS, NULL},
	 { (char *)"Box3f_getPlane", _wrap_Box3f_getPlane, METH_VARARGS, NULL},
	 { (char *)"Box3f_add", _wrap_Box3f_add, METH_VARARGS, NULL},
	 { (char *)"Box3f_isValid", _wrap_Box3f_isValid, METH_VARARGS, NULL},
	 { (char *)"Box3f_size", _wrap_Box3f_size, METH_VARARGS, NULL},
	 { (char *)"Box3f_minsize", _wrap_Box3f_minsize, METH_VARARGS, NULL},
	 { (char *)"Box3f_maxsize", _wrap_Box3f_maxsize, METH_VARARGS, NULL},
	 { (char *)"Box3f_translate", _wrap_Box3f_translate, METH_VARARGS, NULL},
	 { (char *)"Box3f_scale", _wrap_Box3f_scale, METH_VARARGS, NULL},
	 { (char *)"Box3f_center", _wrap_Box3f_center, METH_VARARGS, NULL},
	 { (char *)"Box3f_contains", _wrap_Box3f_contains, METH_VARARGS, NULL},
	 { (char *)"Box3f_overlap", _wrap_Box3f_overlap, METH_VARARGS, NULL},
	 { (char *)"Box3f_intersection", _wrap_Box3f_intersection, METH_VARARGS, NULL},
	 { (char *)"Box3f___eq__", _wrap_Box3f___eq__, METH_VARARGS, NULL},
	 { (char *)"Box3f_fuzzyEqual", _wrap_Box3f_fuzzyEqual, METH_VARARGS, NULL},
	 { (char *)"Box3f_surface", _wrap_Box3f_surface, METH_VARARGS, NULL},
	 { (char *)"Box3f_volume", _wrap_Box3f_volume, METH_VARARGS, NULL},
	 { (char *)"Box3f___repr__", _wrap_Box3f___repr__, METH_VARARGS, NULL},
	 { (char *)"Box3f___str__", _wrap_Box3f___str__, METH_VARARGS, NULL},
	 { (char *)"Box3f_SelfTest", _wrap_Box3f_SelfTest, METH_VARARGS, NULL},
	 { (char *)"delete_Box3f", _wrap_delete_Box3f, METH_VARARGS, NULL},
	 { (char *)"Box3f_swigregister", Box3f_swigregister, METH_VARARGS, NULL},
	 { (char *)"Boxf_p1_set", _wrap_Boxf_p1_set, METH_VARARGS, NULL},
	 { (char *)"Boxf_p1_get", _wrap_Boxf_p1_get, METH_VARARGS, NULL},
	 { (char *)"Boxf_p2_set", _wrap_Boxf_p2_set, METH_VARARGS, NULL},
	 { (char *)"Boxf_p2_get", _wrap_Boxf_p2_get, METH_VARARGS, NULL},
	 { (char *)"new_Boxf", _wrap_new_Boxf, METH_VARARGS, NULL},
	 { (char *)"Boxf_reset", _wrap_Boxf_reset, METH_VARARGS, NULL},
	 { (char *)"Boxf_add", _wrap_Boxf_add, METH_VARARGS, NULL},
	 { (char *)"Boxf_isValid", _wrap_Boxf_isValid, METH_VARARGS, NULL},
	 { (char *)"Boxf_center", _wrap_Boxf_center, METH_VARARGS, NULL},
	 { (char *)"Boxf_dim", _wrap_Boxf_dim, METH_VARARGS, NULL},
	 { (char *)"Boxf_size", _wrap_Boxf_size, METH_VARARGS, NULL},
	 { (char *)"Boxf_minsizeidx", _wrap_Boxf_minsizeidx, METH_VARARGS, NULL},
	 { (char *)"Boxf_maxsizeidx", _wrap_Boxf_maxsizeidx, METH_VARARGS, NULL},
	 { (char *)"Boxf_minsize", _wrap_Boxf_minsize, METH_VARARGS, NULL},
	 { (char *)"Boxf_maxsize", _wrap_Boxf_maxsize, METH_VARARGS, NULL},
	 { (char *)"Boxf___eq__", _wrap_Boxf___eq__, METH_VARARGS, NULL},
	 { (char *)"Boxf_fuzzyEqual", _wrap_Boxf_fuzzyEqual, METH_VARARGS, NULL},
	 { (char *)"Boxf_scale", _wrap_Boxf_scale, METH_VARARGS, NULL},
	 { (char *)"Boxf_volume", _wrap_Boxf_volume, METH_VARARGS, NULL},
	 { (char *)"Boxf_overlap", _wrap_Boxf_overlap, METH_VARARGS, NULL},
	 { (char *)"Boxf_contains", _wrap_Boxf_contains, METH_VARARGS, NULL},
	 { (char *)"Boxf_toBox3f", _wrap_Boxf_toBox3f, METH_VARARGS, NULL},
	 { (char *)"Boxf_isAbove", _wrap_Boxf_isAbove, METH_VARARGS, NULL},
	 { (char *)"Boxf_isBelow", _wrap_Boxf_isBelow, METH_VARARGS, NULL},
	 { (char *)"Boxf___repr__", _wrap_Boxf___repr__, METH_VARARGS, NULL},
	 { (char *)"Boxf___str__", _wrap_Boxf___str__, METH_VARARGS, NULL},
	 { (char *)"Boxf_SelfTest", _wrap_Boxf_SelfTest, METH_VARARGS, NULL},
	 { (char *)"delete_Boxf", _wrap_delete_Boxf, METH_VARARGS, NULL},
	 { (char *)"Boxf_swigregister", Boxf_swigregister, METH_VARARGS, NULL},
	 { (char *)"Ray3f_origin_set", _wrap_Ray3f_origin_set, METH_VARARGS, NULL},
	 { (char *)"Ray3f_origin_get", _wrap_Ray3f_origin_get, METH_VARARGS, NULL},
	 { (char *)"Ray3f_dir_set", _wrap_Ray3f_dir_set, METH_VARARGS, NULL},
	 { (char *)"Ray3f_dir_get", _wrap_Ray3f_dir_get, METH_VARARGS, NULL},
	 { (char *)"new_Ray3f", _wrap_new_Ray3f, METH_VARARGS, NULL},
	 { (char *)"Ray3f_getPoint", _wrap_Ray3f_getPoint, METH_VARARGS, NULL},
	 { (char *)"Ray3f_setOrigin", _wrap_Ray3f_setOrigin, METH_VARARGS, NULL},
	 { (char *)"Ray3f_setDir", _wrap_Ray3f_setDir, METH_VARARGS, NULL},
	 { (char *)"Ray3f_intersection", _wrap_Ray3f_intersection, METH_VARARGS, NULL},
	 { (char *)"Ray3f___eq__", _wrap_Ray3f___eq__, METH_VARARGS, NULL},
	 { (char *)"Ray3f___ne__", _wrap_Ray3f___ne__, METH_VARARGS, NULL},
	 { (char *)"Ray3f_intersectLine", _wrap_Ray3f_intersectLine, METH_VARARGS, NULL},
	 { (char *)"Ray3f_intersectTriangle", _wrap_Ray3f_intersectTriangle, METH_VARARGS, NULL},
	 { (char *)"Ray3f_intersectBox", _wrap_Ray3f_intersectBox, METH_VARARGS, NULL},
	 { (char *)"Ray3f___str__", _wrap_Ray3f___str__, METH_VARARGS, NULL},
	 { (char *)"Ray3f___repr__", _wrap_Ray3f___repr__, METH_VARARGS, NULL},
	 { (char *)"Ray3f_SelfTest", _wrap_Ray3f_SelfTest, METH_VARARGS, NULL},
	 { (char *)"delete_Ray3f", _wrap_delete_Ray3f, METH_VARARGS, NULL},
	 { (char *)"Ray3f_swigregister", Ray3f_swigregister, METH_VARARGS, NULL},
	 { (char *)"Rayf_origin_set", _wrap_Rayf_origin_set, METH_VARARGS, NULL},
	 { (char *)"Rayf_origin_get", _wrap_Rayf_origin_get, METH_VARARGS, NULL},
	 { (char *)"Rayf_dir_set", _wrap_Rayf_dir_set, METH_VARARGS, NULL},
	 { (char *)"Rayf_dir_get", _wrap_Rayf_dir_get, METH_VARARGS, NULL},
	 { (char *)"new_Rayf", _wrap_new_Rayf, METH_VARARGS, NULL},
	 { (char *)"Rayf_getPoint", _wrap_Rayf_getPoint, METH_VARARGS, NULL},
	 { (char *)"Rayf_setOrigin", _wrap_Rayf_setOrigin, METH_VARARGS, NULL},
	 { (char *)"Rayf_setDir", _wrap_Rayf_setDir, METH_VARARGS, NULL},
	 { (char *)"Rayf_intersection", _wrap_Rayf_intersection, METH_VARARGS, NULL},
	 { (char *)"Rayf___eq__", _wrap_Rayf___eq__, METH_VARARGS, NULL},
	 { (char *)"Rayf___ne__", _wrap_Rayf___ne__, METH_VARARGS, NULL},
	 { (char *)"Rayf___str__", _wrap_Rayf___str__, METH_VARARGS, NULL},
	 { (char *)"Rayf___repr__", _wrap_Rayf___repr__, METH_VARARGS, NULL},
	 { (char *)"Rayf_SelfTest", _wrap_Rayf_SelfTest, METH_VARARGS, NULL},
	 { (char *)"delete_Rayf", _wrap_delete_Rayf, METH_VARARGS, NULL},
	 { (char *)"Rayf_swigregister", Rayf_swigregister, METH_VARARGS, NULL},
	 { (char *)"Quaternion_x_set", _wrap_Quaternion_x_set, METH_VARARGS, NULL},
	 { (char *)"Quaternion_x_get", _wrap_Quaternion_x_get, METH_VARARGS, NULL},
	 { (char *)"Quaternion_y_set", _wrap_Quaternion_y_set, METH_VARARGS, NULL},
	 { (char *)"Quaternion_y_get", _wrap_Quaternion_y_get, METH_VARARGS, NULL},
	 { (char *)"Quaternion_z_set", _wrap_Quaternion_z_set, METH_VARARGS, NULL},
	 { (char *)"Quaternion_z_get", _wrap_Quaternion_z_get, METH_VARARGS, NULL},
	 { (char *)"Quaternion_w_set", _wrap_Quaternion_w_set, METH_VARARGS, NULL},
	 { (char *)"Quaternion_w_get", _wrap_Quaternion_w_get, METH_VARARGS, NULL},
	 { (char *)"new_Quaternion", _wrap_new_Quaternion, METH_VARARGS, NULL},
	 { (char *)"Quaternion_get", _wrap_Quaternion_get, METH_VARARGS, NULL},
	 { (char *)"Quaternion_set", _wrap_Quaternion_set, METH_VARARGS, NULL},
	 { (char *)"Quaternion___getitem_ref__", _wrap_Quaternion___getitem_ref__, METH_VARARGS, NULL},
	 { (char *)"Quaternion___getitem__", _wrap_Quaternion___getitem__, METH_VARARGS, NULL},
	 { (char *)"Quaternion_fromMatrix", _wrap_Quaternion_fromMatrix, METH_VARARGS, NULL},
	 { (char *)"Quaternion_getMatrix", _wrap_Quaternion_getMatrix, METH_VARARGS, NULL},
	 { (char *)"Quaternion_getAngle", _wrap_Quaternion_getAngle, METH_VARARGS, NULL},
	 { (char *)"Quaternion_getAxis", _wrap_Quaternion_getAxis, METH_VARARGS, NULL},
	 { (char *)"Quaternion___eq__", _wrap_Quaternion___eq__, METH_VARARGS, NULL},
	 { (char *)"Quaternion_assign", _wrap_Quaternion_assign, METH_VARARGS, NULL},
	 { (char *)"Quaternion_fuzzyEqual", _wrap_Quaternion_fuzzyEqual, METH_VARARGS, NULL},
	 { (char *)"Quaternion___add__", _wrap_Quaternion___add__, METH_VARARGS, NULL},
	 { (char *)"Quaternion___sub__", _wrap_Quaternion___sub__, METH_VARARGS, NULL},
	 { (char *)"Quaternion___neg__", _wrap_Quaternion___neg__, METH_VARARGS, NULL},
	 { (char *)"Quaternion_Dot", _wrap_Quaternion_Dot, METH_VARARGS, NULL},
	 { (char *)"Quaternion_Norm", _wrap_Quaternion_Norm, METH_VARARGS, NULL},
	 { (char *)"Quaternion_Inverse", _wrap_Quaternion_Inverse, METH_VARARGS, NULL},
	 { (char *)"Quaternion_UnitInverse", _wrap_Quaternion_UnitInverse, METH_VARARGS, NULL},
	 { (char *)"Quaternion_Exp", _wrap_Quaternion_Exp, METH_VARARGS, NULL},
	 { (char *)"Quaternion_Log", _wrap_Quaternion_Log, METH_VARARGS, NULL},
	 { (char *)"Quaternion___mul__", _wrap_Quaternion___mul__, METH_VARARGS, NULL},
	 { (char *)"Quaternion_Slerp", _wrap_Quaternion_Slerp, METH_VARARGS, NULL},
	 { (char *)"Quaternion_SlerpExtraSpins", _wrap_Quaternion_SlerpExtraSpins, METH_VARARGS, NULL},
	 { (char *)"Quaternion_Intermediate", _wrap_Quaternion_Intermediate, METH_VARARGS, NULL},
	 { (char *)"Quaternion_Squad", _wrap_Quaternion_Squad, METH_VARARGS, NULL},
	 { (char *)"Quaternion_trackball", _wrap_Quaternion_trackball, METH_VARARGS, NULL},
	 { (char *)"Quaternion___repr__", _wrap_Quaternion___repr__, METH_VARARGS, NULL},
	 { (char *)"Quaternion_SelfTest", _wrap_Quaternion_SelfTest, METH_VARARGS, NULL},
	 { (char *)"delete_Quaternion", _wrap_delete_Quaternion, METH_VARARGS, NULL},
	 { (char *)"Quaternion_swigregister", Quaternion_swigregister, METH_VARARGS, NULL},
	 { (char *)"LocalSystem_pos_set", _wrap_LocalSystem_pos_set, METH_VARARGS, NULL},
	 { (char *)"LocalSystem_pos_get", _wrap_LocalSystem_pos_get, METH_VARARGS, NULL},
	 { (char *)"LocalSystem_dir_set", _wrap_LocalSystem_dir_set, METH_VARARGS, NULL},
	 { (char *)"LocalSystem_dir_get", _wrap_LocalSystem_dir_get, METH_VARARGS, NULL},
	 { (char *)"LocalSystem_vup_set", _wrap_LocalSystem_vup_set, METH_VARARGS, NULL},
	 { (char *)"LocalSystem_vup_get", _wrap_LocalSystem_vup_get, METH_VARARGS, NULL},
	 { (char *)"new_LocalSystem", _wrap_new_LocalSystem, METH_VARARGS, NULL},
	 { (char *)"delete_LocalSystem", _wrap_delete_LocalSystem, METH_VARARGS, NULL},
	 { (char *)"LocalSystem_swigregister", LocalSystem_swigregister, METH_VARARGS, NULL},
	 { (char *)"Vector_Write", _wrap_Vector_Write, METH_VARARGS, NULL},
	 { (char *)"Vector_Read", _wrap_Vector_Read, METH_VARARGS, NULL},
	 { (char *)"Vector_gpu_set", _wrap_Vector_gpu_set, METH_VARARGS, NULL},
	 { (char *)"Vector_gpu_get", _wrap_Vector_gpu_get, METH_VARARGS, NULL},
	 { (char *)"new_Vector", _wrap_new_Vector, METH_VARARGS, NULL},
	 { (char *)"delete_Vector", _wrap_delete_Vector, METH_VARARGS, NULL},
	 { (char *)"Vector_assign", _wrap_Vector_assign, METH_VARARGS, NULL},
	 { (char *)"Vector_size", _wrap_Vector_size, METH_VARARGS, NULL},
	 { (char *)"Vector_memsize", _wrap_Vector_memsize, METH_VARARGS, NULL},
	 { (char *)"Vector_mem", _wrap_Vector_mem, METH_VARARGS, NULL},
	 { (char *)"Vector_resize", _wrap_Vector_resize, METH_VARARGS, NULL},
	 { (char *)"Vector_append", _wrap_Vector_append, METH_VARARGS, NULL},
	 { (char *)"Vector_zero", _wrap_Vector_zero, METH_VARARGS, NULL},
	 { (char *)"Vector___eq__", _wrap_Vector___eq__, METH_VARARGS, NULL},
	 { (char *)"Vector___ne__", _wrap_Vector___ne__, METH_VARARGS, NULL},
	 { (char *)"Vector_get", _wrap_Vector_get, METH_VARARGS, NULL},
	 { (char *)"Vector_set", _wrap_Vector_set, METH_VARARGS, NULL},
	 { (char *)"Vector___getitem_ref__", _wrap_Vector___getitem_ref__, METH_VARARGS, NULL},
	 { (char *)"Vector___getitem__", _wrap_Vector___getitem__, METH_VARARGS, NULL},
	 { (char *)"Vector_extract", _wrap_Vector_extract, METH_VARARGS, NULL},
	 { (char *)"Vector_parse", _wrap_Vector_parse, METH_VARARGS, NULL},
	 { (char *)"Vector_c_vector", _wrap_Vector_c_vector, METH_VARARGS, NULL},
	 { (char *)"Vector___repr__", _wrap_Vector___repr__, METH_VARARGS, NULL},
	 { (char *)"Vector___str__", _wrap_Vector___str__, METH_VARARGS, NULL},
	 { (char *)"Vector_SelfTest", _wrap_Vector_SelfTest, METH_VARARGS, NULL},
	 { (char *)"Vector_swigregister", Vector_swigregister, METH_VARARGS, NULL},
	 { (char *)"Color4f_Write", _wrap_Color4f_Write, METH_VARARGS, NULL},
	 { (char *)"Color4f_Read", _wrap_Color4f_Read, METH_VARARGS, NULL},
	 { (char *)"Color4f_r_set", _wrap_Color4f_r_set, METH_VARARGS, NULL},
	 { (char *)"Color4f_r_get", _wrap_Color4f_r_get, METH_VARARGS, NULL},
	 { (char *)"Color4f_g_set", _wrap_Color4f_g_set, METH_VARARGS, NULL},
	 { (char *)"Color4f_g_get", _wrap_Color4f_g_get, METH_VARARGS, NULL},
	 { (char *)"Color4f_b_set", _wrap_Color4f_b_set, METH_VARARGS, NULL},
	 { (char *)"Color4f_b_get", _wrap_Color4f_b_get, METH_VARARGS, NULL},
	 { (char *)"Color4f_a_set", _wrap_Color4f_a_set, METH_VARARGS, NULL},
	 { (char *)"Color4f_a_get", _wrap_Color4f_a_get, METH_VARARGS, NULL},
	 { (char *)"Color4f_Black", _wrap_Color4f_Black, METH_VARARGS, NULL},
	 { (char *)"Color4f_White", _wrap_Color4f_White, METH_VARARGS, NULL},
	 { (char *)"Color4f_Red", _wrap_Color4f_Red, METH_VARARGS, NULL},
	 { (char *)"Color4f_Green", _wrap_Color4f_Green, METH_VARARGS, NULL},
	 { (char *)"Color4f_Blue", _wrap_Color4f_Blue, METH_VARARGS, NULL},
	 { (char *)"Color4f_Yellow", _wrap_Color4f_Yellow, METH_VARARGS, NULL},
	 { (char *)"new_Color4f", _wrap_new_Color4f, METH_VARARGS, NULL},
	 { (char *)"Color4f_get", _wrap_Color4f_get, METH_VARARGS, NULL},
	 { (char *)"Color4f_set", _wrap_Color4f_set, METH_VARARGS, NULL},
	 { (char *)"Color4f___getitem_ref__", _wrap_Color4f___getitem_ref__, METH_VARARGS, NULL},
	 { (char *)"Color4f___getitem__", _wrap_Color4f___getitem__, METH_VARARGS, NULL},
	 { (char *)"Color4f___eq__", _wrap_Color4f___eq__, METH_VARARGS, NULL},
	 { (char *)"Color4f___ne__", _wrap_Color4f___ne__, METH_VARARGS, NULL},
	 { (char *)"Color4f_sscanf", _wrap_Color4f_sscanf, METH_VARARGS, NULL},
	 { (char *)"Color4f_randomRGB", _wrap_Color4f_randomRGB, METH_VARARGS, NULL},
	 { (char *)"Color4f_randomRGBA", _wrap_Color4f_randomRGBA, METH_VARARGS, NULL},
	 { (char *)"Color4f___str__", _wrap_Color4f___str__, METH_VARARGS, NULL},
	 { (char *)"Color4f___repr__", _wrap_Color4f___repr__, METH_VARARGS, NULL},
	 { (char *)"delete_Color4f", _wrap_delete_Color4f, METH_VARARGS, NULL},
	 { (char *)"Color4f_swigregister", Color4f_swigregister, METH_VARARGS, NULL},
	 { (char *)"Frustum_walk_speed_set", _wrap_Frustum_walk_speed_set, METH_VARARGS, NULL},
	 { (char *)"Frustum_walk_speed_get", _wrap_Frustum_walk_speed_get, METH_VARARGS, NULL},
	 { (char *)"Frustum_x_set", _wrap_Frustum_x_set, METH_VARARGS, NULL},
	 { (char *)"Frustum_x_get", _wrap_Frustum_x_get, METH_VARARGS, NULL},
	 { (char *)"Frustum_y_set", _wrap_Frustum_y_set, METH_VARARGS, NULL},
	 { (char *)"Frustum_y_get", _wrap_Frustum_y_get, METH_VARARGS, NULL},
	 { (char *)"Frustum_width_set", _wrap_Frustum_width_set, METH_VARARGS, NULL},
	 { (char *)"Frustum_width_get", _wrap_Frustum_width_get, METH_VARARGS, NULL},
	 { (char *)"Frustum_height_set", _wrap_Frustum_height_set, METH_VARARGS, NULL},
	 { (char *)"Frustum_height_get", _wrap_Frustum_height_get, METH_VARARGS, NULL},
	 { (char *)"Frustum_pos_set", _wrap_Frustum_pos_set, METH_VARARGS, NULL},
	 { (char *)"Frustum_pos_get", _wrap_Frustum_pos_get, METH_VARARGS, NULL},
	 { (char *)"Frustum_dir_set", _wrap_Frustum_dir_set, METH_VARARGS, NULL},
	 { (char *)"Frustum_dir_get", _wrap_Frustum_dir_get, METH_VARARGS, NULL},
	 { (char *)"Frustum_vup_set", _wrap_Frustum_vup_set, METH_VARARGS, NULL},
	 { (char *)"Frustum_vup_get", _wrap_Frustum_vup_get, METH_VARARGS, NULL},
	 { (char *)"Frustum_right_set", _wrap_Frustum_right_set, METH_VARARGS, NULL},
	 { (char *)"Frustum_right_get", _wrap_Frustum_right_get, METH_VARARGS, NULL},
	 { (char *)"Frustum_projection_matrix_set", _wrap_Frustum_projection_matrix_set, METH_VARARGS, NULL},
	 { (char *)"Frustum_projection_matrix_get", _wrap_Frustum_projection_matrix_get, METH_VARARGS, NULL},
	 { (char *)"Frustum_mat_dir_set", _wrap_Frustum_mat_dir_set, METH_VARARGS, NULL},
	 { (char *)"Frustum_mat_dir_get", _wrap_Frustum_mat_dir_get, METH_VARARGS, NULL},
	 { (char *)"Frustum_mat_inv_set", _wrap_Frustum_mat_inv_set, METH_VARARGS, NULL},
	 { (char *)"Frustum_mat_inv_get", _wrap_Frustum_mat_inv_get, METH_VARARGS, NULL},
	 { (char *)"Frustum_aabb_set", _wrap_Frustum_aabb_set, METH_VARARGS, NULL},
	 { (char *)"Frustum_aabb_get", _wrap_Frustum_aabb_get, METH_VARARGS, NULL},
	 { (char *)"Frustum_planes_set", _wrap_Frustum_planes_set, METH_VARARGS, NULL},
	 { (char *)"Frustum_planes_get", _wrap_Frustum_planes_get, METH_VARARGS, NULL},
	 { (char *)"new_Frustum", _wrap_new_Frustum, METH_VARARGS, NULL},
	 { (char *)"Frustum_getRay", _wrap_Frustum_getRay, METH_VARARGS, NULL},
	 { (char *)"Frustum___eq__", _wrap_Frustum___eq__, METH_VARARGS, NULL},
	 { (char *)"Frustum_points_set", _wrap_Frustum_points_set, METH_VARARGS, NULL},
	 { (char *)"Frustum_points_get", _wrap_Frustum_points_get, METH_VARARGS, NULL},
	 { (char *)"Frustum_refresh", _wrap_Frustum_refresh, METH_VARARGS, NULL},
	 { (char *)"Frustum_intersect", _wrap_Frustum_intersect, METH_VARARGS, NULL},
	 { (char *)"Frustum_contains", _wrap_Frustum_contains, METH_VARARGS, NULL},
	 { (char *)"Frustum_getModelviewMatrix", _wrap_Frustum_getModelviewMatrix, METH_VARARGS, NULL},
	 { (char *)"Frustum_Render", _wrap_Frustum_Render, METH_VARARGS, NULL},
	 { (char *)"Frustum_project", _wrap_Frustum_project, METH_VARARGS, NULL},
	 { (char *)"Frustum_unproject", _wrap_Frustum_unproject, METH_VARARGS, NULL},
	 { (char *)"Frustum_guessBestPosition", _wrap_Frustum_guessBestPosition, METH_VARARGS, NULL},
	 { (char *)"Frustum_guessProjectionMatrix", _wrap_Frustum_guessProjectionMatrix, METH_VARARGS, NULL},
	 { (char *)"Frustum_defaultMouseWalkingMode", _wrap_Frustum_defaultMouseWalkingMode, METH_VARARGS, NULL},
	 { (char *)"Frustum_defaultMouseTrackballMode", _wrap_Frustum_defaultMouseTrackballMode, METH_VARARGS, NULL},
	 { (char *)"Frustum_defaultKeyboard", _wrap_Frustum_defaultKeyboard, METH_VARARGS, NULL},
	 { (char *)"Frustum_fixVup", _wrap_Frustum_fixVup, METH_VARARGS, NULL},
	 { (char *)"Frustum_getScreenDistance", _wrap_Frustum_getScreenDistance, METH_VARARGS, NULL},
	 { (char *)"Frustum_nearOnScreen", _wrap_Frustum_nearOnScreen, METH_VARARGS, NULL},
	 { (char *)"Frustum___repr__", _wrap_Frustum___repr__, METH_VARARGS, NULL},
	 { (char *)"Frustum___str__", _wrap_Frustum___str__, METH_VARARGS, NULL},
	 { (char *)"delete_Frustum", _wrap_delete_Frustum, METH_VARARGS, NULL},
	 { (char *)"Frustum_swigregister", Frustum_swigregister, METH_VARARGS, NULL},
	 { (char *)"Texture_filename_set", _wrap_Texture_filename_set, METH_VARARGS, NULL},
	 { (char *)"Texture_filename_get", _wrap_Texture_filename_get, METH_VARARGS, NULL},
	 { (char *)"Texture_gpu_set", _wrap_Texture_gpu_set, METH_VARARGS, NULL},
	 { (char *)"Texture_gpu_get", _wrap_Texture_gpu_get, METH_VARARGS, NULL},
	 { (char *)"Texture_bpp_set", _wrap_Texture_bpp_set, METH_VARARGS, NULL},
	 { (char *)"Texture_bpp_get", _wrap_Texture_bpp_get, METH_VARARGS, NULL},
	 { (char *)"Texture_width_set", _wrap_Texture_width_set, METH_VARARGS, NULL},
	 { (char *)"Texture_width_get", _wrap_Texture_width_get, METH_VARARGS, NULL},
	 { (char *)"Texture_height_set", _wrap_Texture_height_set, METH_VARARGS, NULL},
	 { (char *)"Texture_height_get", _wrap_Texture_height_get, METH_VARARGS, NULL},
	 { (char *)"Texture_buffer_set", _wrap_Texture_buffer_set, METH_VARARGS, NULL},
	 { (char *)"Texture_buffer_get", _wrap_Texture_buffer_get, METH_VARARGS, NULL},
	 { (char *)"new_Texture", _wrap_new_Texture, METH_VARARGS, NULL},
	 { (char *)"delete_Texture", _wrap_delete_Texture, METH_VARARGS, NULL},
	 { (char *)"Texture_open", _wrap_Texture_open, METH_VARARGS, NULL},
	 { (char *)"Texture_flushCache", _wrap_Texture_flushCache, METH_VARARGS, NULL},
	 { (char *)"Texture_getCache", _wrap_Texture_getCache, METH_VARARGS, NULL},
	 { (char *)"Texture_save", _wrap_Texture_save, METH_VARARGS, NULL},
	 { (char *)"Texture_deallocBuffer", _wrap_Texture_deallocBuffer, METH_VARARGS, NULL},
	 { (char *)"Texture_memsize", _wrap_Texture_memsize, METH_VARARGS, NULL},
	 { (char *)"Texture_change", _wrap_Texture_change, METH_VARARGS, NULL},
	 { (char *)"Texture_getPixel", _wrap_Texture_getPixel, METH_VARARGS, NULL},
	 { (char *)"Texture_goodPixel", _wrap_Texture_goodPixel, METH_VARARGS, NULL},
	 { (char *)"Texture_get", _wrap_Texture_get, METH_VARARGS, NULL},
	 { (char *)"Texture_set", _wrap_Texture_set, METH_VARARGS, NULL},
	 { (char *)"Texture_flipVertical", _wrap_Texture_flipVertical, METH_VARARGS, NULL},
	 { (char *)"Texture___repr__", _wrap_Texture___repr__, METH_VARARGS, NULL},
	 { (char *)"Texture___str__", _wrap_Texture___str__, METH_VARARGS, NULL},
	 { (char *)"Texture_SelfTest", _wrap_Texture_SelfTest, METH_VARARGS, NULL},
	 { (char *)"Texture_swigregister", Texture_swigregister, METH_VARARGS, NULL},
	 { (char *)"Manipulator_EPSILON_set", _wrap_Manipulator_EPSILON_set, METH_VARARGS, NULL},
	 { (char *)"Manipulator_EPSILON_get", _wrap_Manipulator_EPSILON_get, METH_VARARGS, NULL},
	 { (char *)"Manipulator_freeze_x_set", _wrap_Manipulator_freeze_x_set, METH_VARARGS, NULL},
	 { (char *)"Manipulator_freeze_x_get", _wrap_Manipulator_freeze_x_get, METH_VARARGS, NULL},
	 { (char *)"Manipulator_freeze_y_set", _wrap_Manipulator_freeze_y_set, METH_VARARGS, NULL},
	 { (char *)"Manipulator_freeze_y_get", _wrap_Manipulator_freeze_y_get, METH_VARARGS, NULL},
	 { (char *)"Manipulator_freeze_z_set", _wrap_Manipulator_freeze_z_set, METH_VARARGS, NULL},
	 { (char *)"Manipulator_freeze_z_get", _wrap_Manipulator_freeze_z_get, METH_VARARGS, NULL},
	 { (char *)"new_Manipulator", _wrap_new_Manipulator, METH_VARARGS, NULL},
	 { (char *)"Manipulator_setObject", _wrap_Manipulator_setObject, METH_VARARGS, NULL},
	 { (char *)"Manipulator_isRunning", _wrap_Manipulator_isRunning, METH_VARARGS, NULL},
	 { (char *)"Manipulator_canManipulate", _wrap_Manipulator_canManipulate, METH_VARARGS, NULL},
	 { (char *)"Manipulator_Mouse", _wrap_Manipulator_Mouse, METH_VARARGS, NULL},
	 { (char *)"Manipulator_Render", _wrap_Manipulator_Render, METH_VARARGS, NULL},
	 { (char *)"Manipulator_setOperation", _wrap_Manipulator_setOperation, METH_VARARGS, NULL},
	 { (char *)"Manipulator_getOperation", _wrap_Manipulator_getOperation, METH_VARARGS, NULL},
	 { (char *)"Manipulator_SelfTest", _wrap_Manipulator_SelfTest, METH_VARARGS, NULL},
	 { (char *)"delete_Manipulator", _wrap_delete_Manipulator, METH_VARARGS, NULL},
	 { (char *)"Manipulator_swigregister", Manipulator_swigregister, METH_VARARGS, NULL},
	 { (char *)"Batch_Write", _wrap_Batch_Write, METH_VARARGS, NULL},
	 { (char *)"Batch_Read", _wrap_Batch_Read, METH_VARARGS, NULL},
	 { (char *)"Batch_primitive_set", _wrap_Batch_primitive_set, METH_VARARGS, NULL},
	 { (char *)"Batch_primitive_get", _wrap_Batch_primitive_get, METH_VARARGS, NULL},
	 { (char *)"Batch_ambient_set", _wrap_Batch_ambient_set, METH_VARARGS, NULL},
	 { (char *)"Batch_ambient_get", _wrap_Batch_ambient_get, METH_VARARGS, NULL},
	 { (char *)"Batch_diffuse_set", _wrap_Batch_diffuse_set, METH_VARARGS, NULL},
	 { (char *)"Batch_diffuse_get", _wrap_Batch_diffuse_get, METH_VARARGS, NULL},
	 { (char *)"Batch_specular_set", _wrap_Batch_specular_set, METH_VARARGS, NULL},
	 { (char *)"Batch_specular_get", _wrap_Batch_specular_get, METH_VARARGS, NULL},
	 { (char *)"Batch_emission_set", _wrap_Batch_emission_set, METH_VARARGS, NULL},
	 { (char *)"Batch_emission_get", _wrap_Batch_emission_get, METH_VARARGS, NULL},
	 { (char *)"Batch_shininess_set", _wrap_Batch_shininess_set, METH_VARARGS, NULL},
	 { (char *)"Batch_shininess_get", _wrap_Batch_shininess_get, METH_VARARGS, NULL},
	 { (char *)"Batch_matrix_set", _wrap_Batch_matrix_set, METH_VARARGS, NULL},
	 { (char *)"Batch_matrix_get", _wrap_Batch_matrix_get, METH_VARARGS, NULL},
	 { (char *)"Batch_vertices_set", _wrap_Batch_vertices_set, METH_VARARGS, NULL},
	 { (char *)"Batch_vertices_get", _wrap_Batch_vertices_get, METH_VARARGS, NULL},
	 { (char *)"Batch_normals_set", _wrap_Batch_normals_set, METH_VARARGS, NULL},
	 { (char *)"Batch_normals_get", _wrap_Batch_normals_get, METH_VARARGS, NULL},
	 { (char *)"Batch_colors_set", _wrap_Batch_colors_set, METH_VARARGS, NULL},
	 { (char *)"Batch_colors_get", _wrap_Batch_colors_get, METH_VARARGS, NULL},
	 { (char *)"Batch_texture0_set", _wrap_Batch_texture0_set, METH_VARARGS, NULL},
	 { (char *)"Batch_texture0_get", _wrap_Batch_texture0_get, METH_VARARGS, NULL},
	 { (char *)"Batch_texture0coords_set", _wrap_Batch_texture0coords_set, METH_VARARGS, NULL},
	 { (char *)"Batch_texture0coords_get", _wrap_Batch_texture0coords_get, METH_VARARGS, NULL},
	 { (char *)"Batch_texture1_set", _wrap_Batch_texture1_set, METH_VARARGS, NULL},
	 { (char *)"Batch_texture1_get", _wrap_Batch_texture1_get, METH_VARARGS, NULL},
	 { (char *)"Batch_texture1coords_set", _wrap_Batch_texture1coords_set, METH_VARARGS, NULL},
	 { (char *)"Batch_texture1coords_get", _wrap_Batch_texture1coords_get, METH_VARARGS, NULL},
	 { (char *)"new_Batch", _wrap_new_Batch, METH_VARARGS, NULL},
	 { (char *)"Batch_DefaultAmbientColor_get", _wrap_Batch_DefaultAmbientColor_get, METH_VARARGS, NULL},
	 { (char *)"Batch_DefaultAmbientColor_set", _wrap_Batch_DefaultAmbientColor_set, METH_VARARGS, NULL},
	 { (char *)"Batch_DefaultDiffuseColor_get", _wrap_Batch_DefaultDiffuseColor_get, METH_VARARGS, NULL},
	 { (char *)"Batch_DefaultDiffuseColor_set", _wrap_Batch_DefaultDiffuseColor_set, METH_VARARGS, NULL},
	 { (char *)"Batch_DefaultSpecularColor_get", _wrap_Batch_DefaultSpecularColor_get, METH_VARARGS, NULL},
	 { (char *)"Batch_DefaultSpecularColor_set", _wrap_Batch_DefaultSpecularColor_set, METH_VARARGS, NULL},
	 { (char *)"Batch_DefaultEmissionColor_get", _wrap_Batch_DefaultEmissionColor_get, METH_VARARGS, NULL},
	 { (char *)"Batch_DefaultEmissionColor_set", _wrap_Batch_DefaultEmissionColor_set, METH_VARARGS, NULL},
	 { (char *)"Batch_DefaultShininess_get", _wrap_Batch_DefaultShininess_get, METH_VARARGS, NULL},
	 { (char *)"Batch_DefaultShininess_set", _wrap_Batch_DefaultShininess_set, METH_VARARGS, NULL},
	 { (char *)"Batch_setColor", _wrap_Batch_setColor, METH_VARARGS, NULL},
	 { (char *)"Batch_invalidateBox", _wrap_Batch_invalidateBox, METH_VARARGS, NULL},
	 { (char *)"Batch_getTriangles", _wrap_Batch_getTriangles, METH_VARARGS, NULL},
	 { (char *)"Batch_getBox", _wrap_Batch_getBox, METH_VARARGS, NULL},
	 { (char *)"Batch_getPick", _wrap_Batch_getPick, METH_VARARGS, NULL},
	 { (char *)"Batch_getNormals", _wrap_Batch_getNormals, METH_VARARGS, NULL},
	 { (char *)"Batch_Quad", _wrap_Batch_Quad, METH_VARARGS, NULL},
	 { (char *)"Batch_Cube", _wrap_Batch_Cube, METH_VARARGS, NULL},
	 { (char *)"Batch_Sky", _wrap_Batch_Sky, METH_VARARGS, NULL},
	 { (char *)"Batch_Circle", _wrap_Batch_Circle, METH_VARARGS, NULL},
	 { (char *)"Batch_openPly", _wrap_Batch_openPly, METH_VARARGS, NULL},
	 { (char *)"Batch_openObj", _wrap_Batch_openObj, METH_VARARGS, NULL},
	 { (char *)"Batch_saveObj", _wrap_Batch_saveObj, METH_VARARGS, NULL},
	 { (char *)"Batch_openPtx", _wrap_Batch_openPtx, METH_VARARGS, NULL},
	 { (char *)"Batch_Save", _wrap_Batch_Save, METH_VARARGS, NULL},
	 { (char *)"Batch_Open", _wrap_Batch_Open, METH_VARARGS, NULL},
	 { (char *)"Batch_Merge", _wrap_Batch_Merge, METH_VARARGS, NULL},
	 { (char *)"Batch_Optimize", _wrap_Batch_Optimize, METH_VARARGS, NULL},
	 { (char *)"delete_Batch", _wrap_delete_Batch, METH_VARARGS, NULL},
	 { (char *)"Batch_swigregister", Batch_swigregister, METH_VARARGS, NULL},
	 { (char *)"Pick_valid_set", _wrap_Pick_valid_set, METH_VARARGS, NULL},
	 { (char *)"Pick_valid_get", _wrap_Pick_valid_get, METH_VARARGS, NULL},
	 { (char *)"Pick_distance_set", _wrap_Pick_distance_set, METH_VARARGS, NULL},
	 { (char *)"Pick_distance_get", _wrap_Pick_distance_get, METH_VARARGS, NULL},
	 { (char *)"Pick_position_set", _wrap_Pick_position_set, METH_VARARGS, NULL},
	 { (char *)"Pick_position_get", _wrap_Pick_position_get, METH_VARARGS, NULL},
	 { (char *)"Pick_normal_set", _wrap_Pick_normal_set, METH_VARARGS, NULL},
	 { (char *)"Pick_normal_get", _wrap_Pick_normal_get, METH_VARARGS, NULL},
	 { (char *)"Pick_matrix_set", _wrap_Pick_matrix_set, METH_VARARGS, NULL},
	 { (char *)"Pick_matrix_get", _wrap_Pick_matrix_get, METH_VARARGS, NULL},
	 { (char *)"Pick_path_set", _wrap_Pick_path_set, METH_VARARGS, NULL},
	 { (char *)"Pick_path_get", _wrap_Pick_path_get, METH_VARARGS, NULL},
	 { (char *)"new_Pick", _wrap_new_Pick, METH_VARARGS, NULL},
	 { (char *)"Pick_isValid", _wrap_Pick_isValid, METH_VARARGS, NULL},
	 { (char *)"Pick_guessMatrix", _wrap_Pick_guessMatrix, METH_VARARGS, NULL},
	 { (char *)"Pick___lt__", _wrap_Pick___lt__, METH_VARARGS, NULL},
	 { (char *)"delete_Pick", _wrap_delete_Pick, METH_VARARGS, NULL},
	 { (char *)"Pick_swigregister", Pick_swigregister, METH_VARARGS, NULL},
	 { (char *)"GraphKMem_Write", _wrap_GraphKMem_Write, METH_VARARGS, NULL},
	 { (char *)"GraphKMem_Read", _wrap_GraphKMem_Read, METH_VARARGS, NULL},
	 { (char *)"new_GraphKMem", _wrap_new_GraphKMem, METH_VARARGS, NULL},
	 { (char *)"delete_GraphKMem", _wrap_delete_GraphKMem, METH_VARARGS, NULL},
	 { (char *)"GraphKMem_assign", _wrap_GraphKMem_assign, METH_VARARGS, NULL},
	 { (char *)"GraphKMem_flush", _wrap_GraphKMem_flush, METH_VARARGS, NULL},
	 { (char *)"GraphKMem_alloc", _wrap_GraphKMem_alloc, METH_VARARGS, NULL},
	 { (char *)"GraphKMem_free", _wrap_GraphKMem_free, METH_VARARGS, NULL},
	 { (char *)"GraphKMem_needed", _wrap_GraphKMem_needed, METH_VARARGS, NULL},
	 { (char *)"GraphKMem_getNBlocked", _wrap_GraphKMem_getNBlocked, METH_VARARGS, NULL},
	 { (char *)"GraphKMem_getMax", _wrap_GraphKMem_getMax, METH_VARARGS, NULL},
	 { (char *)"GraphKMem_itemsize", _wrap_GraphKMem_itemsize, METH_VARARGS, NULL},
	 { (char *)"GraphKMem_memsize", _wrap_GraphKMem_memsize, METH_VARARGS, NULL},
	 { (char *)"GraphKMem_resize", _wrap_GraphKMem_resize, METH_VARARGS, NULL},
	 { (char *)"GraphKMem_PrintStatistics", _wrap_GraphKMem_PrintStatistics, METH_VARARGS, NULL},
	 { (char *)"GraphKMem_SelfTest", _wrap_GraphKMem_SelfTest, METH_VARARGS, NULL},
	 { (char *)"GraphKMem_swigregister", GraphKMem_swigregister, METH_VARARGS, NULL},
	 { (char *)"GraphArch_N0_set", _wrap_GraphArch_N0_set, METH_VARARGS, NULL},
	 { (char *)"GraphArch_N0_get", _wrap_GraphArch_N0_get, METH_VARARGS, NULL},
	 { (char *)"GraphArch_N1_set", _wrap_GraphArch_N1_set, METH_VARARGS, NULL},
	 { (char *)"GraphArch_N1_get", _wrap_GraphArch_N1_get, METH_VARARGS, NULL},
	 { (char *)"GraphArch_N0_prev_set", _wrap_GraphArch_N0_prev_set, METH_VARARGS, NULL},
	 { (char *)"GraphArch_N0_prev_get", _wrap_GraphArch_N0_prev_get, METH_VARARGS, NULL},
	 { (char *)"GraphArch_N0_next_set", _wrap_GraphArch_N0_next_set, METH_VARARGS, NULL},
	 { (char *)"GraphArch_N0_next_get", _wrap_GraphArch_N0_next_get, METH_VARARGS, NULL},
	 { (char *)"GraphArch_N1_prev_set", _wrap_GraphArch_N1_prev_set, METH_VARARGS, NULL},
	 { (char *)"GraphArch_N1_prev_get", _wrap_GraphArch_N1_prev_get, METH_VARARGS, NULL},
	 { (char *)"GraphArch_N1_next_set", _wrap_GraphArch_N1_next_set, METH_VARARGS, NULL},
	 { (char *)"GraphArch_N1_next_get", _wrap_GraphArch_N1_next_get, METH_VARARGS, NULL},
	 { (char *)"GraphArch_Info_set", _wrap_GraphArch_Info_set, METH_VARARGS, NULL},
	 { (char *)"GraphArch_Info_get", _wrap_GraphArch_Info_get, METH_VARARGS, NULL},
	 { (char *)"new_GraphArch", _wrap_new_GraphArch, METH_VARARGS, NULL},
	 { (char *)"delete_GraphArch", _wrap_delete_GraphArch, METH_VARARGS, NULL},
	 { (char *)"GraphArch_swigregister", GraphArch_swigregister, METH_VARARGS, NULL},
	 { (char *)"GraphNode_Level_set", _wrap_GraphNode_Level_set, METH_VARARGS, NULL},
	 { (char *)"GraphNode_Level_get", _wrap_GraphNode_Level_get, METH_VARARGS, NULL},
	 { (char *)"GraphNode_Sign_set", _wrap_GraphNode_Sign_set, METH_VARARGS, NULL},
	 { (char *)"GraphNode_Sign_get", _wrap_GraphNode_Sign_get, METH_VARARGS, NULL},
	 { (char *)"GraphNode_Dw_set", _wrap_GraphNode_Dw_set, METH_VARARGS, NULL},
	 { (char *)"GraphNode_Dw_get", _wrap_GraphNode_Dw_get, METH_VARARGS, NULL},
	 { (char *)"GraphNode_Up_set", _wrap_GraphNode_Up_set, METH_VARARGS, NULL},
	 { (char *)"GraphNode_Up_get", _wrap_GraphNode_Up_get, METH_VARARGS, NULL},
	 { (char *)"GraphNode_Ndw_set", _wrap_GraphNode_Ndw_set, METH_VARARGS, NULL},
	 { (char *)"GraphNode_Ndw_get", _wrap_GraphNode_Ndw_get, METH_VARARGS, NULL},
	 { (char *)"GraphNode_Nup_set", _wrap_GraphNode_Nup_set, METH_VARARGS, NULL},
	 { (char *)"GraphNode_Nup_get", _wrap_GraphNode_Nup_get, METH_VARARGS, NULL},
	 { (char *)"GraphNode_Prev_set", _wrap_GraphNode_Prev_set, METH_VARARGS, NULL},
	 { (char *)"GraphNode_Prev_get", _wrap_GraphNode_Prev_get, METH_VARARGS, NULL},
	 { (char *)"GraphNode_Next_set", _wrap_GraphNode_Next_set, METH_VARARGS, NULL},
	 { (char *)"GraphNode_Next_get", _wrap_GraphNode_Next_get, METH_VARARGS, NULL},
	 { (char *)"GraphNode_Id_set", _wrap_GraphNode_Id_set, METH_VARARGS, NULL},
	 { (char *)"GraphNode_Id_get", _wrap_GraphNode_Id_get, METH_VARARGS, NULL},
	 { (char *)"GraphNode_Info_set", _wrap_GraphNode_Info_set, METH_VARARGS, NULL},
	 { (char *)"GraphNode_Info_get", _wrap_GraphNode_Info_get, METH_VARARGS, NULL},
	 { (char *)"GraphNode_Tmp_set", _wrap_GraphNode_Tmp_set, METH_VARARGS, NULL},
	 { (char *)"GraphNode_Tmp_get", _wrap_GraphNode_Tmp_get, METH_VARARGS, NULL},
	 { (char *)"new_GraphNode", _wrap_new_GraphNode, METH_VARARGS, NULL},
	 { (char *)"delete_GraphNode", _wrap_delete_GraphNode, METH_VARARGS, NULL},
	 { (char *)"GraphNode_swigregister", GraphNode_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_GraphIterator", _wrap_new_GraphIterator, METH_VARARGS, NULL},
	 { (char *)"GraphIterator_end", _wrap_GraphIterator_end, METH_VARARGS, NULL},
	 { (char *)"GraphIterator___ref__", _wrap_GraphIterator___ref__, METH_VARARGS, NULL},
	 { (char *)"GraphIterator_getNode", _wrap_GraphIterator_getNode, METH_VARARGS, NULL},
	 { (char *)"GraphIterator_getArch", _wrap_GraphIterator_getArch, METH_VARARGS, NULL},
	 { (char *)"GraphIterator_next", _wrap_GraphIterator_next, METH_VARARGS, NULL},
	 { (char *)"GraphIterator_prev", _wrap_GraphIterator_prev, METH_VARARGS, NULL},
	 { (char *)"GraphIterator_goForward", _wrap_GraphIterator_goForward, METH_VARARGS, NULL},
	 { (char *)"GraphIterator_goBackward", _wrap_GraphIterator_goBackward, METH_VARARGS, NULL},
	 { (char *)"delete_GraphIterator", _wrap_delete_GraphIterator, METH_VARARGS, NULL},
	 { (char *)"GraphIterator_swigregister", GraphIterator_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_GraphListIterator", _wrap_new_GraphListIterator, METH_VARARGS, NULL},
	 { (char *)"GraphListIterator_end", _wrap_GraphListIterator_end, METH_VARARGS, NULL},
	 { (char *)"GraphListIterator___ref__", _wrap_GraphListIterator___ref__, METH_VARARGS, NULL},
	 { (char *)"GraphListIterator_getNode", _wrap_GraphListIterator_getNode, METH_VARARGS, NULL},
	 { (char *)"GraphListIterator_getPrevNode", _wrap_GraphListIterator_getPrevNode, METH_VARARGS, NULL},
	 { (char *)"GraphListIterator_goForward", _wrap_GraphListIterator_goForward, METH_VARARGS, NULL},
	 { (char *)"GraphListIterator_next", _wrap_GraphListIterator_next, METH_VARARGS, NULL},
	 { (char *)"delete_GraphListIterator", _wrap_delete_GraphListIterator, METH_VARARGS, NULL},
	 { (char *)"GraphListIterator_swigregister", GraphListIterator_swigregister, METH_VARARGS, NULL},
	 { (char *)"GraphNavigator_nnav_set", _wrap_GraphNavigator_nnav_set, METH_VARARGS, NULL},
	 { (char *)"GraphNavigator_nnav_get", _wrap_GraphNavigator_nnav_get, METH_VARARGS, NULL},
	 { (char *)"GraphNavigator_nav_set", _wrap_GraphNavigator_nav_set, METH_VARARGS, NULL},
	 { (char *)"GraphNavigator_nav_get", _wrap_GraphNavigator_nav_get, METH_VARARGS, NULL},
	 { (char *)"new_GraphNavigator", _wrap_new_GraphNavigator, METH_VARARGS, NULL},
	 { (char *)"delete_GraphNavigator", _wrap_delete_GraphNavigator, METH_VARARGS, NULL},
	 { (char *)"GraphNavigator_getNCells", _wrap_GraphNavigator_getNCells, METH_VARARGS, NULL},
	 { (char *)"GraphNavigator_getCell", _wrap_GraphNavigator_getCell, METH_VARARGS, NULL},
	 { (char *)"GraphNavigator_swigregister", GraphNavigator_swigregister, METH_VARARGS, NULL},
	 { (char *)"Graph_Write", _wrap_Graph_Write, METH_VARARGS, NULL},
	 { (char *)"Graph_Read", _wrap_Graph_Read, METH_VARARGS, NULL},
	 { (char *)"new_Graph", _wrap_new_Graph, METH_VARARGS, NULL},
	 { (char *)"delete_Graph", _wrap_delete_Graph, METH_VARARGS, NULL},
	 { (char *)"Graph_getPointDim", _wrap_Graph_getPointDim, METH_VARARGS, NULL},
	 { (char *)"Graph_clone", _wrap_Graph_clone, METH_VARARGS, NULL},
	 { (char *)"Graph_assign", _wrap_Graph_assign, METH_VARARGS, NULL},
	 { (char *)"Graph_clear", _wrap_Graph_clear, METH_VARARGS, NULL},
	 { (char *)"Graph_getArch", _wrap_Graph_getArch, METH_VARARGS, NULL},
	 { (char *)"Graph_getNode", _wrap_Graph_getNode, METH_VARARGS, NULL},
	 { (char *)"Graph_getNDw", _wrap_Graph_getNDw, METH_VARARGS, NULL},
	 { (char *)"Graph_getNUp", _wrap_Graph_getNUp, METH_VARARGS, NULL},
	 { (char *)"Graph_getNumNode", _wrap_Graph_getNumNode, METH_VARARGS, NULL},
	 { (char *)"Graph_getNumArch", _wrap_Graph_getNumArch, METH_VARARGS, NULL},
	 { (char *)"Graph_getMaxNode", _wrap_Graph_getMaxNode, METH_VARARGS, NULL},
	 { (char *)"Graph_getMaxArch", _wrap_Graph_getMaxArch, METH_VARARGS, NULL},
	 { (char *)"Graph_getFirstDwArch", _wrap_Graph_getFirstDwArch, METH_VARARGS, NULL},
	 { (char *)"Graph_getFirstUpArch", _wrap_Graph_getFirstUpArch, METH_VARARGS, NULL},
	 { (char *)"Graph_getLastDwArch", _wrap_Graph_getLastDwArch, METH_VARARGS, NULL},
	 { (char *)"Graph_getLastUpArch", _wrap_Graph_getLastUpArch, METH_VARARGS, NULL},
	 { (char *)"Graph_getFirstDwNode", _wrap_Graph_getFirstDwNode, METH_VARARGS, NULL},
	 { (char *)"Graph_getFirstUpNode", _wrap_Graph_getFirstUpNode, METH_VARARGS, NULL},
	 { (char *)"Graph_getLastDwNode", _wrap_Graph_getLastDwNode, METH_VARARGS, NULL},
	 { (char *)"Graph_getLastUpNode", _wrap_Graph_getLastUpNode, METH_VARARGS, NULL},
	 { (char *)"Graph_getNextDwArch", _wrap_Graph_getNextDwArch, METH_VARARGS, NULL},
	 { (char *)"Graph_getPrevDwArch", _wrap_Graph_getPrevDwArch, METH_VARARGS, NULL},
	 { (char *)"Graph_getNextUpArch", _wrap_Graph_getNextUpArch, METH_VARARGS, NULL},
	 { (char *)"Graph_getPrevUpArch", _wrap_Graph_getPrevUpArch, METH_VARARGS, NULL},
	 { (char *)"Graph_getN0", _wrap_Graph_getN0, METH_VARARGS, NULL},
	 { (char *)"Graph_getN1", _wrap_Graph_getN1, METH_VARARGS, NULL},
	 { (char *)"Graph_Level", _wrap_Graph_Level, METH_VARARGS, NULL},
	 { (char *)"Graph_Sign", _wrap_Graph_Sign, METH_VARARGS, NULL},
	 { (char *)"Graph_NodeData", _wrap_Graph_NodeData, METH_VARARGS, NULL},
	 { (char *)"Graph_ArchData", _wrap_Graph_ArchData, METH_VARARGS, NULL},
	 { (char *)"Graph_NodeTmp", _wrap_Graph_NodeTmp, METH_VARARGS, NULL},
	 { (char *)"Graph_getNCells", _wrap_Graph_getNCells, METH_VARARGS, NULL},
	 { (char *)"Graph_getNextUpBrother", _wrap_Graph_getNextUpBrother, METH_VARARGS, NULL},
	 { (char *)"Graph_getNextDwBrother", _wrap_Graph_getNextDwBrother, METH_VARARGS, NULL},
	 { (char *)"Graph_getPrevUpBrother", _wrap_Graph_getPrevUpBrother, METH_VARARGS, NULL},
	 { (char *)"Graph_getPrevDwBrother", _wrap_Graph_getPrevDwBrother, METH_VARARGS, NULL},
	 { (char *)"Graph_goDw", _wrap_Graph_goDw, METH_VARARGS, NULL},
	 { (char *)"Graph_goUp", _wrap_Graph_goUp, METH_VARARGS, NULL},
	 { (char *)"Graph_each", _wrap_Graph_each, METH_VARARGS, NULL},
	 { (char *)"Graph_addNode", _wrap_Graph_addNode, METH_VARARGS, NULL},
	 { (char *)"Graph_addVertex", _wrap_Graph_addVertex, METH_VARARGS, NULL},
	 { (char *)"Graph_addEdge", _wrap_Graph_addEdge, METH_VARARGS, NULL},
	 { (char *)"Graph_addFace2d", _wrap_Graph_addFace2d, METH_VARARGS, NULL},
	 { (char *)"Graph_addPlane", _wrap_Graph_addPlane, METH_VARARGS, NULL},
	 { (char *)"Graph_addArch", _wrap_Graph_addArch, METH_VARARGS, NULL},
	 { (char *)"Graph_addArchDirection", _wrap_Graph_addArchDirection, METH_VARARGS, NULL},
	 { (char *)"Graph_findArch", _wrap_Graph_findArch, METH_VARARGS, NULL},
	 { (char *)"Graph_findVertex", _wrap_Graph_findVertex, METH_VARARGS, NULL},
	 { (char *)"Graph_findFirstCommonNode", _wrap_Graph_findFirstCommonNode, METH_VARARGS, NULL},
	 { (char *)"Graph_remArch", _wrap_Graph_remArch, METH_VARARGS, NULL},
	 { (char *)"Graph_swapDwOrder", _wrap_Graph_swapDwOrder, METH_VARARGS, NULL},
	 { (char *)"Graph_changeLevel", _wrap_Graph_changeLevel, METH_VARARGS, NULL},
	 { (char *)"Graph_getMaxDimCells", _wrap_Graph_getMaxDimCells, METH_VARARGS, NULL},
	 { (char *)"Graph_join", _wrap_Graph_join, METH_VARARGS, NULL},
	 { (char *)"Graph_orderFace2d", _wrap_Graph_orderFace2d, METH_VARARGS, NULL},
	 { (char *)"Graph_Print", _wrap_Graph_Print, METH_VARARGS, NULL},
	 { (char *)"Graph_PrintStatistics", _wrap_Graph_PrintStatistics, METH_VARARGS, NULL},
	 { (char *)"Graph_findCells", _wrap_Graph_findCells, METH_VARARGS, NULL},
	 { (char *)"Graph_remNode", _wrap_Graph_remNode, METH_VARARGS, NULL},
	 { (char *)"Graph_getGeometry", _wrap_Graph_getGeometry, METH_VARARGS, NULL},
	 { (char *)"Graph_getVecf", _wrap_Graph_getVecf, METH_VARARGS, NULL},
	 { (char *)"Graph_setVecf", _wrap_Graph_setVecf, METH_VARARGS, NULL},
	 { (char *)"Graph_releaseGeom", _wrap_Graph_releaseGeom, METH_VARARGS, NULL},
	 { (char *)"Graph_cuboid", _wrap_Graph_cuboid, METH_VARARGS, NULL},
	 { (char *)"Graph_simplex", _wrap_Graph_simplex, METH_VARARGS, NULL},
	 { (char *)"Graph_getBoundingBox", _wrap_Graph_getBoundingBox, METH_VARARGS, NULL},
	 { (char *)"Graph_getBoundingBall", _wrap_Graph_getBoundingBall, METH_VARARGS, NULL},
	 { (char *)"Graph_getFittingPlane", _wrap_Graph_getFittingPlane, METH_VARARGS, NULL},
	 { (char *)"Graph_toUnitBox", _wrap_Graph_toUnitBox, METH_VARARGS, NULL},
	 { (char *)"Graph_fixBoundaryFaceOrientation", _wrap_Graph_fixBoundaryFaceOrientation, METH_VARARGS, NULL},
	 { (char *)"Graph_translate", _wrap_Graph_translate, METH_VARARGS, NULL},
	 { (char *)"Graph_scale", _wrap_Graph_scale, METH_VARARGS, NULL},
	 { (char *)"Graph_rotate", _wrap_Graph_rotate, METH_VARARGS, NULL},
	 { (char *)"Graph_transform", _wrap_Graph_transform, METH_VARARGS, NULL},
	 { (char *)"Graph_permutate", _wrap_Graph_permutate, METH_VARARGS, NULL},
	 { (char *)"Graph_triangulate", _wrap_Graph_triangulate, METH_VARARGS, NULL},
	 { (char *)"Graph_embed", _wrap_Graph_embed, METH_VARARGS, NULL},
	 { (char *)"Graph_extrude", _wrap_Graph_extrude, METH_VARARGS, NULL},
	 { (char *)"Graph_qhull", _wrap_Graph_qhull, METH_VARARGS, NULL},
	 { (char *)"Graph_mkpol", _wrap_Graph_mkpol, METH_VARARGS, NULL},
	 { (char *)"Graph_power", _wrap_Graph_power, METH_VARARGS, NULL},
	 { (char *)"Graph_split", _wrap_Graph_split, METH_VARARGS, NULL},
	 { (char *)"Graph_check", _wrap_Graph_check, METH_VARARGS, NULL},
	 { (char *)"Graph_contains", _wrap_Graph_contains, METH_VARARGS, NULL},
	 { (char *)"Graph_open_svg", _wrap_Graph_open_svg, METH_VARARGS, NULL},
	 { (char *)"Graph_SelfTest", _wrap_Graph_SelfTest, METH_VARARGS, NULL},
	 { (char *)"Graph_getBatch", _wrap_Graph_getBatch, METH_VARARGS, NULL},
	 { (char *)"Graph_swigregister", Graph_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_Engine", _wrap_delete_Engine, METH_VARARGS, NULL},
	 { (char *)"Engine_Destroy", _wrap_Engine_Destroy, METH_VARARGS, NULL},
	 { (char *)"Engine_GetDC", _wrap_Engine_GetDC, METH_VARARGS, NULL},
	 { (char *)"Engine_Bind", _wrap_Engine_Bind, METH_VARARGS, NULL},
	 { (char *)"Engine_Unbind", _wrap_Engine_Unbind, METH_VARARGS, NULL},
	 { (char *)"Engine_PrintStatistics", _wrap_Engine_PrintStatistics, METH_VARARGS, NULL},
	 { (char *)"Engine_Shutdown", _wrap_Engine_Shutdown, METH_VARARGS, NULL},
	 { (char *)"Engine_ClearScreen", _wrap_Engine_ClearScreen, METH_VARARGS, NULL},
	 { (char *)"Engine_SetViewport", _wrap_Engine_SetViewport, METH_VARARGS, NULL},
	 { (char *)"Engine_SetProjectionMatrix", _wrap_Engine_SetProjectionMatrix, METH_VARARGS, NULL},
	 { (char *)"Engine_SetModelviewMatrix", _wrap_Engine_SetModelviewMatrix, METH_VARARGS, NULL},
	 { (char *)"Engine_SetDefaultLight", _wrap_Engine_SetDefaultLight, METH_VARARGS, NULL},
	 { (char *)"Engine_FlushScreen", _wrap_Engine_FlushScreen, METH_VARARGS, NULL},
	 { (char *)"Engine_PushModelviewMatrix", _wrap_Engine_PushModelviewMatrix, METH_VARARGS, NULL},
	 { (char *)"Engine_PopModelviewMatrix", _wrap_Engine_PopModelviewMatrix, METH_VARARGS, NULL},
	 { (char *)"Engine_PushProjectionMatrix", _wrap_Engine_PushProjectionMatrix, METH_VARARGS, NULL},
	 { (char *)"Engine_PopProjectionMatrix", _wrap_Engine_PopProjectionMatrix, METH_VARARGS, NULL},
	 { (char *)"Engine_SetDepthTest", _wrap_Engine_SetDepthTest, METH_VARARGS, NULL},
	 { (char *)"Engine_SetDepthWrite", _wrap_Engine_SetDepthWrite, METH_VARARGS, NULL},
	 { (char *)"Engine_SetCulling", _wrap_Engine_SetCulling, METH_VARARGS, NULL},
	 { (char *)"Engine_SetPolygonMode", _wrap_Engine_SetPolygonMode, METH_VARARGS, NULL},
	 { (char *)"Engine_SetPointSize", _wrap_Engine_SetPointSize, METH_VARARGS, NULL},
	 { (char *)"Engine_SetLineWidth", _wrap_Engine_SetLineWidth, METH_VARARGS, NULL},
	 { (char *)"Engine_SetPolygonOffset", _wrap_Engine_SetPolygonOffset, METH_VARARGS, NULL},
	 { (char *)"Engine_Render", _wrap_Engine_Render, METH_VARARGS, NULL},
	 { (char *)"Engine_getCurrentContext", _wrap_Engine_getCurrentContext, METH_VARARGS, NULL},
	 { (char *)"new_Engine", _wrap_new_Engine, METH_VARARGS, NULL},
	 { (char *)"Engine_DC_set", _wrap_Engine_DC_set, METH_VARARGS, NULL},
	 { (char *)"Engine_DC_get", _wrap_Engine_DC_get, METH_VARARGS, NULL},
	 { (char *)"Engine_RC_set", _wrap_Engine_RC_set, METH_VARARGS, NULL},
	 { (char *)"Engine_RC_get", _wrap_Engine_RC_get, METH_VARARGS, NULL},
	 { (char *)"Engine_WC_set", _wrap_Engine_WC_set, METH_VARARGS, NULL},
	 { (char *)"Engine_WC_get", _wrap_Engine_WC_get, METH_VARARGS, NULL},
	 { (char *)"Engine_wcs_get", _wrap_Engine_wcs_get, METH_VARARGS, NULL},
	 { (char *)"Engine_wcs_set", _wrap_Engine_wcs_set, METH_VARARGS, NULL},
	 { (char *)"Engine_swigregister", Engine_swigregister, METH_VARARGS, NULL},
	 { (char *)"EngineResource_type_set", _wrap_EngineResource_type_set, METH_VARARGS, NULL},
	 { (char *)"EngineResource_type_get", _wrap_EngineResource_type_get, METH_VARARGS, NULL},
	 { (char *)"EngineResource_id_set", _wrap_EngineResource_id_set, METH_VARARGS, NULL},
	 { (char *)"EngineResource_id_get", _wrap_EngineResource_id_get, METH_VARARGS, NULL},
	 { (char *)"EngineResource_size_set", _wrap_EngineResource_size_set, METH_VARARGS, NULL},
	 { (char *)"EngineResource_size_get", _wrap_EngineResource_size_get, METH_VARARGS, NULL},
	 { (char *)"new_EngineResource", _wrap_new_EngineResource, METH_VARARGS, NULL},
	 { (char *)"delete_EngineResource", _wrap_delete_EngineResource, METH_VARARGS, NULL},
	 { (char *)"EngineResource_swigregister", EngineResource_swigregister, METH_VARARGS, NULL},
	 { (char *)"EngineTessellator_current_set", _wrap_EngineTessellator_current_set, METH_VARARGS, NULL},
	 { (char *)"EngineTessellator_current_get", _wrap_EngineTessellator_current_get, METH_VARARGS, NULL},
	 { (char *)"EngineTessellator_polygons_set", _wrap_EngineTessellator_polygons_set, METH_VARARGS, NULL},
	 { (char *)"EngineTessellator_polygons_get", _wrap_EngineTessellator_polygons_get, METH_VARARGS, NULL},
	 { (char *)"EngineTessellator_AddPolygon", _wrap_EngineTessellator_AddPolygon, METH_VARARGS, NULL},
	 { (char *)"EngineTessellator_AddContour", _wrap_EngineTessellator_AddContour, METH_VARARGS, NULL},
	 { (char *)"EngineTessellator_Run", _wrap_EngineTessellator_Run, METH_VARARGS, NULL},
	 { (char *)"EngineTessellator_GetTriangles", _wrap_EngineTessellator_GetTriangles, METH_VARARGS, NULL},
	 { (char *)"EngineTessellator_GetMatrix", _wrap_EngineTessellator_GetMatrix, METH_VARARGS, NULL},
	 { (char *)"EngineTessellator_GetGraph", _wrap_EngineTessellator_GetGraph, METH_VARARGS, NULL},
	 { (char *)"new_EngineTessellator", _wrap_new_EngineTessellator, METH_VARARGS, NULL},
	 { (char *)"delete_EngineTessellator", _wrap_delete_EngineTessellator, METH_VARARGS, NULL},
	 { (char *)"EngineTessellator_swigregister", EngineTessellator_swigregister, METH_VARARGS, NULL},
	 { (char *)"Viewer_engine_set", _wrap_Viewer_engine_set, METH_VARARGS, NULL},
	 { (char *)"Viewer_engine_get", _wrap_Viewer_engine_get, METH_VARARGS, NULL},
	 { (char *)"Viewer_window_set", _wrap_Viewer_window_set, METH_VARARGS, NULL},
	 { (char *)"Viewer_window_get", _wrap_Viewer_window_get, METH_VARARGS, NULL},
	 { (char *)"Viewer_trackball_mode_set", _wrap_Viewer_trackball_mode_set, METH_VARARGS, NULL},
	 { (char *)"Viewer_trackball_mode_get", _wrap_Viewer_trackball_mode_get, METH_VARARGS, NULL},
	 { (char *)"Viewer_trackball_center_set", _wrap_Viewer_trackball_center_set, METH_VARARGS, NULL},
	 { (char *)"Viewer_trackball_center_get", _wrap_Viewer_trackball_center_get, METH_VARARGS, NULL},
	 { (char *)"Viewer_mouse_beginx_set", _wrap_Viewer_mouse_beginx_set, METH_VARARGS, NULL},
	 { (char *)"Viewer_mouse_beginx_get", _wrap_Viewer_mouse_beginx_get, METH_VARARGS, NULL},
	 { (char *)"Viewer_mouse_beginy_set", _wrap_Viewer_mouse_beginy_set, METH_VARARGS, NULL},
	 { (char *)"Viewer_mouse_beginy_get", _wrap_Viewer_mouse_beginy_get, METH_VARARGS, NULL},
	 { (char *)"Viewer_DrawLines_set", _wrap_Viewer_DrawLines_set, METH_VARARGS, NULL},
	 { (char *)"Viewer_DrawLines_get", _wrap_Viewer_DrawLines_get, METH_VARARGS, NULL},
	 { (char *)"Viewer_DrawAxis_set", _wrap_Viewer_DrawAxis_set, METH_VARARGS, NULL},
	 { (char *)"Viewer_DrawAxis_get", _wrap_Viewer_DrawAxis_get, METH_VARARGS, NULL},
	 { (char *)"Viewer_frustum_set", _wrap_Viewer_frustum_set, METH_VARARGS, NULL},
	 { (char *)"Viewer_frustum_get", _wrap_Viewer_frustum_get, METH_VARARGS, NULL},
	 { (char *)"Viewer_debug_frustum_set", _wrap_Viewer_debug_frustum_set, METH_VARARGS, NULL},
	 { (char *)"Viewer_debug_frustum_get", _wrap_Viewer_debug_frustum_get, METH_VARARGS, NULL},
	 { (char *)"Viewer_octree_set", _wrap_Viewer_octree_set, METH_VARARGS, NULL},
	 { (char *)"Viewer_octree_get", _wrap_Viewer_octree_get, METH_VARARGS, NULL},
	 { (char *)"Viewer_bProgressiveRendering_set", _wrap_Viewer_bProgressiveRendering_set, METH_VARARGS, NULL},
	 { (char *)"Viewer_bProgressiveRendering_get", _wrap_Viewer_bProgressiveRendering_get, METH_VARARGS, NULL},
	 { (char *)"new_Viewer", _wrap_new_Viewer, METH_VARARGS, NULL},
	 { (char *)"delete_Viewer", _wrap_delete_Viewer, METH_VARARGS, NULL},
	 { (char *)"Viewer_Render", _wrap_Viewer_Render, METH_VARARGS, NULL},
	 { (char *)"Viewer_Redisplay", _wrap_Viewer_Redisplay, METH_VARARGS, NULL},
	 { (char *)"Viewer_Keyboard", _wrap_Viewer_Keyboard, METH_VARARGS, NULL},
	 { (char *)"Viewer_Mouse", _wrap_Viewer_Mouse, METH_VARARGS, NULL},
	 { (char *)"Viewer_Resize", _wrap_Viewer_Resize, METH_VARARGS, NULL},
	 { (char *)"Viewer_Close", _wrap_Viewer_Close, METH_VARARGS, NULL},
	 { (char *)"Viewer_Run", _wrap_Viewer_Run, METH_VARARGS, NULL},
	 { (char *)"Viewer_Wait", _wrap_Viewer_Wait, METH_VARARGS, NULL},
	 { (char *)"Viewer_SelfTest", _wrap_Viewer_SelfTest, METH_VARARGS, NULL},
	 { (char *)"Viewer_m_close_set", _wrap_Viewer_m_close_set, METH_VARARGS, NULL},
	 { (char *)"Viewer_m_close_get", _wrap_Viewer_m_close_get, METH_VARARGS, NULL},
	 { (char *)"Viewer_doJob", _wrap_Viewer_doJob, METH_VARARGS, NULL},
	 { (char *)"disown_Viewer", _wrap_disown_Viewer, METH_VARARGS, NULL},
	 { (char *)"Viewer_swigregister", Viewer_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_OctreeNode", _wrap_new_OctreeNode, METH_VARARGS, NULL},
	 { (char *)"delete_OctreeNode", _wrap_delete_OctreeNode, METH_VARARGS, NULL},
	 { (char *)"OctreeNode_getId", _wrap_OctreeNode_getId, METH_VARARGS, NULL},
	 { (char *)"OctreeNode_getNode", _wrap_OctreeNode_getNode, METH_VARARGS, NULL},
	 { (char *)"OctreeNode_depth_set", _wrap_OctreeNode_depth_set, METH_VARARGS, NULL},
	 { (char *)"OctreeNode_depth_get", _wrap_OctreeNode_depth_get, METH_VARARGS, NULL},
	 { (char *)"OctreeNode_parent_set", _wrap_OctreeNode_parent_set, METH_VARARGS, NULL},
	 { (char *)"OctreeNode_parent_get", _wrap_OctreeNode_parent_get, METH_VARARGS, NULL},
	 { (char *)"OctreeNode_getChild", _wrap_OctreeNode_getChild, METH_VARARGS, NULL},
	 { (char *)"OctreeNode_box_set", _wrap_OctreeNode_box_set, METH_VARARGS, NULL},
	 { (char *)"OctreeNode_box_get", _wrap_OctreeNode_box_get, METH_VARARGS, NULL},
	 { (char *)"OctreeNode_batches_set", _wrap_OctreeNode_batches_set, METH_VARARGS, NULL},
	 { (char *)"OctreeNode_batches_get", _wrap_OctreeNode_batches_get, METH_VARARGS, NULL},
	 { (char *)"OctreeNode_swigregister", OctreeNode_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_FrustumIterator", _wrap_new_FrustumIterator, METH_VARARGS, NULL},
	 { (char *)"FrustumIterator_end", _wrap_FrustumIterator_end, METH_VARARGS, NULL},
	 { (char *)"FrustumIterator_getNode", _wrap_FrustumIterator_getNode, METH_VARARGS, NULL},
	 { (char *)"FrustumIterator_getDistance", _wrap_FrustumIterator_getDistance, METH_VARARGS, NULL},
	 { (char *)"FrustumIterator_moveNext", _wrap_FrustumIterator_moveNext, METH_VARARGS, NULL},
	 { (char *)"delete_FrustumIterator", _wrap_delete_FrustumIterator, METH_VARARGS, NULL},
	 { (char *)"FrustumIterator_swigregister", FrustumIterator_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_RayIterator", _wrap_new_RayIterator, METH_VARARGS, NULL},
	 { (char *)"RayIterator_end", _wrap_RayIterator_end, METH_VARARGS, NULL},
	 { (char *)"RayIterator_getNode", _wrap_RayIterator_getNode, METH_VARARGS, NULL},
	 { (char *)"RayIterator_getMinDistance", _wrap_RayIterator_getMinDistance, METH_VARARGS, NULL},
	 { (char *)"RayIterator_moveNext", _wrap_RayIterator_moveNext, METH_VARARGS, NULL},
	 { (char *)"delete_RayIterator", _wrap_delete_RayIterator, METH_VARARGS, NULL},
	 { (char *)"RayIterator_swigregister", RayIterator_swigregister, METH_VARARGS, NULL},
	 { (char *)"Octree_world_box_set", _wrap_Octree_world_box_set, METH_VARARGS, NULL},
	 { (char *)"Octree_world_box_get", _wrap_Octree_world_box_get, METH_VARARGS, NULL},
	 { (char *)"Octree_root_set", _wrap_Octree_root_set, METH_VARARGS, NULL},
	 { (char *)"Octree_root_get", _wrap_Octree_root_get, METH_VARARGS, NULL},
	 { (char *)"Octree_world_center_set", _wrap_Octree_world_center_set, METH_VARARGS, NULL},
	 { (char *)"Octree_world_center_get", _wrap_Octree_world_center_get, METH_VARARGS, NULL},
	 { (char *)"Octree_world_W_set", _wrap_Octree_world_W_set, METH_VARARGS, NULL},
	 { (char *)"Octree_world_W_get", _wrap_Octree_world_W_get, METH_VARARGS, NULL},
	 { (char *)"Octree_max_depth_set", _wrap_Octree_max_depth_set, METH_VARARGS, NULL},
	 { (char *)"Octree_max_depth_get", _wrap_Octree_max_depth_get, METH_VARARGS, NULL},
	 { (char *)"Octree_LOOSE_K_set", _wrap_Octree_LOOSE_K_set, METH_VARARGS, NULL},
	 { (char *)"Octree_LOOSE_K_get", _wrap_Octree_LOOSE_K_get, METH_VARARGS, NULL},
	 { (char *)"new_Octree", _wrap_new_Octree, METH_VARARGS, NULL},
	 { (char *)"delete_Octree", _wrap_delete_Octree, METH_VARARGS, NULL},
	 { (char *)"Octree_Lock", _wrap_Octree_Lock, METH_VARARGS, NULL},
	 { (char *)"Octree_Unlock", _wrap_Octree_Unlock, METH_VARARGS, NULL},
	 { (char *)"Octree_getBox", _wrap_Octree_getBox, METH_VARARGS, NULL},
	 { (char *)"Octree_getNumNodes", _wrap_Octree_getNumNodes, METH_VARARGS, NULL},
	 { (char *)"Octree_getMaxDepth", _wrap_Octree_getMaxDepth, METH_VARARGS, NULL},
	 { (char *)"Octree_getNumBatches", _wrap_Octree_getNumBatches, METH_VARARGS, NULL},
	 { (char *)"Octree_printStatistics", _wrap_Octree_printStatistics, METH_VARARGS, NULL},
	 { (char *)"Octree_getNode", _wrap_Octree_getNode, METH_VARARGS, NULL},
	 { (char *)"Octree_find", _wrap_Octree_find, METH_VARARGS, NULL},
	 { (char *)"Octree_swigregister", Octree_swigregister, METH_VARARGS, NULL},
	 { (char *)"Unwrapper_texture_template_set", _wrap_Unwrapper_texture_template_set, METH_VARARGS, NULL},
	 { (char *)"Unwrapper_texture_template_get", _wrap_Unwrapper_texture_template_get, METH_VARARGS, NULL},
	 { (char *)"Unwrapper_texturedim_set", _wrap_Unwrapper_texturedim_set, METH_VARARGS, NULL},
	 { (char *)"Unwrapper_texturedim_get", _wrap_Unwrapper_texturedim_get, METH_VARARGS, NULL},
	 { (char *)"Unwrapper_factor_set", _wrap_Unwrapper_factor_set, METH_VARARGS, NULL},
	 { (char *)"Unwrapper_factor_get", _wrap_Unwrapper_factor_get, METH_VARARGS, NULL},
	 { (char *)"new_Unwrapper", _wrap_new_Unwrapper, METH_VARARGS, NULL},
	 { (char *)"Unwrapper_Unwrap", _wrap_Unwrapper_Unwrap, METH_VARARGS, NULL},
	 { (char *)"Unwrapper_getNewLightTextures", _wrap_Unwrapper_getNewLightTextures, METH_VARARGS, NULL},
	 { (char *)"delete_Unwrapper", _wrap_delete_Unwrapper, METH_VARARGS, NULL},
	 { (char *)"Unwrapper_swigregister", Unwrapper_swigregister, METH_VARARGS, NULL},
	 { (char *)"Bake_DebugMode_set", _wrap_Bake_DebugMode_set, METH_VARARGS, NULL},
	 { (char *)"Bake_DebugMode_get", _wrap_Bake_DebugMode_get, METH_VARARGS, NULL},
	 { (char *)"Bake_PointOcclusion_set", _wrap_Bake_PointOcclusion_set, METH_VARARGS, NULL},
	 { (char *)"Bake_PointOcclusion_get", _wrap_Bake_PointOcclusion_get, METH_VARARGS, NULL},
	 { (char *)"new_Bake", _wrap_new_Bake, METH_VARARGS, NULL},
	 { (char *)"Bake_Unwrap", _wrap_Bake_Unwrap, METH_VARARGS, NULL},
	 { (char *)"Bake_Add", _wrap_Bake_Add, METH_VARARGS, NULL},
	 { (char *)"Bake_Export", _wrap_Bake_Export, METH_VARARGS, NULL},
	 { (char *)"Bake_Run", _wrap_Bake_Run, METH_VARARGS, NULL},
	 { (char *)"Bake_PostProcess", _wrap_Bake_PostProcess, METH_VARARGS, NULL},
	 { (char *)"Bake_SelfTest", _wrap_Bake_SelfTest, METH_VARARGS, NULL},
	 { (char *)"delete_Bake", _wrap_delete_Bake, METH_VARARGS, NULL},
	 { (char *)"Bake_swigregister", Bake_swigregister, METH_VARARGS, NULL},
	 { (char *)"Hpc_Write", _wrap_Hpc_Write, METH_VARARGS, NULL},
	 { (char *)"Hpc_Read", _wrap_Hpc_Read, METH_VARARGS, NULL},
	 { (char *)"Hpc_spacedim_set", _wrap_Hpc_spacedim_set, METH_VARARGS, NULL},
	 { (char *)"Hpc_spacedim_get", _wrap_Hpc_spacedim_get, METH_VARARGS, NULL},
	 { (char *)"Hpc_pointdim_set", _wrap_Hpc_pointdim_set, METH_VARARGS, NULL},
	 { (char *)"Hpc_pointdim_get", _wrap_Hpc_pointdim_get, METH_VARARGS, NULL},
	 { (char *)"Hpc_vmat_set", _wrap_Hpc_vmat_set, METH_VARARGS, NULL},
	 { (char *)"Hpc_vmat_get", _wrap_Hpc_vmat_get, METH_VARARGS, NULL},
	 { (char *)"Hpc_hmat_set", _wrap_Hpc_hmat_set, METH_VARARGS, NULL},
	 { (char *)"Hpc_hmat_get", _wrap_Hpc_hmat_get, METH_VARARGS, NULL},
	 { (char *)"Hpc_prop_set", _wrap_Hpc_prop_set, METH_VARARGS, NULL},
	 { (char *)"Hpc_prop_get", _wrap_Hpc_prop_get, METH_VARARGS, NULL},
	 { (char *)"Hpc_childs_set", _wrap_Hpc_childs_set, METH_VARARGS, NULL},
	 { (char *)"Hpc_childs_get", _wrap_Hpc_childs_get, METH_VARARGS, NULL},
	 { (char *)"Hpc_g_set", _wrap_Hpc_g_set, METH_VARARGS, NULL},
	 { (char *)"Hpc_g_get", _wrap_Hpc_g_get, METH_VARARGS, NULL},
	 { (char *)"Hpc_batches_set", _wrap_Hpc_batches_set, METH_VARARGS, NULL},
	 { (char *)"Hpc_batches_get", _wrap_Hpc_batches_get, METH_VARARGS, NULL},
	 { (char *)"new_Hpc", _wrap_new_Hpc, METH_VARARGS, NULL},
	 { (char *)"delete_Hpc", _wrap_delete_Hpc, METH_VARARGS, NULL},
	 { (char *)"Hpc_getNumberOfChilds", _wrap_Hpc_getNumberOfChilds, METH_VARARGS, NULL},
	 { (char *)"Hpc_add", _wrap_Hpc_add, METH_VARARGS, NULL},
	 { (char *)"Hpc_fixDimensions", _wrap_Hpc_fixDimensions, METH_VARARGS, NULL},
	 { (char *)"Hpc_swigregister", Hpc_swigregister, METH_VARARGS, NULL},
	 { (char *)"Plasm_dereference", _wrap_Plasm_dereference, METH_VARARGS, NULL},
	 { (char *)"Plasm_cube", _wrap_Plasm_cube, METH_VARARGS, NULL},
	 { (char *)"Plasm_simplex", _wrap_Plasm_simplex, METH_VARARGS, NULL},
	 { (char *)"Plasm_mkpol", _wrap_Plasm_mkpol, METH_VARARGS, NULL},
	 { (char *)"Plasm_ukpol", _wrap_Plasm_ukpol, METH_VARARGS, NULL},
	 { (char *)"Plasm_ukpolf", _wrap_Plasm_ukpolf, METH_VARARGS, NULL},
	 { (char *)"Plasm_getSpaceDim", _wrap_Plasm_getSpaceDim, METH_VARARGS, NULL},
	 { (char *)"Plasm_getPointDim", _wrap_Plasm_getPointDim, METH_VARARGS, NULL},
	 { (char *)"Plasm_limits", _wrap_Plasm_limits, METH_VARARGS, NULL},
	 { (char *)"Plasm_Print", _wrap_Plasm_Print, METH_VARARGS, NULL},
	 { (char *)"Plasm_addProperty", _wrap_Plasm_addProperty, METH_VARARGS, NULL},
	 { (char *)"Plasm_getProperty", _wrap_Plasm_getProperty, METH_VARARGS, NULL},
	 { (char *)"Plasm_statistics", _wrap_Plasm_statistics, METH_VARARGS, NULL},
	 { (char *)"Plasm_shrink", _wrap_Plasm_shrink, METH_VARARGS, NULL},
	 { (char *)"Plasm_open", _wrap_Plasm_open, METH_VARARGS, NULL},
	 { (char *)"Plasm_save", _wrap_Plasm_save, METH_VARARGS, NULL},
	 { (char *)"Plasm_Struct", _wrap_Plasm_Struct, METH_VARARGS, NULL},
	 { (char *)"Plasm_copy", _wrap_Plasm_copy, METH_VARARGS, NULL},
	 { (char *)"Plasm_join", _wrap_Plasm_join, METH_VARARGS, NULL},
	 { (char *)"Plasm_transform", _wrap_Plasm_transform, METH_VARARGS, NULL},
	 { (char *)"Plasm_scale", _wrap_Plasm_scale, METH_VARARGS, NULL},
	 { (char *)"Plasm_translate", _wrap_Plasm_translate, METH_VARARGS, NULL},
	 { (char *)"Plasm_rotate", _wrap_Plasm_rotate, METH_VARARGS, NULL},
	 { (char *)"Plasm_embed", _wrap_Plasm_embed, METH_VARARGS, NULL},
	 { (char *)"Plasm_power", _wrap_Plasm_power, METH_VARARGS, NULL},
	 { (char *)"Plasm_skeleton", _wrap_Plasm_skeleton, METH_VARARGS, NULL},
	 { (char *)"Plasm_boolop", _wrap_Plasm_boolop, METH_VARARGS, NULL},
	 { (char *)"Plasm_Skin", _wrap_Plasm_Skin, METH_VARARGS, NULL},
	 { (char *)"Plasm_getTriangles", _wrap_Plasm_getTriangles, METH_VARARGS, NULL},
	 { (char *)"Plasm_getBatches", _wrap_Plasm_getBatches, METH_VARARGS, NULL},
	 { (char *)"Plasm_View", _wrap_Plasm_View, METH_VARARGS, NULL},
	 { (char *)"Plasm_SelfTest", _wrap_Plasm_SelfTest, METH_VARARGS, NULL},
	 { (char *)"Plasm_boolop_selftest", _wrap_Plasm_boolop_selftest, METH_VARARGS, NULL},
	 { (char *)"Plasm_convertOldXml", _wrap_Plasm_convertOldXml, METH_VARARGS, NULL},
	 { (char *)"delete_Plasm", _wrap_delete_Plasm, METH_VARARGS, NULL},
	 { (char *)"Plasm_swigregister", Plasm_swigregister, METH_VARARGS, NULL},
	 { NULL, NULL, 0, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_PlanefTo_p_Vecf(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Vecf *)  ((Planef *) x));
}
static void *_p_Plane4fTo_p_Vec4f(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Vec4f *)  ((Plane4f *) x));
}
static swig_type_info _swigt__p_Archive = {"_p_Archive", "Archive *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Bake = {"_p_Bake", "Bake *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Ball3f = {"_p_Ball3f", "Ball3f *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Ballf = {"_p_Ballf", "Ballf *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Batch = {"_p_Batch", "Batch *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Box2i = {"_p_Box2i", "Box2i *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Box3f = {"_p_Box3f", "Box3f *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Boxf = {"_p_Boxf", "Boxf *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Clock = {"_p_Clock", "Clock *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Color4f = {"_p_Color4f", "Color4f *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Decoder = {"_p_Decoder", "Decoder *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Encoder = {"_p_Encoder", "Encoder *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Engine = {"_p_Engine", "Engine *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_EngineResource = {"_p_EngineResource", "EngineResource *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_EngineTessellator = {"_p_EngineTessellator", "EngineTessellator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FileSystem = {"_p_FileSystem", "FileSystem *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Frustum = {"_p_Frustum", "Frustum *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FrustumIterator = {"_p_FrustumIterator", "FrustumIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Graph = {"_p_Graph", "Graph *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GraphArch = {"_p_GraphArch", "GraphArch *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GraphIterator = {"_p_GraphIterator", "GraphIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GraphKMem = {"_p_GraphKMem", "GraphKMem *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GraphListIterator = {"_p_GraphListIterator", "GraphListIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GraphNavigator = {"_p_GraphNavigator", "GraphNavigator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GraphNode = {"_p_GraphNode", "GraphNode *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Hpc = {"_p_Hpc", "Hpc *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Keyboard = {"_p_Keyboard", "Keyboard *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LocalSystem = {"_p_LocalSystem", "LocalSystem *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Log = {"_p_Log", "Log *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Manipulator = {"_p_Manipulator", "Manipulator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mat4f = {"_p_Mat4f", "Mat4f *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Matf = {"_p_Matf", "Matf *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MouseEvent = {"_p_MouseEvent", "MouseEvent *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Octree = {"_p_Octree", "Octree *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OctreeNode = {"_p_OctreeNode", "OctreeNode *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Pick = {"_p_Pick", "Pick *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Plane4f = {"_p_Plane4f", "Plane4f *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Planef = {"_p_Planef", "Planef *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Plasm = {"_p_Plasm", "Plasm *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Quaternion = {"_p_Quaternion", "Quaternion *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Ray3f = {"_p_Ray3f", "Ray3f *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_RayIterator = {"_p_RayIterator", "RayIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Rayf = {"_p_Rayf", "Rayf *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SpinLock = {"_p_SpinLock", "SpinLock *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Texture = {"_p_Texture", "Texture *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Triangle2i = {"_p_Triangle2i", "Triangle2i *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Unwrapper = {"_p_Unwrapper", "Unwrapper *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Utils = {"_p_Utils", "Utils *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Vec2f = {"_p_Vec2f", "Vec2f *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Vec2i = {"_p_Vec2i", "Vec2i *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Vec3f = {"_p_Vec3f", "Vec3f *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Vec4f = {"_p_Vec4f", "Vec4f *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Vecf = {"_p_Vecf", "Vecf *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Vector = {"_p_Vector", "Vector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Viewer = {"_p_Viewer", "Viewer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_allocator_type = {"_p_allocator_type", "allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_const_iterator = {"_p_const_iterator", "const_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_contour_t = {"_p_contour_t", "contour_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_difference_type = {"_p_difference_type", "difference_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "float *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_long = {"_p_long_long", "int64 *|long long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_PyObject = {"_p_p_PyObject", "PyObject **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_unsigned_int = {"_p_p_unsigned_int", "unsigned int **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_polygon_set_t = {"_p_polygon_set_t", "polygon_set_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_polygon_t = {"_p_polygon_t", "polygon_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_type = {"_p_size_type", "size_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__invalid_argument = {"_p_std__invalid_argument", "std::invalid_argument *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_long_long_long_long_std__lessT_long_long_t_std__allocatorT_std__pairT_long_long_const_long_long_t_t_t = {"_p_std__mapT_long_long_long_long_std__lessT_long_long_t_std__allocatorT_std__pairT_long_long_const_long_long_t_t_t", "std::map< int64,int64,std::less< int64 >,std::allocator< std::pair< int64 const,int64 > > > *|std::map< long long,long long,std::less< long long >,std::allocator< std::pair< long long const,long long > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t = {"_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t", "std::map< std::string,std::string,std::less< std::string >,std::allocator< std::pair< std::string const,std::string > > > *|PropertySet *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__tr1__shared_ptrT_Batch_t = {"_p_std__tr1__shared_ptrT_Batch_t", "std::tr1::shared_ptr< Batch > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__tr1__shared_ptrT_EngineResource_t = {"_p_std__tr1__shared_ptrT_EngineResource_t", "std::tr1::shared_ptr< EngineResource > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__tr1__shared_ptrT_Graph_t = {"_p_std__tr1__shared_ptrT_Graph_t", "std::tr1::shared_ptr< Graph > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__tr1__shared_ptrT_Hpc_t = {"_p_std__tr1__shared_ptrT_Hpc_t", "std::tr1::shared_ptr< Hpc > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__tr1__shared_ptrT_Matf_t = {"_p_std__tr1__shared_ptrT_Matf_t", "std::tr1::shared_ptr< Matf > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__tr1__shared_ptrT_Octree_t = {"_p_std__tr1__shared_ptrT_Octree_t", "std::tr1::shared_ptr< Octree > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__tr1__shared_ptrT_Texture_t = {"_p_std__tr1__shared_ptrT_Texture_t", "std::tr1::shared_ptr< Texture > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__tr1__shared_ptrT_Vector_t = {"_p_std__tr1__shared_ptrT_Vector_t", "std::tr1::shared_ptr< Vector > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__tr1__shared_ptrT_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t_t = {"_p_std__tr1__shared_ptrT_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t_t", "std::tr1::shared_ptr< std::map< std::string,std::string,std::less< std::string >,std::allocator< std::pair< std::string const,std::string > > > > *|std::tr1::shared_ptr< PropertySet > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t = {"_p_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t", "std::vector< Vec3f,std::allocator< Vec3f > > *|std::vector< Vec3f > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t__allocator_type = {"_p_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t__allocator_type", "std::vector< Vec3f >::allocator_type *|std::allocator< Vec3f > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t__value_type = {"_p_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t__value_type", "std::vector< Vec3f >::value_type *|Vec3f *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_float_std__allocatorT_float_t_t = {"_p_std__vectorT_float_std__allocatorT_float_t_t", "std::vector< float > *|std::vector< float,std::allocator< float > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_float_std__allocatorT_float_t_t__allocator_type = {"_p_std__vectorT_float_std__allocatorT_float_t_t__allocator_type", "std::vector< float >::allocator_type *|std::allocator< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_int_std__allocatorT_int_t_t = {"_p_std__vectorT_int_std__allocatorT_int_t_t", "std::vector< int,std::allocator< int > > *|std::vector< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_int_std__allocatorT_int_t_t__allocator_type = {"_p_std__vectorT_int_std__allocatorT_int_t_t__allocator_type", "std::vector< int >::allocator_type *|std::allocator< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t = {"_p_std__vectorT_std__string_std__allocatorT_std__string_t_t", "std::vector< std::string,std::allocator< std::string > > *|std::vector< std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t__allocator_type = {"_p_std__vectorT_std__string_std__allocatorT_std__string_t_t__allocator_type", "std::vector< std::string >::allocator_type *|std::allocator< std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__tr1__shared_ptrT_Batch_t_std__allocatorT_std__tr1__shared_ptrT_Batch_t_t_t = {"_p_std__vectorT_std__tr1__shared_ptrT_Batch_t_std__allocatorT_std__tr1__shared_ptrT_Batch_t_t_t", "std::vector< std::tr1::shared_ptr< Batch > > *|std::vector< std::tr1::shared_ptr< Batch >,std::allocator< std::tr1::shared_ptr< Batch > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__tr1__shared_ptrT_Batch_t_std__allocatorT_std__tr1__shared_ptrT_Batch_t_t_t__allocator_type = {"_p_std__vectorT_std__tr1__shared_ptrT_Batch_t_std__allocatorT_std__tr1__shared_ptrT_Batch_t_t_t__allocator_type", "std::vector< std::tr1::shared_ptr< Batch > >::allocator_type *|std::allocator< std::tr1::shared_ptr< Batch > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__tr1__shared_ptrT_EngineResource_t_std__allocatorT_std__tr1__shared_ptrT_EngineResource_t_t_t = {"_p_std__vectorT_std__tr1__shared_ptrT_EngineResource_t_std__allocatorT_std__tr1__shared_ptrT_EngineResource_t_t_t", "std::vector< std::tr1::shared_ptr< EngineResource > > *|std::vector< std::tr1::shared_ptr< EngineResource >,std::allocator< std::tr1::shared_ptr< EngineResource > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__tr1__shared_ptrT_EngineResource_t_std__allocatorT_std__tr1__shared_ptrT_EngineResource_t_t_t__allocator_type = {"_p_std__vectorT_std__tr1__shared_ptrT_EngineResource_t_std__allocatorT_std__tr1__shared_ptrT_EngineResource_t_t_t__allocator_type", "std::vector< std::tr1::shared_ptr< EngineResource > >::allocator_type *|std::allocator< std::tr1::shared_ptr< EngineResource > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__tr1__shared_ptrT_Hpc_t_std__allocatorT_std__tr1__shared_ptrT_Hpc_t_t_t = {"_p_std__vectorT_std__tr1__shared_ptrT_Hpc_t_std__allocatorT_std__tr1__shared_ptrT_Hpc_t_t_t", "std::vector< std::tr1::shared_ptr< Hpc > > *|std::vector< std::tr1::shared_ptr< Hpc >,std::allocator< std::tr1::shared_ptr< Hpc > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__tr1__shared_ptrT_Hpc_t_std__allocatorT_std__tr1__shared_ptrT_Hpc_t_t_t__allocator_type = {"_p_std__vectorT_std__tr1__shared_ptrT_Hpc_t_std__allocatorT_std__tr1__shared_ptrT_Hpc_t_t_t__allocator_type", "std::allocator< std::tr1::shared_ptr< Hpc > > *|std::vector< std::tr1::shared_ptr< Hpc > >::allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__tr1__shared_ptrT_Texture_t_std__allocatorT_std__tr1__shared_ptrT_Texture_t_t_t = {"_p_std__vectorT_std__tr1__shared_ptrT_Texture_t_std__allocatorT_std__tr1__shared_ptrT_Texture_t_t_t", "std::vector< std::tr1::shared_ptr< Texture > > *|std::vector< std::tr1::shared_ptr< Texture >,std::allocator< std::tr1::shared_ptr< Texture > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__tr1__shared_ptrT_Texture_t_std__allocatorT_std__tr1__shared_ptrT_Texture_t_t_t__allocator_type = {"_p_std__vectorT_std__tr1__shared_ptrT_Texture_t_std__allocatorT_std__tr1__shared_ptrT_Texture_t_t_t__allocator_type", "std::vector< std::tr1::shared_ptr< Texture > >::allocator_type *|std::allocator< std::tr1::shared_ptr< Texture > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t_std__allocatorT_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t_t_t = {"_p_std__vectorT_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t_std__allocatorT_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t_t_t", "EngineTessellator::polygon_t *|std::vector< std::vector< Vec3f,std::allocator< Vec3f > >,std::allocator< std::vector< Vec3f,std::allocator< Vec3f > > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t = {"_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t", "std::vector< std::vector< int > > *|std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *|std::vector< std::vector< int,std::allocator< int > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t__allocator_type = {"_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t__allocator_type", "std::vector< std::vector< int > >::allocator_type *|std::allocator< std::vector< int,std::allocator< int > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__vectorT_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t_std__allocatorT_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t_std__allocatorT_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t_t_t_t_t = {"_p_std__vectorT_std__vectorT_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t_std__allocatorT_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t_std__allocatorT_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t_t_t_t_t", "EngineTessellator::polygon_set_t *|std::vector< std::vector< std::vector< Vec3f,std::allocator< Vec3f > >,std::allocator< std::vector< Vec3f,std::allocator< Vec3f > > > >,std::allocator< std::vector< std::vector< Vec3f,std::allocator< Vec3f > >,std::allocator< std::vector< Vec3f,std::allocator< Vec3f > > > > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t = {"_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t", "std::vector< unsigned char > *|std::vector< unsigned char,std::allocator< unsigned char > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t__allocator_type = {"_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t__allocator_type", "std::vector< unsigned char >::allocator_type *|std::allocator< unsigned char > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_swig__SwigPyIterator = {"_p_swig__SwigPyIterator", "swig::SwigPyIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "unsigned char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "unsigned int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long = {"_p_unsigned_long", "unsigned long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long_long = {"_p_unsigned_long_long", "uint64 *|unsigned long long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_value_type = {"_p_value_type", "value_type *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_Archive,
  &_swigt__p_Bake,
  &_swigt__p_Ball3f,
  &_swigt__p_Ballf,
  &_swigt__p_Batch,
  &_swigt__p_Box2i,
  &_swigt__p_Box3f,
  &_swigt__p_Boxf,
  &_swigt__p_Clock,
  &_swigt__p_Color4f,
  &_swigt__p_Decoder,
  &_swigt__p_Encoder,
  &_swigt__p_Engine,
  &_swigt__p_EngineResource,
  &_swigt__p_EngineTessellator,
  &_swigt__p_FileSystem,
  &_swigt__p_Frustum,
  &_swigt__p_FrustumIterator,
  &_swigt__p_Graph,
  &_swigt__p_GraphArch,
  &_swigt__p_GraphIterator,
  &_swigt__p_GraphKMem,
  &_swigt__p_GraphListIterator,
  &_swigt__p_GraphNavigator,
  &_swigt__p_GraphNode,
  &_swigt__p_Hpc,
  &_swigt__p_Keyboard,
  &_swigt__p_LocalSystem,
  &_swigt__p_Log,
  &_swigt__p_Manipulator,
  &_swigt__p_Mat4f,
  &_swigt__p_Matf,
  &_swigt__p_MouseEvent,
  &_swigt__p_Octree,
  &_swigt__p_OctreeNode,
  &_swigt__p_Pick,
  &_swigt__p_Plane4f,
  &_swigt__p_Planef,
  &_swigt__p_Plasm,
  &_swigt__p_Quaternion,
  &_swigt__p_Ray3f,
  &_swigt__p_RayIterator,
  &_swigt__p_Rayf,
  &_swigt__p_SpinLock,
  &_swigt__p_Texture,
  &_swigt__p_Triangle2i,
  &_swigt__p_Unwrapper,
  &_swigt__p_Utils,
  &_swigt__p_Vec2f,
  &_swigt__p_Vec2i,
  &_swigt__p_Vec3f,
  &_swigt__p_Vec4f,
  &_swigt__p_Vecf,
  &_swigt__p_Vector,
  &_swigt__p_Viewer,
  &_swigt__p_allocator_type,
  &_swigt__p_char,
  &_swigt__p_const_iterator,
  &_swigt__p_contour_t,
  &_swigt__p_difference_type,
  &_swigt__p_double,
  &_swigt__p_float,
  &_swigt__p_int,
  &_swigt__p_long_long,
  &_swigt__p_p_PyObject,
  &_swigt__p_p_unsigned_int,
  &_swigt__p_polygon_set_t,
  &_swigt__p_polygon_t,
  &_swigt__p_size_type,
  &_swigt__p_std__invalid_argument,
  &_swigt__p_std__mapT_long_long_long_long_std__lessT_long_long_t_std__allocatorT_std__pairT_long_long_const_long_long_t_t_t,
  &_swigt__p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t,
  &_swigt__p_std__tr1__shared_ptrT_Batch_t,
  &_swigt__p_std__tr1__shared_ptrT_EngineResource_t,
  &_swigt__p_std__tr1__shared_ptrT_Graph_t,
  &_swigt__p_std__tr1__shared_ptrT_Hpc_t,
  &_swigt__p_std__tr1__shared_ptrT_Matf_t,
  &_swigt__p_std__tr1__shared_ptrT_Octree_t,
  &_swigt__p_std__tr1__shared_ptrT_Texture_t,
  &_swigt__p_std__tr1__shared_ptrT_Vector_t,
  &_swigt__p_std__tr1__shared_ptrT_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t_t,
  &_swigt__p_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t,
  &_swigt__p_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t__allocator_type,
  &_swigt__p_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t__value_type,
  &_swigt__p_std__vectorT_float_std__allocatorT_float_t_t,
  &_swigt__p_std__vectorT_float_std__allocatorT_float_t_t__allocator_type,
  &_swigt__p_std__vectorT_int_std__allocatorT_int_t_t,
  &_swigt__p_std__vectorT_int_std__allocatorT_int_t_t__allocator_type,
  &_swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t,
  &_swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t__allocator_type,
  &_swigt__p_std__vectorT_std__tr1__shared_ptrT_Batch_t_std__allocatorT_std__tr1__shared_ptrT_Batch_t_t_t,
  &_swigt__p_std__vectorT_std__tr1__shared_ptrT_Batch_t_std__allocatorT_std__tr1__shared_ptrT_Batch_t_t_t__allocator_type,
  &_swigt__p_std__vectorT_std__tr1__shared_ptrT_EngineResource_t_std__allocatorT_std__tr1__shared_ptrT_EngineResource_t_t_t,
  &_swigt__p_std__vectorT_std__tr1__shared_ptrT_EngineResource_t_std__allocatorT_std__tr1__shared_ptrT_EngineResource_t_t_t__allocator_type,
  &_swigt__p_std__vectorT_std__tr1__shared_ptrT_Hpc_t_std__allocatorT_std__tr1__shared_ptrT_Hpc_t_t_t,
  &_swigt__p_std__vectorT_std__tr1__shared_ptrT_Hpc_t_std__allocatorT_std__tr1__shared_ptrT_Hpc_t_t_t__allocator_type,
  &_swigt__p_std__vectorT_std__tr1__shared_ptrT_Texture_t_std__allocatorT_std__tr1__shared_ptrT_Texture_t_t_t,
  &_swigt__p_std__vectorT_std__tr1__shared_ptrT_Texture_t_std__allocatorT_std__tr1__shared_ptrT_Texture_t_t_t__allocator_type,
  &_swigt__p_std__vectorT_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t_std__allocatorT_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t_t_t,
  &_swigt__p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t,
  &_swigt__p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t__allocator_type,
  &_swigt__p_std__vectorT_std__vectorT_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t_std__allocatorT_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t_std__allocatorT_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t_t_t_t_t,
  &_swigt__p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t,
  &_swigt__p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t__allocator_type,
  &_swigt__p_swig__SwigPyIterator,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long,
  &_swigt__p_unsigned_long_long,
  &_swigt__p_value_type,
};

static swig_cast_info _swigc__p_Archive[] = {  {&_swigt__p_Archive, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Bake[] = {  {&_swigt__p_Bake, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ball3f[] = {  {&_swigt__p_Ball3f, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ballf[] = {  {&_swigt__p_Ballf, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Batch[] = {  {&_swigt__p_Batch, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Box2i[] = {  {&_swigt__p_Box2i, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Box3f[] = {  {&_swigt__p_Box3f, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Boxf[] = {  {&_swigt__p_Boxf, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Clock[] = {  {&_swigt__p_Clock, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Color4f[] = {  {&_swigt__p_Color4f, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Decoder[] = {  {&_swigt__p_Decoder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Encoder[] = {  {&_swigt__p_Encoder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Engine[] = {  {&_swigt__p_Engine, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_EngineResource[] = {  {&_swigt__p_EngineResource, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_EngineTessellator[] = {  {&_swigt__p_EngineTessellator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FileSystem[] = {  {&_swigt__p_FileSystem, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Frustum[] = {  {&_swigt__p_Frustum, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FrustumIterator[] = {  {&_swigt__p_FrustumIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Graph[] = {  {&_swigt__p_Graph, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GraphArch[] = {  {&_swigt__p_GraphArch, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GraphIterator[] = {  {&_swigt__p_GraphIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GraphKMem[] = {  {&_swigt__p_GraphKMem, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GraphListIterator[] = {  {&_swigt__p_GraphListIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GraphNavigator[] = {  {&_swigt__p_GraphNavigator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GraphNode[] = {  {&_swigt__p_GraphNode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Hpc[] = {  {&_swigt__p_Hpc, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Keyboard[] = {  {&_swigt__p_Keyboard, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LocalSystem[] = {  {&_swigt__p_LocalSystem, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Log[] = {  {&_swigt__p_Log, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Manipulator[] = {  {&_swigt__p_Manipulator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mat4f[] = {  {&_swigt__p_Mat4f, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Matf[] = {  {&_swigt__p_Matf, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MouseEvent[] = {  {&_swigt__p_MouseEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Octree[] = {  {&_swigt__p_Octree, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OctreeNode[] = {  {&_swigt__p_OctreeNode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Pick[] = {  {&_swigt__p_Pick, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Plane4f[] = {  {&_swigt__p_Plane4f, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Planef[] = {  {&_swigt__p_Planef, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Plasm[] = {  {&_swigt__p_Plasm, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Quaternion[] = {  {&_swigt__p_Quaternion, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ray3f[] = {  {&_swigt__p_Ray3f, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RayIterator[] = {  {&_swigt__p_RayIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Rayf[] = {  {&_swigt__p_Rayf, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SpinLock[] = {  {&_swigt__p_SpinLock, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Texture[] = {  {&_swigt__p_Texture, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Triangle2i[] = {  {&_swigt__p_Triangle2i, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Unwrapper[] = {  {&_swigt__p_Unwrapper, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Utils[] = {  {&_swigt__p_Utils, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Vec2f[] = {  {&_swigt__p_Vec2f, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Vec2i[] = {  {&_swigt__p_Vec2i, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Vec3f[] = {  {&_swigt__p_Vec3f, 0, 0, 0},  {&_swigt__p_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t__value_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Vec4f[] = {  {&_swigt__p_Vec4f, 0, 0, 0},  {&_swigt__p_Plane4f, _p_Plane4fTo_p_Vec4f, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Vecf[] = {  {&_swigt__p_Planef, _p_PlanefTo_p_Vecf, 0, 0},  {&_swigt__p_Vecf, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Vector[] = {  {&_swigt__p_Vector, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Viewer[] = {  {&_swigt__p_Viewer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_allocator_type[] = {  {&_swigt__p_allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_const_iterator[] = {  {&_swigt__p_const_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_contour_t[] = {  {&_swigt__p_contour_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_difference_type[] = {  {&_swigt__p_difference_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_long[] = {  {&_swigt__p_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_PyObject[] = {  {&_swigt__p_p_PyObject, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_unsigned_int[] = {  {&_swigt__p_p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_polygon_set_t[] = {  {&_swigt__p_polygon_set_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_polygon_t[] = {  {&_swigt__p_polygon_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_type[] = {  {&_swigt__p_size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__invalid_argument[] = {  {&_swigt__p_std__invalid_argument, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_long_long_long_long_std__lessT_long_long_t_std__allocatorT_std__pairT_long_long_const_long_long_t_t_t[] = {  {&_swigt__p_std__mapT_long_long_long_long_std__lessT_long_long_t_std__allocatorT_std__pairT_long_long_const_long_long_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t[] = {  {&_swigt__p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__tr1__shared_ptrT_Batch_t[] = {  {&_swigt__p_std__tr1__shared_ptrT_Batch_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__tr1__shared_ptrT_EngineResource_t[] = {  {&_swigt__p_std__tr1__shared_ptrT_EngineResource_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__tr1__shared_ptrT_Graph_t[] = {  {&_swigt__p_std__tr1__shared_ptrT_Graph_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__tr1__shared_ptrT_Hpc_t[] = {  {&_swigt__p_std__tr1__shared_ptrT_Hpc_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__tr1__shared_ptrT_Matf_t[] = {  {&_swigt__p_std__tr1__shared_ptrT_Matf_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__tr1__shared_ptrT_Octree_t[] = {  {&_swigt__p_std__tr1__shared_ptrT_Octree_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__tr1__shared_ptrT_Texture_t[] = {  {&_swigt__p_std__tr1__shared_ptrT_Texture_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__tr1__shared_ptrT_Vector_t[] = {  {&_swigt__p_std__tr1__shared_ptrT_Vector_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__tr1__shared_ptrT_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t_t[] = {  {&_swigt__p_std__tr1__shared_ptrT_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t[] = {  {&_swigt__p_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t__allocator_type[] = {  {&_swigt__p_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t__allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t__value_type[] = {  {&_swigt__p_Vec3f, 0, 0, 0},  {&_swigt__p_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t__value_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_float_std__allocatorT_float_t_t[] = {  {&_swigt__p_std__vectorT_float_std__allocatorT_float_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_float_std__allocatorT_float_t_t__allocator_type[] = {  {&_swigt__p_std__vectorT_float_std__allocatorT_float_t_t__allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_int_std__allocatorT_int_t_t[] = {  {&_swigt__p_std__vectorT_int_std__allocatorT_int_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_int_std__allocatorT_int_t_t__allocator_type[] = {  {&_swigt__p_std__vectorT_int_std__allocatorT_int_t_t__allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__string_std__allocatorT_std__string_t_t[] = {  {&_swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__string_std__allocatorT_std__string_t_t__allocator_type[] = {  {&_swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t__allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__tr1__shared_ptrT_Batch_t_std__allocatorT_std__tr1__shared_ptrT_Batch_t_t_t[] = {  {&_swigt__p_std__vectorT_std__tr1__shared_ptrT_Batch_t_std__allocatorT_std__tr1__shared_ptrT_Batch_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__tr1__shared_ptrT_Batch_t_std__allocatorT_std__tr1__shared_ptrT_Batch_t_t_t__allocator_type[] = {  {&_swigt__p_std__vectorT_std__tr1__shared_ptrT_Batch_t_std__allocatorT_std__tr1__shared_ptrT_Batch_t_t_t__allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__tr1__shared_ptrT_EngineResource_t_std__allocatorT_std__tr1__shared_ptrT_EngineResource_t_t_t[] = {  {&_swigt__p_std__vectorT_std__tr1__shared_ptrT_EngineResource_t_std__allocatorT_std__tr1__shared_ptrT_EngineResource_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__tr1__shared_ptrT_EngineResource_t_std__allocatorT_std__tr1__shared_ptrT_EngineResource_t_t_t__allocator_type[] = {  {&_swigt__p_std__vectorT_std__tr1__shared_ptrT_EngineResource_t_std__allocatorT_std__tr1__shared_ptrT_EngineResource_t_t_t__allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__tr1__shared_ptrT_Hpc_t_std__allocatorT_std__tr1__shared_ptrT_Hpc_t_t_t[] = {  {&_swigt__p_std__vectorT_std__tr1__shared_ptrT_Hpc_t_std__allocatorT_std__tr1__shared_ptrT_Hpc_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__tr1__shared_ptrT_Hpc_t_std__allocatorT_std__tr1__shared_ptrT_Hpc_t_t_t__allocator_type[] = {  {&_swigt__p_std__vectorT_std__tr1__shared_ptrT_Hpc_t_std__allocatorT_std__tr1__shared_ptrT_Hpc_t_t_t__allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__tr1__shared_ptrT_Texture_t_std__allocatorT_std__tr1__shared_ptrT_Texture_t_t_t[] = {  {&_swigt__p_std__vectorT_std__tr1__shared_ptrT_Texture_t_std__allocatorT_std__tr1__shared_ptrT_Texture_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__tr1__shared_ptrT_Texture_t_std__allocatorT_std__tr1__shared_ptrT_Texture_t_t_t__allocator_type[] = {  {&_swigt__p_std__vectorT_std__tr1__shared_ptrT_Texture_t_std__allocatorT_std__tr1__shared_ptrT_Texture_t_t_t__allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t_std__allocatorT_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t_t_t[] = {  {&_swigt__p_std__vectorT_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t_std__allocatorT_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t[] = {  {&_swigt__p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t__allocator_type[] = {  {&_swigt__p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t__allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__vectorT_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t_std__allocatorT_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t_std__allocatorT_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t_t_t_t_t[] = {  {&_swigt__p_std__vectorT_std__vectorT_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t_std__allocatorT_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t_std__allocatorT_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t_t_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t[] = {  {&_swigt__p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t__allocator_type[] = {  {&_swigt__p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t__allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_swig__SwigPyIterator[] = {  {&_swigt__p_swig__SwigPyIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long[] = {  {&_swigt__p_unsigned_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long_long[] = {  {&_swigt__p_unsigned_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_value_type[] = {  {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_Archive,
  _swigc__p_Bake,
  _swigc__p_Ball3f,
  _swigc__p_Ballf,
  _swigc__p_Batch,
  _swigc__p_Box2i,
  _swigc__p_Box3f,
  _swigc__p_Boxf,
  _swigc__p_Clock,
  _swigc__p_Color4f,
  _swigc__p_Decoder,
  _swigc__p_Encoder,
  _swigc__p_Engine,
  _swigc__p_EngineResource,
  _swigc__p_EngineTessellator,
  _swigc__p_FileSystem,
  _swigc__p_Frustum,
  _swigc__p_FrustumIterator,
  _swigc__p_Graph,
  _swigc__p_GraphArch,
  _swigc__p_GraphIterator,
  _swigc__p_GraphKMem,
  _swigc__p_GraphListIterator,
  _swigc__p_GraphNavigator,
  _swigc__p_GraphNode,
  _swigc__p_Hpc,
  _swigc__p_Keyboard,
  _swigc__p_LocalSystem,
  _swigc__p_Log,
  _swigc__p_Manipulator,
  _swigc__p_Mat4f,
  _swigc__p_Matf,
  _swigc__p_MouseEvent,
  _swigc__p_Octree,
  _swigc__p_OctreeNode,
  _swigc__p_Pick,
  _swigc__p_Plane4f,
  _swigc__p_Planef,
  _swigc__p_Plasm,
  _swigc__p_Quaternion,
  _swigc__p_Ray3f,
  _swigc__p_RayIterator,
  _swigc__p_Rayf,
  _swigc__p_SpinLock,
  _swigc__p_Texture,
  _swigc__p_Triangle2i,
  _swigc__p_Unwrapper,
  _swigc__p_Utils,
  _swigc__p_Vec2f,
  _swigc__p_Vec2i,
  _swigc__p_Vec3f,
  _swigc__p_Vec4f,
  _swigc__p_Vecf,
  _swigc__p_Vector,
  _swigc__p_Viewer,
  _swigc__p_allocator_type,
  _swigc__p_char,
  _swigc__p_const_iterator,
  _swigc__p_contour_t,
  _swigc__p_difference_type,
  _swigc__p_double,
  _swigc__p_float,
  _swigc__p_int,
  _swigc__p_long_long,
  _swigc__p_p_PyObject,
  _swigc__p_p_unsigned_int,
  _swigc__p_polygon_set_t,
  _swigc__p_polygon_t,
  _swigc__p_size_type,
  _swigc__p_std__invalid_argument,
  _swigc__p_std__mapT_long_long_long_long_std__lessT_long_long_t_std__allocatorT_std__pairT_long_long_const_long_long_t_t_t,
  _swigc__p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t,
  _swigc__p_std__tr1__shared_ptrT_Batch_t,
  _swigc__p_std__tr1__shared_ptrT_EngineResource_t,
  _swigc__p_std__tr1__shared_ptrT_Graph_t,
  _swigc__p_std__tr1__shared_ptrT_Hpc_t,
  _swigc__p_std__tr1__shared_ptrT_Matf_t,
  _swigc__p_std__tr1__shared_ptrT_Octree_t,
  _swigc__p_std__tr1__shared_ptrT_Texture_t,
  _swigc__p_std__tr1__shared_ptrT_Vector_t,
  _swigc__p_std__tr1__shared_ptrT_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t_t,
  _swigc__p_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t,
  _swigc__p_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t__allocator_type,
  _swigc__p_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t__value_type,
  _swigc__p_std__vectorT_float_std__allocatorT_float_t_t,
  _swigc__p_std__vectorT_float_std__allocatorT_float_t_t__allocator_type,
  _swigc__p_std__vectorT_int_std__allocatorT_int_t_t,
  _swigc__p_std__vectorT_int_std__allocatorT_int_t_t__allocator_type,
  _swigc__p_std__vectorT_std__string_std__allocatorT_std__string_t_t,
  _swigc__p_std__vectorT_std__string_std__allocatorT_std__string_t_t__allocator_type,
  _swigc__p_std__vectorT_std__tr1__shared_ptrT_Batch_t_std__allocatorT_std__tr1__shared_ptrT_Batch_t_t_t,
  _swigc__p_std__vectorT_std__tr1__shared_ptrT_Batch_t_std__allocatorT_std__tr1__shared_ptrT_Batch_t_t_t__allocator_type,
  _swigc__p_std__vectorT_std__tr1__shared_ptrT_EngineResource_t_std__allocatorT_std__tr1__shared_ptrT_EngineResource_t_t_t,
  _swigc__p_std__vectorT_std__tr1__shared_ptrT_EngineResource_t_std__allocatorT_std__tr1__shared_ptrT_EngineResource_t_t_t__allocator_type,
  _swigc__p_std__vectorT_std__tr1__shared_ptrT_Hpc_t_std__allocatorT_std__tr1__shared_ptrT_Hpc_t_t_t,
  _swigc__p_std__vectorT_std__tr1__shared_ptrT_Hpc_t_std__allocatorT_std__tr1__shared_ptrT_Hpc_t_t_t__allocator_type,
  _swigc__p_std__vectorT_std__tr1__shared_ptrT_Texture_t_std__allocatorT_std__tr1__shared_ptrT_Texture_t_t_t,
  _swigc__p_std__vectorT_std__tr1__shared_ptrT_Texture_t_std__allocatorT_std__tr1__shared_ptrT_Texture_t_t_t__allocator_type,
  _swigc__p_std__vectorT_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t_std__allocatorT_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t_t_t,
  _swigc__p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t,
  _swigc__p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t__allocator_type,
  _swigc__p_std__vectorT_std__vectorT_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t_std__allocatorT_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t_std__allocatorT_std__vectorT_Vec3f_std__allocatorT_Vec3f_t_t_t_t_t_t,
  _swigc__p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t,
  _swigc__p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t__allocator_type,
  _swigc__p_swig__SwigPyIterator,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long,
  _swigc__p_unsigned_long_long,
  _swigc__p_value_type,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;
  
  clientdata = clientdata;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* When multiple interpeters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
  if (init == 0) return;
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif



#ifdef __cplusplus
extern "C" {
#endif
  
  /* Python-specific SWIG API */
#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)
  
  /* -----------------------------------------------------------------------------
   * global variable support code.
   * ----------------------------------------------------------------------------- */
  
  typedef struct swig_globalvar {
    char       *name;                  /* Name of global variable */
    PyObject *(*get_attr)(void);       /* Return the current value */
    int       (*set_attr)(PyObject *); /* Set the value */
    struct swig_globalvar *next;
  } swig_globalvar;
  
  typedef struct swig_varlinkobject {
    PyObject_HEAD
    swig_globalvar *vars;
  } swig_varlinkobject;
  
  SWIGINTERN PyObject *
  swig_varlink_repr(swig_varlinkobject *SWIGUNUSEDPARM(v)) {
#if PY_VERSION_HEX >= 0x03000000
    return PyUnicode_InternFromString("<Swig global variables>");
#else
    return PyString_FromString("<Swig global variables>");
#endif
  }
  
  SWIGINTERN PyObject *
  swig_varlink_str(swig_varlinkobject *v) {
#if PY_VERSION_HEX >= 0x03000000
    PyObject *str = PyUnicode_InternFromString("(");
    PyObject *tail;
    PyObject *joined;
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      tail = PyUnicode_FromString(var->name);
      joined = PyUnicode_Concat(str, tail);
      Py_DecRef(str);
      Py_DecRef(tail);
      str = joined;
      if (var->next) {
        tail = PyUnicode_InternFromString(", ");
        joined = PyUnicode_Concat(str, tail);
        Py_DecRef(str);
        Py_DecRef(tail);
        str = joined;
      }
    }
    tail = PyUnicode_InternFromString(")");
    joined = PyUnicode_Concat(str, tail);
    Py_DecRef(str);
    Py_DecRef(tail);
    str = joined;
#else
    PyObject *str = PyString_FromString("(");
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      PyString_ConcatAndDel(&str,PyString_FromString(var->name));
      if (var->next) PyString_ConcatAndDel(&str,PyString_FromString(", "));
    }
    PyString_ConcatAndDel(&str,PyString_FromString(")"));
#endif
    return str;
  }
  
  SWIGINTERN int
  swig_varlink_print(swig_varlinkobject *v, FILE *fp, int SWIGUNUSEDPARM(flags)) {
    char *tmp;
    PyObject *str = swig_varlink_str(v);
    fprintf(fp,"Swig global variables ");
    fprintf(fp,"%s\n", tmp = SWIG_Python_str_AsChar(str));
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(str);
    return 0;
  }
  
  SWIGINTERN void
  swig_varlink_dealloc(swig_varlinkobject *v) {
    swig_globalvar *var = v->vars;
    while (var) {
      swig_globalvar *n = var->next;
      free(var->name);
      free(var);
      var = n;
    }
  }
  
  SWIGINTERN PyObject *
  swig_varlink_getattr(swig_varlinkobject *v, char *n) {
    PyObject *res = NULL;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->get_attr)();
        break;
      }
      var = var->next;
    }
    if (res == NULL && !PyErr_Occurred()) {
      PyErr_SetString(PyExc_NameError,"Unknown C global variable");
    }
    return res;
  }
  
  SWIGINTERN int
  swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
    int res = 1;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->set_attr)(p);
        break;
      }
      var = var->next;
    }
    if (res == 1 && !PyErr_Occurred()) {
      PyErr_SetString(PyExc_NameError,"Unknown C global variable");
    }
    return res;
  }
  
  SWIGINTERN PyTypeObject*
  swig_varlink_type(void) {
    static char varlink__doc__[] = "Swig var link object";
    static PyTypeObject varlink_type;
    static int type_init = 0;  
    if (!type_init) {
      const PyTypeObject tmp
      = {
        /* PyObject header changed in Python 3 */
#if PY_VERSION_HEX >= 0x03000000
        PyVarObject_HEAD_INIT(&PyType_Type, 0)
#else
        PyObject_HEAD_INIT(NULL)
        0,                                  /* Number of items in variable part (ob_size) */
#endif
        (char *)"swigvarlink",              /* Type name (tp_name) */
        sizeof(swig_varlinkobject),         /* Basic size (tp_basicsize) */
        0,                                  /* Itemsize (tp_itemsize) */
        (destructor) swig_varlink_dealloc,  /* Deallocator (tp_dealloc) */ 
        (printfunc) swig_varlink_print,     /* Print (tp_print) */
        (getattrfunc) swig_varlink_getattr, /* get attr (tp_getattr) */
        (setattrfunc) swig_varlink_setattr, /* Set attr (tp_setattr) */
        0,                                  /* tp_compare */
        (reprfunc) swig_varlink_repr,       /* tp_repr */
        0,                                  /* tp_as_number */
        0,                                  /* tp_as_sequence */
        0,                                  /* tp_as_mapping */
        0,                                  /* tp_hash */
        0,                                  /* tp_call */
        (reprfunc) swig_varlink_str,        /* tp_str */
        0,                                  /* tp_getattro */
        0,                                  /* tp_setattro */
        0,                                  /* tp_as_buffer */
        0,                                  /* tp_flags */
        varlink__doc__,                     /* tp_doc */
        0,                                  /* tp_traverse */
        0,                                  /* tp_clear */
        0,                                  /* tp_richcompare */
        0,                                  /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
        0,                                  /* tp_del */
#endif
#ifdef COUNT_ALLOCS
        0,0,0,0                             /* tp_alloc -> tp_next */
#endif
      };
      varlink_type = tmp;
      /* for Python 3 we already assigned ob_type in PyVarObject_HEAD_INIT() */
#if PY_VERSION_HEX < 0x03000000
      varlink_type.ob_type = &PyType_Type;
#endif
      type_init = 1;
    }
    return &varlink_type;
  }
  
  /* Create a variable linking object for use later */
  SWIGINTERN PyObject *
  SWIG_Python_newvarlink(void) {
    swig_varlinkobject *result = PyObject_NEW(swig_varlinkobject, swig_varlink_type());
    if (result) {
      result->vars = 0;
    }
    return ((PyObject*) result);
  }
  
  SWIGINTERN void 
  SWIG_Python_addvarlink(PyObject *p, char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
    swig_varlinkobject *v = (swig_varlinkobject *) p;
    swig_globalvar *gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
    if (gv) {
      size_t size = strlen(name)+1;
      gv->name = (char *)malloc(size);
      if (gv->name) {
        strncpy(gv->name,name,size);
        gv->get_attr = get_attr;
        gv->set_attr = set_attr;
        gv->next = v->vars;
      }
    }
    v->vars = gv;
  }
  
  SWIGINTERN PyObject *
  SWIG_globals(void) {
    static PyObject *_SWIG_globals = 0; 
    if (!_SWIG_globals) _SWIG_globals = SWIG_newvarlink();  
    return _SWIG_globals;
  }
  
  /* -----------------------------------------------------------------------------
   * constants/methods manipulation
   * ----------------------------------------------------------------------------- */
  
  /* Install Constants */
  SWIGINTERN void
  SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
    PyObject *obj = 0;
    size_t i;
    for (i = 0; constants[i].type; ++i) {
      switch(constants[i].type) {
      case SWIG_PY_POINTER:
        obj = SWIG_NewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
        break;
      case SWIG_PY_BINARY:
        obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
        break;
      default:
        obj = 0;
        break;
      }
      if (obj) {
        PyDict_SetItemString(d, constants[i].name, obj);
        Py_DECREF(obj);
      }
    }
  }
  
  /* -----------------------------------------------------------------------------*/
  /* Fix SwigMethods to carry the callback ptrs when needed */
  /* -----------------------------------------------------------------------------*/
  
  SWIGINTERN void
  SWIG_Python_FixMethods(PyMethodDef *methods,
    swig_const_info *const_table,
    swig_type_info **types,
    swig_type_info **types_initial) {
    size_t i;
    for (i = 0; methods[i].ml_name; ++i) {
      const char *c = methods[i].ml_doc;
      if (c && (c = strstr(c, "swig_ptr: "))) {
        int j;
        swig_const_info *ci = 0;
        const char *name = c + 10;
        for (j = 0; const_table[j].type; ++j) {
          if (strncmp(const_table[j].name, name, 
              strlen(const_table[j].name)) == 0) {
            ci = &(const_table[j]);
            break;
          }
        }
        if (ci) {
          void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue : 0;
          if (ptr) {
            size_t shift = (ci->ptype) - types;
            swig_type_info *ty = types_initial[shift];
            size_t ldoc = (c - methods[i].ml_doc);
            size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
            char *ndoc = (char*)malloc(ldoc + lptr + 10);
            if (ndoc) {
              char *buff = ndoc;
              strncpy(buff, methods[i].ml_doc, ldoc);
              buff += ldoc;
              strncpy(buff, "swig_ptr: ", 10);
              buff += 10;
              SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
              methods[i].ml_doc = ndoc;
            }
          }
        }
      }
    }
  } 
  
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

#ifdef __cplusplus
extern "C"
#endif

SWIGEXPORT 
#if PY_VERSION_HEX >= 0x03000000
PyObject*
#else
void
#endif
SWIG_init(void) {
  PyObject *m, *d;  
#if PY_VERSION_HEX >= 0x03000000
  static struct PyModuleDef SWIG_module = {
    PyModuleDef_HEAD_INIT,
    (char *) SWIG_name,
    NULL,
    -1,
    SwigMethods,
    NULL,
    NULL,
    NULL,
    NULL
  };
#endif
  
  /* Fix SwigMethods to carry the callback ptrs when needed */
  SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_type_initial);
  
#if PY_VERSION_HEX >= 0x03000000
  m = PyModule_Create(&SWIG_module);
#else
  m = Py_InitModule((char *) SWIG_name, SwigMethods);
#endif
  d = PyModule_GetDict(m);
  
  SWIG_InitializeModule(0);
  SWIG_InstallConstants(d,swig_const_table);
  
  
  SWIG_Python_SetConstant(d, "SHARED_PTR_DISOWN",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, "HERE",SWIG_FromCharPtr("C:\\home\\scorzell\\software\\cpp\\pyplasm\\src\\xge\\xge.h:77"));
  SWIG_Python_SetConstant(d, "SPIN_LOCK_DEFAULT_MAX_DELTA_TIME",SWIG_From_int(static_cast< int >(10)));
  SWIG_Python_SetConstant(d, "MEMPOOL_TABLE_SIZE",SWIG_From_int(static_cast< int >(4096)));
  SWIG_Python_SetConstant(d, "GRAPH_MAX_GEOMETRIC_DIMENSION",SWIG_From_int(static_cast< int >(16)));
  SWIG_Python_SetConstant(d, "GRAPH_MAX_CELLS_PER_LEVEL",SWIG_From_int(static_cast< int >(65536)));
  SWIG_Python_SetConstant(d, "PLASM_MAX_NUM_SPLIT",SWIG_From_int(static_cast< int >(10)));
  SWIG_Python_SetConstant(d, "DEFAULT_FOV",SWIG_From_int(static_cast< int >(60)));
  SWIG_Python_SetConstant(d, "DEFAULT_FPS",SWIG_From_int(static_cast< int >(30)));
  SWIG_Python_SetConstant(d, "XGE_TRACK_MEMORY",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, "OCTREE_LOOSE_K_DEFAULT",SWIG_From_double(static_cast< double >(2.0)));
  SWIG_Python_SetConstant(d, "OCTREE_MAX_DEPTH_DEFAULT",SWIG_From_int(static_cast< int >(5)));
  SWIG_Python_SetConstant(d, "ENGINE_AUTOMATIC_VBO_CREATION",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "ENGINE_ENABLE_TESSELLATOR",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "ENGINE_ENABLE_FBO",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, "ENGINE_ENABLE_SHADERS",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, "ENGINE_ENABLE_SHADOW_SHADER",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, "USE_JUCE",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "Keyboard_Key_Left",SWIG_From_int(static_cast< int >(Keyboard::Key_Left)));
  SWIG_Python_SetConstant(d, "Keyboard_Key_Up",SWIG_From_int(static_cast< int >(Keyboard::Key_Up)));
  SWIG_Python_SetConstant(d, "Keyboard_Key_Right",SWIG_From_int(static_cast< int >(Keyboard::Key_Right)));
  SWIG_Python_SetConstant(d, "Keyboard_Key_Down",SWIG_From_int(static_cast< int >(Keyboard::Key_Down)));
  PyDict_SetItemString(d,(char*)"cvar", SWIG_globals());
  SWIG_addvarlink(SWIG_globals(),(char*)"xge_total_memory",Swig_var_xge_total_memory_get, Swig_var_xge_total_memory_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"FileSystem_ResourcesDir",Swig_var_FileSystem_ResourcesDir_get, Swig_var_FileSystem_ResourcesDir_set);
  SWIG_Python_SetConstant(d, "MouseEvent_MousePressed",SWIG_From_int(static_cast< int >(MouseEvent::MousePressed)));
  SWIG_Python_SetConstant(d, "MouseEvent_MouseMoved",SWIG_From_int(static_cast< int >(MouseEvent::MouseMoved)));
  SWIG_Python_SetConstant(d, "MouseEvent_MouseReleased",SWIG_From_int(static_cast< int >(MouseEvent::MouseReleased)));
  SWIG_Python_SetConstant(d, "MouseEvent_MouseWheel",SWIG_From_int(static_cast< int >(MouseEvent::MouseWheel)));
  SWIG_Python_SetConstant(d, "MouseEvent_MouseDoubleClick",SWIG_From_int(static_cast< int >(MouseEvent::MouseDoubleClick)));
  SWIG_Python_SetConstant(d, "MouseEvent_NoButton",SWIG_From_int(static_cast< int >(MouseEvent::NoButton)));
  SWIG_Python_SetConstant(d, "MouseEvent_LeftButton",SWIG_From_int(static_cast< int >(MouseEvent::LeftButton)));
  SWIG_Python_SetConstant(d, "MouseEvent_RightButton",SWIG_From_int(static_cast< int >(MouseEvent::RightButton)));
  SWIG_Python_SetConstant(d, "MouseEvent_MidButton",SWIG_From_int(static_cast< int >(MouseEvent::MidButton)));
  SWIG_addvarlink(SWIG_globals(),(char*)"Quaternion_ZERO",Swig_var_Quaternion_ZERO_get, Swig_var_Quaternion_ZERO_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Quaternion_IDENTITY",Swig_var_Quaternion_IDENTITY_get, Swig_var_Quaternion_IDENTITY_set);
  SWIG_Python_SetConstant(d, "Frustum_PLANE_LEFT",SWIG_From_int(static_cast< int >(Frustum::PLANE_LEFT)));
  SWIG_Python_SetConstant(d, "Frustum_PLANE_RIGHT",SWIG_From_int(static_cast< int >(Frustum::PLANE_RIGHT)));
  SWIG_Python_SetConstant(d, "Frustum_PLANE_TOP",SWIG_From_int(static_cast< int >(Frustum::PLANE_TOP)));
  SWIG_Python_SetConstant(d, "Frustum_PLANE_BOTTOM",SWIG_From_int(static_cast< int >(Frustum::PLANE_BOTTOM)));
  SWIG_Python_SetConstant(d, "Frustum_PLANE_NEAR",SWIG_From_int(static_cast< int >(Frustum::PLANE_NEAR)));
  SWIG_Python_SetConstant(d, "Frustum_PLANE_FAR",SWIG_From_int(static_cast< int >(Frustum::PLANE_FAR)));
  SWIG_Python_SetConstant(d, "Frustum_POINT_NEAR_BOTTOM_LEFT",SWIG_From_int(static_cast< int >(Frustum::POINT_NEAR_BOTTOM_LEFT)));
  SWIG_Python_SetConstant(d, "Frustum_POINT_NEAR_BOTTOM_RIGHT",SWIG_From_int(static_cast< int >(Frustum::POINT_NEAR_BOTTOM_RIGHT)));
  SWIG_Python_SetConstant(d, "Frustum_POINT_NEAR_TOP_RIGHT",SWIG_From_int(static_cast< int >(Frustum::POINT_NEAR_TOP_RIGHT)));
  SWIG_Python_SetConstant(d, "Frustum_POINT_NEAR_TOP_LEFT",SWIG_From_int(static_cast< int >(Frustum::POINT_NEAR_TOP_LEFT)));
  SWIG_Python_SetConstant(d, "Frustum_POINT_FAR_BOTTOM_LEFT",SWIG_From_int(static_cast< int >(Frustum::POINT_FAR_BOTTOM_LEFT)));
  SWIG_Python_SetConstant(d, "Frustum_POINT_FAR_BOTTOM_RIGHT",SWIG_From_int(static_cast< int >(Frustum::POINT_FAR_BOTTOM_RIGHT)));
  SWIG_Python_SetConstant(d, "Frustum_POINT_FAR_TOP_RIGHT",SWIG_From_int(static_cast< int >(Frustum::POINT_FAR_TOP_RIGHT)));
  SWIG_Python_SetConstant(d, "Frustum_POINT_FAR_TOP_LEFT",SWIG_From_int(static_cast< int >(Frustum::POINT_FAR_TOP_LEFT)));
  SWIG_Python_SetConstant(d, "Manipulator_TRANSLATE",SWIG_From_int(static_cast< int >(Manipulator::TRANSLATE)));
  SWIG_Python_SetConstant(d, "Manipulator_SCALE",SWIG_From_int(static_cast< int >(Manipulator::SCALE)));
  SWIG_Python_SetConstant(d, "Manipulator_ROTATE",SWIG_From_int(static_cast< int >(Manipulator::ROTATE)));
  SWIG_Python_SetConstant(d, "Batch_POINTS",SWIG_From_int(static_cast< int >(Batch::POINTS)));
  SWIG_Python_SetConstant(d, "Batch_LINES",SWIG_From_int(static_cast< int >(Batch::LINES)));
  SWIG_Python_SetConstant(d, "Batch_LINE_LOOP",SWIG_From_int(static_cast< int >(Batch::LINE_LOOP)));
  SWIG_Python_SetConstant(d, "Batch_LINE_STRIP",SWIG_From_int(static_cast< int >(Batch::LINE_STRIP)));
  SWIG_Python_SetConstant(d, "Batch_TRIANGLES",SWIG_From_int(static_cast< int >(Batch::TRIANGLES)));
  SWIG_Python_SetConstant(d, "Batch_TRIANGLE_STRIP",SWIG_From_int(static_cast< int >(Batch::TRIANGLE_STRIP)));
  SWIG_Python_SetConstant(d, "Batch_TRIANGLE_FAN",SWIG_From_int(static_cast< int >(Batch::TRIANGLE_FAN)));
  SWIG_Python_SetConstant(d, "Batch_QUADS",SWIG_From_int(static_cast< int >(Batch::QUADS)));
  SWIG_Python_SetConstant(d, "Batch_QUAD_STRIP",SWIG_From_int(static_cast< int >(Batch::QUAD_STRIP)));
  SWIG_Python_SetConstant(d, "Batch_POLYGON",SWIG_From_int(static_cast< int >(Batch::POLYGON)));
  SWIG_addvarlink(SWIG_globals(),(char*)"Batch_DefaultAmbientColor",Swig_var_Batch_DefaultAmbientColor_get, Swig_var_Batch_DefaultAmbientColor_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Batch_DefaultDiffuseColor",Swig_var_Batch_DefaultDiffuseColor_get, Swig_var_Batch_DefaultDiffuseColor_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Batch_DefaultSpecularColor",Swig_var_Batch_DefaultSpecularColor_get, Swig_var_Batch_DefaultSpecularColor_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Batch_DefaultEmissionColor",Swig_var_Batch_DefaultEmissionColor_get, Swig_var_Batch_DefaultEmissionColor_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Batch_DefaultShininess",Swig_var_Batch_DefaultShininess_get, Swig_var_Batch_DefaultShininess_set);
  SWIG_Python_SetConstant(d, "Graph_DIRECTION_DOWN",SWIG_From_int(static_cast< int >(Graph::DIRECTION_DOWN)));
  SWIG_Python_SetConstant(d, "Graph_DIRECTION_UP",SWIG_From_int(static_cast< int >(Graph::DIRECTION_UP)));
  SWIG_Python_SetConstant(d, "Graph_DIRECTION_UP_AND_DOWN",SWIG_From_int(static_cast< int >(Graph::DIRECTION_UP_AND_DOWN)));
  SWIG_Python_SetConstant(d, "Graph_SIGN_ZER",SWIG_From_int(static_cast< int >(Graph::SIGN_ZER)));
  SWIG_Python_SetConstant(d, "Graph_SIGN_POS",SWIG_From_int(static_cast< int >(Graph::SIGN_POS)));
  SWIG_Python_SetConstant(d, "Graph_SIGN_NEG",SWIG_From_int(static_cast< int >(Graph::SIGN_NEG)));
  SWIG_Python_SetConstant(d, "Graph_SIGN_UNK",SWIG_From_int(static_cast< int >(Graph::SIGN_UNK)));
  SWIG_Python_SetConstant(d, "Graph_SIGN_BOT",SWIG_From_int(static_cast< int >(Graph::SIGN_BOT)));
  SWIG_Python_SetConstant(d, "Graph_SPLIT_FLAT",SWIG_From_int(static_cast< int >(Graph::SPLIT_FLAT)));
  SWIG_Python_SetConstant(d, "Graph_SPLIT_OK",SWIG_From_int(static_cast< int >(Graph::SPLIT_OK)));
  SWIG_Python_SetConstant(d, "Graph_SPLIT_IMPOSSIBLE",SWIG_From_int(static_cast< int >(Graph::SPLIT_IMPOSSIBLE)));
  SWIG_Python_SetConstant(d, "Engine_CULL_DISABLE",SWIG_From_int(static_cast< int >(Engine::CULL_DISABLE)));
  SWIG_Python_SetConstant(d, "Engine_CULL_CCW",SWIG_From_int(static_cast< int >(Engine::CULL_CCW)));
  SWIG_Python_SetConstant(d, "Engine_CULL_CW",SWIG_From_int(static_cast< int >(Engine::CULL_CW)));
  SWIG_addvarlink(SWIG_globals(),(char*)"Engine_wcs",Swig_var_Engine_wcs_get, Swig_var_Engine_wcs_set);
  SWIG_Python_SetConstant(d, "EngineResource_RESOURCE_UNKNOWN",SWIG_From_int(static_cast< int >(EngineResource::RESOURCE_UNKNOWN)));
  SWIG_Python_SetConstant(d, "EngineResource_RESOURCE_ARRAY_BUFFER",SWIG_From_int(static_cast< int >(EngineResource::RESOURCE_ARRAY_BUFFER)));
  SWIG_Python_SetConstant(d, "EngineResource_RESOURCE_RENDER_BUFFER",SWIG_From_int(static_cast< int >(EngineResource::RESOURCE_RENDER_BUFFER)));
  SWIG_Python_SetConstant(d, "EngineResource_RESOURCE_FRAME_BUFFER",SWIG_From_int(static_cast< int >(EngineResource::RESOURCE_FRAME_BUFFER)));
  SWIG_Python_SetConstant(d, "EngineResource_RESOURCE_SHADER",SWIG_From_int(static_cast< int >(EngineResource::RESOURCE_SHADER)));
  SWIG_Python_SetConstant(d, "EngineResource_RESOURCE_PROGRAM",SWIG_From_int(static_cast< int >(EngineResource::RESOURCE_PROGRAM)));
  SWIG_Python_SetConstant(d, "EngineResource_RESOURCE_TEXTURE",SWIG_From_int(static_cast< int >(EngineResource::RESOURCE_TEXTURE)));
  SWIG_Python_SetConstant(d, "EngineResource_RESOURCE_END",SWIG_From_int(static_cast< int >(EngineResource::RESOURCE_END)));
  SWIG_Python_SetConstant(d, "EngineTessellator_TESS_WINDING_ODD",SWIG_From_int(static_cast< int >(EngineTessellator::TESS_WINDING_ODD)));
  SWIG_Python_SetConstant(d, "EngineTessellator_TESS_WINDING_NONZERO",SWIG_From_int(static_cast< int >(EngineTessellator::TESS_WINDING_NONZERO)));
  SWIG_Python_SetConstant(d, "EngineTessellator_TESS_WINDING_POSITIVE",SWIG_From_int(static_cast< int >(EngineTessellator::TESS_WINDING_POSITIVE)));
  SWIG_Python_SetConstant(d, "EngineTessellator_TESS_WINDING_NEGATIVE",SWIG_From_int(static_cast< int >(EngineTessellator::TESS_WINDING_NEGATIVE)));
  SWIG_Python_SetConstant(d, "EngineTessellator_TESS_WINDING_ABS_GEQ_TWO",SWIG_From_int(static_cast< int >(EngineTessellator::TESS_WINDING_ABS_GEQ_TWO)));
  SWIG_addvarlink(SWIG_globals(),(char*)"xge_total_hpc",Swig_var_xge_total_hpc_get, Swig_var_xge_total_hpc_set);
  SWIG_Python_SetConstant(d, "HPC_PROP_NAME",SWIG_FromCharPtr("name"));
  SWIG_Python_SetConstant(d, "HPC_PROP_RGB_COLOR",SWIG_FromCharPtr("RGBcolor"));
  SWIG_Python_SetConstant(d, "HPC_PROP_VRML_MATERIAL",SWIG_FromCharPtr("VRMLmaterial"));
  SWIG_Python_SetConstant(d, "HPC_PROP_VRML_TEXTURE",SWIG_FromCharPtr("VRMLtexture"));
  SWIG_Python_SetConstant(d, "HPC_PROP_VRML_CREASE",SWIG_FromCharPtr("VRMLcrease"));
  SWIG_Python_SetConstant(d, "HPC_PROP_VRML_CAMERA",SWIG_FromCharPtr("VRMLcamera"));
  SWIG_Python_SetConstant(d, "HPC_PROP_VRML_LIGHT",SWIG_FromCharPtr("VRMLlight"));
  SWIG_Python_SetConstant(d, "Plasm_PLASM_DESTROY",SWIG_From_int(static_cast< int >(Plasm::PLASM_DESTROY)));
  SWIG_Python_SetConstant(d, "Plasm_PLASM_CUBE",SWIG_From_int(static_cast< int >(Plasm::PLASM_CUBE)));
  SWIG_Python_SetConstant(d, "Plasm_PLASM_SIMPLEX",SWIG_From_int(static_cast< int >(Plasm::PLASM_SIMPLEX)));
  SWIG_Python_SetConstant(d, "Plasm_PLASM_MKPOL",SWIG_From_int(static_cast< int >(Plasm::PLASM_MKPOL)));
  SWIG_Python_SetConstant(d, "Plasm_PLASM_MKPOLF",SWIG_From_int(static_cast< int >(Plasm::PLASM_MKPOLF)));
  SWIG_Python_SetConstant(d, "Plasm_PLASM_STRUCT",SWIG_From_int(static_cast< int >(Plasm::PLASM_STRUCT)));
  SWIG_Python_SetConstant(d, "Plasm_PLASM_COPY",SWIG_From_int(static_cast< int >(Plasm::PLASM_COPY)));
  SWIG_Python_SetConstant(d, "Plasm_PLASM_GETSPACEDIM",SWIG_From_int(static_cast< int >(Plasm::PLASM_GETSPACEDIM)));
  SWIG_Python_SetConstant(d, "Plasm_PLASM_GETPOINTDIM",SWIG_From_int(static_cast< int >(Plasm::PLASM_GETPOINTDIM)));
  SWIG_Python_SetConstant(d, "Plasm_PLASM_TRANSFORM",SWIG_From_int(static_cast< int >(Plasm::PLASM_TRANSFORM)));
  SWIG_Python_SetConstant(d, "Plasm_PLASM_SCALE",SWIG_From_int(static_cast< int >(Plasm::PLASM_SCALE)));
  SWIG_Python_SetConstant(d, "Plasm_PLASM_TRANSLATE",SWIG_From_int(static_cast< int >(Plasm::PLASM_TRANSLATE)));
  SWIG_Python_SetConstant(d, "Plasm_PLASM_ROTATE",SWIG_From_int(static_cast< int >(Plasm::PLASM_ROTATE)));
  SWIG_Python_SetConstant(d, "Plasm_PLASM_EMBED",SWIG_From_int(static_cast< int >(Plasm::PLASM_EMBED)));
  SWIG_Python_SetConstant(d, "Plasm_PLASM_LIMITS",SWIG_From_int(static_cast< int >(Plasm::PLASM_LIMITS)));
  SWIG_Python_SetConstant(d, "Plasm_PLASM_JOIN",SWIG_From_int(static_cast< int >(Plasm::PLASM_JOIN)));
  SWIG_Python_SetConstant(d, "Plasm_PLASM_POWER",SWIG_From_int(static_cast< int >(Plasm::PLASM_POWER)));
  SWIG_Python_SetConstant(d, "Plasm_PLASM_BOOLOP",SWIG_From_int(static_cast< int >(Plasm::PLASM_BOOLOP)));
  SWIG_Python_SetConstant(d, "Plasm_PLASM_SKELETON",SWIG_From_int(static_cast< int >(Plasm::PLASM_SKELETON)));
  SWIG_Python_SetConstant(d, "Plasm_PLASM_UKPOL",SWIG_From_int(static_cast< int >(Plasm::PLASM_UKPOL)));
  SWIG_Python_SetConstant(d, "Plasm_PLASM_UKPOLF",SWIG_From_int(static_cast< int >(Plasm::PLASM_UKPOLF)));
  SWIG_Python_SetConstant(d, "Plasm_PLASM_ADDPROPERTY",SWIG_From_int(static_cast< int >(Plasm::PLASM_ADDPROPERTY)));
  SWIG_Python_SetConstant(d, "Plasm_PLASM_GETPROPERTY",SWIG_From_int(static_cast< int >(Plasm::PLASM_GETPROPERTY)));
  SWIG_Python_SetConstant(d, "Plasm_PLASM_SKIN",SWIG_From_int(static_cast< int >(Plasm::PLASM_SKIN)));
  SWIG_Python_SetConstant(d, "Plasm_PLASM_SHRINK",SWIG_From_int(static_cast< int >(Plasm::PLASM_SHRINK)));
  SWIG_Python_SetConstant(d, "Plasm_PLASM___END",SWIG_From_int(static_cast< int >(Plasm::PLASM___END)));
  SWIG_Python_SetConstant(d, "Plasm_BOOL_CODE_OR",SWIG_From_int(static_cast< int >(Plasm::BOOL_CODE_OR)));
  SWIG_Python_SetConstant(d, "Plasm_BOOL_CODE_AND",SWIG_From_int(static_cast< int >(Plasm::BOOL_CODE_AND)));
  SWIG_Python_SetConstant(d, "Plasm_BOOL_CODE_DIFF",SWIG_From_int(static_cast< int >(Plasm::BOOL_CODE_DIFF)));
  SWIG_Python_SetConstant(d, "Plasm_BOOL_CODE_XOR",SWIG_From_int(static_cast< int >(Plasm::BOOL_CODE_XOR)));
#if PY_VERSION_HEX >= 0x03000000
  return m;
#else
  return;
#endif
}

