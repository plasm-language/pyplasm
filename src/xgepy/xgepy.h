/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.1
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_xgepy_WRAP_H_
#define SWIG_xgepy_WRAP_H_

#include <map>
#include <string>


class SwigDirector_Viewer : public Viewer, public Swig::Director {

public:
    SwigDirector_Viewer(PyObject *self);
    SwigDirector_Viewer(PyObject *self, std::tr1::shared_ptr< Octree > octree);
    virtual ~SwigDirector_Viewer();
    virtual void Render();
    virtual void Redisplay();
    virtual void Keyboard(int key, int x, int y);
    virtual void Mouse(MouseEvent args);
    virtual void Resize(int width, int height);
    virtual void Close();
    virtual void Run();
    virtual void Wait();
    virtual void doJob(int arg0);
    virtual void doJobSwigPublic(int arg0) {
      Viewer::doJob(arg0);
    }


/* Internal Director utilities */
public:
    bool swig_get_inner(const char* protected_method_name) const {
      std::map<std::string, bool>::const_iterator iv = swig_inner.find(protected_method_name);
      return (iv != swig_inner.end() ? iv->second : false);
    }

    void swig_set_inner(const char* protected_method_name, bool val) const
    { swig_inner[protected_method_name] = val;}

private:
    mutable std::map<std::string, bool> swig_inner;


#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
/* VTable implementation */
    PyObject *swig_get_method(size_t method_index, const char *method_name) const {
      PyObject *method = vtable[method_index];
      if (!method) {
        swig::SwigVar_PyObject name = SWIG_Python_str_FromChar(method_name);
        method = PyObject_GetAttr(swig_get_self(), name);
        if (!method) {
          std::string msg = "Method in class Viewer doesn't exist, undefined ";
          msg += method_name;
          Swig::DirectorMethodException::raise(msg.c_str());
        }
        vtable[method_index] = method;
      };
      return method;
    }
private:
    mutable swig::SwigVar_PyObject vtable[9];
#endif

};


#endif
